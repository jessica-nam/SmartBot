{
    "intents": [
        {
            "tag": "strings",
            "patterns": [
                "What is the difference between String and string in C#?", "strings in c#", "String vs string", "Strings"
            ],
            "responses": [
                "string is an alias in C# for System.String.\nSo technically, there is no difference.  It's like int vs. System.Int32.As far as guidelines, it's generally recommended to use string any time you're referring to an object.e.g.Likewise, I think it's generally recommended to use String if you need to refer specifically to the class.e.g.It appears that the guidance in this area may have changed, as StyleCop now enforces the use of the C# specific aliases.",
                "Just for the sake of completeness, here's a brain dump of related information...As others have noted, string is an alias for System.String. Assuming your code using String compiles to System.String (i.e. you haven't got a using directive for some other namespace with a different String type), they compile to the same code, so at execution time there is no difference whatsoever. This is just one of the aliases in C#. The complete list is:Apart from string and object, the aliases are all to value types. decimal is a value type, but not a primitive type in the CLR. The only primitive type which doesn't have an alias is System.IntPtr.In the spec, the value type aliases are known as \"simple types\". Literals can be used for constant values of every simple type; no other value types have literal forms available. (Compare this with VB, which allows DateTime literals, and has an alias for it too.)There is one circumstance in which you have to use the aliases: when explicitly specifying an enum's underlying type. For instance:That's just a matter of the way the spec defines enum declarations - the part after the colon has to be the integral-type production, which is one token of sbyte, byte, short, ushort, int, uint, long, ulong, char... as opposed to a type production as used by variable declarations for example. It doesn't indicate any other difference.Finally, when it comes to which to use: personally I use the aliases everywhere for the implementation, but the CLR type for any APIs. It really doesn't matter too much which you use in terms of implementation - consistency among your team is nice, but no-one else is going to care. On the other hand, it's genuinely important that if you refer to a type in an API, you do so in a language-neutral way. A method called ReadInt32 is unambiguous, whereas a method called ReadInt requires interpretation. The caller could be using a language that defines an int alias for Int16, for example. The .NET framework designers have followed this pattern, good examples being in the BitConverter, BinaryReader and Convert classes.",
                "String stands for System.String and it is a .NET Framework type. string is an alias in the C# language for  System.String. Both of them are compiled to System.String in IL (Intermediate Language), so there is no difference. Choose what you like and use that. If you code in C#, I'd prefer string as it's a C# type alias and well-known by C# programmers.I can say the same about (int, System.Int32) etc..",
                "The best answer I have ever heard about using the provided type aliases in C# comes from Jeffrey Richter in his book CLR Via C#. Here are his 3 reasons:So there you have it. I think these are all really good points. I however, don't find myself using Jeffrey's advice in my own code. Maybe I am too stuck in my C# world but I end up trying to make my code look like the framework code.",
                "string is a reserved word, but String is just a class name. \nThis means that string cannot be used as a variable name by itself.If for some reason you wanted a variable called string, you'd see only the first of these compiles:If you really want a variable name called string you can use @ as a prefix:Another critical difference: Stack Overflow highlights them differently.",
                "There is one difference - you can't use String without using System; beforehand.",
                "It's been covered above; however, you can't use string in reflection; you must use String.",
                "System.String is the .NET string class - in C# string is an alias for System.String - so in use they are the same.As for guidelines I wouldn't get too bogged down and just use whichever you feel like - there are more important things in life and the code is going to be the same anyway.If you find yourselves building systems where it is necessary to specify the size of the integers you are using and so tend to use Int16, Int32, UInt16, UInt32 etc. then it might look more natural to use String - and when moving around between different .net languages it might make things more understandable - otherwise I would use string and int.",
                "I prefer the capitalized .NET types (rather than the aliases) for formatting reasons. The .NET types are colored the same as other object types (the value types are proper objects, after all).Conditional and control keywords (like if, switch, and return) are lowercase and colored dark blue (by default). And I would rather not have the disagreement in use and format.Consider:",
                "This YouTube video demonstrates practically how they differ.But now for a long textual answer.When we talk about .NET there are two different things one there is .NET framework and the other there are languages (C#, VB.NET etc) which use that framework.\"System.String\" a.k.a \"String\" (capital \"S\") is a .NET framework data type while \"string\" is a C# data type.In short \"String\" is an alias (the same thing called with different names) of \"string\". So technically both the below code statements will give the same output.orIn the same way, there are aliases for other C# data types as shown below:object: System.Object, string: System.String, bool: System.Boolean, byte: System.Byte, sbyte: System.SByte, short: System.Int16 and so on.Now the million-dollar question from programmer's point of view: So when to use \"String\" and \"string\"?The first thing to avoid confusion use one of them consistently. But from best practices perspective when you do variable declaration it's good to use \"string\" (small \"s\") and when you are using it as a class name then \"String\" (capital \"S\") is preferred.In the below code the left-hand side is a variable declaration and it is declared using \"string\". On the right-hand side, we are calling a method so \"String\" is more sensible.",
                "string and String are identical in all ways (except the uppercase \"S\").  There are no performance implications either way.Lowercase string is preferred in most projects due to the syntax highlighting",
                "C# is a language which is used together with the CLR.string is a type in C#.System.String is a type in the CLR.When you use C# together with the CLR string will be mapped to System.String.Theoretically, you could implement a C#-compiler that generated Java bytecode. A sensible implementation of this compiler would probably map string to java.lang.String in order to interoperate with the Java runtime library.",
                "Lower case string is an alias for System.String.\nThey are the same in C#.There's a debate over whether you should use the System types (System.Int32, System.String, etc.) types or the C# aliases (int, string, etc). I personally believe you should use the C# aliases, but that's just my personal preference.",
                "string is just an alias for System.String. The compiler will treat them identically.The only practical difference is the syntax highlighting as you mention, and that you have to write using System if you use String.",
                "Both are same. But from coding guidelines perspective it's better to use string instead of String. This is what generally developers use. e.g. instead of using Int32 we use int as int is alias to Int32FYI\n\u201cThe keyword string is simply an alias for the predefined class System.String.\u201d - C# Language Specification 4.2.3\nhttp://msdn2.microsoft.com/En-US/library/aa691153.aspx",
                "As the others are saying, they're the same.  StyleCop rules, by default, will enforce you to use string as a C# code style best practice, except when referencing System.String static functions, such as String.Format, String.Join, String.Concat, etc...",
                "New answer after 6 years and 5 months (procrastination).While string is a reserved C# keyword that always has a fixed meaning, String is just an ordinary identifier which could refer to anything. Depending on members of the current type, the current namespace and the applied using directives and their placement, String could be a value or a type distinct from global::System.String.I shall provide two examples where using directives will not help.First, when String is a value of the current type (or a local variable):The above will not compile because IEnumerable<> does not have a non-static member called Format, and no extension methods apply. In the above case, it may still be possible to use String in other contexts where a type is the only possibility syntactically. For example String local = \"Hi mum!\"; could be OK (depending on namespace and using directives).Worse: Saying String.Concat(someSequence) will likely (depending on usings) go to the Linq extension method Enumerable.Concat. It will not go to the static method string.Concat.Secondly, when String is another type, nested inside the current type:Neither statement in the Example method compiles. Here String is always a piano string, MyPiano.String. No member (static or not) Format exists on it (or is inherited from its base class). And the value \"Goodbye\" cannot be converted into it.",
                "Using System types makes it easier to port between C# and VB.Net, if you are into that sort of thing.",
                "Against what seems to be common practice among other programmers, I prefer String over string, just to highlight the fact that String is a reference type, as Jon Skeet mentioned.",
                "string is an alias (or shorthand) of System.String. That means, by typing string we meant System.String. You can read more in think link: 'string' is an alias/shorthand of System.String.",
                "I'd just like to add this to lfousts answer, from Ritchers book:The C# language specification states, \u201cAs a matter of style, use of the keyword is favored over\n  use of the complete system type name.\u201d I disagree with the language specification; I prefer\n  to use the FCL type names and completely avoid the primitive type names. In fact, I wish that\n  compilers didn\u2019t even offer the primitive type names and forced developers to use the FCL\n  type names instead. Here are my reasons:I\u2019ve seen a number of developers confused, not knowing whether to use string\n  or String in their code. Because in C# string (a keyword) maps exactly to\n  System.String (an FCL type), there is no difference and either can be used. Similarly,\n  I\u2019ve heard some developers say that int represents a 32-bit integer when the application\n  is running on a 32-bit OS and that it represents a 64-bit integer when the application\n  is running on a 64-bit OS. This statement is absolutely false: in C#, an int always maps\n  to System.Int32, and therefore it represents a 32-bit integer regardless of the OS the\n  code is running on. If programmers would use Int32 in their code, then this potential\n  confusion is also eliminated.In C#, long maps to System.Int64, but in a different programming language, long\n  could map to an Int16 or Int32. In fact, C++/CLI does treat long as an Int32.\n  Someone reading source code in one language could easily misinterpret the code\u2019s\n  intention if he or she were used to programming in a different programming language.\n  In fact, most languages won\u2019t even treat long as a keyword and won\u2019t compile code\n  that uses it.The FCL has many methods that have type names as part of their method names. For\n  example, the BinaryReader type offers methods such as ReadBoolean, ReadInt32,\n  ReadSingle, and so on, and the System.Convert type offers methods such as\n  ToBoolean, ToInt32, ToSingle, and so on. Although it\u2019s legal to write the following\n  code, the line with float feels very unnatural to me, and it\u2019s not obvious that the line is\n  correct:Many programmers that use C# exclusively tend to forget that other programming\n  languages can be used against the CLR, and because of this, C#-isms creep into the\n  class library code. For example, Microsoft\u2019s FCL is almost exclusively written in C# and\n  developers on the FCL team have now introduced methods into the library such as\n  Array\u2019s GetLongLength, which returns an Int64 value that is a long in C# but not\n  in other languages (like C++/CLI). Another example is System.Linq.Enumerable\u2019s\n  LongCount method.I didn't get his opinion before I read the complete paragraph.",
                "String (System.String) is a class in the base class library. string (lower case) is a reserved work in C# that is an alias for System.String. Int32 vs int is a similar situation as is Boolean vs. bool. These C# language specific keywords enable you to declare primitives in a style similar to C.",
                "It's a matter of convention, really.  string just looks more like C/C++ style.  The general convention is to use whatever shortcuts your chosen language has provided (int/Int for Int32).  This goes for \"object\" and decimal as well.Theoretically this could help to port code into some future 64-bit standard in which \"int\" might mean Int64, but that's not the point, and I would expect any upgrade wizard to change any int references to Int32 anyway just to be safe.",
                "@JaredPar (a developer on the C# compiler and prolific SO user!) wrote a great blog post on this issue. I think it is worth sharing here. It is a nice perspective on our subject.[...]The keyword string has concrete meaning in C#. It is the type System.String which exists in the core runtime assembly. The runtime intrinsically understands this type and provides the capabilities developers expect for strings in .NET. Its presence is so critical to C# that if that type doesn\u2019t exist the compiler will exit before attempting to even parse a line of code. Hence string has a precise, unambiguous meaning in C# code.The identifier String though has no concrete meaning in C#. It is an identifier that goes through all the name lookup rules as Widget, Student, etc \u2026 It could bind to string or it could bind to a type in another assembly entirely whose purposes may be entirely different than string. Worse it could be defined in a way such that code like String s = \"hello\"; continued to compile.The actual meaning of String will always depend on name resolution.\nThat means it depends on all the source files in the project and all\nthe types defined in all the referenced assemblies. In short it\nrequires quite a bit of context to know what it means.True that in the vast majority of cases String and string will bind to\nthe same type. But using String still means developers are leaving\ntheir program up to interpretation in places where there is only one\ncorrect answer. When String does bind to the wrong type it can leave\ndevelopers debugging for hours, filing bugs on the compiler team, and\ngenerally wasting time that could\u2019ve been saved by using string.Another way to visualize the difference is with this sample:Many will argue that while this is information technically accurate using String is still fine because it\u2019s exceedingly rare that a codebase would define a type of this name. Or that when String is defined it\u2019s a sign of a bad codebase.[...]You\u2019ll see that String is defined for a number of completely valid purposes: reflection helpers, serialization libraries, lexers, protocols, etc \u2026 For any of these libraries String vs. string has real consequences depending on where the code is used.So remember when you see the String vs. string debate this is about semantics, not style. Choosing string gives crisp meaning to your codebase. Choosing String isn\u2019t wrong but it\u2019s leaving the door open for surprises in the future.Note: I copy/pasted most of the blog posts for archive reasons. I ignore some parts, so I recommend skipping and reading the blog post if you can.",
                "String is not a keyword and it can be used as Identifier whereas string is a keyword and cannot be used as Identifier. And in function point of view both are same.",
                "Coming late to the party: I use the CLR types 100% of the time (well, except if forced to use the C# type, but I don't remember when the last time that was).I originally started doing this years ago, as per the CLR books by Ritchie. It made sense to me that all CLR languages ultimately have to be able to support the set of CLR types, so using the CLR types yourself provided clearer, and possibly more \"reusable\" code.Now that I've been doing it for years, it's a habit and I like the coloration that VS shows for the CLR types.The only real downer is that auto-complete uses the C# type, so I end up re-typing automatically generated types to specify the CLR type instead.Also, now, when I see \"int\" or \"string\", it just looks really wrong to me, like I'm looking at 1970's C code.",
                "There is no difference.The C# keyword string maps to the .NET type System.String - it is an alias that keeps to the naming conventions of the language.Similarly, int maps to System.Int32.",
                "There's a quote on this issue from Daniel Solis' book.All the predefined types  are mapped directly to\n  underlying .NET types. The C# type names (string) are simply aliases for the\n  .NET types (String or System.String), so using the .NET names works fine syntactically, although\n  this is discouraged. Within a C# program, you should use the C# names\n  rather than the .NET names.",
                "Yes, that's no difference between them, just like the bool and Boolean.",
                "string is a keyword, and you can't use string as an identifier.String is not a keyword, and you can use it as an identifier:ExampleThe keyword string  is an alias for\n System.String aside from the keyword issue, the two are exactly\n equivalent."
            ]
        },
        {
            "tag": "enumerate_enum",
            "patterns": [
                "How to enumerate an enum?", "Enumerate an enum", "Enumerate", "enum", "What is an enum"
            ],
            "responses": [
                "Note: The cast to (Suit[]) is not strictly necessary, but it does make the code 0.5 ns faster.",
                "It looks to me like you really want to print out the names of each enum, rather than the values. In which case Enum.GetNames() seems to be the right approach.By the way, incrementing the value is not a good way to enumerate the values of an enum. You should do this instead.I would use Enum.GetValues(typeof(Suit)) instead.",
                "I made some extensions for easy enum usage. Maybe someone can use it...The enum itself must be decorated with the FlagsAttribute:",
                "Some versions of the .NET framework do not support Enum.GetValues. Here's a good workaround from Ideas 2.0: Enum.GetValues in Compact Framework:As with any code that involves reflection, you should take steps to ensure it runs only once and results are cached.",
                "Use Cast<T>:There you go, IEnumerable<Suit>.",
                "I think this is more efficient than other suggestions because GetValues() is not called each time you have a loop. It is also more concise. And you get a compile-time error, not a runtime exception if Suit is not an enum.EnumLoop has this completely generic definition:",
                ".NET 5 has introduced a new generic version for the GetValues method:Which is now by far the most convenient way of doing this.Usage in a foreach loop:And if you just need the enum names as strings, you can use the generic GetNames method:",
                "You won't get Enum.GetValues() in Silverlight.Original Blog Post by Einar Ingebrigtsen:",
                "My solution works in .NET Compact Framework (3.5) and supports type checking at compile time:A call would look like this:",
                "I think you can use",
                "I've heard vague rumours that this is\n  terifically slow. Anyone know? \u2013 Orion\n  Edwards Oct 15 '08 at 1:31 7I think caching the array would speed it up considerably.  It looks like you're getting a new array (through reflection) every time.  Rather:That's at least a little faster, ja?",
                "Just by combining the top answers, I threw together a very simple extension:It is clean, simple, and, by @Jeppe-Stig-Nielsen's comment, fast.",
                "Three ways:I am not sure why GetEnumValues was introduced on type instances. It isn't very readable at all for me.Having a helper class like Enum<T> is what is most readable and memorable for me:Now you call:One can also use some sort of caching if performance matters, but I don't expect this to be an issue at all.",
                "There are two ways to iterate an Enum:The first will give you values in form on an array of **object**s, and the second will give you values in form of an array of **String**s.Use it in a foreach loop as below:",
                "I use ToString() then split and parse the spit array in flags.",
                "If enum values range strictly from 0 to n - 1, a generic alternative is:If enum values are contiguous and you can provide the first and last element of the enum, then:But that's not strictly enumerating, just looping. The second method is much faster than any other approach though...",
                "If you need speed and type checking at build and run time, this helper method is better than using LINQ to cast each element:And you can use it like below:Of course you can return IEnumerable<T>, but that buys you nothing here.",
                "Here is a working example of creating select options for a DDL:",
                "Add method public static IEnumerable<T> GetValues<T>() to your class, like:Call and pass your enum. Now you can iterate through it using foreach:",
                "(The current accepted answer has a cast that I don't think \nis needed (although I may be wrong).)",
                "I know it is a bit messy, but if you are fan of one-liners, here is one:",
                "This question appears in Chapter 10 of \"C# Step by Step 2013\"The author uses a double for-loop to iterate through a pair of Enumerators (to create a full deck of cards):In this case, Suit and Value are both enumerations:and PlayingCard is a card object with a defined Suit and Value:",
                "A simple and generic way to convert an enum to something you can interact:And then:",
                "What if you know the type will be an enum, but you don't know what the exact type is at compile time?The method getListOfEnum uses reflection to take any enum type and returns an IEnumerable of all enum values.Usage:",
                "enum types are called \"enumeration types\" not because they are containers that \"enumerate\" values (which they aren't), but because they are defined by enumerating the possible values for a variable of that type.(Actually, that's a bit more complicated than that - enum types are considered to have an \"underlying\" integer type, which means each enum value corresponds to an integer value (this is typically implicit, but can be manually specified). C# was designed in a way so that you could stuff any integer of that type into the enum variable, even if it isn't a \"named\" value.)The System.Enum.GetNames method can be used to retrieve an array of strings which are the names of the enum values, as the name suggests.EDIT: Should have suggested the System.Enum.GetValues method instead. Oops.",
                "For getting a list of int from an enum, use the following. It works!",
                "When you have a bit enum like thisWith this assignementand need a result like thisthis method helps:",
                "A simple Enum.GetNames(EnumType) should work",
                "Also you can bind to the public static members of the enum directly by using reflection:"
            ]
        },
        {
            "tag": "casting",
            "patterns": [
                "How do I cast int to enum in C#?", "Cast int to enum", "Casting integer", "Casting", "Casting to enum"
            ],
            "responses": [
                "From an int:From a string:From a number:",
                "Just cast it:Check if it's in range using Enum.IsDefined:",
                "Alternatively, use an extension method instead of a one-liner:Usage:OR",
                "I think to get a complete answer, people have to know how enums work internally in .NET.How stuff worksAn enum in .NET is a structure that maps a set of values (fields) to a basic type (the default is int). However, you can actually choose the integral type that your enum maps to:In this case the enum is mapped to the short data type, which means it will be stored in memory as a short and will behave as a short when you cast and use it.If you look at it from a IL point of view, a (normal, int) enum looks like this:What should get your attention here is that the value__ is stored separately from the enum values. In the case of the enum Foo above, the type of value__ is int16. This basically means that you can store whatever you want in an enum, as long as the types match.At this point I'd like to point out that System.Enum is a value type, which basically means that BarFlag will take up 4 bytes in memory and Foo will take up 2 -- e.g. the size of the underlying type (it's actually more complicated than that, but hey...).The answerSo, if you have an integer that you want to map to an enum, the runtime only has to do 2 things: copy the 4 bytes and name it something else (the name of the enum). Copying is implicit because the data is stored as value type - this basically means that if you use unmanaged code, you can simply interchange enums and integers without copying data.To make it safe, I think it's a best practice to know that the underlying types are the same or implicitly convertible and to ensure the enum values exist (they aren't checked by default!).To see how this works, try the following code:Note that casting to e2 also works! From the compiler perspective above this makes sense: the value__ field is simply filled with either 5 or 6 and when Console.WriteLine calls ToString(), the name of e1 is resolved while the name of e2 is not.If that's not what you intended, use Enum.IsDefined(typeof(MyEnum), 6) to check if the value you are casting maps to a defined enum.Also note that I'm explicit about the underlying type of the enum, even though the compiler actually checks this. I'm doing this to ensure I don't run into any surprises down the road. To see these surprises in action, you can use the following code (actually I've seen this happen a lot in database code):",
                "Take the following example:",
                "I am using this piece of code to cast int to my enum:I find it the best solution.",
                "Below is a nice utility class for Enums",
                "For numeric values, this is safer as it will return an object no matter what:",
                "If you're ready for the 4.0 .NET Framework, there's a new Enum.TryParse() function that's very useful and plays well with the [Flags] attribute. See Enum.TryParse Method (String, TEnum%)",
                "Sometimes you have an object to the MyEnum type. LikeThen:",
                "If you have an integer that acts as a bitmask and could represent one or more values in a [Flags] enumeration, you can use this code to parse the individual flag values into a list:Note that this assumes that the underlying type of the enum is a signed 32-bit integer. If it were a different numerical type, you'd have to change the hardcoded 32 to reflect the bits in that type (or programatically derive it using Enum.GetUnderlyingType())",
                "This is an flags enumeration aware safe convert method:",
                "To convert a string to ENUM or int to ENUM constant we need to use Enum.Parse function. Here is a youtube video https://www.youtube.com/watch?v=4nhx4VwdRDk  which actually demonstrate's with string and the same applies for int.The code goes as shown below where \"red\" is the string and \"MyColors\" is the color ENUM which has the color constants.",
                "Slightly getting away from the original question, but I found an answer to Stack\u00a0Overflow question Get int value from enum useful. Create a static class with public const int properties, allowing you to easily collect together a bunch of related int constants, and then not have to cast them to int when using them.Obviously, some of the enum type functionality will be lost, but for storing a bunch of database id constants, it seems like a pretty tidy solution.",
                "The following is a slightly better extension method:",
                "This parses integers or strings to a target enum with partial matching in .NET 4.0 using generics like in Tawani's utility class. I am using it to convert command-line switch variables which may be incomplete.  Since an enum cannot be null, you should logically provide a default value.  It can be called like this:Here's the code:FYI:  The question was about integers, which nobody mentioned will also explicitly convert in Enum.TryParse()",
                "From a string: (Enum.Parse is out of Date, use Enum.TryParse)",
                "You should build in some type matching relaxation to be more robust.Test Case",
                "Here's an extension method that casts Int32 to Enum.It honors bitwise flags even when the value is higher than the maximum possible. For example if you have an enum with possibilities 1, 2, and 4, but the int is 9, it understands that as 1 in absence of an 8. This lets you make data updates ahead of code updates.",
                "The easy and clear way for casting an int to enum in C#:",
                "For string, you can do the following:And make sure to check the result to determine if the conversion failed.For int, you can do the following:",
                "In my case, I needed to return the enum from a WCF service.  I also needed a friendly name, not just the enum.ToString().Here's my WCF Class.Here's the Extension method that gets the Description from the Enum.Implementation:",
                "It can help you to convert any input data to user desired enum. Suppose you have an enum like below which by default int. Please add a Default value at first of your enum. Which is used at helpers medthod when there is no match found with input value.N.B: Here I try to parse value into int, because enum is by default int\nIf you define enum like this which is byte type.You need to change parsing at helper method fromtobyte.TryParse(value.ToString(), out  tempType)I check my method for following inputssorry for my english",
                "Different ways to cast to and from Enum",
                "I don't know anymore where I get the part of this enum extension, but it is from stackoverflow. I am sorry for this! But I took this one and modified it for enums with Flags. \nFor enums with Flags I did this:Example:",
                "You simply use Explicit conversion Cast int to enum or enum to int",
                "I prefer a short way using a nullable enum type variable.",
                "You just do like below:To make sure that you only cast the right values \u200b\u200band that you can throw an exception otherwise:Note that using IsDefined is costly and even more than just casting, so it depends on your implementation to decide to use it or not.",
                "You can use an extension method.Use it like the below code:Enum:Usage:"
            ]
        },
        {
            "tag": "Contains(string)",
            "patterns": [
                "Case insensitive 'Contains(string)'", "Contains method of string", "Case sensistive", "String.IndexOf"
            ],
            "responses": [
                "You could use the String.IndexOf Method and pass StringComparison.OrdinalIgnoreCase as the type of search to use:Even better is defining a new extension method for string:Note, that null propagation ?. is available since C# 6.0 (VS 2015), for older versions useUSAGE:",
                "To test if the string paragraph contains the string word (thanks @QuarterMeister)Where culture is the instance of CultureInfo describing the language that the text is written in.This solution is transparent about the definition of case-insensitivity, which is language dependent. For example, the English language uses the characters I and i for the upper and lower case versions of the ninth letter, whereas the Turkish language uses these characters for the eleventh and twelfth letters of its 29 letter-long alphabet. The Turkish upper case version of 'i' is the unfamiliar character '\u0130'.Thus the strings tin and TIN are the same word in English, but different words in Turkish. As I understand, one means 'spirit' and the other is an onomatopoeia word. (Turks, please correct me if I'm wrong, or suggest a better example)To summarise, you can only answer the question 'are these two strings the same but in different cases' if you know what language the text is in. If you don't know, you'll have to take a punt. Given English's hegemony in software, you should probably resort to CultureInfo.InvariantCulture, because it will be wrong in familiar ways.",
                "You can use IndexOf() like this:Since 0 (zero) can be an index, you check against -1.Microsoft .NET Documentation:The zero-based index position of the value parameter from the start of the current instance if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex.",
                ".NET Core has had a pair of methods to deal with this since version 2.0 :Example:It is now officially part of the .NET Standard 2.1, and therefore part of all the implementations of the Base Class Library that implement this version of the standard (or a higher one).",
                "Alternative solution using Regex:",
                "You could always just up or downcase the strings first.Oops, just saw that last bit.  A case insensitive compare would *probably* do the same anyway, and if performance is not an issue, I don't see a problem with creating uppercase copies and comparing those.  I could have sworn that I once saw a case-insensitive compare once...",
                "One issue with the answer is that it will throw an exception if a string is null. You can add that as a check so it won't:",
                "StringExtension class is the way forward, I've combined a couple of the posts above to give a complete code example:",
                "This is clean and simple.",
                "OrdinalIgnoreCase, CurrentCultureIgnoreCase or InvariantCultureIgnoreCase?Since this is missing, here are some recommendations about when to use which one:Based on these rules you should use:whereas [YourDecision] depends on the recommendations from above.link of source: http://msdn.microsoft.com/en-us/library/ms973919.aspx",
                "These are the easiest solutions.By Index ofBy Changing caseBy Regex",
                "As simple and works",
                "Just like this:",
                "You can use a string comparison parameter (available from .NET Core 2.1 and above)  String.Contains Method.Example:",
                "I know that this is not the C#, but in the framework (VB.NET) there is already such a functionC# variant:",
                "The InStr method from the VisualBasic assembly is the best if you have a concern about internationalization (or you could reimplement it).  Looking at in it dotNeetPeek shows that not only does it account for caps and lowercase, but also for kana type and full- vs. half-width characters (mostly relevant for Asian languages, although there are full-width versions of the Roman alphabet too).  I'm skipping over some details, but check out the private method InternalInStrText:",
                "Use this:",
                "This is quite similar to other example here, but I've decided to simplify enum to bool, primary because other alternatives are normally not needed. Here is my example:And usage is something like:",
                "Just to build on the answer here, you can create a string extension method to make this a little more user-friendly:",
                "Using a RegEx is a straight way to do this:",
                "if you want to check if your passed string is in string then there is a simple method for that.This boolean value will return if the string is contained or not",
                "Similar to previous answers (using an extension method) but with two simple null checks (C# 6.0 and above):If source is null, return false (via null-propagation operator ?.)If substring is null, treat as an empty string and return true (via null-coalescing operator ??)The StringComparison can of course be sent as a parameter if needed.",
                "The top-rated several answers are all good and correct in their own ways, I write here to add more information, context, and perspective.For clarity, let us consider that string A contains string B if there is any subsequence of codepoints in A which is equal to B. If we accept this, the problem is reduced to the question of whether two strings are equal.The question of when strings are equal has been considered in detail for many decades. Much of the present state of knowledge is encapsulated in SQL collations. Unicode normal forms are close to a proper subset of this. But there is more beyond even SQL collations.For example, in SQL collations, you can beStrictly binary sensitive - so that different Unicode normalisation forms (e.g. precombined or combining accents) compare differently.For example, \u00e9 can be represented as either U+00e9 (precombined) or U+0065 U+0301 (e with combining acute accent).Are these the same or different?Unicode normalised - In this case the above examples would be equal to each other, but not to \u00c9 or e.accent insensitive, (for e.g. Spanish, German, Swedish etc. text). In this case U+0065 = U+0065 U+0301 = U+00e9 = \u00e9 = ecase and accent insensitive, so that (for e.g. Spanish, German, Swedish etc. text). In this case U+00e9 = U+0065 U+0301 = U+00c9 = U+0045 U+0301 = U+0049 = U+0065 = E = e = \u00c9 = \u00e9Kanatype sensitive or insensitive, i.e. you can consider Japanese Hiragana and Katakana as equivalent or different. The two syllabaries contain the same number of characters, organised and pronounced in the (mostly) the same way, but written differently and used for different purposes. For example katakana are used for loan words or foreign names, but hiragana are used for children's books, pronunciation guides (e.g. rubies), and where there is no kanji for a word (or perhaps where the writer does not know the kanji, or thinks the reader may not know it).Full-width or half-width sensitive - Japanese encodings include two representations of some characters for historical reasons - they were displayed  at different sizes.Ligatures considered equivalent or not: See https://en.wikipedia.org/wiki/Ligature_(writing)Is \u00e6 the same as ae or not? They have different Unicode encodings, as do accented characters, but unlike accented characters they also look different.Which brings us to...Arabic presentation form equivalenceArabic writing has a culture of beautiful calligraphy, where particular sequences of adjacent letters have specific representations. Many of these have been encoded in the Unicode standard. I don't fully understand the rules, but they seem to me to be analogous to ligatures.Other scripts and systems: I have no knowledge whatsoever or Kannada, Malayalam, Sinhala, Thai, Gujarati, Tibetan, or almost all of the tens or hundreds of scripts not mentioned. I assume they have similar issues for the programmer, and given the number of issues mentioned so far and for so few scripts, they probably also have additional issues the programmer ought to consider.That gets us out of the \"encoding\" weeds.Now we must enter the \"meaning\" weeds.is Beijing equal to \u5317\u4eac? If not, is B\u0115ij\u012bng equal to \u5317\u4eac? If not, why not? It is the Pinyin romanisation.Is Peking equal to \u5317\u4eac? If not, why not? It is the Wade-Giles romanisation.Is Beijing equal to Peking? If not, why not?Why are you doing this anyway?For example, if you want to know if it is possible that two strings (A and B) refer to the same geographical location, or same person, you might want to ask:Could these strings be either Wade-Giles or Pinyin representations of a set of sequences of Chinese characters? If so, is there any overlap between the corresponding sets?Could one of these strings be a Cyrillic transcription of a Chinese Character?could one of these strings be a Cyrillic transliteration of the Pinyin romanisation?Could one of these strings be a Cyrillic transliteration of a Pinyin romanisation of a Sinification of an English name?Clearly these are difficult questions, which don't have firm answers, and in any case, the answer may be different according to the purpose of the question.To finish with a concrete example.Words do not have fixed meanings.Words are tools we use to navigate the world, to accomplish our tasks, and to communicate with other people.While it looks like it would be helpful if words like equality, Beijing, or meaning had fixed meanings, the sad fact is they do not.Yet we seem to muddle along somehow.TL;DR: If you are dealing with questions relating to reality, in all its nebulosity (cloudiness, uncertainty, lack of clear boundaries), there are basically three possible answers to every question:",
                "You can use string.indexof () function. This will be case insensitive",
                "The trick here is to look for the string, ignoring case, but to keep it exactly the same (with the same case).Output is \"Reset\"",
                "Based on the existing answers and on the documentation of Contains method I would recommend the creation of the following extension which also takes care of the corner cases:",
                "Simple way for newbie:"
            ]
        },
        {
            "tag": "iterate",
            "patterns": [
                "How to iterate over a dictionary?", "Iterate over dictionary", "Iterate dictionary", "Iterate"
            ],
            "responses": [
                "If you are trying to use a generic Dictionary in C# like you would use an associative array in another language:Or, if you only need to iterate over the collection of keys, useAnd lastly, if you're only interested in the values:(Take note that the var keyword is an optional C# 3.0 and above feature, you could also use the exact type of your keys/values here)",
                "In some cases you may need a counter that may be provided by for-loop implementation. For that, LINQ provides ElementAt which enables the following:",
                "Depends on whether you're after the keys or the values...From the MSDN Dictionary(TKey, TValue) Class description:",
                "Generally, asking for \"the best way\" without a specific context is like asking \nwhat is the best color?One the one hand, there are many colors and there's no best color.  It depends on the need and often on taste, too.On the other hand, there are many ways to iterate over a Dictionary in C# and there's no best way. It depends on the need and often on taste, too.If you need only the value (allows to call it item, more readable than kvp.Value).Generally, beginners are surprised about order of enumeration of a Dictionary.LINQ provides a concise syntax that allows to specify order (and many other things), e.g.:Again you might only need the value. LINQ also provides a concise solution to:Here it is:There are many more real-world use case you can do from these examples.\nIf you don't need a specific order, just stick to the \"most straightforward way\" (see above)!",
                "C# 7.0 introduced Deconstructors and if you are using .NET Core 2.0+ Application, the struct KeyValuePair<> already include a Deconstruct() for you. So you can do:",
                "I would say foreach is the standard way, though it obviously depends on what you're looking forIs that what you're looking for?",
                "You can also try this on big dictionaries for multithreaded processing.",
                "I appreciate this question has already had a lot of responses but I wanted to throw in a little research.Iterating over a dictionary can be rather slow when compared with iterating over something like an array. In my tests an iteration over an array took 0.015003 seconds whereas an iteration over a dictionary (with the same number of elements) took 0.0365073 seconds that's 2.4 times as long! Although I have seen much bigger differences. For comparison a List was somewhere in between at 0.00215043 seconds.However, that is like comparing apples and oranges. My point is that iterating over dictionaries is slow.Dictionaries are optimised for lookups, so with that in mind I've created two methods. One simply does a foreach, the other iterates the keys then looks up.This one loads the keys and iterates over them instead (I did also try pulling the keys into a string[] but the difference was negligible.With this example the normal foreach test took 0.0310062 and the keys version took 0.2205441. Loading all the keys and iterating over all the lookups is clearly a LOT slower!For a final test I've performed my iteration ten times to see if there are any benefits to using the keys here (by this point I was just curious):Here's the RunTest method if that helps you visualise what's going on.Here the normal foreach run took 0.2820564 seconds (around ten times longer than a single iteration took - as you'd expect). The iteration over the keys took 2.2249449 seconds.Edited To Add:\nReading some of the other answers made me question what would happen if I used Dictionary instead of Dictionary. In this example the array took 0.0120024 seconds, the list 0.0185037 seconds and the dictionary 0.0465093 seconds. It's reasonable to expect that the data type makes a difference on how much slower the dictionary is.What are my Conclusions?",
                "As already pointed out on this answer, KeyValuePair<TKey, TValue> implements a Deconstruct method starting on .NET Core 2.0, .NET Standard 2.1 and .NET Framework 5.0 (preview).With this, it's possible to iterate through a dictionary in a KeyValuePair agnostic way:",
                "There are plenty of options. My personal favorite is by KeyValuePairYou can also use the Keys and Values Collections",
                "With .NET Framework 4.7 one can use decompositionTo make this code work on lower C# versions, add System.ValueTuple NuGet package and write somewhere",
                "As of C# 7, you can deconstruct objects into variables. I believe this to be the best way to iterate over a dictionary.Example:Create an extension method on KeyValuePair<TKey, TVal> that deconstructs it:Iterate over any Dictionary<TKey, TVal> in the following manner",
                "foreach is fastest and if you only iterate over ___.Values, it is also faster",
                "Using C# 7, add this extension method to any project of your solution:And use this simple syntaxOr this one, if you preferIn place of the traditionalThe extension method transforms the KeyValuePair of your IDictionary<TKey, TValue> into a strongly typed tuple, allowing you to use this new comfortable syntax.It converts -just- the required dictionary entries to tuples, so it does NOT converts the whole dictionary to tuples, so there are no performance concerns related to that.There is a only minor cost calling the extension method for creating a tuple in comparison with using the KeyValuePair directly, which should NOT be an issue if you are assigning the KeyValuePair's properties Key and Value to new loop variables anyway.In practice, this new syntax suits very well for most cases, except for low-level ultra-high performance scenarios, where you still have the option to simply not use it on that specific spot.Check this out: MSDN Blog - New features in C# 7",
                "Simplest form to iterate a dictionary:",
                "I found this method in the documentation for the DictionaryBase class on MSDN:This was the only one I was able to get functioning correctly in a class that inherited from the DictionaryBase.",
                "Sometimes if you only needs the values to be enumerated, use the dictionary's value collection:Reported by this post which states it is the fastest method:\nhttp://alexpinsker.blogspot.hk/2010/02/c-fastest-way-to-iterate-over.html",
                "I know this is a very old question, but I created some extension methods that might be useful:This way I can write code like this:",
                "If you want to use a for loop, you can do as below:",
                "I will take the advantage of .NET 4.0+ and provide an updated answer to the originally accepted one:",
                "The standard way to iterate over a Dictionary, according to official documentation on MSDN is:",
                "I wrote an extension to loop over a dictionary.Then you can call",
                "If say, you want to iterate over the values collection by default, I believe you can implement IEnumerable<>, Where T is the type of the values object in the dictionary, and \"this\" is a Dictionary.",
                "Dictionary< TKey,\u2002TValue > It is a generic collection class in c# and it stores the data in the key value format.Key must be unique and it can not be null whereas value can be duplicate and null.As each item in the dictionary is treated as KeyValuePair< TKey,\u2002TValue > structure representing a key and its value. and hence we should take the element type  KeyValuePair< TKey,\u2002TValue> during the iteration of element.Below is the example.",
                "The best answer is of course: Think, if you could use a more appropriate data structure than a dictionary if you plan to iterate over it- as Vikas Gupta mentioned already in the (beginning of the) discussion under the question. But that discussion as this whole thread still lacks surprisingly good alternatives. One is:Why it could be argued a code smell of iterating over a dictionary (e.g. by foreach(KeyValuePair<,>) ?A basic principle of Clean Coding:\n\"Express intent!\"\nRobert C. Martin writes in \"Clean Code\": \"Choosing names that reveal intent\". Obviously naming alone is too weak. \"Express (reveal) intent with every coding decision\" expresses it better.A related principle is \"Principle of least surprise\" (=Principle of Least Astonishment).Why this is related to iterating over a dictionary? Choosing a dictionary expresses the intent of choosing a data structure which was made for primarily finding data by key. Nowadays there are so much alternatives in .NET, if you want to iterate through key/value pairs that you could choose something else.Moreover: If you iterate over something, you have to reveal something about how the items are (to be) ordered and expected to be ordered!\nAlthough the known implementations of Dictionary sort the key collection in the order of the items added-\nAFAIK, Dictionary has no assured specification about ordering (has it?).But what are the alternatives?TLDR:\nSortedList: If your collection is not getting too large, a simple solution would be to use SortedList<,> which gives you also full indexing of key/value pairs.Microsoft has a long article about mentioning and explaining fitting collections:\nKeyed collectionTo mention the most important: KeyedCollection<,> and SortedDictionary<,> .\nSortedDictionary<,> is a bit faster than SortedList for only inserting if it gets large, but lacks indexing and is needed only if O(log n) for inserting is preferenced over other operations. If you really need O(1) for inserting and accept slower iterating in exchange, you have to stay with simple Dictionary<,>.\nObviously there is no data structure which is the fastest for every possible operation..Additionally there is ImmutableSortedDictionary<,>.And if one data structure is not exactly what you need, then derivate from Dictionary<,> or even from the new ConcurrentDictionary<,> and add explicit iteration/sorting functions!",
                "Just wanted to add my 2 cent, as the most answers relate to foreach-loop.\nPlease, take a look at the following code:Altought this adds a additional call of '.ToList()', there might be a slight performance-improvement (as pointed out here foreach vs someList.Foreach(){}), \nespacially when working with large Dictionaries and running in parallel is no option / won't have an effect at all.Also, please note that you wont be able to assign values to the 'Value' property inside a foreach-loop. On the other hand, you will be able to manipulate the 'Key' as well, possibly getting you into trouble at runtime.When you just want to \"read\" Keys and Values, you might also use IEnumerable.Select().",
                "in addition to the highest ranking posts where there is a discussion between usingormost complete is the following because you can see the dictionary type from the initialization, kvp is KeyValuePair"
            ]
        },
        {
            "tag": "version_numbers",
            "patterns": [
                "What are the correct version numbers for C#?", "Version numbers", "Correct version numbers", "What are correct version numbers"
            ],
            "responses": [
                "These are the versions of C# known about at the time of this writing:What are the correct version numbers for C#? What came out when? Why can't I find any answers about C# 3.5?There is no such thing as C# 3.5 - the cause of confusion here is that the C# 3.0 is present in .NET 3.5. The language and framework are versioned independently, however - as is the CLR, which is at version 2.0 for .NET 2.0 through 3.5, .NET 4 introducing CLR 4.0, service packs notwithstanding. The CLR in .NET 4.5 has various improvements, but the versioning is unclear: in some places it may be referred to as CLR 4.5 (this MSDN page used to refer to it that way, for example), but the Environment.Version property still reports 4.0.xxx.As of May 3, 2017, the C# Language Team created a history of C# versions and features on their GitHub repository: Features Added in C# Language Versions. There is also a page that tracks upcoming and recently implemented language features.",
                "This is the same as most answers here, but tabularized for ease, and it has Visual Studio and .NET versions for completeness.* - .NET 5.0 is not a newer version of .NET framework but .NET Core 3. Starting from .NET 5.0, there are no newer versions of .NET full framework.** - There are no separate CLR (CoreCLR) versions for .NET Core. Whatever is the .NET Core version is the CoreCLR version. So not mentioning it.Note: .NET is pretty much independent of VS and compiler versions, there is no correlation between versions of each. The above lists don't imply certain version of .NET are tied to certain C# or VS versions. This is just compiled in their chronological order of their releases (VS/C# and .NET). Some releases happen to be together, hence they sit in the same row. Refer to \".NET Framework versions and dependencies\" and \".NET release cadence\" for more.",
                "The biggest problem when dealing with C#'s version numbers is the fact that it is not tied to a version of the .NET Framework, which it appears to be due to the synchronized releases between Visual Studio and the .NET Framework.The version of C# is actually bound to the compiler, not the framework. For instance, in Visual\u00a0Studio\u00a02008 you can write C# 3.0 and target .NET Framework 2.0, 3.0 and 3.5. The C# 3.0 nomenclature describes the version of the code syntax and supported features in the same way that ANSI C89, C90, and C99 describe the code syntax and features for C.Take a look at Mono, and you will see that Mono 2.0 (mostly implemented version 2.0 of the .NET Framework from the ECMA specifications) supports the C# 3.0 syntax and features.",
                "C# 1.0 with Visual Studio .NETC# 2.0 with Visual\u00a0Studio\u00a02005C# 3.0 with Visual\u00a0Studio\u00a02008C# 4.0 with Visual\u00a0Studio\u00a02010C# 5.0 with Visual\u00a0Studio\u00a02012C# 6.0 with Visual\u00a0Studio\u00a02015C# 7.0 with Visual\u00a0Studio\u00a02017C# 8.0 with Visual\u00a0Studio\u00a02019C# 9.0 with Visual\u00a0Studio\u00a02019",
                "I've summarised most of the versions in this table. The only ones missing should be ASP.NET Core versions. I've also added different versions of ASP.NET MVC.Note that ASP.NET 5 has been rebranded as ASP.NET Core 1.0 and ASP.NET MVC 6 has been rebranded as ASP.NET Core MVC 1.0.0. I believe this change occurred sometime around Jan 2016.I have included the release date of ASP.NET 5 RC1 in the table, but I've yet to include ASP.NET core 1.0 and other core versions, because I couldn't find the exact release dates. You can read more about the release dates regarding ASP.NET Core here: When is ASP.NET Core 1.0 (ASP.NET 5 / vNext) scheduled for release?",
                "You can check the latest C# versions here",
                "Comparing the MSDN articles \"What's New in the C# 2.0 Language and Compiler\" and \"What's New in Visual C# 2005\", it is possible to deduce that \"C# major_version.minor_version\" is coined according to the compiler's version numbering.There is C# 1.2 corresponding to .NET  1.1 and VS 2003 and also named as Visual C# .NET 2003.But further on Microsoft stopped to increment the minor version (after the dot) numbers or to have them other than zero, 0. Though it should be noted that C# corresponding to .NET 3.5 is named in msdn.microsoft.com as \"Visual C# 2008 Service Pack 1\".There are two parallel namings: By major .NET/compiler version numbering and by Visual Studio numbering.C# 2.0 is a synonym for Visual C# 2005C# 3.0  corresponds (or, more correctly, can target) to:",
                "[Source]: https://github.com/dotnet/csharplang/blob/master/Language-Version-History.md",
                "C# 1.0     .NET Framework 1.0/1.1     Visual Studio .NET 2002C# 2.0     .NET Framework 2.0     Visual Studio 2005C# 3.0     .NET Framework 3.0\\3.5     Visual Studio 2008C# 4.0     .NET Framework 4.0     Visual Studio 2010C# 5.0     .NET Framework 4.5     Visual Studio 2012/2013C# 6.0     .NET Framework 4.6     Visual Studio 2013/2015C# 7.0     .NET Core 2.0     Visual Studio 2017C# 8.0     .NET Core 3.0     Visual Studio 2019",
                "C# 8.0 is the latest version of C#. It is supported only on .NET Core 3.x and newer versions. Many of the newest features require library and runtime features introduced in .NET Core 3.x.The following table lists the target framework with version and their default C# version.Source - C# language versioning",
                "I was looking for a concise history of the .NET, C#, CLR, and Visual\u00a0Studio versions alongside the key language features.Since I couldn't find any up-to-date table that contains all the information I needed in one place - I merged details from the Microsoft docs into what I tried to keep a concise table that contains what I was looking for.It\u2019s available here: https://mantinband.github.io/dotnet-shmotnet/I probably have some mistakes or missing information so please feel free to open an issue or contribute over here: https://github.com/mantinband/dotnet-shmotnetSneak peek:",
                "READ MORE"
            ]
        },
        {
            "tag": "deep_clone",
            "patterns": [
                "Deep cloning objects", "How to deep clone objects", "How to deep clone", "Deep clone", "Deep clone objects", "Deep cloning objects"
            ],
            "responses": [
                "Whereas one approach is to implement the ICloneable interface (described here, so I won't regurgitate), here's a nice deep clone object copier I found on The Code Project a while ago and incorporated it into our code.\nAs mentioned elsewhere, it requires your objects to be serializable.The idea is that it serializes your object and then deserializes it into a fresh object. The benefit is that you don't have to concern yourself about cloning everything when an object gets too complex.In case of you prefer to use the new extension methods of C# 3.0, change the method to have the following signature:Now the method call simply becomes objectBeingCloned.Clone();.EDIT (January 10 2015) Thought I'd revisit this, to mention I recently started using (Newtonsoft) Json to do this, it should be lighter, and avoids the overhead of [Serializable] tags. (NB @atconway has pointed out in the comments that private members are not cloned using the JSON method)",
                "I wanted a cloner for very simple objects of mostly primitives and lists.  If your object is out of the box JSON serializable then this method will do the trick.  This requires no modification or implementation of interfaces on the cloned class, just a JSON serializer like JSON.NET.Also, you can use this extension method",
                "The reason not to use ICloneable is not because it doesn't have a generic interface.  The reason not to use it is because it's vague.  It doesn't make clear whether you're getting a shallow or a deep copy; that's up to the implementer.Yes, MemberwiseClone makes a shallow copy, but the opposite of MemberwiseClone isn't Clone; it would be, perhaps, DeepClone, which doesn't exist.  When you use an object through its ICloneable interface, you can't know which kind of cloning the underlying object performs.  (And XML comments won't make it clear, because you'll get the interface comments rather than the ones on the object's Clone method.)What I usually do is simply make a Copy method that does exactly what I want.",
                "After much much reading about many of the options linked here, and possible solutions for this issue, I believe all the options are summarized pretty well at Ian P's link (all other options are variations of those) and the best solution is provided by Pedro77's link on the question comments.So I'll just copy relevant parts of those 2 references here. That way we can have:First and foremost, those are all our options:The article Fast Deep Copy by Expression Trees   has  also performance comparison of cloning by Serialization, Reflection and Expression Trees.Mr Venkat Subramaniam (redundant link here) explains in much detail why.All his article circles around an example that tries to be applicable for most cases, using 3 objects: Person, Brain and City. We want to clone a person, which will have its own brain but the same city. You can either picture all problems any of the other methods above can bring or read the article.This is my slightly modified version of his conclusion:Copying an object by specifying New followed by the class name often leads to code that is not extensible. Using clone, the application of prototype pattern, is a better way to achieve this. However, using clone as it is provided in C# (and Java) can be quite problematic as well. It is better to provide a protected (non-public) copy constructor and invoke that from the clone method. This gives us the ability to delegate the task of creating an object to an instance of a class itself, thus providing extensibility and also, safely creating the objects using the protected copy constructor.Hopefully this implementation can make things clear:Now consider having a class derive from Person.You may try running the following code:The output produced will be:Observe that, if we keep a count of the number of objects, the clone as implemented here will keep a correct count of the number of objects.",
                "I prefer a copy constructor to a clone. The intent is clearer.",
                "Simple extension method to copy all the public properties. Works for any objects and does not require class to be [Serializable]. Can be extended for other access level.",
                "I've just created CloneExtensions library project. It performs fast, deep clone using simple assignment operations generated by Expression Tree runtime code compilation.How to use it?Instead of writing your own Clone or Copy methods with a tone of assignments between fields and properties make the program do it for yourself, using Expression Tree. GetClone<T>() method marked as extension method allows you to simply call it on your instance:You can choose what should be copied from source to newInstance using CloningFlags enum:What can be cloned?Following class/struct members are cloned internally:How fast it is?The solution is faster then reflection, because members information has to be gathered only once, before GetClone<T> is used for the first time for given type T.It's also faster than serialization-based solution when you clone more then couple instances of the same type T.and more...Read more about generated expressions on documentation.Sample expression debug listing for List<int>:}what has the same meaning like following c# code:Isn't it quite like how you'd write your own Clone method for List<int>?",
                "If you're already using a 3rd party application like ValueInjecter or Automapper, you can do something like this:Using this method you don't have to implement ISerializable or ICloneable on your objects. This is common with the MVC/MVVM pattern, so simple tools like this have been created.see the ValueInjecter deep cloning sample on GitHub.",
                "Well I was having problems using ICloneable in Silverlight, but I liked the idea of seralization, I can seralize XML, so I did this:",
                "The best is to implement an extension method likeand then use it anywhere in the solution byWe can have the following three implementations:All linked methods are well working and were deeply tested.",
                "The short answer is you inherit from the ICloneable interface and then implement the .clone function. Clone should do a memberwise copy and perform a deep copy on any member that requires it, then return the resulting object. This is a recursive operation ( it requires that all members of the class you want to clone are either value types or implement ICloneable and that their members are either value types or implement ICloneable, and so on).For a more detailed explanation on Cloning using ICloneable, check out this article.The long answer is \"it depends\". As mentioned by others, ICloneable is not supported by generics, requires special considerations for circular class references, and is actually viewed by some as a \"mistake\" in the .NET Framework. The serialization method depends on your objects being serializable, which they may not be and you may have no control over. There is still much debate in the community over which is the \"best\" practice. In reality, none of the solutions are the one-size fits all best practice for all situations like ICloneable was originally interpreted to be.See the this Developer's Corner article for a few more options (credit to Ian).",
                "Cheers.",
                "After reading all answers I was surprised no one mentioned this excellent package:DeepCloner GitHub projectDeepCloner NuGet packageElaborating a bit on its README, here are the reason why we chose it at work:The README contains a performance comparison of various cloning libraries and methods: DeepCloner Performance.",
                "EDIT: project is discontinuedIf you want true cloning to unknown types you can take a look at\nfastclone.That's expression based cloning working about 10 times faster than binary serialization and maintaining complete object graph integrity.That means: if you refer multiple times to the same object in your hierachy, the clone will also have a single instance beeing referenced.There is no need for interfaces, attributes or any other modification to the objects being cloned.",
                "Keep things simple and use AutoMapper as others mentioned, it's a simple little library to map one object to another... To copy an object to another with the same type, all you need is three lines of code:The target object is now a copy of the source object.\nNot simple enough? Create an extension method to use everywhere in your solution:The extension method can be used as follow:",
                "In general, you implement the ICloneable interface and implement Clone yourself.\nC# objects have a built-in MemberwiseClone method that performs a shallow copy that can help you out for all the primitives.For a deep copy, there is no way it can know how to automatically do it.",
                "I came up with this to overcome a .NET shortcoming having to manually deep copy List<T>.I use this:And at another place:I tried to come up with oneliner that does this, but it's not possible, due to yield not working inside anonymous method blocks.Better still, use generic List<T> cloner:",
                "Disclaimer: I'm the author of the mentioned package.I was surprised how the top answers to this question in 2019 still use serialization or reflection.BinaryFormatter requires the Serializable attribute, JsonConverter requires a parameterless constructor or attributes, neither handle read only fields or interfaces very well and both are 10-30x slower than necessary.You can instead use Expression Trees or Reflection.Emit to generate cloning code only once, then use that compiled code instead of slow reflection or serialization.Having come across the problem myself and seeing no satisfactory solution, I decided to create a package that does just that and works with every type and is a almost as fast as custom written code.You can find the project on GitHub: https://github.com/marcelltoth/ObjectClonerYou can install it from NuGet. Either get the ObjectCloner package and use it as:or if you don't mind polluting your object type with extensions get ObjectCloner.Extensions as well and write:A simple benchmark of cloning a class hierarchy showed performance ~3x faster than using Reflection, ~12x faster than Newtonsoft.Json serialization and ~36x faster than the highly suggested BinaryFormatter.",
                "In other words, go with another answer unless you have a performance bottleneck that needs fixing, and you can prove it with a profiler.The following method of performing a deep clone is:For ultimate speed, you can use Nested MemberwiseClone to do a deep copy. Its almost the same speed as copying a value struct, and is much faster than (a) reflection or (b) serialization (as described in other answers on this page).Note that if you use Nested MemberwiseClone for a deep copy, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code below.Here is the output of the code showing the relative performance difference for 100,000 clones:Using Nested MemberwiseClone on a class almost as fast as copying a struct, and copying a struct is pretty darn close to the theoretical maximum speed .NET is capable of.To understand how to do a deep copy using MemberwiseCopy, here is the demo project that was used to generate the times above:Then, call the demo from main:Again, note that if you use Nested MemberwiseClone for a deep copy, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code above.Note that when it comes to cloning an object, there is is a big difference between a \"struct\" and a \"class\":See differences between value types and references types.One excellent use case for this code is feeding clones of a nested class or struct into a queue, to implement the producer / consumer pattern.This works extremely well in practice, and allows us to decouple many threads (the producers) from one or more threads (the consumers).And this method is blindingly fast too: if we use nested structs, it's 35x faster than serializing/deserializing nested classes, and allows us to take advantage of all of the threads available on the machine.Apparently, ExpressMapper is as fast, if not faster, than hand coding such as above. I might have to see how they compare with a profiler.",
                "Create an extension:And call it like this:",
                "I've seen it implemented through reflection as well. Basically there was a method that would iterate through the members of an object and appropriately copy them to the new object. When it reached reference types or collections I think it did a recursive call on itself. Reflection is expensive, but it worked pretty well.",
                "Here is a deep copy implementation:",
                "As I couldn't find a cloner that meets all my requirements in different projects, I created a deep cloner that can be configured and adapted to different code structures instead of adapting my code to meet the cloners requirements. Its achieved by adding annotations to the code that shall be cloned or you just leave the code as it is to have the default behaviour. It uses reflection, type caches and is based on fasterflect. The cloning process is very fast for a huge amount of data and a high object hierarchy (compared to other reflection/serialization based algorithms).https://github.com/kalisohn/CloneBehaveAlso available as a nuget package:\nhttps://www.nuget.org/packages/Clone.Behave/1.0.0For example: The following code will deepClone Address, but only perform a shallow copy of the _currentJob field.",
                "We have seen a lot of ideas from serialization over manual implementation to reflection and I want to propose a totally different approach using the CGbR Code Generator. The generate clone method is memory and CPU efficient and therefor 300x faster as the standard DataContractSerializer.All you need is a partial class definition with ICloneable and the generator does the rest:Note: Latest version has a more null checks, but I left them out for better understanding.",
                "I like Copyconstructors like that:If you have more things to copy add them",
                "This method solved the problem for me:Use it like this: MyObj a = DeepCopy(b);",
                "Here a solution fast and easy that worked for me without relaying on Serialization/Deserialization.EDIT:\nrequiresThat's How I used it",
                "Follow these steps:For maximum inheritance versatility, classes exposing public cloning functionality should be sealed, but derive from a base class which is otherwise identical except for the lack of cloning.  Rather than passing variables of the explicit clonable type, take a parameter of type ICloneable<theNonCloneableType>.  This will allow a routine that expects a cloneable derivative of  Foo to work with a cloneable derivative of DerivedFoo, but also allow the creation of non-cloneable derivatives of Foo.",
                "As nearly all of the answers to this question have been unsatisfactory or plainly don't work in my situation, I have authored AnyClone which is entirely implemented with reflection and solved all of the needs here. I was unable to get serialization to work in a complicated scenario with complex structure, and IClonable is less than ideal - in fact it shouldn't even be necessary.Standard ignore attributes are supported using [IgnoreDataMember], [NonSerialized]. Supports complex collections, properties without setters, readonly fields etc.I hope it helps someone else out there who ran into the same problems I did.",
                "Shortest way but need dependency:"
            ]
        },
        {
            "tag": "multiple_exceptions",
            "patterns": [
                "Catch multiple exceptions at once?", "How to catch multiple exceptions", "Multiple exception catching"
            ],
            "responses": [
                "Catch System.Exception and switch on the types",
                "EDIT: I do concur with others who are saying that, as of C# 6.0, exception filters are now a perfectly fine way to go: catch (Exception ex) when (ex is ... || ex is ... )Except that I still kind of hate the one-long-line layout and would personally lay the code out like the following. I think this is as functional as it is aesthetic, since I believe it improves comprehension. Some may disagree:ORIGINAL:I know I'm a little late to the party here, but holy smoke...Cutting straight to the chase, this kind of duplicates an earlier answer, but if you really want to perform a common action for several exception types and keep the whole thing neat and tidy within the scope of the one method, why not just use a lambda/closure/inline function to do something like the following?  I mean, chances are pretty good that you'll end up realizing that you just want to make that closure a separate method that you can utilize all over the place. But then it will be super easy to do that without actually changing the rest of the code structurally.  Right?I can't help but wonder (warning: a little irony/sarcasm ahead) why on earth go to all this effort to basically just replace the following:...with some crazy variation of this next code smell, I mean example, only to pretend that you're saving a few keystrokes.Because it certainly isn't automatically more readable.Granted, I left the three identical instances of /* write to a log, whatever... */ return; out of the first example.But that's sort of my point.  Y'all have heard of functions/methods, right?  Seriously.  Write a common ErrorHandler function and, like, call it from each catch block.If you ask me, the second example (with the if and is keywords) is both significantly less readable, and simultaneously significantly more error-prone during the maintenance phase of your project.The maintenance phase, for anyone who might be relatively new to programming, is going to compose 98.7% or more of the overall lifetime of your project, and the poor schmuck doing the maintenance is almost certainly going to be someone other than you. And there is a very good chance they will spend 50% of their time on the job cursing your name.And of course FxCop barks at you and so you have to also add an attribute to your code that has precisely zip to do with the running program, and is only there to tell FxCop to ignore an issue that in 99.9% of cases it is totally correct in flagging. And, sorry, I might be mistaken, but doesn't that \"ignore\" attribute end up actually compiled into your app?Would putting the entire if test on one line make it more readable? I don't think so.  I mean, I did have another programmer vehemently argue once long ago that putting more code on one line would make it \"run faster.\"  But of course he was stark raving nuts. Trying to explain to him (with a straight face--which was challenging) how the interpreter or compiler would break that long line apart into discrete one-instruction-per-line statements--essentially identical to the result if he had gone ahead and just made the code readable instead of trying to out-clever the compiler--had no effect on him whatsoever.  But I digress.How much less readable does this get when you add three more exception types, a month or two from now?  (Answer: it gets a lot less readable).One of the major points, really, is that most of the point of formatting the textual source code that we're all looking at every day is to make it really, really obvious to other human beings what is actually happening when the code runs.  Because the compiler turns the source code into something totally different and couldn't care less about your code formatting style.  So all-on-one-line totally sucks, too.Just saying...",
                "As others have pointed out, you can have an if statement inside your catch block to determine what is going on. C#6 supports Exception Filters, so the following will work:The MyFilter method could then look something like this:Alternatively, this can be all done inline (the right hand side of the when statement just has to be a boolean expression).This is different from using an if statement from within the catch block, using exception filters will not unwind the stack.You can download Visual Studio 2015 to check this out.If you want to continue using Visual Studio 2013, you can install the following nuget package:Install-Package Microsoft.Net.CompilersAt time of writing, this will include support for C# 6.Referencing this package will cause the project to be built using the\n  specific version of the C# and Visual Basic compilers contained in the\n  package, as opposed to any system installed version.",
                "Not in C# unfortunately, as you'd need an exception filter to do it and C# doesn't expose that feature of MSIL. VB.NET does have this capability though, e.g.What you could do is use an anonymous function to encapsulate your on-error code, and then call it in those specific catch blocks:",
                "Exception filters are now available in c# 6+. You can doIn C# 7.0+, you can combine this with pattern matching too",
                "For the sake of completeness, since .NET 4.0 the code can rewritten as:TryParse never throws exceptions and returns false if format is wrong, setting WebId to Guid.Empty.Since C# 7 you can avoid introducing a variable on a separate line:You can also create methods for parsing returning tuples, which aren't available in .NET Framework yet as of version 4.6:And use them like this:Next useless update to this useless answer comes when deconstruction of out-parameters is implemented in C# 12. :)",
                "If you can upgrade your application to C# 6 you are lucky. The new C# version has implemented Exception filters. So you can write this:Some people think this code is the same asBut it\u00b4s not. Actually this is the only new feature in C# 6 that is not possible to emulate in prior versions. First, a re-throw means more overhead than skipping the catch. Second, it is not semantically equivalent. The new feature preserves the stack intact when you are debugging your code. Without this feature the crash dump is less useful or even useless.See a discussion about this on CodePlexNot available anymore. And an example showing the difference.",
                "With C# 7 the answer from Michael Stum can be improved while keeping the readability of a switch statement:Thanks to Orace comment this can be simplified with C# 8 by omitting the discard variable:And with C# 8 as switch expression:As Nechemia Hoffmann pointed out. The latter example will cause a loss of the stacktrace. This can be prevented by using the extension method described by J\u00fcrgen Steinblock to capture the stacktrace before throwing:Both styles can be simplified with the pattern matching enhancements of C# 9:",
                "Update for C# 9Using the new pattern matching enhancements made in C# 9, you can shorten the expression in the exception filter. Now, catching multiple exceptions is a simple is this:",
                "If you don't want to use an if statement within the catch scopes, in C# 6.0 you can use Exception Filters syntax which was already supported by the CLR in previews versions but existed only in VB.NET/MSIL:This code will catch the Exception only when it's a InvalidDataException or ArgumentNullException.Actually, you can put basically any condition inside that when clause:Note that as opposed to an if statement inside the catch's scope, Exception Filters cannot throw Exceptions, and when they do, or when the condition is not true, the next catch condition will be evaluated instead:Output: General catch.When there is more then one true Exception Filter - the first one will be accepted:Output: Catch.And as you can see in the MSIL the code is not translated to if statements, but to Filters, and Exceptions cannot be throw from within the areas marked with Filter 1 and Filter 2 but the filter throwing the Exception will fail instead, also the last comparison value pushed to the stack before the endfilter command will determine the success/failure of the filter (Catch 1 XOR Catch 2 will execute accordingly):Also, specifically Guid has the Guid.TryParse method.",
                "or",
                "The accepted answer seems acceptable, except that CodeAnalysis/FxCop will complain about the fact that it's catching a general exception type.Also, it seems the \"is\" operator might degrade performance slightly.CA1800: Do not cast unnecessarily says to \"consider testing the result of the 'as' operator instead\", but if you do that, you'll be writing more code than if you catch each exception separately.Anyhow, here's what I would do:",
                "in C# 6 the recommended approach is to use Exception Filters, here is an example:",
                "This is a variant of Matt's answer (I feel that this is a bit cleaner)...use a method:Any other exceptions will be thrown and the code WebId = Guid.Empty; won't be hit. If you don't want other exceptions to crash your program, just add this AFTER the other two catches:",
                "Joseph Daigle's Answer is a good solution, but I found the following structure to be a bit tidier and less error prone.There are a few advantages of inverting the expression:It can even be compacted to a single line (though not very pretty)Edit: \nThe exception filtering in C# 6.0 will make the syntax a bit cleaner and comes with a number of other benefits over any current solution. (most notably leaving the stack unharmed)Here is how the same problem would look using C# 6.0 syntax:",
                "@MichealSlightly revised version of your code:String comparisons are ugly and slow.",
                "How about",
                "What is in the link doesn't answer your question directly, but it's trivial to extend it to look like:(Basically provide another empty Catch overload which returns itself)The bigger question to this is why. I do not think the cost outweighs the gain here :)",
                "Update 2015-12-15: See https://stackoverflow.com/a/22864936/1718702 for C#6. It's a cleaner and now standard in the language.Geared for people that want a more elegant solution to catch once and filter exceptions, I use an extension method as demonstrated below.I already had this extension in my library, originally written for other purposes, but it worked just perfectly for type checking on exceptions.  Plus, imho, it looks cleaner than a bunch of || statements.  Also, unlike the accepted answer, I prefer explicit exception handling so ex is ... had undesireable behaviour as derrived classes are assignable to there parent types).UsageIsAnyOf.cs Extension (See Full Error Handling Example for Dependancies)Full Error Handling Example (Copy-Paste to new Console app)Two Sample NUnit Unit TestsMatching behaviour for Exception types is exact (ie. A child IS NOT a match for any of its parent types).",
                "Since I felt like these answers just touched the surface, I attempted to dig a bit deeper.So what we would really want to do is something that doesn't compile, say:The reason we want this is because we don't want the exception handler to catch things that we need later on in the process. Sure, we can catch an Exception and check with an 'if' what to do, but let's be honest, we don't really want that. (FxCop, debugger issues, uglyness)So why won't this code compile - and how can we hack it in such a way that it will?If we look at the code, what we really would like to do is forward the call. However, according to the MS Partition II, IL exception handler blocks won't work like this, which in this case makes sense because that would imply that the 'exception' object can have different types.Or to write it in code, we ask the compiler to do something like this (well it's not entirely correct, but it's the closest possible thing I guess):The reason that this won't compile is quite obvious: what type and value would the '$exception' object have (which are here stored in the variables 'e')? The way we want the compiler to handle this is to note that the common base type of both exceptions is 'Exception', use that for a variable to contain both exceptions, and then handle only the two exceptions that are caught. The way this is implemented in IL is as 'filter', which is available in VB.Net.To make it work in C#, we need a temporary variable with the correct 'Exception' base type. To control the flow of the code, we can add some branches. Here goes:The obvious disadvantages for this are that we cannot re-throw properly, and -well let's be honest- that it's quite the ugly solution. The uglyness can be fixed a bit by performing branch elimination, which makes the solution slightly better:That leaves just the 're-throw'. For this to work, we need to be able to perform the handling inside the 'catch' block - and the only way to make this work is by an catching 'Exception' object.At this point, we can add a separate function that handles the different types of Exceptions using overload resolution, or to handle the Exception. Both have disadvantages. To start, here's the way to do it with a helper function:And the other solution is to catch the Exception object and handle it accordingly. The most literal translation for this, based on the context above is this:So to conclude:",
                "This is a classic problem every C# developer faces eventually.Let me break your question into 2 questions.  The first,Can I catch multiple exceptions at once?In short, no.Which leads to the next question,How do I avoid writing duplicate code given that I can't catch multiple exception types in the same catch() block?Given your specific sample, where the fall-back value is cheap to construct, I like to follow these steps:So the code looks like:If any exception is thrown, then WebId is never set to the half-constructed value, and remains Guid.Empty.If constructing the fall-back value is expensive, and resetting a value is much cheaper, then I would move the reset code into its own function:",
                "Note that I did find one way to do it, but this looks more like material for The Daily WTF:",
                "So you\u00b4re repeating lots of code within every exception-switch? Sounds like extracting a method would be god idea, doesn\u00b4t it?So your code comes down to this:I wonder why no-one noticed that code-duplication.From C#6 you furthermore have the exception-filters as already mentioned by others. So you can modify the code above to this:",
                "Wanted to added my short answer to this already long thread.  Something that hasn't been mentioned is the order of precedence of the catch statements, more specifically you need to be aware of the scope of each type of exception you are trying to catch.For example if you use a \"catch-all\" exception as Exception it will preceed all other catch statements and you will obviously get compiler errors however if you reverse the order you can chain up your catch statements (bit of an anti-pattern I think) you can put the catch-all Exception type at the bottom and this will be capture any exceptions that didn't cater for higher up in your try..catch block:I highly recommend folks review this MSDN document:Exception Hierarchy",
                "Maybe try to keep your code simple such as putting the common code in a method, as you would do in any other part of the code that is not inside a catch clause?E.g.:Just how I would do it, trying to find the simple is beautiful pattern",
                "It is worth mentioning here. You can respond to the multiple combinations (Exception error and exception.message).I ran into a use case scenario when trying to cast control object in a datagrid, with either content as TextBox, TextBlock or CheckBox. In this case the returned Exception was the same, but the message varied.",
                "I want to suggest shortest answer (one more functional style):For this you need to create several \"Catch\" method overloads, similar to System.Action:and so on as many as you wish. But you need to do it once and you can use it in all your projects (or, if you created a nuget package we could use it too).And CatchMany implementation:p.s. I haven't put null checks for code simplicity, consider to add parameter validations.p.s.2 \nIf you want to return a value from the catch, it's necessary to do same Catch methods, but with returns and Func instead of Action in parameters.",
                "In c# 6.0,Exception Filters is improvements for exception handling"
            ]
        },
        {
            "tag": "using_directives",
            "patterns": [
                "Should 'using' directives be inside or outside the namespace?", "using directives", "namespaces", "using directives in namespaces"
            ],
            "responses": [
                "There is actually a (subtle) difference between the two. Imagine you have the following code in File1.cs:Now imagine that someone adds another file (File2.cs) to the project that looks like this:The compiler searches Outer before looking at those using directives outside the namespace, so it finds Outer.Math instead of System.Math. Unfortunately (or perhaps fortunately?), Outer.Math has no PI member, so File1 is now broken.This changes if you put the using inside your namespace declaration, as follows:Now the compiler searches System before searching Outer, finds System.Math, and all is well.Some would argue that Math might be a bad name for a user-defined class, since there's already one in System; the point here is just that there is a difference, and it affects the maintainability of your code.It's also interesting to note what happens if Foo is in namespace Outer, rather than Outer.Inner. In that case, adding Outer.Math in File2 breaks File1 regardless of where the using goes. This implies that the compiler searches the innermost enclosing namespace before it looks at any using directive.",
                "This thread already has some great answers, but I feel I can bring a little more detail with this additional answer.First, remember that a namespace declaration with periods, like:is entirely equivalent to:If you wanted to, you could put using directives on all of these levels. (Of course, we want to have usings in only one place, but it would be legal according to the language.)The rule for resolving which type is implied, can be loosely stated like this: First search the inner-most \"scope\" for a match, if nothing is found there go out one level to the next scope and search there, and so on, until a match is found. If at some level more than one match is found, if one of the types are from the current assembly, pick that one and issue a compiler warning. Otherwise, give up (compile-time error).Now, let's be explicit about what this means in a concrete example with the two major conventions.(1) With usings outside:In the above case, to find out what type Ambiguous is, the search goes in this order:The other convention:(2) With usings inside:Now, search for the type Ambiguous goes in this order:(Note that MyCorp.TheProduct was a part of \"3.\" and was therefore not needed between \"4.\" and \"5.\".)Concluding remarksNo matter if you put the usings inside or outside the namespace declaration, there's always the possibility that someone later adds a new type with identical name to one of the namespaces which have higher priority.Also, if a nested namespace has the same name as a type, it can cause problems.It is always dangerous to move the usings from one location to another because the search hierarchy changes, and another type may be found. Therefore, choose one convention and stick to it, so that you won't have to ever move usings.Visual Studio's templates, by default, put the usings outside of the namespace (for example if you make VS generate a new class in a new file).One (tiny) advantage of having usings outside is that you can then utilize the using directives for a global attribute, for example [assembly: ComVisible(false)] instead of [assembly: System.Runtime.InteropServices.ComVisible(false)].Update about file-scoped namespace declarationsSince C# 10.0 (from 2021), you can avoid indentation and use either (convention 1, usings outside):or (convention 2, usings inside):But the same considerations as before apply.",
                "Putting it inside the namespaces makes the declarations local to that namespace for the file (in case you have multiple namespaces in the file) but if you only have one namespace per file then it doesn't make much of a difference whether they go outside or inside the namespace.",
                "According to Hanselman - Using Directive and Assembly Loading... and other such articles there is technically no difference.My preference is to put them outside of namespaces.",
                "According the to StyleCop Documentation:SA1200: UsingDirectivesMustBePlacedWithinNamespaceCause \nA C# using directive is placed outside of a namespace element.Rule Description \nA violation of this rule occurs when a using directive or a using-alias directive is placed outside of a namespace element, unless the file does not contain any namespace elements.For example, the following code would result in two violations of this rule.The following code, however, would not result in any violations of this rule:This code will compile cleanly, without any compiler errors. However, it is unclear which version of the Guid type is being allocated. If the using directive is moved inside of the namespace, as shown below, a compiler error will occur:The code fails on the following compiler error, found on the line containing Guid g = new Guid(\"hello\");CS0576: Namespace 'Microsoft.Sample' contains a definition conflicting with alias 'Guid'The code creates an alias to the System.Guid type called Guid, and also creates its own type called Guid with a matching constructor interface. Later, the code creates an instance of the type Guid. To create this instance, the compiler must choose between the two different definitions of Guid. When the using-alias directive is placed outside of the namespace element, the compiler will choose the local definition of Guid defined within the local namespace, and completely ignore the using-alias directive defined outside of the namespace. This, unfortunately, is not obvious when reading the code.When the using-alias directive is positioned within the namespace, however, the compiler has to choose between two different, conflicting Guid types both defined within the same namespace. Both of these types provide a matching constructor. The compiler is unable to make a decision, so it flags the compiler error.Placing the using-alias directive outside of the namespace is a bad practice because it can lead to confusion in situations such as this, where it is not obvious which version of the type is actually being used. This can potentially lead to a bug which might be difficult to diagnose.Placing using-alias directives within the namespace element eliminates this as a source of bugs.Placing multiple namespace elements within a single file is generally a bad idea, but if and when this is done, it is a good idea to place all using directives within each of the namespace elements, rather than globally at the top of the file. This will scope the namespaces tightly, and will also help to avoid the kind of behavior described above.It is important to note that when code has been written with using directives placed outside of the namespace, care should be taken when moving these directives within the namespace, to ensure that this is not changing the semantics of the code. As explained above, placing using-alias directives within the namespace element allows the compiler to choose between conflicting types in ways that will not happen when the directives are placed outside of the namespace.How to Fix Violations\nTo fix a violation of this rule, move all using directives and using-alias directives within the namespace element.",
                "There is an issue with placing using statements inside the namespace when you wish to use aliases. The alias doesn't benefit from the earlier using statements and has to be fully qualified.Consider:versus:This can be particularly pronounced if you have a long-winded alias such as the following (which is how I found the problem):With using statements inside the namespace, it suddenly becomes:Not pretty.",
                "One wrinkle I ran into (that isn't covered in other answers):Suppose you have these namespaces:When you use using Something.Other outside of a namespace Parent, it refers to the first one (Something.Other).However if you use it inside of that namespace declaration, it refers to the second one (Parent.Something.Other)!There is a simple solution: add the \"global::\" prefix: docs",
                "Another subtlety that I don't believe has been covered by the other answers is for when you have a class and namespace with the same name.When you have the import inside the namespace then it will find the class. If the import is outside the namespace then the import will be ignored and the class and namespace have to be fully qualified.",
                "As Jeppe Stig Nielsen said, this thread already has great answers, but I thought this rather obvious subtlety was worth mentioning too.using directives specified inside namespaces can make for shorter code since they don't need to be fully qualified as when they're specified on the outside.The following example works because the types Foo and Bar are both in the same global namespace, Outer.Presume the code file Foo.cs:And Bar.cs:That may omit the outer namespace in the using directive, for short:",
                "The technical reasons are discussed in the answers and I think that it comes to the personal preferences in the end since the difference is not that big and there are tradeoffs for both of them. Visual Studio's default template for creating .cs files use using directives outside of namespaces e.g.One can adjust stylecop to check using directives outside of namespaces through adding stylecop.json file in the root of the project file with the following:You can create this config file in solution level and add it to your projects as 'Existing Link File' to share the config across all of your projects too.",
                "As a rule, external using directives (System and Microsoft namespaces for example) should be placed outside the namespace directive.  They are defaults that should be applied in all cases unless otherwise specified.  This should include any of your own organization's internal libraries that are not part of the current project, or using directives that reference other primary namespaces in the same project.  Any using directives that reference other modules in the current project and namespace should be placed inside the namespace directive.  This serves two specific functions:The latter reason is significant.  It means that it's harder to introduce an ambiguous reference issue that can be introduced by a change no more significant than refactoring code.  That is to say, you move a method from one file to another and suddenly a bug shows up that wasn't there before.  Colloquially, a 'heisenbug' - historically fiendishly difficult to track down.",
                "Placing the using directives inside the namespace declaration is an application of the well-known best programming practice of declaring everything in the smallest scope possible.If best programming practices are second nature to you, then you do things like that automatically.This might be the best reason for putting your using directives inside the namespace declaration, regardless of (borderline) technical (borderline) merits mentioned elsewhere;  It's as simple as that.Placing using directives inside the namespace avoids unnecessary repetition and makes our declarations more terse.This is unnecessarily terse:This is sweet and to the point:",
                "It is a better practice if those default using i.e. \"references\" used in your source solution should be outside the namespaces and those that are \"new added reference\" is a good practice is you should put it inside the namespace. This is to distinguish what references are being added."
            ]
        },
        {
            "tag": "byte_representation",
            "patterns": [
                "How do I get a consistent byte representation of strings in C# without manually specifying an encoding?", "byte representation"
            ],
            "responses": [
                "Contrary to the answers here, you DON'T need to worry about encoding if the bytes don't need to be interpreted!Like you mentioned, your goal is, simply, to \"get what bytes the string has been stored in\".\n(And, of course, to be able to re-construct the string from the bytes.)For those goals, I honestly do not understand why people keep telling you that you need the encodings. You certainly do NOT need to worry about encodings for this.Just do this instead:As long as your program (or other programs) don't try to interpret the bytes somehow, which you obviously didn't mention you intend to do, then there is nothing wrong with this approach! Worrying about encodings just makes your life more complicated for no real reason.Additional benefit to this approach: It doesn't matter if the string contains invalid characters, because you can still get the data and reconstruct the original string anyway!It will be encoded and decoded just the same, because you are just looking at the bytes.If you used a specific encoding, though, it would've given you trouble with encoding/decoding invalid characters.",
                "It depends on the encoding of your string (ASCII, UTF-8, ...).For example:A small sample why encoding matters:ASCII simply isn't equipped to deal with special characters.Internally, the .NET framework uses UTF-16 to represent strings, so if you simply want to get the exact bytes that .NET uses, use System.Text.Encoding.Unicode.GetBytes (...).See Character Encoding in the .NET Framework (MSDN) for more information.",
                "The accepted answer is very, very complicated. Use the included .NET classes for this:Don't reinvent the wheel if you don't have to...",
                "This is a popular question. It is important to understand what the question author is asking, and that it is different from what is likely the most common need. To discourage misuse of the code where it is not needed, I've answered the latter first.Every string has a character set and encoding. When you convert a System.String object to an array of System.Byte you still have a character set and encoding. For most usages, you'd know which character set and encoding you need and .NET makes it simple to \"copy with conversion.\" Just choose the appropriate Encoding class.The conversion may need to handle cases where the target character set or encoding doesn't support a character that's in the source. You have some choices: exception, substitution, or skipping. The default policy is to substitute a '?'.Clearly, conversions are not necessarily lossless!Note: For System.String the source character set is Unicode.The only confusing thing is that .NET uses the name of a character set for the name of one particular encoding of that character set. Encoding.Unicode should be called Encoding.UTF16.That's it for most usages. If that's what you need, stop reading here. See the fun Joel Spolsky article if you don't understand what encoding is.Now, the question author asks is, \"Every string is stored as an array of bytes, right? Why can't I simply have those bytes?\"He doesn't want any conversion.From the C# spec:Character and string processing in C# uses Unicode encoding. The char\ntype represents a UTF-16 code unit, and the string type represents a\nsequence of UTF-16 code units.So, we know that if we ask for the null conversion (i.e., from UTF-16 to UTF-16), we'll get the desired result:But to avoid the mention of encodings, we must do it another way. If an intermediate data type is acceptable, there is a conceptual shortcut for this:That doesn't get us the desired datatype but Mehrdad's answer shows how to convert this Char array to a Byte array using BlockCopy. However, this copies the string twice! And, it too explicitly uses encoding-specific code: the datatype System.Char.The only way to get to the actual bytes the String is stored in is to use a pointer. The fixed statement allows taking the address of values. From the C# spec:[For] an expression of type string, ... the initializer computes the\naddress of the first character in the string.To do so, the compiler writes code skipping over the other parts of the string object with RuntimeHelpers.OffsetToStringData. So, to get the raw bytes, just create a pointer to the string and copy the number of bytes needed.As @CodesInChaos pointed out, the result depends on the endianness of the machine. But the question author is not concerned with that.",
                "You need to take the encoding into account, because 1 character could be represented by 1 or more bytes (up to about 6), and different encodings will treat these bytes differently.Joel has a posting on this:The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)",
                "The first part of your question (how to get the bytes) was already answered by others: look in the System.Text.Encoding namespace.I will address your follow-up question: why do you need to pick an encoding?  Why can't you get that from the string class itself?The answer is in two parts.First of all, the bytes used internally by the string class don't matter, and whenever you assume they do you're likely introducing a bug.If your program is entirely within the .Net world then you don't need to worry about getting byte arrays for strings at all, even if you're sending data across a network. Instead, use .Net Serialization to worry about transmitting the data.  You don't worry about the actual bytes anymore: the Serialization formatter does it for you.On the other hand, what if you are sending these bytes somewhere that you can't guarantee will pull in data from a .Net serialized stream? In this case, you definitely do need to worry about encoding, because obviously, this external system cares. So again, the internal bytes used by the string don't matter: you need to pick an encoding so you can be explicit about this encoding on the receiving end, even if it's the same encoding used internally by .Net.I understand that in this case, you might prefer to use the actual bytes stored by the string variable in memory where possible, with the idea that it might save some work creating your byte stream. However, I put it to you it's just not important compared to making sure that your output is understood at the other end, and to guarantee that you must be explicit with your encoding. Additionally, if you really want to match your internal bytes, you can already just choose the Unicode encoding, and get those performance savings.This brings me to the second part... picking the Unicode encoding is telling .Net to use the underlying bytes. You do need to pick this encoding because when some new-fangled Unicode-Plus comes out the .Net runtime needs to be free to use this newer, better encoding model without breaking your program. But, for the moment (and foreseeable future), just choosing the Unicode encoding gives you what you want.It's also important to understand your string has to be rewritten to wire, and that involves at least some translation of the bit-pattern even when you use a matching encoding. The computer needs to account for things like Big vs Little Endian, network byte order, packetization, session information, etc.",
                "Just to demonstrate that Mehrdrad's sound answer works, his approach can even persist the unpaired surrogate characters(of which many had leveled against my answer, but of which everyone are equally guilty of, e.g. System.Text.Encoding.UTF8.GetBytes, System.Text.Encoding.Unicode.GetBytes; those encoding methods can't persist the high surrogate characters d800 for example, and those just merely replace high surrogate characters with value fffd ) :Output:Try that with System.Text.Encoding.UTF8.GetBytes or System.Text.Encoding.Unicode.GetBytes, they will merely replace high surrogate characters with value fffdEvery time there's a movement in this question, I'm still thinking of a serializer(be it from Microsoft or from 3rd party component) that can persist strings even it contains unpaired surrogate characters; I google this every now and then: serialization unpaired surrogate character .NET. This doesn't make me lose any sleep, but it's kind of annoying when every  now and then there's somebody commenting on my answer that it's flawed, yet their answers are equally flawed when it comes to unpaired surrogate characters.Darn, Microsoft should have just used System.Buffer.BlockCopy in its BinaryFormatter \u30c4\u8c22\u8c22\uff01",
                "Try this, a lot less code:",
                "Well, I've read all answers and they were about using encoding or one about serialization that drops unpaired surrogates.It's bad when the string, for example, comes from SQL Server where it was built from a byte array storing, for example, a password hash. If we drop anything from it, it'll store an invalid hash, and if we want to store it in XML, we want to leave it intact (because the XML writer drops an exception on any unpaired surrogate it finds).So I use Base64 encoding of byte arrays in such cases, but hey, on the Internet there is only one solution to this in C#, and it has bug in it and is only one way, so I've fixed the bug and written back procedure. Here you are, future googlers:",
                "Also please explain why encoding should be taken into consideration. \n  Can't I simply get what bytes the string has been stored in?\n  Why this dependency on encoding?!!!Because there is no such thing as \"the bytes of the string\".A string (or more generically, a text) is composed of characters: letters, digits, and other symbols. That's all. Computers, however, do not know anything about characters; they can only handle bytes. Therefore, if you want to store or transmit text by using a computer, you need to transform the characters to bytes. How do you do that? Here's where encodings come to the scene.An encoding is nothing but a convention to translate logical characters to physical bytes. The simplest and best known encoding is ASCII, and it is all you need if you write in English. For other languages you will need more complete encodings, being any of the Unicode flavours the safest choice nowadays.So, in short, trying to \"get the bytes of a string without using encodings\" is as impossible as \"writing a text without using any language\".By the way, I strongly recommend you (and anyone, for that matter) to read this small piece of wisdom: The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)",
                "C# to convert a string to a byte array:",
                "You can use the following code for conversion between string and byte array.",
                "With the advent of Span<T> released with C# 7.2, the canonical technique to capture the underlying memory representation of a string into a managed byte array is:Converting it back should be a non-starter because that means you are in fact interpreting the data somehow, but for the sake of completeness:The names NonPortableCast and DangerousGetPinnableReference should further the argument that you probably shouldn't be doing this.Note that working with Span<T> requires installing the System.Memory NuGet package.Regardless, the actual original question and follow-up comments imply that the underlying memory is not being \"interpreted\" (which I assume means is not modified or read beyond the need to write it as-is), indicating that some implementation of the Stream class should be used instead of reasoning about the data as strings at all.",
                "I'm not sure, but I think the string stores its info as an array of Chars, which is inefficient with bytes.  Specifically, the definition of a Char is \"Represents a Unicode character\".take this example sample:Take note that the Unicode answer is 14 bytes in both instances, whereas the UTF-8 answer is only 9 bytes for the first, and only 7 for the second.So if you just want the bytes used by the string, simply use Encoding.Unicode, but it will be inefficient with storage space.",
                "The key issue is that a glyph in a string takes 32 bits (16 bits for a character code) but a byte only has 8 bits to spare.  A one-to-one mapping doesn't exist unless you restrict yourself to strings that only contain ASCII characters.  System.Text.Encoding has lots of ways to map a string to byte[], you need to pick one that avoids loss of information and that is easy to use by your client when she needs to map the byte[] back to a string.Utf8 is a popular encoding, it is compact and not lossy.",
                "Use:The result is:",
                "Fastest wayEDIT\nas Makotosan commented this is now the best way:",
                "The closest approach to the OP's question is Tom Blodget's, which actually goes into the object and extracts the bytes.  I say closest because it depends on implementation of the String Object.Sure, but that's where the fundamental error in the question arises.  The String is an object which could have an interesting data structure.  We already know it does, because it allows unpaired surrogates to be stored.  It might store the length.  It might keep a pointer to each of the 'paired' surrogates allowing quick counting.  Etc.  All of these extra bytes are not part of the character data.What you want is each character's bytes in an array.  And that is where 'encoding' comes in.  By default you will get UTF-16LE.  If you don't care about the bytes themselves except for the round trip then you can choose any encoding including the 'default', and convert it back later (assuming the same parameters such as what the default encoding was, code points, bug fixes, things allowed such as unpaired surrogates, etc.But why leave the 'encoding' up to magic?  Why not specify the encoding so that you know what bytes you are gonna get?Encoding (in this context) simply means the bytes that represent your string.  Not the bytes of the string object.  You wanted the bytes the string has been stored in -- this is where the question was asked naively.  You wanted the bytes of string in a contiguous array that represent the string, and not all of the other binary data that a string object may contain.Which means how a string is stored is irrelevant.  You want a string \"Encoded\" into bytes in a byte array.I like Tom Bloget's answer because he took you towards the 'bytes of the string object' direction.  It's implementation dependent though, and because he's peeking at internals it might be difficult to reconstitute a copy of the string.Mehrdad's response is wrong because it is misleading at the conceptual level.  You still have a list of bytes, encoded.  His particular solution allows for unpaired surrogates to be preserved -- this is implementation dependent.  His particular solution would not produce the string's bytes accurately if GetBytes returned the string in UTF-8 by default.I've changed my mind about this (Mehrdad's solution) -- this isn't getting the bytes of the string; rather it is getting the bytes of the character array that was created from the string.  Regardless of encoding, the char datatype in c# is a fixed size.  This allows a consistent length byte array to be produced, and it allows the character array to be reproduced based on the size of the byte array.  So if the encoding were UTF-8, but each char was 6 bytes to accommodate the largest utf8 value, it would still work.  So indeed -- encoding of the character does not matter.But a conversion was used -- each character was placed into a fixed size box (c#'s character type).  However what that representation is does not matter, which is technically the answer to the OP.  So -- if you are going to convert anyway...  Why not 'encode'?",
                "How do I convert a string to a byte[] in .NET (C#) without manually specifying a specific encoding?A string in .NET represents text as a sequence of UTF-16 code units, so the bytes are encoded in memory in UTF-16 already.Mehrdad's AnswerYou can use Mehrdad's answer, but it does actually use an encoding because chars are UTF-16.  It calls ToCharArray which looking at the source creates a char[] and copies the memory to it directly.  Then it copies the data to a byte array that is also allocated.  So under the hood it is copying the underlying bytes twice and allocating a char array that is not used after the call.Tom Blodget's AnswerTom Blodget's answer is 20-30% faster than Mehrdad since it skips the intermediate step of allocating a char array and copying the bytes to it, but it requires you compile with the /unsafe option.  If you absolutely do not want to use encoding, I think this is the way to go.  If you put your encryption login inside the fixed block, you don't even need to allocate a separate byte array and copy the bytes to it.Also, why should encoding be taken into consideration? Can't I simply get what bytes the string has been stored in? Why is there a dependency on character encodings?Because that is the proper way to do it.  string is an abstraction.Using an encoding could give you trouble if you have 'strings' with invalid characters, but that shouldn't happen.  If you are getting data into your string with invalid characters you are doing it wrong.  You should probably be using a byte array or a Base64 encoding to start with.If you use System.Text.Encoding.Unicode, your code will be more resilient.  You don't have to worry about the endianness of the system your code will be running on.  You don't need to worry if the next version of the CLR will use a different internal character encoding.I think the question isn't why you want to worry about the encoding, but why you want to ignore it and use something else.  Encoding is meant to represent the abstraction of a string in a sequence of bytes.  System.Text.Encoding.Unicode will give you a little endian byte order encoding and will perform the same on every system, now and in the future.",
                "You can use following code to convert a string to a byte array in .NET",
                "If you really want a copy of the underlying bytes of a string, you can use a function like the one that follows. However, you shouldn't please read on to find out why.This function will get you a copy of the bytes underlying your string, pretty quickly. You'll get those bytes in whatever way they are encoding on your system. This encoding is almost certainly UTF-16LE but that is an implementation detail you shouldn't have to care about.It would be safer, simpler and more reliable to just call,In all likelihood this will give the same result, is easier to type, and the bytes will round-trip, as well as a byte representation in Unicode can, with a call to",
                "Here is my unsafe implementation of String to Byte[] conversion:It's way faster than the accepted anwser's one, even if not as elegant as it is.\nHere are my Stopwatch benchmarks over 10000000 iterations:In order to use it, you have to tick \"Allow Unsafe Code\" in your project build properties.\nAs per .NET Framework 3.5, this method can also be used as String extension:",
                "Upon being asked what you intend to do with the bytes, you responded:I'm going to encrypt it. I can encrypt it without converting but I'd still like to know why encoding comes to play here. Just give me the bytes is what I say.Regardless of whether you intend to send this encrypted data over the network, load it back into memory later, or stream it to another process, you are clearly intending to decrypt it at some point. In that case, the answer is that you're defining a communication protocol. A communication protocol should not be defined in terms of implementation details of your programming language and its associated runtime. There are several reasons for this:For communicating (either with a completely disparate process or with the same program in the future), you need to define your protocol strictly to minimize the difficulty of working with it or accidentally creating bugs. Depending on .NET's internal representation is not a strict, clear, or even guaranteed to be consistent definition. A standard encoding is a strict definition that will not fail you in the future.In other words, you can't satisfy your requirement for consistency without specifying an encoding.You may certainly choose to use UTF-16 directly if you find that your process performs significantly better since .NET uses it internally or for any other reason, but you need to choose that encoding explicitly and perform those conversions explicitly in your code rather than depending on .NET's internal implementation.So choose an encoding and use it:As you can see, it's also actually less code to just use the built in encoding objects than to implement your own reader/writer methods.",
                "The string can be converted to byte array in few different ways, due to the following fact: .NET supports Unicode, and Unicode standardizes several difference encodings called UTFs. They have different lengths of byte representation but are equivalent in that sense that when a string is encoded, it can be coded back to the string, but if the string is encoded with one UTF and decoded in the assumption of different UTF if can be screwed up.Also, .NET supports non-Unicode encodings, but they are not valid in general case (will be valid only if a limited sub-set of Unicode code point is used in an actual string, such as ASCII). Internally, .NET supports UTF-16, but for stream representation, UTF-8 is usually used. It is also a standard-de-facto for Internet.Not surprisingly, serialization of string into an array of byte and deserialization is supported by the class System.Text.Encoding, which is an abstract class; its derived classes support concrete encodings: ASCIIEncoding and four UTFs (System.Text.UnicodeEncoding supports UTF-16)Ref this link.For serialization to an array of bytes using System.Text.Encoding.GetBytes. For the inverse operation use System.Text.Encoding.GetChars. This function returns an array of characters, so to get a string, use a string constructor System.String(char[]).\nRef this page.Example:",
                "This is because, as Tyler so aptly said, \"Strings aren't pure data. They also have information.\" In this case, the information is an encoding that was assumed when the string was created.This is based off of OP's comment on his own question, and is the correct question if I understand OP's hints at the use-case.Storing binary data in strings is probably the wrong approach because of the assumed encoding mentioned above! Whatever program or library stored that binary data in a string (instead of a byte[] array which would have been more appropriate) has already lost the battle before it has begun. If they are sending the bytes to you in a REST request/response or anything that must transmit strings, Base64 would be the right approach.Everybody else answered this incorrect question incorrectly.If the string looks good as-is, just pick an encoding (preferably one starting with UTF), use the corresponding System.Text.Encoding.???.GetBytes() function, and tell whoever you give the bytes to which encoding you picked.",
                "If you are using .NET Core or System.Memory for .NET Framework, there is a very efficient marshaling mechanism available via Span<T> and Memory<T> that can effectively reinterpret string memory as a span of bytes. Once you have a span of bytes you are free to marshal back to another type, or copy the span to an array for serialization.To summarize what others have said:In C++ this is roughly equivalent to reinterpret_cast, and C this is roughly equivalent to a cast to the system's word type (char).In recent versions of the .NET Core Runtime (CoreCLR), operations on spans effectively invoke compiler intrinsics and various optimizations that can sometimes eliminate bounds checking, leading to exceptional performance while preserving memory safety, assuming that your memory was allocated by the CLR and the spans are not derived from pointers from an unmanaged memory allocator.This uses a mechanism supported by the CLR that returns ReadOnlySpan<char> from a string; Additionally, this span does not necessarily encompass the complete internal string layout. ReadOnlySpan<T> implies that you must create a copy if you need to perform mutation, as strings are immutable.",
                "Simply use this:"
            ]
        },
        {
            "tag": "generate_random",
            "patterns": [
                "How do I generate a random integer in C#?", "Random integers", "Generate random integers"
            ],
            "responses": [
                "The Random class is used to create random numbers. (Pseudo-random that is of course.).Example:If you are going to create more than one random number, you should keep the Random instance and reuse it. If you create new instances too close in time, they will produce the same series of random numbers as the random generator is seeded from the system clock.",
                "The question looks very simple but the answer is  bit complicated. If you see almost everyone has suggested to use the Random class and some have suggested to use the RNG crypto class. But then when to choose what.For that we need to first understand the term RANDOMNESS and the philosophy behind it.I would encourage you to watch this video that I made which goes in depth in the philosophy of RANDOMNESS using C# https://www.youtube.com/watch?v=tCYxc-2-3fYFirst thing let us understand the philosophy of RANDOMNESS.  When we tell a person to choose between RED,  GREEN and YELLOW  what happens internally. What makes a person choose RED or YELLOW or GREEN?Some initial thought goes into the persons mind which decides his choice, it can be favorite color , lucky color and so on. In other words some initial trigger which we term in RANDOM as SEED.This SEED is the beginning point, the trigger which instigates him to select the RANDOM value.Now if a SEED is easy to guess then those kind of random numbers are termed as PSEUDO and when a seed is difficult to guess those random numbers are termed  SECURED random numbers.For example a person chooses is color depending on weather and sound combination then  it would be difficult to guess the initial seed.Now let me make an important statement:-*\u201cRandom\u201d class generates only PSEUDO random number and to generate SECURE random number we need to use \u201cRNGCryptoServiceProvider\u201d class.Random class takes seed values from your CPU clock which is very much predictable.  So in other words RANDOM class of C# generates pseudo random numbers , below is the code for the same.While the RNGCryptoServiceProvider class uses OS entropy to generate seeds. OS entropy is a random value which is generated using sound, mouse click, and keyboard timings, thermal temp etc. Below goes the code for the same.To understand OS entropy see this video of mine starting at 14:30 https://www.youtube.com/watch?v=tCYxc-2-3fY where the logic of OS entropy is explained. So putting in simple words RNG Crypto generates SECURE random numbers.",
                "Every time you do new Random() it is initialized. This means that in a tight loop you get the same value lots of times. You should keep a single Random instance and keep using Next on the same instance.",
                "Beware that new Random() is seeded on current timestamp.If you want to generate just one number you can use:new Random().Next( int.MinValue, int.MaxValue )For more information, look at the Random class, though please note:However, because the clock has finite resolution, using the parameterless constructor to create different Random objects in close succession creates random number generators that produce identical sequences of random numbersSo do not use this code to generate a series of random number.",
                "I wanted to add a cryptographically secure version:RNGCryptoServiceProvider Class (MSDN or dotnetperls)It implements IDisposable.",
                "create a Random objectand use ityou don't have to initialize new Random() every time you need a random number, initiate one Random then use it as many times as you need inside a loop or whatever",
                "You could use Jon Skeet's StaticRandom method inside the MiscUtil class library that he built for a pseudo-random number.",
                "I've tried all of these solutions excluding the COBOL answer... lolNone of these solutions were good enough. I needed randoms in a fast for int loop and I was getting tons of duplicate values even in very wide ranges. After settling for kind of random results far too long I decided to finally tackle this problem once and for all.It's all about the seed.I create a random integer by parsing out the non-digits from Guid, then I use that to instantiate my Random class.Update: Seeding isn't necessary if you instantiate the Random class once. So it'd be best to create a static class and call a method off that.Then you can use the static class like so..I admit I like this approach better.",
                "The numbers generated by the inbuilt Random class (System.Random) generates pseudo random numbers.If you want true random numbers, the closest we can get is \"secure Pseudo Random Generator\" which can be generated by using the Cryptographic classes in C# such as RNGCryptoServiceProvider.Even so, if you still need true random numbers you will need to use an external source such as devices accounting for radioactive decay as a seed for an random number generator. Since, by definition, any number generated by purely algorithmic means cannot be truly random.",
                "Modified answer from here.If you have access to an Intel Secure Key compatible CPU, you can generate real random numbers and strings using these libraries: https://github.com/JebteK/RdRand and https://www.rdrand.com/Just download the latest version from here, include Jebtek.RdRand and add a using statement for it. Then, all you need to do is this:If you don't have a compatible CPU to execute the code on, just use the RESTful services at rdrand.com. With the RdRandom wrapper library included in your project, you would just need to do this (you get 1000 free calls when you signup):",
                "Just as a note for future reference.If you're using .NET Core, multiple Random instances aren't as dangerous as before. I'm aware that this question is from 2010, but since this question is old but has some attraction, I think it's a good thing to document the change.You may refer to this question I made a while back:Did Microsoft change Random default seed?Basically, they have changed the default seed from Environment.TickCount to Guid.NewGuid().GetHashCode(), so if you create 2 instances of Random it shouldn't display the same numbers (1:4 billion).You can see the file diffs from .NET Framework/.NET Core (2.0.0+) here: https://github.com/dotnet/coreclr/pull/2192/commits/9f6a0b675e5ac0065a268554de49162c539ff66dIt isn't as safe as RNGCryptoServiceProvider, but at least it won't give you weird results.By @Enigmativity:This is now out-of-date. There was a considerable backlash against using Guids. The code is now Interop.GetRandomBytes((byte*)&result, sizeof(int));",
                "As described in other answers, a good secured approach would be to use a secure cryptographic generator. All examples here show the usage of RNGCryptoServiceProvider which is writing a long code compared to the solution I suggest.Use RandomNumberGenerator which is written on top of cryptography API\u2019s. It is as secure as RNGCryptoServiceProvider and same randomness.",
                "This is the class I use. Works like RandomNumber.GenerateRandom(1, 666)",
                "While this is okay:You'd want to control the limit (min and max mumbers) most of the time. So you need to specify where the random number starts and ends.The Next() method accepts two parameters, min and max.So if i want my random number to be between say 5 and 15, I'd just do",
                "I wanted to demonstrate what happens when a new random generator is used every time. Suppose you have two methods or two classes each requiring a random number. And naively you code them like:Do you think you will get two different IDs? NOPEThe solution is to always use a single static random generator. Like this:",
                "Numbers calculated by a computer through a deterministic process, cannot, by definition, be random.If you want a genuine random numbers, the randomness comes from atmospheric noise or radioactive decay.You can try for example RANDOM.ORG (it reduces performance)",
                "For strong random seed I always use CryptoRNG and not Time.",
                "Put whatever values you want in the second parentheses\nmake sure you have set a name by writing prop and double tab to generate the code",
                "If you want a CSRNG to generate random numbers between a min and max, this is for you. It will initialize Random classes with secure random seeds.",
                "I will assume that you want a uniformly distributed random number generator like below. Random number in most of programming language including C# and C++ is not properly shuffled before using them. This means that you will get the same number over and over, which isn't really random.  To avoid to draw the same number over and over, you need a seed. Typically, ticks in time is ok for this task. Remember that you will get the same number over and over if you are using the same seed every time. So try to use varying seed always. Time is a good source for seed because they chage always.if you are looking for random number generator for normal distribution, you might use a Box-Muller transformation. Check the answer by yoyoyoyosef in Random Gaussian Variable Question. Since you want integer, you have to cast double value to integer at the end.Random Gaussian Variables",
                "Sorry, OP indeed requires a random int value, but for the simple purpose to share knowledge if you want a random BigInteger value you can use following statement:",
                "There are a number utility functions or services that are better cached in the same way that System.Random should be, so it lends itself to a generic implementation:To use for random (or similar):",
                "Why not use int randomNumber = Random.Range(start_range, end_range) ?",
                "Use one instance of Random repeatedlyThis article takes a look at why randomness causes so many problems, and how to address them.\nhttp://csharpindepth.com/Articles/Chapter12/Random.aspx",
                "Try these simple steps to create random numbers:Create function:Use the above function in a location where you want to use random numbers. Suppose you want to use it in a text box.0 is min and 999 is max. You can change the values to whatever you want.",
                "I always have methods that generate random numbers which help for various purposes. I hope this may help you too:",
                "Quick and easy for inline,  use bellow code:"
            ]
        },
        {
            "tag": "auto-property",
            "patterns": [
                "What is the best way to give a C# auto-property an initial value?", "What are auto-properties", "auto-property in C#"
            ],
            "responses": [
                "In C# 5 and earlier, to give auto implemented properties an initial value, you have to do it in a constructor.Since C# 6.0, you can specify initial value in-line. The syntax is:DefaultValueAttribute is intended to be used by the VS designer (or any other consumer) to specify a default value, not an initial value. (Even if in designed object, initial value is the default value).At compile time DefaultValueAttribute will not impact the generated IL and it will not be read to initialize the property to that value (see DefaultValue attribute is not working with my Auto Property).Example of attributes that impact the IL are ThreadStaticAttribute, CallerMemberNameAttribute, ...",
                "Edited on 1/2/15C# 6 :With C# 6 you can initialize auto-properties directly (finally!), there are now other answers that describe that.C# 5 and below:Though the intended use of the attribute is not to actually set the values of the properties, you can use reflection to always set them anyway...",
                "When you inline an initial value for a variable it will be done implicitly in the constructor anyway.I would argue that this syntax was best practice in C# up to 5:As this gives you clear control of the order values are assigned.As of C#6 there is a new way:",
                "Sometimes I use this, if I don't want it to be actually set and persisted in my db:Obviously if it's not a string then I might make the object nullable ( double?, int? ) and check if it's null, return a default, or return the value it's set to.Then I can make a check in my repository to see if it's my default and not persist, or make a backdoor check in to see the true status of the backing value, before saving.",
                "You can do it in the Class declaration itself, in the property declaration statements.",
                "Starting with C# 6.0, We can assign default value to auto-implemented properties.We can also create read-only auto implemented property like:See: C# 6: First reactions , Initializers for automatically implemented properties - By Jon Skeet",
                "In Version of C# (6.0) & greater, you can do :For Readonly propertiesFor both Writable & Readable propertiesIn current Version of C# (7.0), you can do : (The snippet rather displays how you can use expression bodied get/set accessors to make is more compact when using with backing fields)",
                "In C# 9.0 was added support of init keyword - very useful and extremly sophisticated way for declaration read-only auto-properties:Declare:~Enjoy~ Use:",
                "In addition to the answer already accepted, for the scenario when you want to define a default property as a function of other properties you can use expression body notation on C#6.0 (and higher) for even more elegant and concise constructs like:You can use the above in the following fashionIn order to be able to use the above \"=>\" notation, the property must be read only, and you do not use the get accessor keyword.Details on MSDN",
                "In C# 6 and above you can simply use the syntax:Note that to have a readonly property simply omit the set, as so:You can also assign readonly auto-properties from the constructor.Prior to this I responded as below.I'd avoid adding a default to the constructor; leave that for dynamic assignments and avoid having two points at which the variable is assigned (i.e. the type default and in the constructor). Typically I'd simply write a normal property in such cases.One other option is to do what ASP.Net does and define defaults via an attribute:http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx",
                "My solution is to use a custom attribute that provides default value property initialization by constant or using property type initializer.To use this attribute it's necessary to inherit a class from special base class-initializer or use a static helper method:Usage example:Output:",
                "little complete sample:",
                "You can simple put like this",
                "In the constructor.  The constructor's purpose is to initialized it's data members.",
                "Have you tried using the DefaultValueAttribute or ShouldSerialize and Reset methods in conjunction with the constructor?  I feel like one of these two methods is necessary if you're making a class that might show up on the designer surface or in a property grid.",
                "Use the constructor because \"When the constructor is finished, Construction should be finished\". properties are like states your classes hold, if you had to initialize a default state, you would do that in your constructor.",
                "To clarify, yes, you need to set default values in the constructor for class derived objects.  You will need to ensure the constructor exists with the proper access modifier for construction where used.  If the object is not instantiated, e.g. it has no constructor (e.g. static methods) then the default value can be set by the field.  The reasoning here is that the object itself will be created only once and you do not instantiate it.@Darren Kopp - good answer, clean, and correct.  And to reiterate, you CAN write constructors for Abstract methods.  You just need to access them from the base class when writing the constructor:Constructor at Base Class:Constructor at Derived / Concrete / Sub-Class:The point here is that the instance variable drawn from the base class may bury your base field name.  Setting the current instantiated object value using \"this.\" will allow you to correctly form your object with respect to the current instance and required permission levels (access modifiers) where you are instantiating it.",
                "This is old now, and my position has changed. I'm leaving the original answer for posterity only.Personally, I don't see the point of making it a property at all if you're not going to do  anything at all beyond the auto-property.  Just leave it as a field.  The encapsulation benefit for these item are just red herrings, because there's nothing behind them to encapsulate.  If you ever need to change the underlying implementation you're still free to refactor them as properties without breaking any dependent code.Hmm... maybe this will be the subject of it's own question later",
                "I know this is an old question, but it came up when I was looking for how to have a default value that gets inherited with the option to override, I came up with",
                "I think this would do it for ya givng SomeFlag a default of false."
            ]
        },
        {
            "tag": "int_from_enum",
            "patterns": [
                "Get int value from enum in C#", "How to get integer from enum", "int from enum"
            ],
            "responses": [
                "Just cast the enum, e.g.The above will work for the vast majority of enums you see in the wild, as the default underlying type for an enum is int.However, as cecilphillip points out, enums can have different underlying types.\nIf an enum is declared as a uint, long, or ulong, it should be cast to the type of the enum; e.g. foryou should use",
                "Since Enums can be any integral type (byte, int, short, etc.), a more robust way to get the underlying integral value of the enum would be to make use of the GetTypeCode method in conjunction with the Convert class:This should work regardless of the underlying integral type.",
                "Declare it as a static class having public constants:And then you can reference it as Question.Role, and it always evaluates to an int or whatever you define it as.",
                "On a related note, if you want to get the int value from System.Enum, then given e here:You can use:The last two are plain ugly. I prefer the first one.",
                "Will result in value == 2.",
                "Example:And in the code behind to get the enum value:orEnums will increment by 1, and you can set the start value. If you don't set the start value it will be assigned as 0 initially.",
                "It's easier than you think - an enum is already an int. It just needs to be reminded:",
                "I have recently converted away from using enums in my code in favour of instead using classes with protected constructors and predefined static instances (thanks to Roelof - C# Ensure Valid Enum Values - Futureproof Method).In light of that, below's how I'd now approach this issue (including implicit conversion to/from int).The advantage of this approach is you get everything you would have from the enum, but your code's now much more flexible, so should you need to perform different actions based on the value of Question, you can put logic into Question itself (i.e. in the preferred OO fashion) as opposed to putting lots of case statements throughout your code to tackle each scenario.NB: Answer updated 2018-04-27 to make use of C# 6 features; i.e. declaration expressions and lambda expression body definitions.  See revision history for original code.  This has the benefit of making the definition a little less verbose; which had been one of the main complaints about this answer's approach.",
                "If you want to get an integer for the enum value that is stored in a variable, for which the type would be Question, to use for example in a method, you can simply do this I wrote in this example:This will change the window title to 4, because the variable Geselecteerd is Talen.Nederlands. If I change it to Talen.Portugees and call the method again, the text will change to 3.",
                "One more way to do it:It will result in:",
                "To ensure an enum value exists and then parse it, you can also do the following.",
                "Use an extension method instead:And the usage is slightly prettier:",
                "...is a fine declaration.You do have to cast the result to int like so:Otherwise, the type is still QuestionType.This level of strictness is the C# way.One alternative is to use a class declaration instead:It's less elegant to declare, but you don't need to cast it in code:Alternatively, you may feel more comfortable with Visual Basic, which caters for this type of expectation in many areas.",
                "Maybe I missed it, but has anyone tried a simple generic extension method?This works great for me. You can avoid the type cast in your API this way but ultimately it results in a change type operation. This is a good case for programming Roslyn to have the compiler make a GetValue<T> method for you.",
                "number should have the value 2.",
                "Use:It will result in value == 2.This is only true if the enum fits inside an int.",
                "You can do this by implementing an extension method to your defined enum type:This simplifies getting the int value of the current enum value:or",
                "Since enums can be declared with multiple primitive types, a generic extension method to cast any enum type can be useful.",
                "The easiest solution I can think of is overloading the Get(int) method like this:where [modifiers] can generally be same as for the Get(int) method. If you can't edit the Questions class or for some reason don't want to, you can overload the method by writing an extension:",
                "My favourite hack with int or smaller enums:For an enumThis,outputsDisclaimer:It doesn't work for enums based on long.",
                "Try this one instead of convert enum to int:",
                "Following is the extension method",
                "You should have used Type Casting as we can use in any other language.If your enum is like this-And you need to cast to an int, then do this-In C#, there are two types of casting:char -> int -> long -> float -> doubledouble -> float -> long -> int -> charMore can be found in here.",
                "The example I would like to suggest \"to get an 'int' value from an enum\", isNow the answer will be 1.",
                "In Visual Basic, it should be:",
                "will give you the a list with all the integer values of the enum :List enumValues = Enum.GetValues(typeof(EnumClass)).Cast().ToList();",
                "I came up with this extension method that includes current language features. By using dynamic, I don't need to make this a generic method and specify the type which keeps the invocation simpler and consistent:"
            ]
        },
        {
            "tag": "DateTime",
            "patterns": [
                "How do I calculate someone's age based on a DateTime type birthday?", "How to find DateTime", "Calculate DateTime", "DateTime"
            ],
            "responses": [
                "An easy to understand and simple solution.However, this assumes you are looking for the western idea of the age and not using East Asian reckoning.",
                "This is a strange way to do it, but if you format the date to yyyymmdd and subtract the date of birth from the current date then drop the last 4 digits you've got the age :)I don't know C#, but I believe this will work in any language.Drop the last 4 digits = 28.C# Code:Or alternatively without all the type conversion in the form of an extension method. Error checking omitted:",
                "Here is a test snippet:Here you have the methods:",
                "The simple answer to this is to apply AddYears as shown below because this is the only native method to add years to the 29th of Feb. of leap years and obtain the correct result of the 28th of Feb. for common years.Some feel that 1th of Mar. is the birthday of leaplings but neither .Net nor any official rule supports this, nor does common logic explain why some born in February should have 75% of their birthdays in another month.Further, an Age method lends itself to be added as an extension to DateTime. By this you can obtain the age in the simplest possible way:int age = birthDate.Age();Now, run this test:The critical date example is this:Birth date: 2000-02-29  Later date: 2011-02-28  Age: 11Output:And for the later date 2012-02-28:",
                "My suggestionThat seems to have the year changing on the right date. (I spot tested up to age 107.)",
                "Another function, not by me but found on the web and refined it a bit:Just two things that come into my mind: What about people from countries that do not use the Gregorian calendar? DateTime.Now is in the server-specific culture I think. I have absolutely zero knowledge about actually working with Asian calendars and I do not know if there is an easy way to convert dates between calendars, but just in case you're wondering about those Chinese guys from the year 4660 :-)",
                "2 Main problems to solve are:1. Calculate Exact age - in years, months, days, etc.2. Calculate Generally perceived age - people usually do not care how old they exactly are, they just care when their birthday in the current year is.Solution for 1 is obvious:Solution for 2 is the one which is not so precise in determing total age, but is perceived as precise by people. People also usually use it, when they calculate their age \"manually\":Notes to 2.:Just one more note ... I would create 2 static overloaded methods for it, one for universal usage, second for usage-friendliness:",
                "The best way that I know of because of leap years and everything is:",
                "Here's a one-liner:",
                "This is the version we use here. It works, and it's fairly simple. It's the same idea as Jeff's but I think it's a little clearer because it separates out the logic for subtracting one, so it's a little easier to understand.You could expand the ternary operator to make it even clearer, if you think that sort of thing is unclear.Obviously this is done as an extension method on DateTime, but clearly you can grab that one line of code that does the work and put it anywhere. Here we have another overload of the Extension method that passes in DateTime.Now, just for completeness.",
                "This gives \"more detail\" to this question. Maybe this is what you're looking for",
                "I use this:",
                "Here's yet another answer:This has been extensively unit-tested. It does look a bit \"magic\". The number 372 is the number of days there would be in a year if every month had 31 days.The explanation of why it works (lifted from here) is:Let's set Yn = DateTime.Now.Year, Yb = birthday.Year, Mn = DateTime.Now.Month, Mb = birthday.Month, Dn = DateTime.Now.Day, Db = birthday.Dayage = Yn - Yb + (31*(Mn - Mb) + (Dn - Db)) / 372We know that what we need is either Yn-Yb if the date has already been reached, Yn-Yb-1 if it has not.a) If Mn<Mb, we have -341 <= 31*(Mn-Mb) <= -31 and -30 <= Dn-Db <= 30-371 <= 31*(Mn - Mb) + (Dn - Db) <= -1With integer division(31*(Mn - Mb) + (Dn - Db)) / 372 = -1b) If Mn=Mb and Dn<Db, we have 31*(Mn - Mb) = 0 and -30 <= Dn-Db <= -1With integer division, again(31*(Mn - Mb) + (Dn - Db)) / 372 = -1c) If Mn>Mb, we have 31 <= 31*(Mn-Mb) <= 341 and -30 <= Dn-Db <= 301 <= 31*(Mn - Mb) + (Dn - Db) <= 371With integer division(31*(Mn - Mb) + (Dn - Db)) / 372 = 0d) If Mn=Mb and Dn>Db, we have 31*(Mn - Mb) = 0 and 1 <= Dn-Db <= 30With integer division, again(31*(Mn - Mb) + (Dn - Db)) / 372 = 0e) If Mn=Mb and Dn=Db, we have 31*(Mn - Mb) + Dn-Db = 0and therefore (31*(Mn - Mb) + (Dn - Db)) / 372 = 0",
                "I have created a SQL Server User Defined Function to calculate someone's age, given their birthdate. This is useful when you need it as part of a query:",
                "I've spent some time working on this and came up with this to calculate someone's age in years, months and days. I've tested against the Feb 29th problem and leap years and it seems to work, I'd appreciate any feedback:",
                "Do we need to consider people who is smaller than 1 year? as Chinese culture, we describe small babies' age as 2 months or 4 weeks.Below is my implementation, it is not as simple as what I imagined, especially to deal with date like 2/28.This implementation has passed below test cases.Hope it's helpful.",
                "The simplest way I've ever found is this. It works correctly for the US and western europe locales. Can't speak to other locales, especially places like China. 4 extra compares, at most, following the initial computation of age.I was looking over the answers to this and noticed that nobody has made reference to regulatory/legal implications of leap day births. For instance, per Wikipedia, if you're born on February 29th in various jurisdictions, you're non-leap year birthday varies:And as near as I can tell, in the US, the statutes are silent on the matter, leaving it up to the common law and to how various regulatory bodies define things in their regulations.To that end, an improvement:It should be noted that this code assumes:",
                "Keeping it simple (and possibly stupid:)).",
                "This is not a direct answer, but more of a philosophical reasoning about the problem at hand from a quasi-scientific point of view.I would argue that the question does not specify the unit nor culture in which to measure age, most answers seem to assume an integer annual representation. The SI-unit for time is second, ergo the correct generic answer should be (of course assuming normalized DateTime and taking no regard whatsoever to relativistic effects):In the Christian way of calculating age in years:In finance there is a similar problem when calculating something often referred to as the Day Count Fraction, which roughly is a number of years for a given period. And the age issue is really a time measuring issue.Example for the actual/actual (counting all days \"correctly\") convention:Another quite common way to measure time generally is by \"serializing\" (the dude who named this date convention must seriously have been trippin'):I wonder how long we have to go before a relativistic age in seconds becomes more useful than the rough approximation of earth-around-sun-cycles during one's lifetime so far :) Or in other words, when a period must be given a location or a function representing motion for itself to be valid :)",
                "I'm not sure how exactly you'd like it returned to you, so I just made a readable string.",
                "Here is a solution.",
                "This is one of the most accurate answers that is able to resolve the birthday of 29th of Feb compared to any year of 28th Feb.",
                "I have a customized method to calculate age, plus a bonus validation message just in case it helps:Method call here and pass out datetime value (MM/dd/yyyy if server set to USA locale). Replace this with anything a messagebox or any container to display:Remember you can format the message any way you like.",
                "How about this solution?",
                "This classic question is deserving of a Noda Time solution.Usage:You might also be interested in the following improvements:Passing in the clock as an IClock, instead of using SystemClock.Instance, would improve testability.The target time zone will likely change, so you'd want a DateTimeZone parameter as well.See also my blog post on this subject: Handling Birthdays, and Other Anniversaries",
                "SQL version:",
                "The following approach (extract from Time Period Library for .NET class DateDiff) considers the calendar of the culture info:Usage:",
                "I used ScArcher2's solution for an accurate Year calculation of a persons age but I needed to take it further and calculate their Months and Days along with the Years.",
                "This is simple and appears to be accurate for my needs. I am making an assumption for the purpose of leap years that regardless of when the person chooses to celebrate the birthday they are not technically a year older until 365 days have passed since their last birthday (i.e 28th February does not make them a year older)."
            ]
        },
        {
            "tag": "Excel",
            "patterns": [
                "How do I create an Excel (.XLS and .XLSX) file in C# without installing Microsoft Office?", "Excel", "XLS", "XLSX", "Create Excel"
            ],
            "responses": [
                "You can use a library called ExcelLibrary. It's a free, open source library posted on Google Code:ExcelLibraryThis looks to be a port of the PHP ExcelWriter that you mentioned above. It will not write to the new .xlsx format yet, but they are working on adding that functionality in.It's very simple, small and easy to use. Plus it has a DataSetHelper that lets you use DataSets and DataTables to easily work with Excel data.ExcelLibrary seems to still only work for the older Excel format (.xls files), but may be adding support in the future for newer 2007/2010 formats.You can also use EPPlus, which works only for Excel 2007/2010 format files (.xlsx files). There's also NPOI which works with both.There are a few known bugs with each library as noted in the comments. In all, EPPlus seems to be the best choice as time goes on. It seems to be more actively updated and documented as well.Also, as noted by @\u0410\u0440\u0442\u0451\u043c\u0426\u0430\u0440\u0438\u043e\u043d\u043e\u0432 below, EPPlus has support for Pivot Tables and ExcelLibrary may have some support (Pivot table issue in ExcelLibrary)Here are a couple links for quick reference:\nExcelLibrary - GNU Lesser GPL\nEPPlus - GNU (LGPL) - No longer maintained\nEPPlus 5 - Polyform Noncommercial - Starting May 2020\nNPOI - Apache LicenseHere some example code for ExcelLibrary:Here is an example taking data from a database and creating a workbook from it. Note that the ExcelLibrary code is the single line at the bottom:Creating the Excel file is as easy as that. You can also manually create Excel files, but the above functionality is what really impressed me.",
                "If you are happy with the xlsx format, try my library, EPPlus. It started with the source from ExcelPackage, but since became a total rewrite.It supports ranges, cell styling, charts, shapes, pictures, named ranges, AutoFilter, and a lot of other stuff.You have two options:EPPlus 4, licensed under LGPL (original branch, developed until 2020)EPPlus 5, licensed under Polyform Noncommercial 1.0.0 (since 2020).From the EPPlus 5 readme.md:With the new license EPPlus is still free to use in some cases, but will require a commercial license to be used in a commercial business.EPPlus website: https://www.epplussoftware.com/",
                "And what about using Open XML SDK 2.0 for Microsoft Office?A few benefits:Links:",
                "I've used with success the following open source projects:ExcelPackage for OOXML formats (Office 2007)NPOI for .XLS format (Office 2003). NPOI 2.0 (Beta) also supports XLSX.Take a look at my blog posts:Creating Excel spreadsheets .XLS and .XLSX in C#NPOI with Excel Table and dynamic Chart",
                "You can use OLEDB to create and manipulate Excel files. Check this: Reading and Writing Excel using OLEDB.Typical example:EDIT - Some more links:",
                "The commercial solution, SpreadsheetGear for .NET will do it.You can see live ASP.NET (C# and VB) samples here and download an evaluation version here.Disclaimer: I own SpreadsheetGear LLC",
                "An extremely lightweight option may be to use HTML tables.  Just create head, body, and table tags in a file, and save it as a file with an .xls extension.  There are Microsoft specific attributes that you can use to style the output, including formulas.I realize that you may not be coding this in a web application, but here is an example of the composition of an Excel file via an HTML table.  This technique could be used if you were coding a console app, desktop app, or service.",
                "A few options I have used:If XLSX is a must: ExcelPackage is a good start but died off when the developer quit working on it. ExML picked up from there and added a few features. ExML isn't a bad option, I'm still using it in a couple of production websites.For all of my new projects, though, I'm using NPOI, the .NET port of Apache POI. \nNPOI 2.0 (Alpha) also supports XLSX.",
                "If you're creating Excel 2007/2010 files give this open source project a try: https://github.com/closedxml/closedxmlIt provides an object oriented way to manipulate the files (similar to\n  VBA) without dealing with the hassles of XML Documents. It can be used\n  by any .NET language like C# and Visual Basic (VB).ClosedXML allows you to create Excel 2007/2010 files without the Excel\n  application. The typical example is creating Excel reports on a web\n  server:",
                "You actually might want to check out the interop classes available in C# (e.g. Microsoft.Office.Interop.Excel. You say no OLE (which this isn't), but the interop classes are very easy to use. Check out the C# Documentation here (Interop for Excel starts on page 1072 of the C# PDF).You might be impressed if you haven't tried them.Please be warned of Microsoft's stance on this:Microsoft does not currently recommend, and does not support,\n  Automation of Microsoft Office applications from any unattended,\n  non-interactive client application or component (including ASP,\n  ASP.NET, DCOM, and NT Services), because Office may exhibit unstable\n  behavior and/or deadlock when Office is run in this environment.",
                "You can use ExcelXmlWriter.It works fine.",
                "Here's a completely free C# library, which lets you export from a DataSet, DataTable or List<> into a genuine Excel 2007 .xlsx file, using the OpenXML libraries:http://mikesknowledgebase.com/pages/CSharp/ExportToExcel.htmFull source code is provided - free of charge - along with instructions, and a demo application.After adding this class to your application, you can export your DataSet to Excel in just one line of code:It doesn't get much simpler than that...And it doesn't even require Excel to be present on your server.",
                "You could consider creating your files using the XML Spreadsheet 2003 format. This is a simple XML format using a well documented schema.",
                "You may want to take a look at GemBox.Spreadsheet.They have a free version with all features but limited to 150 rows per sheet and 5 sheets per workbook, if that falls within your needs.I haven't had need to use it myself yet, but does look interesting.",
                "Syncfusion Essential XlsIO can do this. It has no dependency on Microsoft office and also has specific support for different platforms.Code sample:The whole suite of controls is available for free through the community license program if you qualify (less than 1 million USD in revenue). Note: I work for Syncfusion.",
                "The various Office 2003 XML libraries avaliable work pretty well for smaller excel files. However, I find the sheer size of a large workbook saved in the XML format to be a problem. For example, a workbook I work with that would be 40MB in the new (and admittedly more tightly packed) XLSX format becomes a 360MB XML file.As far as my research has taken me, there are two commercial packages that allow output to the older binary file formats. They are:Neither are cheap (500USD and 800USD respectively, I think). but both work independant of Excel itself.What I would be curious about is the Excel output module for the likes of OpenOffice.org. I wonder if they can be ported from Java to .Net.",
                "I have written a simple code to export dataset to excel without using excel object by using System.IO.StreamWriter.Below is the code which will read all tables from dataset and write them to sheets one by one. I took help from this article.",
                "Well,you can also use a third party library like Aspose.This library has the benefit that it does not require Excel to be installed on your machine which would be ideal in your case.",
                "OpenXML is also a good alternative that helps avoid installing MS Excel on Server.The Open XML SDK 2.0 provided by Microsoft simplifies the task of manipulating Open XML packages and the underlying Open XML schema elements within a package. The Open XML Application Programming Interface (API) encapsulates many common tasks that developers perform on Open XML packages.Check this out OpenXML: Alternative that helps avoid installing MS Excel on Server",
                "I've just recently used FlexCel.NET and found it to be an excellent library! I don't say that about too many software products. No point in giving the whole sales pitch here, you can read all the features on their website.It is a commercial product, but you get the full source if you buy it. So I suppose you could compile it into your assembly if you really wanted to. Otherwise it's just one extra assembly to xcopy - no configuration or installation or anything like that.I don't think you'll find any way to do this without third-party libraries as .NET framework, obviously, does not have built in support for it and OLE Automation is just a whole world of pain.",
                "I agree about generating XML Spreadsheets, here's an example on how to do it for C# 3 (everyone just blogs about it in VB 9 :P) http://www.aaron-powell.com/linq-to-xml-to-excel",
                "Just want to add another reference to a third party solution that directly addresses your issue:  http://www.officewriter.com(Disclaimer: I work for SoftArtisans, the company that makes OfficeWriter)",
                "Hi this solution is to export your grid view to your excel file it might help you out",
                "Some 3rd party component vendors like Infragistics or Syncfusion provide very good Excel export capabilities that do not require Microsoft Excel to be installed.Since these vendors also provide advanced UI grid components, these components are particularly handy if you want the style and layout of an excel export to mimic the current state of a grid in the user interface of your application.If your export is intended to be executed server side with emphasis on the data to be exported and with no link to the UI, then I would go for one of the free open source options (e.g. ExcelLibrary).I have previously been involved with projects that attempted to use server side automation on the Microsoft Office suite. Based on this experience I would strongly recommend against that approach.",
                "IKVM + POIOr, you could use the Interop ...",
                "Here's a way to do it with LINQ to XML, complete with sample code:Quickly Import and Export Excel Data with LINQ to XMLIt's a little complex, since you have to import namespaces and so forth, but it does let you avoid any external dependencies.(Also, of course, it's VB .NET, not C#, but you can always isolate the VB .NET stuff in its own project to use XML Literals, and do everything else in C#.)",
                "You can create nicely formatted Excel files using this library:\nhttp://officehelper.codeplex.com/documentation\n\nSee below sample:where sample look like this:",
                "The simplest and fastest way to create an Excel file from C# is to use the Open XML Productivity Tool.  The Open XML Productivity Tool comes with the Open XML SDK installation.  The tool reverse engineers any Excel file into C# code.  The C# code can then be used to re-generate that file.An overview of the process involved is:As a bonus, this method works for any Word and PowerPoint files.  As the C# developer, you will then make changes to the code to fit your needs.I have developed a simple WPF app on github which will run on Windows for this purpose.  There is a placeholder class called GeneratedClass where you can paste the generated code.  If you go back one version of the file, it will generate an excel file like this:",
                "The Java open source solution is Apache POI.  Maybe there is a way to setup interop here, but I don't know enough about Java to answer that.When I explored this problem I ended up using the Interop assemblies.",
                "Have you ever tried sylk?We used to generate excelsheets in classic asp as sylk and right now we're searching for an excelgenerater too.The advantages for sylk are, you can format the cells."
            ]
        },
        {
            "tag": "breakpoint",
            "patterns": [
                "How do I remedy \"The breakpoint will not currently be hit. No symbols have been loaded for this document.\" warning?", "Breakpoint warning"
            ],
            "responses": [
                "Start debugging, as soon as you've arrived at a breakpoint or used Debug > Break All, use Debug > Windows > Modules.  You'll see a list of all the assemblies that are loaded into the process.  Locate the one you want to get debug info for.  Right-click it and select Symbol Load Information.  You'll get a dialog that lists all the directories where it looked for the .pdb file for the assembly.  Verify that list against the actual .pdb location.  Make sure it doesn't find an old one.In normal projects, the assembly and its .pdb file should always have been copied by the IDE into the same folder as your .exe, i.e. the bin\\Debug folder of your project.  Make sure you remove one from the GAC if you've been playing with it.",
                "Check to make sure that you are not in release but in Debug.When in debug:First try rebuilding your project by right mouse click the project > Rebuild\nIf that doesn't work, try a clean of the project (right mouse click on the project > clean)If that didn't work check this:(step 7 generates the .pdb files, these are the debugging symbols)",
                "Just something simple to try - you may have tried it already. \nRight click the Solution in solution explorer, click \"clean solution\", this deletes all the compiled and temporary files associated with a solution.Do a rebuild of the solution and try to debug again.I've also had troubles with breakpoints multiple projects in a solution - some compiled as x86, some as x64.",
                "Uncheck the \"Enable Just My Code\" option in theTools/Options/Debugging/General",
                "Cross posting this fix from Hans K that I found on the similar thread >> HERE <<:Right click on solution --> PropertiesLook under Common Properties --> Startup ProjectSelect multiple startup projectsselect Start action on the projects you need to debug.",
                "The selected answer led me to fix my problem. But I need to do a few things more:Even with \"Debug\" selected in the dropdown:And in the project Properties > Build:The Visual Studio was not loading symbols to a specific project. So in that dropdown I select \"Configuration Manager\" and saw that the settings to my web project was incorrect:Then I set that to \"Debug\" and it started to generate the .pdb file. \nBUT I need to manually copy the PDB and DLL and put in the folder that VS was looking (here is where the selected answer helped me):",
                "Sometimes, even though it gives you this error, the Breakpoint still gets hit, so just ignore the error.This happens fairly often in the Views of an MVC web app, i.e. .cshtml.",
                "I was able to fix the error by simply setting the option in the 'Attach to Process' to 'Automatically determine the type of code to debug' option as shown in the attached screenshot.Simply follow the steps below:",
                "Debug > Windows > Modules to see what modules were being loaded put me in the right direction.In my case IIS Express seemed to be loading a different DLL from the temporary ASP.NET files.The solution?",
                "Check if your .pbd file is missing in your bin/Debug folder. If it is then go to \"Properties\" of your project, selected \"Build\" and then \"Advanced\" at the bottom. Choose \"full\" under \"Debug info\" in the new window that appeared. This was my issue and solved it for me.",
                "In my case \"Optimize Code\" was checked in my project properties.  This caused VS to see my assembly as \"not my code\", and in turn, it did not load symbols for it.The solution was to uncheck this.",
                "Try running visual studio as an administrator within windows.",
                "You need to enable \"Generate debug info\" in compiler settings",
                "I tried everything mentioned above, but nothing worked.\n[Clean solution, and check for PDB files etc.]Even publishing the same solution did not resolve the issue.Then I went to back to what I usually do to resolve (fool this stubborn Visual Studio)All I did was to make a deliberate change in code and publish the solution.\nThen I reverted the change and published again.Voila [PDB files rid of evil spirits].. Not a smart resolution, but this did work.. :-|",
                "We found the cause of our problem. This code was using the \"CodeBehind\" attribute in the Page directive of the .aspx file instead of the \"CodeFile\" attribute (ASP.NET 2.0 and beyond). After days of desperation, a simple search and replace solved the problem.",
                "Check your Solution Configuration drop down list. Make sure you select Debug, not Release.",
                "Option  \"Start debugging, Debug + Windows + Modules\" does not exist in Microsoft Visual Studio Express 2013 edition.Unchecking \"Use Managed Compatibility Mode\" in Tools Options Debugging fixes this.",
                "Webapplications (IIS Express) only:",
                "Check are the following two setting the same in Visual Studio:Right click test project, go to Properties, Build tab, and look at Platform targetMine are all set to \"Any CPU\" so x64On the Main Menu bar, go to Test, Test Settings, Default Processor ArchitectureMine was set to X86Changing this to X64 to match above setting made the built in Visual Studio menu \u201cDebug Test(s)\u201d work and hit breakpoints that were previously ignored with the message \u201cThe breakpoint will not currently be hit. No symbols have been loaded for this document\u201d.Update:For Visual Studio 2019 the menus have been moved around a bit:",
                "I also had the same issue what I rebuild the whole solution (including refereced projects) in x86( or x64)Even though I set all of my projects to x86 from Configuration Manager (Build->ConfigManager) some of my projects were not set to x86.So Just to make sure right click on the project and followproject -> properties -> Debug Tab, verify Configuration and Platform.",
                "The .dll where I want to stop debugger and the associated .pdb files where copied near the .exe file. Those files had an older date so I thought they weren't updated in the runtime. I manually deleted them, Visual Studio create another pair AND put this new pair near the .exe. Now the breakpoint works!Maybe Visual Studio cannot copy and REPLACE existing files (.dll and .pdb) near the .exe since there are another there. So if I deleted manually then VS could create new one near .exe.I think that the root cause of the problem is that the Visual Studio use another file in runtime, no the file from the project, with the stop.",
                "Instead of doing all these things just Close and reopen",
                "Project Properties (then select your build config) > Build Tab > Advanced... > Debug Info (dropdown)Set to 'all' or 'pdb-only' then rebuild",
                "This took me a while tried other options above and for some strange reason debugging stopped working.Tool -> Options -> Debugging -> General -> (untick) \"Require source files to exactly match the original version\" option",
                "I was integrating a C# application with a static library using VS10 - which I'm new to. I wrote a managed code dll to interface them.  I could set breakpoints everywhere but the static lib.  I got the message described above - no symbols have been loaded for this document.  I tried many of the suggestions above.  I could see that the symbols weren't being loaded.  I finally noticed a check box Configuration Debug, Enable unmanaged code debugging.  That allowed me to set breakpoints in the static lib functions.",
                "In my case, I was compiling a class library (DLL). No modules seem to be loaded in Debug -> Modules, so I couldn't even load the symbols manually.My solution was to add this line to my code:Once this code is reached, an exception is triggered and .NET Framework shows a dialog box asking which Visual Studio (i.e. new instance of VS 2008, new instance of VS 2013, etc) you want to use to debug the program. You can choose the existing instance of VS with your project loaded. This will attach the process to your VS session and load all symbols, and now you can debug your project.Of course, the compilation has to be done using the Debug configuration, not Release.",
                "Make sure you have the configuration set to 'Debug' and not 'Release'.You can debug the startup project in 'Release' mode, but not a referenced class library.",
                "For an ASP.Net application, check the properties of the site, ASP.NET tab.  Ensure that the correct ASP.NET version is selected."
            ]
        },
        {
            "tag": "??",
            "patterns": [
                "What do two question marks together mean in C#?", "??", "What does ?? mean", "null coalescing operator"
            ],
            "responses": [
                "It's the null coalescing operator, and quite like the ternary (immediate-if) operator. See also ?? Operator - MSDN.expands to:which further expands to:In English, it means \"If whatever is to the left is not null, use that, otherwise use what's to the right.\"Note that you can use any number of these in sequence. The following statement will assign the first non-null Answer# to Answer (if all Answers are null then the Answer is null):Also it's worth mentioning while the expansion above is conceptually equivalent, the result of each expression is only evaluated once. This is important if for example an expression is a method call with side effects. (Credit to @Joey for pointing this out.)",
                "Just because no-one else has said the magic words yet: it's the null coalescing operator. It's defined in section 7.12 of the C# 3.0 language specification.It's very handy, particularly because of the way it works when it's used multiple times in an expression. An expression of the form:will give the result of expression a if it's non-null, otherwise try b, otherwise try c, otherwise try d. It short-circuits at every point.Also, if the type of d is non-nullable, the type of the whole expression is non-nullable too.",
                "It's the null coalescing operator.http://msdn.microsoft.com/en-us/library/ms173224.aspxYes, nearly impossible to search for unless you know what it's called! :-)EDIT: And this is a cool feature from another question.  You can chain them.Hidden Features of C#?",
                "Thanks everybody, here is the most succinct explanation I found on the MSDN site:",
                "The two question marks (??) indicate that its a Coalescing operator.Coalescing operator returns the first NON-NULL value from a chain. You can see this youtube video which demonstrates the whole thing practically.But let me add more to what the video says.If you see the English meaning of coalescing it says \u201cconsolidate together\u201d. For example below is a simple coalescing code which chains four strings.So if str1 is null it will try str2, if str2 is null it will try str3 and so on until it finds a string with a non-null value.In simple words Coalescing operator returns the first NON-NULL value from a chain.",
                "?? is there to provide a value for a nullable type when the value is null. So, if formsAuth  is null, it will return new FormsAuthenticationWrapper().",
                "It's short hand for the ternary operator.Or for those who don't do ternary:",
                "If you're familiar with Ruby, its ||= seems akin to C#'s ?? to me.  Here's some Ruby:And in C#:",
                "As correctly pointed in numerous answers that is the \"null coalescing operator\" (??), speaking of which you might also want to check out its cousin the \"Null-conditional Operator\" (?. or ?[) that is an operator that many times it is used in conjunction with ??Null-conditional OperatorUsed to test for null before performing a member access (?.) or index (?[) operation. These operators help you write less code to handle null checks, especially for descending into data structures.For example:the old way without ?. and ?? of doing this iswhich is more verbose and cumbersome.",
                "Others have described the Null Coalescing Operator quite well. In cases where a single test for null is required, the shortened syntax ??= can add readability.Legacy null test:Using the Null Coalescing Operator this can be written:which can also be written with the shortened syntax:Some find it more readable and succinct.",
                "coalescing operatorit's equivalent to",
                "Nothing dangerous about this. In fact, it is beautiful. \nYou can add default value if that is desirable, for example:CODE",
                "I have read whole this thread and many others but I can't find as thorough answer as this is.By which I completely understood the \"why to use ?? and when to use ?? and how to use ??.\"Windows communication foundation unleashed By Craig McMurtry\nISBN 0-672-32948-4There are two common circumstances in which one would like to know whether\na value has been assigned to an instance of a value type. The first is when the instance represents a value in a database. In such a case, one would like to be able to examine the instance to ascertain whether a value is indeed present in the database. The other circumstance, which is more pertinent to the subject matter of this book, is when the instance represents a data item received from some remote source. Again, one would like to determine from the instance whether a value for that data item was received.The .NET Framework 2.0 incorporates a generic type definition that provides for cases like these in which one wants to assign null to an instance of a value type, and test whether the value of the instance is null. That generic type definition is System.Nullable<T>, which constrains the generic type arguments that may be substituted for T to value types.\nInstances of types constructed from System.Nullable<T> can be assigned a value of null; indeed, their values are null by default. Thus, types constructed from\nSystem.Nullable<T> may be referred to as nullable value types.\nSystem.Nullable<T> has a property, Value, by which the value assigned to an instance of\na type constructed from it can be obtained if the value of the instance is not null.\nTherefore, one can write:The C# programming language provides an abbreviated syntax for declaring types\nconstructed from System.Nullable<T>. That syntax allows one to abbreviate:toThe compiler will prevent one from attempting to assign the value of a nullable value type to an ordinary value type in this way:It prevents one from doing so because the nullable value type could have the value null, which it actually would have in this case, and that value cannot be assigned to an ordinary value type. Although the compiler would permit this code,The second statement would cause an exception to be thrown because any attempt to\naccess the System.Nullable<T>.Value property is an invalid operation if the type\nconstructed from System.Nullable<T> has not been assigned a valid value of T, which has not happened in this case.One proper way to assign the value of a nullable value type to an ordinary value type is to use the System.Nullable<T>.HasValue property to ascertain whether a valid value of T has been assigned to the nullable value type:Another option is to use this syntax:By which the ordinary integer myInteger is assigned the value of the nullable integer \"myNullableInteger\" if the latter has been assigned a valid integer value; otherwise, myInteger is assigned the value of -1.",
                "For your amusement only (knowing you are all C# guys ;-).I think it originated in Smalltalk, where it has been around for many years. It is defined there as:in Object:in UndefinedObject (aka nil's class):There are both evaluating (?) and non-evaluating versions (??) of this. \nIt is often found in getter-methods for lazy-initialized private (instance) variables, which are left nil until really needed.",
                "Some of the examples here of getting values using coalescing are inefficient.What you really want is:orThis prevents the object from being recreated every time. Instead of the private variable remaining null and a new object getting created on every request, this ensures the private variable is assigned if the new object is created.",
                "In simplest way, two question marks are called \"Coalescing Operator\", which returns first non null value from the chain.e.g if you are getting a values from a nullable object, in a variable which is not nullable, then you can use this operator.\ni.e.int a = 1;\nint? b = null;\na = b??0;Result of above equation would be zero, because b is null and we have used the ?? operator  along with zero, which means that it will return 0 if and only if b is null.int a = 1; \nint? b = 15;\na = b??0;In above equation, a will get value \"15\" because b has a valid value and is not null.\nAlso, you can not use ?? operator on a non nullable object.In above examples, I used ?? 0, however a complete new equation can also be used after ?? operator.Such as\n\na = b ?? ( x==1 ? 10 : 15)\n\nI hope it will clear your question.",
                "The ?? operator is called the null-coalescing operator. It returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand.Set variable2 to the value of variable1, if variable1 is NOT null;\notherwise, if variable1 == null, set variable2 to 100.",
                "It's a null coalescing operator that works similarly to a ternary operator.Another interesting point for this is,\n\"A nullable type can contain a value, or it can be undefined\".\nSo if you try to assign a nullable value type to a non-nullable value type \nyou will get a compile-time error.So to do that using ?? operator:",
                "is equivalent toBut the cool thing about it is you can chain them, like other people said.\nThe one thin not touched upon is that you can actually use it to throw an exception."
            ]
        },
        {
            "tag": "NullReferenceException",
            "patterns": [
                "What is a NullReferenceException, and how do I fix it?", "NullReferenceException", "What is NullReferenceException", "How do I fix a NullReferenceException"
            ],
            "responses": [
                "You are trying to use something that is null (or Nothing in VB.NET). This means you either set it to null, or you never set it to anything at all.Like anything else, null gets passed around. If it is null in method \"A\", it could be that method \"B\" passed a null to method \"A\".null can have different meanings:The rest of this article goes into more detail and shows mistakes that many programmers often make which can lead to a NullReferenceException.The runtime throwing a NullReferenceException always means the same thing: you are trying to use a reference, and the reference is not initialized (or it was once initialized, but is no longer initialized).This means the reference is null, and you cannot access members (such as methods) through a null reference. The simplest case:This will throw a NullReferenceException at the second line because you can't call the instance method ToUpper() on a string reference pointing to null.How do you find the source of a NullReferenceException? Apart from looking at the exception itself, which will be thrown exactly at the location where it occurs, the general rules of debugging in Visual Studio apply: place strategic breakpoints and inspect your variables, either by hovering the mouse over their names, opening a (Quick)Watch window or using the various debugging panels like Locals and Autos.If you want to find out where the reference is or isn't set, right-click its name and select \"Find All References\". You can then place a breakpoint at every found location and run your program with the debugger attached. Every time the debugger breaks on such a breakpoint, you need to determine whether you expect the reference to be non-null, inspect the variable, and verify that it points to an instance when you expect it to.By following the program flow this way, you can find the location where the instance should not be null, and why it isn't properly set.Some common scenarios where the exception can be thrown:If ref1 or ref2 or ref3 is null, then you'll get a NullReferenceException. If you want to solve the problem, then find out which one is null by rewriting the expression to its simpler equivalent:Specifically, in HttpContext.Current.User.Identity.Name, the HttpContext.Current could be null, or the User property could be null, or the Identity property could be null.If you want to avoid the child (Person) null reference, you could initialize it in the parent (Book) object's constructor.The same applies to nested object initializers:This translates to:While the new keyword is used, it only creates a new instance of Book, but not a new instance of Person, so the Author the property is still null.The nested collection Initializers behave the same:This translates to:The new Person only creates an instance of Person, but the Books collection is still null. The collection Initializer syntax does not create a collection\nfor p1.Books, it only translates to the p1.Books.Add(...) statements.(Note: The VB.NET compiler inserts null checks for event usage, so it's not necessary to check events for Nothing in VB.NET.)If you named fields differently from locals, you might have realized that you never initialized the field.This can be solved by following the convention to prefix fields with an underscore:If the exception occurs when referencing a property of @Model in an ASP.NET MVC View, you need to understand that the Model gets set in your action method, when you return a view. When you return an empty model (or model property) from your controller, the exception occurs when the views access it:WPF controls are created during the call to InitializeComponent in the order they appear in the visual tree.  A NullReferenceException will be raised in the case of early-created controls with event handlers, etc., that fire during InitializeComponent which reference late-created controls.For example:Here comboBox1 is created before label1. If comboBox1_SelectionChanged attempts to reference `label1, it will not yet have been created.Changing the order of the declarations in the XAML (i.e., listing label1 before comboBox1, ignoring issues of design philosophy) would at least resolve the NullReferenceException here.This doesn't throw an InvalidCastException but returns a null when the cast fails (and when someObject is itself null). So be aware of that.The plain versions First() and Single() throw exceptions when there is nothing. The \"OrDefault\" versions return null in that case. So be aware of that.foreach throws when you try to iterate on a null collection. Usually caused by unexpected null result from methods that return collections.More realistic example - select nodes from XML document. Will throw if nodes are not found but initial debugging shows that all properties valid:If you expect the reference sometimes to be null, you can check for it being null before accessing instance members:Methods you call expecting an instance can return null, for example when the object being sought cannot be found. You can choose to return a default value when this is the case:You can also throw a custom exception, only to catch it in the calling code:When you know during development that a method could, but never should return null, you can use Debug.Assert() to break as soon as possible when it does occur:Though this check will not end up in your release build, causing it to throw the NullReferenceException again when book == null at runtime in release mode.The shorthand to providing a default value when a null is encountered:This is also sometimes called the safe navigation or Elvis (after its shape) operator. If the expression on the left side of the operator is null, then the right side will not be evaluated, and null is returned instead. That means cases like this:If the person does not have a title, this will throw an exception because it is trying to call ToUpper on a property with a null value.In C# 5 and below, this can be guarded with:Now the title variable will be null instead of throwing an exception. C# 6 introduces a shorter syntax for this:This will result in the title variable being null, and the call to ToUpper is not made if person.Title is null.Of course, you still have to check title for null or use the null condition operator together with the null coalescing operator (??) to supply a default value:Likewise, for arrays you can use ?[i] as follows:This will do the following: If myIntArray is null, the expression returns null and you can safely check it. If it contains an array, it will do the same as:\nelem = myIntArray[i]; and returns the ith element.Introduced in C# 8, null contexts and nullable reference types perform static analysis on variables and provide a compiler warning if a value can be potentially null or have been set to null. The nullable reference types allow types to be explicitly allowed to be null.The nullable annotation context and nullable warning context can be set for a project using the Nullable element in your csproj file. This element configures how the compiler interprets the nullability of types and what warnings are generated. Valid settings are:A nullable reference type is noted using the same syntax as nullable value types: a ? is appended to the type of the variable.C# supports \"iterator blocks\" (called \"generators\" in some other popular languages). NullReferenceException can be particularly tricky to debug in iterator blocks because of deferred execution:If whatever results in null then MakeFrob will throw. Now, you might think that the right thing to do is this:Why is this wrong?  Because the iterator block does not actually run until the foreach!  The call to GetFrobs simply returns an object which when iterated will run the iterator block.By writing a null check like this you prevent the NullReferenceException, but you move the NullArgumentException to the point of the iteration, not to the point of the call, and that is very confusing to debug.The correct fix is:That is, make a private helper method that has the iterator block logic and a public surface method that does the null check and returns the iterator. Now when GetFrobs is called, the null check happens immediately, and then GetFrobsForReal executes when the sequence is iterated.If you examine the reference source for LINQ to Objects you will see that this technique is used throughout. It is slightly more clunky to write, but it makes debugging nullity errors much easier. Optimize your code for the convenience of the caller, not the convenience of the author.C# has an \"unsafe\" mode which is, as the name implies, extremely dangerous because the normal safety mechanisms which provide memory safety and type safety are not enforced. You should not be writing unsafe code unless you have a thorough and deep understanding of how memory works.In unsafe mode, you should be aware of two important facts:To understand why that is, it helps to understand how .NET produces NullReferenceException in the first place. (These details apply to .NET running on Windows; other operating systems use similar mechanisms.)Memory is virtualized in Windows; each process gets a virtual memory space of many \"pages\" of memory that are tracked by the operating system. Each page of memory has flags set on it that determine how it may be used: read from, written to, executed, and so on. The lowest page is marked as \"produce an error if ever used in any way\".Both a null pointer and a null reference in C# are internally represented as the number zero, and so any attempt to dereference it into its corresponding memory storage causes the operating system to produce an error. The .NET runtime then detects this error and turns it into the NullReferenceException.That's why dereferencing both a null pointer and a null reference produces the same exception.What about the second point? Dereferencing any invalid pointer that falls in the lowest page of virtual memory causes the same operating system error, and thereby the same exception.Why does this make sense?  Well, suppose we have a struct containing two ints, and an unmanaged pointer equal to null. If we attempt to dereference the second int in the struct, the CLR will not attempt to access the storage at location zero; it will access the storage at location four. But logically this is a null dereference because we are getting to that address via the null.If you are working with unsafe code and you get a NullReferenceException, just be aware that the offending pointer need not be null. It can be any location in the lowest page, and this exception will be produced.",
                "The NullReference Exception for Visual Basic is no different from the one in C#. After all, they are both reporting the same exception defined in the .NET Framework which they both use. Causes unique to Visual Basic are rare (perhaps only one).This answer will use Visual Basic terms, syntax, and context. The examples used come from a large number of past Stack\u00a0 Overflow questions. This is to maximize relevance by using the kinds of situations often seen in posts. A bit more explanation is also provided for those who might need it. An example similar to yours is very likely listed here.Note:The message \"Object not set to an instance of Object\" means you are trying to use an object which has not been initialized. This boils down to one of these:Since the problem is an object reference which is Nothing, the answer is to examine them to find out which one. Then determine why it is not initialized. Hold the mouse over the various variables and Visual Studio (VS) will show their values - the culprit will be Nothing.You should also remove any Try/Catch blocks from the relevant code, especially ones where there is nothing in the Catch block. This will cause your code to crash when it tries to use an object which is Nothing. This is what you want because it will identify the exact location of the problem, and allow you to identify the object causing it.A MsgBox in the Catch which displays Error while... will be of little help. This method also leads to very bad Stack\u00a0 Overflow questions, because you can't describe the actual exception, the object involved or even the line of code where it happens.You can also use the Locals Window (Debug -> Windows -> Locals) to examine your objects.Once you know what and where the problem is, it is usually fairly easy to fix and faster than posting a new question.See also:The problem is that Dim does not create a CashRegister object; it only declares a variable named reg of that Type. Declaring an object variable and creating an instance are two different things.RemedyThe New operator can often be used to create the instance when you declare it:When it is only appropriate to create the instance later:Note: Do not use Dim again in a procedure, including the constructor (Sub New):This will create a local variable, reg, which exists only in that context (sub). The reg variable with module level Scope which you will use everywhere else remains Nothing.Missing the New operator is the #1 cause of NullReference Exceptions seen in the Stack\u00a0 Overflow questions reviewed.Visual Basic tries to make the process clear repeatedly using New: Using the New Operator creates a new object and calls Sub New -- the constructor -- where your object can perform any other initialization.To be clear, Dim (or Private) only declares a variable and its Type.   The Scope of the variable - whether it exists for the entire module/class or is local to a procedure - is determined by where it is declared. Private | Friend | Public defines the access level, not Scope.For more information, see:Arrays must also be instantiated:This array has only been declared, not created. There are several ways to initialize an array:Note: Beginning with VS 2010, when initializing a local array using a literal and Option Infer, the As <Type> and New elements are optional:The data Type and array size are inferred from the data being assigned. Class/Module level declarations still require As <Type> with Option Strict:Example: Array of class objectsThe array has been created, but the Foo objects in it have not.RemedyUsing a List(Of T) will make it quite difficult to have an element without a valid object:For more information, see:.NET collections (of which there are many varieties - Lists, Dictionary, etc.) must also be instantiated or created.You get the same exception for the same reason - myList was only declared, but no instance created. The remedy is the same:A common oversight is a class which uses a collection Type:Either procedure will result in an NRE, because barList is only declared, not instantiated. Creating an instance of Foo will not also create an instance of the internal barList. It may have been the intent to do this in the constructor:As before, this is incorrect:For more information, see List(Of T) Class.Working with databases presents many opportunities for a NullReference because there can be many objects (Command, Connection, Transaction, Dataset, DataTable, DataRows....) in use at once.  Note: It does not matter which data provider you are using -- MySQL, SQL Server, OleDB, etc. -- the concepts are the same.Example 1As before, the ds Dataset object was declared, but an instance was never created. The DataAdapter will fill an existing DataSet, not create one. In this case, since ds is a local variable, the IDE warns you that this might happen:When declared as a module/class level variable, as appears to be the case with con, the compiler can't know if the object was created by an upstream procedure. Do not ignore warnings.RemedyExample 2A typo is a problem here: Employees vs Employee. There was no DataTable named \"Employee\" created, so a NullReferenceException results trying to access it. Another potential problem is assuming there will be Items which may not be so when the SQL includes a WHERE clause.RemedySince this uses one table, using Tables(0) will avoid spelling errors.  Examining Rows.Count can also help:Fill is a function returning the number of Rows affected which can also be tested:Example 3The DataAdapter will provide TableNames as shown in the previous example, but it does not parse names from the SQL or database table. As a result, ds.Tables(\"TICKET_RESERVATION\") references a non-existent table.The Remedy is the same, reference the table by index:See also DataTable Class.The code is only testing Items while both myFoo and Bar may also be Nothing. The remedy is to test the entire chain or path of objects one at a time:AndAlso is important. Subsequent tests will not be performed once the first False condition is encountered. This allows the code to safely 'drill' into the object(s) one 'level' at a time, evaluating myFoo.Bar only after (and if) myFoo is determined to be valid. Object chains or paths can get quite long when coding complex objects:It is not possible to reference anything 'downstream' of a null object.  This also applies to controls:Here, myWebBrowser or Document could be Nothing or the formfld1 element may not exist.Among other things, this code does not anticipate that the user may not have selected something in one or more UI controls.  ListBox1.SelectedItem may well be Nothing, so ListBox1.SelectedItem.ToString will result in an NRE.RemedyValidate data before using it (also use Option Strict and SQL parameters):Alternatively, you can use (ComboBox5.SelectedItem IsNot Nothing) AndAlso...This is a fairly common way to get an NRE. In C#, depending on how it is coded, the IDE will report that Controls does not exist in the current context, or \"cannot reference non-static member\". So, to some extent, this is a VB-only situation. It is also complex because it can result in a failure cascade.The arrays and collections cannot be initialized this way. This initialization code will run before the constructor creates the Form or the Controls. As a result:Referencing array elements later will result in an NRE. If you do this in Form_Load, due to an odd bug, the IDE may not report the exception when it happens. The exception will pop up later when your code tries to use the array. This \"silent exception\" is detailed in this post. For our purposes, the key is that when something catastrophic happens while creating a form (Sub New or Form Load event), exceptions may go unreported, the code exits the procedure and just displays the form.Since no other code in your Sub New or Form Load event will run after the NRE, a great many other things can be left uninitialized.Note this applies to any and all control and component references making these illegal where they are:Partial RemedyIt is curious that VB does not provide a warning, but the remedy is to declare the containers at the form level, but initialize them in form load event handler when the controls do exist. This can be done in Sub New as long as your code is after the InitializeComponent call:The array code may not be out of the woods yet. Any controls which are in a container control (like a GroupBox or Panel) will not be found in Me.Controls; they will be in the Controls collection of that Panel or GroupBox. Nor will a control be returned when the control name is misspelled (\"TeStBox2\"). In such cases, Nothing will again be stored in those array elements and an NRE will result when you attempt to reference it.These should be easy to find now that you know what you are looking for:\"Button2\" resides on a PanelRemedyRather than indirect references by name using the form's Controls collection, use the control reference:This is a case where the IDE will warn you that 'not all paths return a value and a NullReferenceException may result'. You can suppress the warning, by replacing Exit Function with Return Nothing, but that does not solve the problem. Anything which tries to use the return when someCondition = False will result in an NRE:RemedyReplace Exit Function in the function with Return bList. Returning an empty List is not the same as returning Nothing. If there is a chance that a returned object can be Nothing, test before using it:A badly implemented Try/Catch can hide where the problem is and result in new ones:This is a case of an object not being created as expected, but also demonstrates the counter usefulness of an empty Catch.There is an extra comma in the SQL (after 'mailaddress') which results in an exception at .ExecuteReader. After the Catch does nothing, Finally tries to perform clean up, but since you cannot Close a null DataReader object, a brand new NullReferenceException results.An empty Catch block is the devil's playground. This OP was baffled why he was getting an NRE in the Finally block. In other situations, an empty Catch may result in something else much further downstream going haywire and cause you to spend time looking at the wrong things in the wrong place for the problem. (The \"silent exception\" described above provides the same entertainment value.)RemedyDon't use empty Try/Catch blocks - let the code crash so you can a) identify the cause b) identify the location and c) apply a proper remedy.  Try/Catch blocks are not intended to hide exceptions from the person uniquely qualified to fix them - the developer.The IsDBNull function is used to test if a value equals System.DBNull:  From MSDN:The System.DBNull value indicates that the Object represents missing or non-existent data. DBNull is not the same as Nothing, which indicates that a variable has not yet been initialized.RemedyAs before, you can test for Nothing, then for a specific value:Example 2FirstOrDefault returns the first item or the default value, which is Nothing for reference types and never DBNull:If a CheckBox with chkName can't be found (or exists in a GroupBox), then chk will be Nothing and be attempting to reference any property will result in an exception.RemedyThe DGV has a few quirks seen periodically:If dgvBooks has AutoGenerateColumns = True, it will create the columns, but it does not name them, so the above code fails when it references them by name.RemedyName the columns manually, or reference by index:When your DataGridView has AllowUserToAddRows as True (the default), the Cells in the blank/new row at the bottom will all contain Nothing.  Most attempts to use the contents (for example, ToString) will result in an NRE.RemedyUse a For/Each loop and test the IsNewRow property to determine if it is that last row. This works whether AllowUserToAddRows is true or not:If you do use a For n loop, modify the row count or use Exit For when IsNewRow is true.Under certain circumstances, trying to use an item from My.Settings which is a StringCollection can result in a NullReference the first time you use it. The solution is the same, but not as obvious. Consider:Since VB is managing Settings for you, it is reasonable to expect it to initialize the collection. It will, but only if you have previously added an initial entry to the collection (in the Settings editor). Since the collection is (apparently) initialized when an item is added, it remains Nothing when there are no items in the Settings editor to add.RemedyInitialize the settings collection in the form's Load event handler, if/when needed:Typically, the Settings collection will only need to be initialized the first time the application runs. An alternate remedy is to add an initial value to your collection in Project -> Settings | FooBars, save the project, then remove the fake value.You probably forgot the New operator.orSomething you assumed would perform flawlessly to return an initialized object to your code, did not.Don't ignore compiler warnings (ever) and use Option Strict On (always).MSDN NullReference Exception",
                "Another scenario is when you cast a null object into a value type. For example, the code below:It will throw a NullReferenceException on the cast. It seems quite obvious in the above sample, but this can happen in more \"late-binding\" intricate scenarios where the null object has been returned from some code you don't own, and the cast is for example generated by some automatic system.One example of this is this simple ASP.NET binding fragment with the Calendar control:Here, SelectedDate is in fact a property - of DateTime type - of the Calendar Web Control type, and the binding could perfectly return something null. The implicit ASP.NET Generator will create a piece of code that will be equivalent to the cast code above. And this will raise a NullReferenceException that is quite difficult to spot, because it lies in ASP.NET generated code which compiles fine...",
                "It means your code used an object reference variable that was set to null (i.e. it did not reference an actual object instance).To prevent the error, objects that could be null should be tested for null before being used.",
                "It means that the variable in question is pointed at nothing. I could generate this like so:That will throw the error because while I've declared the variable \"connection\", it's not pointed to anything. When I try to call the member \"Open\", there's no reference for it to resolve, and it will throw the error.To avoid this error:JetBrains' ReSharper tool will identify every place in your code that has the possibility of a null reference error, allowing you to put in a null check. This error is the number one source of bugs, IMHO.",
                "Be aware that regardless of the scenario, the cause is always the same in .NET:You are trying to use a reference variable whose value is Nothing/null.  When the value is Nothing/null for the reference variable, that means it is not actually holding a reference to an instance of any object that exists on the heap.You either never assigned something to the variable, never created an instance of the value assigned to the variable, or you set the variable equal to Nothing/null manually, or you called a function that set the variable to Nothing/null for you.",
                "An example of this exception being thrown is: When you are trying to check something, that is null.For example:The .NET runtime will throw a NullReferenceException when you attempt to perform an action on something which hasn't been instantiated i.e. the code above.In comparison to an ArgumentNullException which is typically thrown as a defensive measure if a method expects that what is being passed to it is not null.More information is in C# NullReferenceException and Null Parameter.",
                "Update C#8.0, 2019: Nullable reference typesC#8.0 introduces nullable reference types and non-nullable reference types. So only nullable reference types must be checked to avoid a NullReferenceException.If you have not initialized a reference type, and you want to set or read one of its properties, it will throw a NullReferenceException.Example:You can simply avoid this by checking if the variable is not null:To fully understand why a NullReferenceException is thrown, it is important to know the difference between value types and [reference types][3].So, if you're dealing with value types, NullReferenceExceptions can not occur. Though you need to keep alert when dealing with reference types!Only reference types, as the name is suggesting, can hold references or point literally to nothing (or 'null'). Whereas value types always contain a value.Reference types (these ones must be checked):Value types (you can simply ignore these ones):",
                "Another case where NullReferenceExceptions can happen is the (incorrect) use of the as operator:Here, Book and Car are incompatible types; a Car cannot be converted/cast to a Book.  When this cast fails, as returns null.  Using mybook after this causes a NullReferenceException.In general, you should use a cast or as, as follows:If you are expecting the type conversion to always succeed (ie. you know what the object should be ahead of time), then you should use a cast:If you are unsure of the type, but you want to try to use it as a specific type, then use as:",
                "You are using the object that contains the null value reference. So it's giving a null exception. In the example the string value is null and when checking its length, the exception occurred.Example:The exception error is:Unhandled Exception:System.NullReferenceException: Object reference not set to an instance\nof an object. at Program.Main()",
                "While what causes a NullReferenceExceptions and approaches to avoid/fix such an exception have been addressed in other answers, what many programmers haven't learned yet is how to independently debug such exceptions during development.In Visual Studio this is usually easy thanks to the Visual Studio Debugger.First, make sure that the correct error is going to be caught - see\nHow do I allow breaking on 'System.NullReferenceException' in VS2010? Note1Then either Start with Debugging (F5) or Attach [the VS Debugger] to Running Process. On occasion it may be useful to use Debugger.Break, which will prompt to launch the debugger.Now, when the NullReferenceException is thrown (or unhandled) the debugger will stop (remember the rule set above?) on the line on which the exception occurred. Sometimes the error will be easy to spot.For instance,\nin the following line the only code that can cause the exception is if myString evaluates to null. This can be verified by looking at the Watch Window or running expressions in the Immediate Window.In more advanced cases, such as the following, you'll need to use one of the techniques above (Watch or Immediate Windows) to inspect the expressions to determine if str1 was null or if str2 was null.Once where the exception is throw has been located, it's usually trivial to reason backwards to find out where the null value was [incorrectly] introduced --Take the time required to understand the cause of the exception. Inspect for null expressions. Inspect the previous expressions which could have resulted in such null expressions. Add breakpoints and step through the program as appropriate. Use the debugger.1  If Break on Throws is too aggressive and the debugger stops on an NPE in the .NET or 3rd-party library, Break on User-Unhandled can be used to limit the exceptions caught. Additionally, VS2012 introduces Just My Code which I recommend enabling as well.If you are debugging with Just My Code enabled, the behavior is slightly different. With Just My Code enabled, the debugger ignores first-chance common language runtime (CLR) exceptions that are thrown outside of My Code and do not pass through My Code",
                "Simon Mourier gave this example:where an unboxing conversion (cast) from object (or from one of the classes System.ValueType or System.Enum, or from an interface type) to a value type (other than Nullable<>) in itself gives the NullReferenceException.In the other direction, a boxing conversion from a Nullable<> which has HasValue equal to false to a reference type, can give a null reference which can then later lead to a NullReferenceException. The classic example is:Sometimes the boxing happens in another way. For example with this non-generic extension method:the following code will be problematic:These cases arise because of the special rules the runtime uses when boxing Nullable<> instances.",
                "Adding a case when the class name for entity used in entity framework is same as class name for a web form code-behind file.Suppose you have a web form Contact.aspx whose codebehind class is Contact and you have an entity name Contact.Then following code will throw a NullReferenceException when you call context.SaveChanges()For the sake of completeness DataContext classand Contact entity class. Sometimes entity classes are partial classes so that you can extend them in other files too.The error occurs when both the entity and codebehind class are in same namespace.\nTo fix this, rename the entity class or the codebehind class for Contact.aspx.Reason\nI am still not sure about the reason. But whenever any of the entity class will extend System.Web.UI.Page this error occurs.For discussion have a look at NullReferenceException in DbContext.saveChanges()",
                "Another general case where one might receive this exception involves mocking classes during unit testing. Regardless of the mocking framework being used, you must ensure that all appropriate levels of the class hierarchy are properly mocked. In particular, all properties of HttpContext which are referenced by the code under test must be mocked.See \"NullReferenceException thrown when testing custom AuthorizationAttribute\" for a somewhat verbose example.",
                "I have a different perspective to answering this. This sort of answers \"what else can I do to avoid it?\"When working across different layers, for example in an MVC application, a controller needs services to call business operations. In such scenarios Dependency Injection Container can be used to initialize the services to avoid the NullReferenceException. So that means you don't need to worry about checking for null and just call the services from the controller as though they will always to available (and initialized) as either a singleton or a prototype.",
                "On the matter of \"what should I do about it\", there can be many answers.A more \"formal\" way of preventing such error conditions while developing is applying design by contract in your code. This means you need to set class invariants, and/or even function/method preconditions and postconditions on your system, while developing.In short, class invariants ensure that there will be some constraints in your class that will not get violated in normal use (and therefore, the class will not get in an inconsistent state). Preconditions mean that data given as input to a function/method must follow some constraints set and never violate them, and postconditions mean that a function/method output must follow the set constraints again without ever violating them.\nContract conditions should never be violated during execution of a bug-free program, therefore design by contract is checked in practice in debug mode, while being disabled in releases, to maximize the developed system performance.This way, you can avoid NullReferenceException cases that are results of violation of the constraints set. For example, if you use an object property X in a class and later try to invoke one of its methods and X has a null value, then this will lead to NullReferenceException:But if you set \"property X must never have a null value\" as method precondition, then you can prevent the scenario described before:For this cause, Code Contracts project exists for .NET applications.Alternatively, design by contract can be applied using assertions.UPDATE: It is worth mentioning that the term was coined by Bertrand Meyer in connection with his design of the Eiffel programming language.",
                "A NullReferenceException is thrown when we are trying to access Properties of a null object or when a string value becomes empty and we are trying to access string methods.For example:When a string method of an empty string accessed:When a property of a null object accessed:",
                "TL;DR: Try using Html.Partial instead of RenderpageI was getting Object reference not set to an instance of an object when I tried to render a View within a View by sending it a Model, like this:Debugging showed the model was Null inside MyOtherView. Until I changed it to:And it worked.Furthermore, the reason I didn't have Html.Partial to begin with was because Visual Studio sometimes throws error-looking squiggly lines under Html.Partial if it's inside a differently constructed foreach loop, even though it's not really an error:But I was able to run the application with no problems with this \"error\". I was able to get rid of the error by changing the structure of the foreach loop to look like this:Although I have a feeling it was because Visual Studio was misreading the ampersands and brackets.",
                "What can you do about it?There is a lot of good answers here explaining what a null reference is and how to debug it. But there is very little on how to prevent the issue or at least make it easier to catch.Check argumentsFor example, methods can check the different arguments to see if they are null and throw an ArgumentNullException, an exception obviously created for this exact purpose.The constructor for the ArgumentNullException even takes the name of the parameter and a message as arguments so you can tell the developer exactly what the problem is.Use ToolsThere are also several libraries that can help. \"Resharper\" for example can provide you with warnings while you are writing code, especially if you use their attribute: NotNullAttributeThere's \"Microsoft Code Contracts\" where you use syntax like Contract.Requires(obj != null) which gives you runtime and compile checking: Introducing Code Contracts.There's also \"PostSharp\" which will allow you to just use attributes like this:By doing that and making PostSharp part of your build process obj will be checked for null at runtime. See: PostSharp null checkPlain Code SolutionOr you can always code your own approach using plain old code. For example here is a struct that you can use to catch null references. It's modeled after the same concept as Nullable<T>:You would use very similar to the same way you would use Nullable<T>, except with the goal of accomplishing exactly the opposite - to not allow null. Here are some examples:NotNull<T> is implicitly cast to and from T so you can use it just about anywhere you need it. For example, you can pass a Person object to a method that takes a NotNull<Person>:As you can see above as with nullable you would access the underlying value through the Value property. Alternatively, you can use an explicit or implicit cast, you can see an example with the return value below:Or you can even use it when the method just returns T (in this case Person) by doing a cast. For example, the following code would just like the code above:Combine with ExtensionCombine NotNull<T> with an extension method and you can cover even more situations. Here is an example of what the extension method can look like:And here is an example of how it could be used:GitHubFor your reference I made the code above available on GitHub, you can find it at:https://github.com/luisperezphd/NotNullRelated Language FeatureC# 6.0 introduced the \"null-conditional operator\" that helps with this a little. With this feature, you can reference nested objects and if any one of them is null the whole expression returns null.This reduces the number of null checks you have to do in some cases. The syntax is to put a question mark before each dot. Take the following code for example:Imagine that country is an object of type Country that has a property called State and so on. If country, State, County, or City is null then address will benull. Therefore you only have to check whetheraddressisnull`.It's a great feature, but it gives you less information. It doesn't make it obvious which of the 4 is null.Built-in like Nullable?C# has a nice shorthand for Nullable<T>, you can make something nullable by putting a question mark after the type like so int?.It would be nice if C# had something like the NotNull<T> struct above and had a similar shorthand, maybe the exclamation point (!) so that you could write something like: public void WriteName(Person! person).",
                "You can fix NullReferenceException in a clean way using Null-conditional Operators in C# 6 and write less code to handle null checks.It's used to test for null before performing a member access (?.) or index (?[) operation.It is equivalent to:The result is that the name will be null when p is null or when p.Spouse is null.Otherwise, the variable name will be assigned the value of the p.Spouse.FirstName.For more details: Null-conditional Operators",
                "Interestingly, none of the answers on this page mention the two edge cases:Generic dictionaries in .NET are not thread-safe and they sometimes might throw a NullReference or even (more frequent) a KeyNotFoundException when you try to access a key from two concurrent threads. The exception is quite misleading in this case.If a NullReferenceException is thrown by unsafe code, you might look at your pointer variables, and check them for IntPtr.Zero or something. Which is the same thing (\"null pointer exception\"), but in unsafe code, variables are often cast to value-types/arrays, etc., and you bang your head against the wall, wondering how a value-type can throw this exception.(Another reason for non-using unsafe code unless you need it, by the way.)This edge case is software-specific and pertains to the Visual\u00a0Studio\u00a02019 IDE (and possibly earlier versions).A method to reproduce the problem: drag any component from the Toolbox to a Windows form on a non-primary monitor with different DPI setting than the primary monitor, and you get a pop-up with \u201cObject reference not set to an instance of an object.\u201d According to this thread, this issue has been known for quite some time and at the time of writing it still hasn't been fixed.",
                "The error line \"Object reference not set to an instance of an object.\" states that you have not assigned an instance object to a object reference and still you are accessing properties/methods of that object.For example: let's say you have a class called myClass and it contains one property, prop1.Now you are accessing this prop1 in some other class just like below:The above line throws an error because reference of class myClass is declared, but not instantiated or an instance of object is not assigned to a reference of that class.To fix this you have to instantiate (assign an object to a reference of that class).",
                "NullReferenceException or Object reference not set to an instance of an object occurs when an object of the class you are trying to use is not instantiated.\nFor example:Assume that you have a class named Student.Now, consider another class where you are trying to retrieve the student's full name.As seen in the above code, the statement \nStudent s - only declares the variable of type Student, note that the Student class is not instantiated at this point.\nHence, when the statement s.GetFullName() gets executed, it will throw the NullReferenceException.",
                "Well, in simple terms:You are trying to access an object that isn't created or currently not in memory.So how to tackle this:Debug and let the debugger break... It will directly take you to the variable that is broken... Now your task is to simply fix this.. Using the new keyword in the appropriate place.If it is caused on some database commands because the object isn't present then all you need to do is do a null check and handle it:The hardest one .. if the GC collected the object already... This generally occurs if you are trying to find an object using strings... That is, finding it by name of the object then it may happen that the GC might already cleaned it up... This is hard to find and will become quite a problem... A better way to tackle this is do null checks wherever necessary during the development process. This will save you a lot of time.By finding by name I mean some framework allow you to FIndObjects using strings and the code might look like this: FindObject(\"ObjectName\");",
                "Literally the easiest way to fix a NullReferenceExeption has two ways.If you have a GameObject for example with a script attached and a variable named rb (rigidbody) this variable will start with null when you start your game.\nThis is why you get a NullReferenceExeption because the computer does not have data stored in that variable.I'll be using a RigidBody variable as an example.\nWe can add data really easily actually in a few ways:Further Notes: If you want Unity to add a component to your object and you might have forgotten to add one, you can type [RequireComponent(typeof(RigidBody))] above your class declaration (the space below all of your usings).Enjoy and have fun making games!",
                "If one is getting this message during saving or compiling the build, just close all the files and then open any file to compile and save.For me the reason was that I had rename the file and the old file was still open.",
                "This is basically is a Null reference exception. As Microsoft states-A NullReferenceException exception is thrown when you try to access a\nmember of a type whose value is null.That means if any member which doesn\u2019t hold any value and we are making that member to perform certain task then the system will undoubtedly toss a message and say-\u201cHey wait, that member has no values so it can\u2019t perform the task which you are handing it over.\u201dThe exception itself says that something is being referred but whose value is not being set. So this denotes that it only occurs while using reference types as Value types are non-nullable.NullReferenceException won't occur if we are using Value type members.The above code shows simple string which is assigned with a null value.Now, when I try to print the length of the string str, I do get An unhandled exception of type \u2018System.NullReferenceException\u2019 occurred message because member str is pointing to null and there can\u2019t be any length of null.\u2018NullReferenceException\u2019 also occurs when we forget to instantiate a reference type.Suppose I have a class and member method in it. I have not instantiated my class but only named my class. Now if I try to use the method, the compiler will throw an error or issue a warning (depending on the compiler).Compiler for the above code raises an error that variable obj is unassigned which signifies that our variable has null values or nothing. Compiler for the above code raises an error that variable obj is unassigned which signifies that our variable has null values or nothing.NullReferenceException arises due to our fault for not checking the object\u2019s value. We often leave the object values unchecked in the code development.It also arises when we forget to instantiate our objects. Using methods, properties, collections etc. which can return or set null values can also be the cause of this exception.There are various ways and methods to avoid this renowned exception:Explicit Checking: We should adhere to the tradition of checking the objects, properties, methods, arrays, and collections whether they are null. This can be simply implemented using conditional statements like if-else if-else etc.Exception handling: One of the important ways of managing this exception. Using simple try-catch-finally blocks we can control this exception and also maintain a log of it. This can be very useful when your application is on production stage.Null operators: Null Coalescing operator and null conditional operators can also be used in handy while setting values to objects, variables, properties and fields.Debugger: For developers, we have the big weapon of Debugging with us. If have we face NullReferenceException during the development face we can use the debugger to get to the source of the exception.Built-in method: System methods such as GetValueOrDefault(), IsNullOrWhiteSpace(), and IsNullorEmpty() checks for nulls and assign the default value if there is a null value.There are many good answers already here. You can also check more detailed description with examples on my blog.Hope this helps too!"
            ]
        },
        {
            "tag": "IDisposable",
            "patterns": [
                "Proper use of the IDisposable interface", "What is the IDisposable interface", "What is IDisposable", "IDisposable interface", "IDisposable"
            ],
            "responses": [
                "The point of Dispose is to free unmanaged resources. It needs to be done at some point, otherwise they will never be cleaned up. The garbage collector doesn't know how to call DeleteHandle() on a variable of type IntPtr, it doesn't know whether or not it needs to call DeleteHandle().Note: What is an unmanaged resource? If you found it in the Microsoft .NET Framework: it's managed. If you went poking around MSDN yourself, it's unmanaged. Anything you've used P/Invoke calls to get outside of the nice comfy world of everything available to you in the .NET Framework is unmanaged \u2013 and you're now responsible for cleaning it up.The object that you've created needs to expose some method, that the outside world can call, in order to clean up unmanaged resources. The method can be named whatever you like:orBut instead there is a standardized name for this method:There was even an interface created, IDisposable, that has just that one method:So you make your object expose the IDisposable interface, and that way you promise that you've written that single method to clean up your unmanaged resources:And you're done. Except you can do better.What if your object has allocated a 250MB System.Drawing.Bitmap (i.e. the .NET managed Bitmap class) as some sort of frame buffer? Sure, this is a managed .NET object, and the garbage collector will free it. But do you really want to leave 250MB of memory just sitting there \u2013 waiting for the garbage collector to eventually come along and free it? What if there's an open database connection? Surely we don't want that connection sitting open, waiting for the GC to finalize the object.If the user has called Dispose() (meaning they no longer plan to use the object) why not get rid of those wasteful bitmaps and database connections?So now we will:So let's update our Dispose() method to get rid of those managed objects:And all is good, except you can do better!What if the person forgot to call Dispose() on your object? Then they would leak some unmanaged resources!Note: They won't leak managed resources, because eventually the garbage collector is going to run, on a background thread, and free the memory associated with any unused objects. This will include your object, and any managed objects you use (e.g. the Bitmap and the DbConnection).If the person forgot to call Dispose(), we can still save their bacon! We still have a way to call it for them: when the garbage collector finally gets around to freeing (i.e. finalizing) our object.Note: The garbage collector will eventually free all managed objects.\nWhen it does, it calls the Finalize\nmethod on the object. The GC doesn't know, or\ncare, about your Dispose method.\nThat was just a name we chose for\na method we call when we want to get\nrid of unmanaged stuff.The destruction of our object by the Garbage collector is the perfect time to free those pesky unmanaged resources. We do this by overriding the Finalize() method.Note: In C#, you don't explicitly override the Finalize() method.\nYou write a method that looks like a C++ destructor, and the\ncompiler takes that to be your implementation of the Finalize() method:But there's a bug in that code. You see, the garbage collector runs on a background thread; you don't know the order in which two objects are destroyed. It is entirely possible that in your Dispose() code, the managed object you're trying to get rid of (because you wanted to be helpful) is no longer there:So what you need is a way for Finalize() to tell Dispose() that it should not touch any managed resources (because they might not be there anymore), while still freeing unmanaged resources.The standard pattern to do this is to have Finalize() and Dispose() both call a third(!) method; where you pass a Boolean saying if you're calling it from Dispose() (as opposed to Finalize()), meaning it's safe to free managed resources.This internal method could be given some arbitrary name like \"CoreDispose\", or \"MyInternalDispose\", but is tradition to call it Dispose(Boolean):But a more helpful parameter name might be:And you change your implementation of the IDisposable.Dispose() method to:and your finalizer to:Note: If your object descends from an object that implements Dispose, then don't forget to call their base Dispose method when you override Dispose:And all is good, except you can do better!If the user calls Dispose() on your object, then everything has been cleaned up. Later on, when the garbage collector comes along and calls Finalize, it will then call Dispose again.Not only is this wasteful, but if your object has junk references to objects you already disposed of from the last call to Dispose(), you'll try to dispose them again!You'll notice in my code I was careful to remove references to objects that I've disposed, so I don't try to call Dispose on a junk object reference. But that didn't stop a subtle bug from creeping in.When the user calls Dispose(): the handle CursorFileBitmapIconServiceHandle is destroyed. Later when the garbage collector runs, it will try to destroy the same handle again.The way you fix this is tell the garbage collector that it doesn't need to bother finalizing the object \u2013 its resources have already been cleaned up, and no more work is needed. You do this by calling GC.SuppressFinalize() in the Dispose() method:Now that the user has called Dispose(), we have:There's no point in the GC running the finalizer \u2013 everything's taken care of.The documentation for Object.Finalize says:The Finalize method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed.But the MSDN documentation also says, for IDisposable.Dispose:Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.So which is it? Which one is the place for me to cleanup unmanaged resources? The answer is:It's your choice! But choose Dispose.You certainly could place your unmanaged cleanup in the finalizer:The problem with that is you have no idea when the garbage collector will get around to finalizing your object. Your un-managed, un-needed, un-used native resources will stick around until the garbage collector eventually runs. Then it will call your finalizer method; cleaning up unmanaged resources. The documentation of Object.Finalize points this out:The exact time when the finalizer executes is undefined. To ensure deterministic release of resources for instances of your class, implement a Close method or provide a IDisposable.Dispose implementation.This is the virtue of using Dispose to cleanup unmanaged resources; you get to know, and control, when unmanaged resource are cleaned up. Their destruction is \"deterministic\".To answer your original question: Why not release memory now, rather than for when the GC decides to do it? I have a facial recognition software that needs to get rid of 530 MB of internal images now, since they're no longer needed. When we don't: the machine grinds to a swapping halt.For anyone who likes the style of this answer (explaining the why, so the how becomes obvious), I suggest you read Chapter One of Don Box's Essential COM:In 35 pages he explains the problems of using binary objects, and invents COM before your eyes. Once you realize the why of COM, the remaining 300 pages are obvious, and just detail Microsoft's implementation.I think every programmer who has ever dealt with objects or COM should, at the very least, read the first chapter. It is the best explanation of anything ever.When everything you know is wrong archiveby Eric LippertIt is therefore very difficult indeed to write a correct finalizer,\nand the best advice I can give you is to not try.",
                "IDisposable is often used to exploit the using statement and take advantage of an easy way to do deterministic cleanup of managed objects.",
                "The purpose of the Dispose pattern is to provide a mechanism to clean up both managed and unmanaged resources and when that occurs depends on how the Dispose method is being called. In your example, the use of Dispose is not actually doing anything related to dispose, since clearing a list has no impact on that collection being disposed. Likewise, the calls to set the variables to null also have no impact on the GC.You can take a look at this article for more details on how to implement the Dispose pattern, but it basically looks like this:The method that is the most important here is the Dispose(bool), which actually runs under two different circumstances:The problem with simply letting the GC take care of doing the cleanup is that you have no real control over when the GC will run a collection cycle (you can call GC.Collect(), but you really shouldn't) so resources may stay around longer than needed. Remember, calling Dispose() doesn't actually cause a collection cycle or in any way cause the GC to collect/free the object; it simply provides the means to more deterministicly cleanup the resources used and tell the GC that this cleanup has already been performed.The whole point of IDisposable and the dispose pattern isn't about immediately freeing memory. The only time a call to Dispose will actually even have a chance of immediately freeing memory is when it is handling the disposing == false scenario and manipulating unmanaged resources. For managed code, the memory won't actually be reclaimed until the GC runs a collection cycle, which you really have no control over (other than calling GC.Collect(), which I've already mentioned is not a good idea).Your scenario isn't really valid since strings in .NET don't use any unamanged resources and don't implement IDisposable, there is no way to force them to be \"cleaned up.\"",
                "There should be no further calls to an object's methods after Dispose has been called on it (although an object should tolerate further calls to Dispose). Therefore the example in the question is silly. If Dispose is called, then the object itself can be discarded. So the user should just discard all references to that whole object (set them to null) and all the related objects internal to it will automatically get cleaned up.As for the general question about managed/unmanaged and the discussion in other answers, I think any answer to this question has to start with a definition of an unmanaged resource.What it boils down to is that there is a function you can call to put the system into a state, and there's another function you can call to bring it back out of that state. Now, in the typical example, the first one might be a function that returns a file handle, and the second one might be a call to CloseHandle.But - and this is the key - they could be any matching pair of functions. One builds up a state, the other tears it down. If the state has been built but not torn down yet, then an instance of the resource exists. You have to arrange for the teardown to happen at the right time - the resource is not managed by the CLR. The only automatically managed resource type is memory. There are two kinds: the GC, and the stack. Value types are managed by the stack (or by hitching a ride inside reference types), and reference types are managed by the GC.These functions may cause state changes that can be freely interleaved, or may need to be perfectly nested. The state changes may be threadsafe, or they might not.Look at the example in Justice's question. Changes to the Log file's indentation must be perfectly nested, or it all goes wrong. Also they are unlikely to be threadsafe.It is possible to hitch a ride with the garbage collector to get your unmanaged resources cleaned up. But only if the state change functions are threadsafe and two states can have lifetimes that overlap in any way. So Justice's example of a resource must NOT have a finalizer! It just wouldn't help anyone.For those kinds of resources, you can just implement IDisposable, without a finalizer. The finalizer is absolutely optional - it has to be. This is glossed over or not even mentioned in many books.You then have to use the using statement to have any chance of ensuring that Dispose is called. This is essentially like hitching a ride with the stack (so as finalizer is to the GC, using is to the stack).The missing part is that you have to manually write Dispose and make it call onto your fields and your base class. C++/CLI programmers don't have to do that. The compiler writes it for them in most cases.There is an alternative, which I prefer for states that nest perfectly and are not threadsafe (apart from anything else, avoiding IDisposable spares you the problem of having an argument with someone who can't resist adding a finalizer to every class that implements IDisposable).Instead of writing a class, you write a function. The function accepts a delegate to call back to:And then a simple example would be:The lambda being passed in serves as a code block, so it's like you make your own control structure to serve the same purpose as using, except that you no longer have any danger of the caller abusing it. There's no way they can fail to clean up the resource.This technique is less useful if the resource is the kind that may have overlapping lifetimes, because then you want to be able to build resource A, then resource B, then kill resource A and then later kill resource B. You can't do that if you've forced the user to perfectly nest like this. But then you need to use IDisposable (but still without a finalizer, unless you have implemented threadsafety, which isn't free).",
                "Scenarios I make use of IDisposable: clean up unmanaged resources, unsubscribe for events, close connectionsThe idiom I use for implementing IDisposable (not threadsafe):",
                "Yep, that code is completely redundant and unnecessary and it doesn't make the garbage collector do anything it wouldn't otherwise do (once an instance of MyCollection goes out of scope, that is.)  Especially the .Clear() calls.Answer to your edit:  Sort of.  If I do this:It's functionally identical to this for purposes of memory management:If you really really really need to free the memory this very instant, call GC.Collect().  There's no reason to do this here, though.  The memory will be freed when it's needed.",
                "If MyCollection is going to be garbage collected anyway, then you shouldn't need to dispose it.  Doing so will just churn the CPU more than necessary, and may even invalidate some pre-calculated analysis that the garbage collector has already performed.I use IDisposable to do things like ensure threads are disposed correctly, along with unmanaged resources.EDIT In response to Scott's comment:The only time the GC performance metrics are affected is when a call the [sic] GC.Collect() is made\"Conceptually, the GC maintains a view of the object reference graph, and all references to it from the stack frames of threads.  This heap can be quite large and span many pages of memory.  As an optimisation, the GC caches its analysis of pages that are unlikely to change very often to avoid rescanning the page unnecessarily.  The GC receives notification from the kernel when data in a page changes, so it knows that the page is dirty and requires a rescan.  If the collection is in Gen0 then it's likely that other things in the page are changing too, but this is less likely in Gen1 and Gen2.  Anecdotally, these hooks were not available in Mac OS X for the team who ported the GC to Mac in order to get the Silverlight plug-in working on that platform.Another point against unnecessary disposal of resources: imagine a situation where a process is unloading.  Imagine also that the process has been running for some time. Chances are that many of that process's memory pages have been swapped to disk.  At the very least they're no longer in L1 or L2 cache.  In such a situation there is no point for an application that's unloading to swap all those data and code pages back into memory to 'release' resources that are going to be released by the operating system anyway when the process terminates.  This applies to managed and even certain unmanaged resources.  Only resources that keep non-background threads alive must be disposed, otherwise the process will remain alive.Now, during normal execution there are ephemeral resources that must be cleaned up correctly (as @fezmonkey points out database connections, sockets, window handles) to avoid unmanaged memory leaks.  These are the kinds of things that have to be disposed.  If you create some class that owns a thread (and by owns I mean that it created it and therefore is responsible for ensuring it stops, at least by my coding style), then that class most likely must implement IDisposable and tear down the thread during Dispose.The .NET framework uses the IDisposable interface as a signal, even warning, to developers that the this class must be disposed.  I can't think of any types in the framework that implement IDisposable (excluding explicit interface implementations) where disposal is optional.",
                "I won't repeat the usual stuff about Using or freeing un-managed resources, that has all been covered. But I would like to point out what seems a common misconception.\nGiven the following codeI realise that the Disposable implementation does not follow current guidelines, but hopefully you all get the idea.\nNow, when Dispose is called, how much memory gets freed?\n\nAnswer: None.\nCalling Dispose can release unmanaged resources, it CANNOT reclaim managed memory, only the GC can do that.  Thats not to say that the above isn't a good idea, following the above pattern is still a good idea in fact.  Once Dispose has been run, there is nothing stopping the GC re-claiming the memory that was being used by _Large, even though the instance of LargeStuff may still be in scope.  The strings in _Large may also be in gen 0 but the instance of LargeStuff might be gen 2, so again, memory would be re-claimed sooner.\nThere is no point in adding a finaliser to call the Dispose method shown above though.  That will just DELAY the re-claiming of memory to allow the finaliser to run.",
                "In the example you posted, it still doesn't \"free the memory now\". All memory is garbage collected, but it may allow the memory to be collected in an earlier generation. You'd have to run some tests to be sure.The Framework Design Guidelines are guidelines, and not rules. They tell you what the interface is primarily for, when to use it, how to use it, and when not to use it.I once read code that was a simple RollBack() on failure utilizing IDisposable. The MiniTx class below would check a flag on Dispose() and if the Commit call never happened it would then call Rollback on itself. It added a layer of indirection making the calling code a lot easier to understand and maintain. The result looked something like:I've also seen timing / logging code do the same thing. In this case the Dispose() method stopped the timer and logged that the block had exited.So here are a couple of concrete examples that don't do any unmanaged resource cleanup, but do successfully used IDisposable to create cleaner code.",
                "If you want to delete right now, use unmanaged memory.See:",
                "If anything, I'd expect the code to be less efficient than when leaving it out.Calling the Clear() methods are unnecessary, and the GC probably wouldn't do that if the Dispose didn't do it...",
                "Apart from its primary use as a way to control the lifetime of system resources (completely covered by the awesome answer of Ian, kudos!), the IDisposable/using combo can also be used to scope the state change of (critical) global resources: the console, the threads, the process, any global object like an application instance.I've written an article about this pattern: http://pragmateek.com/c-scope-your-global-state-changes-with-idisposable-and-the-using-statement/It illustrates how you can protect some often used global state in a reusable and readable manner: console colors, current thread culture, Excel application object properties...",
                "I see a lot of answers have shifted to talk about using IDisposable for both managed and unmanaged resources.  I'd suggest this article as one of the best explanations that I've found for how IDisposable should actually be used.https://www.codeproject.com/Articles/29534/IDisposable-What-Your-Mother-Never-Told-You-AboutFor the actual question; should you use IDisposable to clean up managed objects that are taking up a lot of memory the short answer would be no.  The reason is that once your object that is holding the memory goes out of scope it is ready for collection.  At that point any referenced child objects are also out of scope and will get collected.The only real exception to this would be if you have a lot of memory tied up in managed objects and you've blocked that thread waiting for some operation to complete.  If those objects where not going to be needed after that call completed then setting those references to null might allow the garbage collector to collect them sooner.  But that scenario would represent bad code that needed to be refactored - not a use case of IDisposable.",
                "Your given code sample is not a good example for IDisposable usage. Dictionary clearing normally shouldn't go to the Dispose method. Dictionary items will be cleared and disposed when it goes out of scope. IDisposable implementation is required to free some memory/handlers that will not release/free even after they out of scope.The following example shows a good example for IDisposable pattern with some code and comments.",
                "There are things that the Dispose() operation does in the example code that might have an effect that would not occur due to a normal GC of the MyCollection object.If the objects referenced by _theList or _theDict are referred to by other objects, then that List<> or Dictionary<> object will not be subject to collection but will suddenly have no contents.  If there were no Dispose() operation as in the example, those collections would still contain their contents.Of course, if this were the situation I would call it a broken design - I'm just pointing out  (pedantically, I suppose) that the Dispose() operation might not be completely redundant, depending on whether there are other uses of the List<> or Dictionary<> that are not shown in the fragment.",
                "One problem with most discussions of \"unmanaged resources\" is that they don't really define the term, but seem to imply that it has something to do with unmanaged code.  While it is true that many types of unmanaged resources do interface with unmanaged code, thinking of unmanaged resources in such terms isn't helpful.Instead, one should recognize what all managed resources have in common: they all entail an object asking some outside 'thing' to do something on its behalf, to the detriment of some other 'things', and the other entity agreeing to do so until further notice.  If the object were to be abandoned and vanish without a trace, nothing would ever tell that outside 'thing' that it no longer needed to alter its behavior on behalf of the object that no longer existed; consequently, the 'thing's usefulness would be permanently diminished.An unmanaged resource, then, represents an agreement by some outside 'thing' to alter its behavior on behalf of an object, which would useless impair the usefulness of that outside 'thing' if the object were abandoned and ceased to exist.  A managed resource is an object which is the beneficiary of such an agreement, but which has signed up to receive notification if it is abandoned, and which will use such notification to put its affairs in order before it is destroyed.",
                "IDisposable is good for unsubscribing from events.",
                "First of definition. For me unmanaged resource means some class, which implements IDisposable interface or something created with usage of calls to dll. GC doesn't know how to deal with such objects. If class has for example only value types, then I don't consider this class as class with unmanaged resources.\nFor my code I follow next practices:public class SomeClass : IDisposable\n    {\n        /// <summary>\n        /// As usually I don't care was object disposed or not\n        /// </summary>\n        public void SomeMethod()\n        {\n            if (_disposed)\n                throw new ObjectDisposedException(\"SomeClass instance been disposed\");\n        }\n\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n\n        private bool _disposed;\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (_disposed)\n                return;\n            if (disposing)//we are in the first call\n            {\n            }\n            _disposed = true;\n        }\n    }",
                "The most justifiable use case for disposal of managed resources, is preparation for the GC to reclaim resources that would otherwise never be collected.A prime example is circular references.Whilst it's best practice to use patterns that avoid circular references, if you do end up with (for example) a 'child' object that has a reference back to its 'parent', this can stop GC collection of the parent if you just abandon the reference and rely on GC - plus if you have implemented a finalizer, it'll never be called.The only way round this is to manually break the circular references by setting the Parent references to null on the children.Implementing IDisposable on parent and children is the best way to do this. When Dispose is called on the Parent, call Dispose on all Children, and in the child Dispose method, set the Parent references to null."
            ]
        },
        {
            "tag": "AddTransient",
            "patterns": [
                "AddTransient, AddScoped and AddSingleton Services Differences", "AddTransient", "AddScoped", "AddSingleton"
            ],
            "responses": [
                "TL;DRTransient objects are always different; a new instance is provided to\nevery controller and every service.Scoped objects are the same within a request, but different across\ndifferent requests.Singleton objects are the same for every object and every request.For more clarification, this example from .NET documentation shows the difference:To demonstrate the difference between these lifetime and registration options, consider a simple interface that represents one or more tasks as an operation with a unique identifier, OperationId. Depending on how we configure the lifetime for this service, the container will provide either the same or different instances of the service to the requesting class. To make it clear which lifetime is being requested, we will create one type per lifetime option:We implement these interfaces using a single class, Operation, that accepts a GUID in its constructor, or uses a new GUID if none is provided:Next, in ConfigureServices, each type is added to the container according to its named lifetime:Note that the IOperationSingletonInstance service is using a specific instance with a known ID of Guid.Empty, so it will be clear when this type is in use. We have also registered an OperationService that depends on each of the other Operation types, so that it will be clear within a request whether this service is getting the same instance as the controller, or a new one, for each operation type. All this service does is expose its dependencies as properties, so they can be displayed in the view.To demonstrate the object lifetimes within and between separate individual requests to the application, the sample includes an OperationsController that requests each kind of IOperation type as well as an OperationService. The Index action then displays all of the controller\u2019s and service\u2019s OperationId values.Now two separate requests are made to this controller action:Observe which of the OperationId values varies within a request, and between requests.Transient objects are always different; a new instance is provided to every controller and every service.Scoped objects are the same within a request, but different across different requestsSingleton objects are the same for every object and every request (regardless of whether an instance is provided in ConfigureServices)",
                "In .NET's dependency injection there are three major lifetimes:Singleton which creates a single instance throughout the application. It creates the instance for the first time and reuses the same object in the all calls.Scoped lifetime services are created once per request within the scope. It is equivalent to a singleton in the current scope. For example, in MVC it creates one instance for each HTTP request, but it uses the same instance in the other calls within the same web request.Transient lifetime services are created each time they are requested. This lifetime works best for lightweight, stateless services.Here you can find and examples to see the difference:ASP.NET 5 MVC6 Dependency Injection in 6 Steps (web archive link due to dead link)Your Dependency Injection ready ASP.NET : ASP.NET 5And this is the link to the official documentation:Dependency injection in ASP.NET Core",
                "TransientScopedSingletonUse Singletons where you need to maintain application wide state. Application configuration or parameters, Logging Service, caching of data is some of the examples where you can use singletons.Never inject Scoped & Transient services into Singleton service. ( This effectively converts the transient or scoped service into the singleton.)Never inject Transient services into scoped service ( This converts the transient service into the scoped.)",
                "This image illustrates this concept well.\nUnfortunately, I could not find the source of this image, but someone made it, he has shown this concept very well in the form of an image.Update: Image reference : ASP.NET Core Service Lifetimes (Infographic) , Author: @WaqasAnwar",
                "Transient, scoped and singleton define object creation process in ASP.NET MVC core DI(Dependency Injection) when multiple objects of the same type have to be injected. In case you are new to dependency injection you can see this DI IoC video.You can see the below controller code in which I have requested two instances of \"IDal\" in the constructor. Transient, Scoped and Singleton define if the same instance will be injected in \"_dal\" and \"_dal1\" or different.Transient: In transient, new object instances will be injected in a single request and response. Below is a snapshot image where I displayed GUID values.Scoped: In scoped, the same object instance will be injected in a single request and response.Singleton: In singleton, the same object will be injected across all requests and responses. In this case one global instance of the object will be created.Below is a simple diagram which explains the above fundamental visually.The above image was drawn by the SBSS team when I was taking ASP.NET MVC training in Mumbai. A big thanks goes to the SBSS team for creating the above image.",
                "AddSingleton() creates a single instance of the service when it is first requested and reuses that same instance in all the places where that service is needed.In a scoped service, with every HTTP request, we get a new instance. However, within the same HTTP request, if the service is required in multiple places, like in the view and in the controller, then the same instance is provided for the entire scope of that HTTP request. But every new HTTP request will get a new instance of the service.With a transient service, a new instance is provided every time a service instance is requested whether it is in the scope of the same HTTP request or across different HTTP requests.",
                "Normally the code request should be made through a constructor parameter, as inI wanted to point out in @akazemis's answer that \"services\" in the context of DI does not imply RESTful services; services are implementations of dependencies that provide functionality.",
                "After looking for an answer for this question I found a brilliant explanation with an example that I would like to share with you.You can watch a video that demonstrate the differences HEREIn this example we have this given code:HomeControllerCreate ViewStartup.csCopy-paste this code and press on the create button in the view and switch between\nAddSingleton , AddScoped and AddTransient you will get each time a different result that will might help you understand this.AddSingleton() - As the name implies, AddSingleton() method creates a\nSingleton service. A Singleton service is created when it is first\nrequested. This same instance is then used by all the subsequent\nrequests. So in general, a Singleton service is created only one time\nper application and that single instance is used throughout the\napplication life time.AddTransient() - This method creates a Transient service. A new\ninstance of a Transient service is created each time it is requested.AddScoped() - This method creates a Scoped service. A new instance of\na Scoped service is created once per request within the scope. For\nexample, in a web application it creates 1 instance per each http\nrequest but uses the same instance in the other calls within that same\nweb request.",
                "DI containers can be pretty mystifying at first, especially with regard to lifetimes.  After all, containers use reflection to make everything \"just work.\"  It helps to think about what containers are actually accomplishing for you under the hood: composing object graphs.For a .NET web app, the alternative to using a DI container is to replace the default controller activator with your own, which must manage lifetimes and construct dependency graphs manually.  For learning purposes, pretend you have a controller activator that is hard-coded to return one particular controller each time there is a web request:For a much deeper dive into DI, I highly recommend the book Dependency Injection Principles, Practices, and Patterns.  My answer is basically just repeating what I learned there.",
                "Probably the best illustration of the lifetime comes into play with the EntityFramework/Core via DbContext.It is recommended that DbContext and repositories that interact with DbContext should be wired up with a Scoped lifetime because a DbContext is obviously a stateful construct.  So you'd not want to use a Singleton because you'd end up with all kinds of concurrency issues.  You'd not want to use Transient because DbContext is not thread safe.  Remember, Transient is for use cases where you're dealing with stateless objects/classes.And since most repositories are called by controllers, it really makes sense to use a Scoped lifetime.  It's conceivable that a DbContext could be invoked multiple times during a single action method as part of a transation.This article doesn't speak directly about these lifetimes but gives a great explanation for why a Scoped lifetime is most appropriate for DbContext.https://mehdi.me/ambient-dbcontext-in-ef6/?msclkid=00251b05d01411ec8d85d232374f26d5"
            ]
        },
        {
            "tag": "foreach",
            "patterns": [
                "Is there a reason for C#'s reuse of the variable in a foreach?", "Why does C# use foreach", "What is foreach", "foreach"
            ],
            "responses": [
                "The compiler declares the variable in a way that makes it highly prone to an error that is often difficult to find and debug, while producing no perceivable benefits.Your criticism is entirely justified.I discuss this problem in detail here:Closing over the loop variable considered harmfulIs there something you can do with foreach loops this way that you couldn't if they were compiled with an inner-scoped variable? or is this just an arbitrary choice that was made before anonymous methods and lambda expressions were available or common, and which hasn't been revised since then?The latter. The C# 1.0 specification actually did not say whether the loop variable was inside or outside the loop body, as it made no observable difference. When closure semantics were introduced in C# 2.0, the choice was made to put the loop variable outside the loop, consistent with the \"for\" loop.I think it is fair to say that all regret that decision. This is one of the worst \"gotchas\" in C#, and we are going to take the breaking change to fix it. In C# 5 the foreach loop variable will be logically inside the body of the loop, and therefore closures will get a fresh copy every time.The for loop will not be changed, and the change will not be \"back ported\" to previous versions of C#. You should therefore continue to be careful when using this idiom.",
                "What you are asking is thoroughly covered by Eric Lippert in his blog post Closing over the loop variable considered harmful and its sequel.For me, the most convincing argument is that having new variable in each iteration would be inconsistent with for(;;) style loop. Would you expect to have a new int i in each iteration of for (int i = 0; i < 10; i++)?The most common problem with this behavior is making a closure over iteration variable and it has an easy workaround:My blog post about this issue: Closure over foreach variable in C#.",
                "Having been bitten by this, I have a habit of including locally defined variables in the innermost scope which I use to transfer to any closure. In your example:I do:Once you have that habit, you can avoid it in the very rare case you actually intended to bind to the outer scopes. To be honest, I don't think I have ever done so.",
                "In C# 5.0, this problem is fixed and you can close over loop variables and get the results you expect.The language specification says:(...)A foreach statement of the formis then expanded to:(...)The placement of v inside the while loop is important for how it is\n  captured by any anonymous function occurring in the\n  embedded-statement. For example:If v was declared outside of the while loop, it would be shared\n  among all iterations, and its value after the for loop would be the\n  final value, 13, which is what the invocation of f would print.\n  Instead, because each iteration has its own variable v, the one\n  captured by f in the first iteration will continue to hold the value\n  7, which is what will be printed. (Note: earlier versions of C#\n  declared v outside of the while loop.)"
            ]
        },
        {
            "tag": "type_checking",
            "patterns": [
                "Type Checking: typeof, GetType, or is?", "Type checking", "Type check", "What is typeof", "What is GetType"
            ],
            "responses": [
                "All are different.What about typeof(T)? Is it also resolved at compile time?Yes. T is always what the type of the expression is. Remember, a generic method is basically a whole bunch of methods with the appropriate type. Example:",
                "Use typeof when you want to get the type at compilation time.  Use GetType when you want to get the type at execution time.  There are rarely any cases to use is as it does a cast and, in most cases, you end up casting the variable anyway.There is a fourth option that you haven't considered (especially if you are going to cast an object to the type you find as well); that is to use as.This only uses one cast whereas this approach:requires two.Update (Jan 2020):Example:",
                "1.This is illegal, because typeof only works on types, not on variables. I assume obj1 is a variable. So, in this way typeof is static, and does its work at compile time instead of runtime.2.This is true if obj1 is exactly of type int. If obj1 derives from int, the if condition will be false.3.This is true if obj1 is an int, or if it derives from a class called int, or if it implements an interface called int.",
                "This is an error.  The typeof operator in C# can only take type names, not objects.This will work, but maybe not as you would expect.  For value types, as you've shown here, it's acceptable, but for reference types, it would only return true if the type was the exact same type, not something else in the inheritance hierarchy.  For instance:This would print \"o is something else\", because the type of o is Dog, not Animal.  You can make this work, however, if you use the IsAssignableFrom method of the Type class.This technique still leaves a major problem, though.  If your variable is null, the call to GetType() will throw a NullReferenceException.  So to make it work correctly, you'd do:With this, you have equivalent behavior of the is keyword.  Hence, if this is the behavior you want, you should use the is keyword, which is more readable and more efficient.In most cases, though, the is keyword still isn't what you really want, because it's usually not enough just to know that an object is of a certain type.  Usually, you want to actually use that object as an instance of that type, which requires casting it too.  And so you may find yourself writing code like this:But that makes the CLR check the object's type up to two times.  It will check it once to satisfy the is operator, and if o is indeed an Animal, we make it check again to validate the cast.It's more efficient to do this instead:The as operator is a cast that won't throw an exception if it fails, instead returning null.  This way, the CLR checks the object's type just once, and after that, we just need to do a null check, which is more efficient.But beware: many people fall into a trap with as.  Because it doesn't throw exceptions, some people think of it as a \"safe\" cast, and they use it exclusively, shunning regular casts.  This leads to errors like this:In this case, the developer is clearly assuming that o will always be an Animal, and as long as their assumption is correct, everything works fine.  But if they're wrong, then what they end up with here is a NullReferenceException.  With a regular cast, they would have gotten an InvalidCastException instead, which would have more correctly identified the problem.Sometimes, this bug can be hard to find:This is another case where the developer is clearly expecting o to be an Animal every time, but this isn't obvious in the constructor, where the as cast is used.  It's not obvious until you get to the Interact method, where the animal field is expected to be positively assigned.  In this case, not only do you end up with a misleading exception, but it isn't thrown until potentially much later than when the actual error occurred.In summary:If you only need to know whether or not an object is of some type, use is.If you need to treat an object as an instance of a certain type, but you don't know for sure that the object will be of that type, use as and check for null.If you need to treat an object as an instance of a certain type, and the object is supposed to be of that type, use a regular cast.",
                "If you're using C# 7, then it is time for an update to Andrew Hare's great answer. Pattern matching has introduced a nice shortcut that gives us a typed variable within the context of the if statement, without requiring a separate declaration/cast and check:This looks pretty underwhelming for a single cast like this, but really shines when you have many possible types coming into your routine. The below is the old way to avoid casting twice:Working around shrinking this code as much as possible, as well as avoiding duplicate casts of the same object has always bothered me. The above is nicely compressed with pattern matching to the following:EDIT: Updated the longer new method to use a switch as per Palec's comment.",
                "I had a Type-property to compare to and could not use is (like my_type is _BaseTypetoLookFor), but I could use these:Notice that IsInstanceOfType and IsAssignableFrom return true when comparing the same types, where IsSubClassOf will return false.  And IsSubclassOf does not work on interfaces, where the other two do.  (See also this question and answer.)",
                "I prefer isThat said, if you're using is, you're likely not using inheritance properly.Assume that Person : Entity, and that Animal : Entity.  Feed is a virtual method in Entity (to make Neil happy)Rather",
                "I believe the last one also looks at inheritance (e.g. Dog is Animal == true), which is better in most cases.",
                "It depends on what I'm doing.  If I need a bool value (say, to determine if I'll cast to an int), I'll use is.  If I actually need the type for some reason (say, to pass to some other method) I'll use GetType().",
                "The last one is cleaner, more obvious, and also checks for subtypes. The others do not check for polymorphism.",
                "I found checking if the type of something is equal to something is done by the following:variableName.GetType() == typeof(int)",
                "You can use \"typeof()\" operator in C# but you need to call the namespace using System.IO; You must use \"is\" keyword if you wish to check for a type.",
                "Performance test typeof() vs GetType():Results in debug mode:Results in release mode:"
            ]
        },
        {
            "tag": "base_constructor",
            "patterns": [
                "Calling the base constructor in C#", "Base constructor", "Calling constructors"
            ],
            "responses": [
                "Modify your constructor to the following so that it calls the base class constructor properly:Note that a constructor is not something that you can call anytime within a method. That's the reason you're getting errors in your call in the constructor body.",
                "Note that you can use static methods within the call to the base constructor.",
                "If you need to call the base constructor but not right away because your new (derived) class needs to do some data manipulation, the best solution is to resort to factory method. What you need to do is to mark private your derived constructor, then make a static method in your class that will do all the necessary stuff and later call the constructor and return the object.",
                "It is true use the base (something) to call the base class constructor, but in case of overloading use the this keyword",
                "You can pass inner exception to one of the constructors.",
                "From Framework Design Guidelines and FxCop rules.:1. Custom Exception should have a name that ends with Exception2. Exception should be public3. CA1032: Exception should implements standard constructors.A serialization constructor protected if the type is not sealed and private if the type is sealed. \nBased on MSDN:or",
                "You can also do a conditional check with parameters in the constructor, which allows some flexibility.or",
                "As per some of the other answers listed here, you can pass parameters into the base class constructor.  It is advised to call your base class constructor at the beginning of the constructor for your inherited class.I note that in your example you never made use of the extraInfo parameter, so I assumed you might want to concatenate the extraInfo string parameter to the Message property of your exception (it seems that this is being ignored in the accepted answer and the code in your question).This is simply achieved by invoking the base class constructor, and then updating the Message property with the extra info.",
                "Using newer C# features, namely out var, you can get rid of the static factory-method.\nI just found out (by accident) that out var parameter of methods called inse base-\"call\" flow to the constructor body.Example, using this base class you want to derive from:The non-compiling pseudo code you want to execute:And the solution by using a static private helper method which produces all required base arguments (plus additional data if needed) and without using a static factory method, just plain constructor to the outside:"
            ]
        },
        {
            "tag": "loop_enum",
            "patterns": [
                "How to loop through all enum values in C#?", "How to loop through enum", "Enum loops"
            ],
            "responses": [
                "Yes you can use the \u200dGetValue\u200d\u200d\u200ds method:Or the typed version:I long ago added a helper function to my private library for just such an occasion:Usage:",
                "Credit to Jon Skeet here: http://bytes.com/groups/net-c/266447-how-loop-each-items-enum",
                "UPDATED\nSome time on, I see a comment that brings me back to my old answer, and I think I'd do it differently now. These days I'd write:",
                "Yes. Use GetValues() method in System.Enum class."
            ]
        },
        {
            "tag": "Enum_attribute",
            "patterns": [
                "What does the [Flags] Enum Attribute mean in C#?", "What is the enum attribute", "Enum flag", "Attribute enum flag"
            ],
            "responses": [
                "The [Flags] attribute should be used whenever the enumerable represents a collection of possible values, rather than a single value. Such collections are often used with bitwise operators, for example:Note that the [Flags] attribute doesn't enable this by itself - all it does is allow a nice representation by the .ToString() method:It is also important to note that [Flags] does not automatically make the enum values powers of two. If you omit the numeric values, the enum will not work as one might expect in bitwise operations, because by default the values start with 0 and increment.Incorrect declaration:The values, if declared this way, will be Yellow = 0, Green = 1, Red = 2, Blue = 3. This will render it useless as flags.Here's an example of a correct declaration:To retrieve the distinct values in your property, one can do this:or prior to .NET 4:Under the coversThis works because you used powers of two in your enumeration. Under the covers, your enumeration values look like this in binary ones and zeros:Similarly, after you've set your property AllowedColors to Red, Green and Blue using the binary bitwise OR | operator, AllowedColors looks like this:So when you retrieve the value you are actually performing bitwise AND & on the values:The None = 0 valueAnd regarding the use of 0 in your enumeration, quoting from MSDN:Use None as the name of the flag enumerated constant whose value is zero. You cannot use the None enumerated constant in a bitwise AND operation to test for a flag because the result is always zero. However, you can perform a logical, not a bitwise, comparison between the numeric value and the None enumerated constant to determine whether any bits in the numeric value are set.You can find more info about the flags attribute and its usage at msdn and designing flags at msdn",
                "You can also do thisI find the bit-shifting easier than typing 4,8,16,32 and so on. It has no impact on your code because it's all done at compile time",
                "Combining answers https://stackoverflow.com/a/8462/1037948 (declaration via bit-shifting) and https://stackoverflow.com/a/9117/1037948 (using combinations in declaration) you can bit-shift previous values rather than using numbers.  Not necessarily recommending it, but just pointing out you can.Rather than:You can declareConfirming with LinqPad:Results in:",
                "In extension to the accepted answer, in C#7 the enum flags can be written using binary literals:I think this representation makes it clear how the flags work under the covers.",
                "Please see the following for an example which shows the declaration and potential usage:",
                "I asked recently about something similar.If you use flags you can add an extension method to enums to make checking the contained flags easier (see post for detail)This allows you to do:Then you can do:I find this easier to read than the most ways of checking the included flags.",
                "When working with flags I often declare additional None and All items. These are helpful to check whether all flags are set or no flag is set.Usage:Update 2019-10:Since C# 7.0 you can use binary literals, which are probably more intuitive to read:",
                "@NidonocuTo add another flag to an existing set of values, use the OR assignment operator.",
                "To add Mode.Write:",
                "There's something overly verbose to me about the if ((x & y) == y)... construct, especially if x AND y are both compound sets of flags and you only want to know if there's any overlap.In this case, all you really need to know is if there's a non-zero value[1] after you've bitmasked.[1] See Jaime's comment.  If we were authentically bitmasking, we'd\n  only need to check that the result was positive.  But since enums\n  can be negative, even, strangely, when combined with the [Flags]\n  attribute,\n  it's defensive to code for != 0 rather than > 0.Building off of @andnil's setup...",
                "Flags allow you to use bitmasking inside your enumeration.  This allows you to combine enumeration values, while retaining which ones are specified.",
                "Apologies if someone already noticed this scenario. A perfect example of flags we can see in reflection. Yes Binding Flags ENUM.Usage",
                "Flags are used when an enumerable value represents a collection of\nenum members.here we use bitwise operators, | and &Example"
            ]
        },
        {
            "tag": "inherit",
            "patterns": [
                "Why not inherit from List<T>?", "Inheriting from List<T>", "Inherit from list", "Inheriting from a list"
            ],
            "responses": [
                "There are some good answers here. I would add to them the following points.What is the correct C# way of representing a data structure, which, \"logically\" (that is to say, \"to the human mind\") is just a list of things with a few bells and whistles?Ask any ten non-computer-programmer people who are familiar with the existence of football to fill in the blank:A football team is a particular kind of _____Did anyone say \"list of football players with a few bells and whistles\", or did they all say \"sports team\" or \"club\" or \"organization\"?  Your notion that a football team is a particular kind of list of players is in your human mind and your human mind alone.List<T> is a mechanism.  Football team is a business object -- that is, an object that represents some concept that is in the business domain of the program. Don't mix those! A football team is a kind of team; it has a roster, a roster is a list of players. A roster is not a particular kind of list of players. A roster is a list of players. So make a property called Roster that is a List<Player>. And make it ReadOnlyList<Player> while you're at it, unless you believe that everyone who knows about a football team gets to delete players from the roster.Is inheriting from List<T> always unacceptable?Unacceptable to whom? Me? No.When is it acceptable?When you're building a mechanism that extends the List<T> mechanism.What must a programmer consider, when deciding whether to inherit from List<T> or not?Am I building a mechanism or a business object?But that's a lot of code! What do I get for all that work?You spent more time typing up your question that it would have taken you to write forwarding methods for the relevant members of List<T> fifty times over. You're clearly not afraid of verbosity, and we are talking about a very small amount of code here; this is a few minutes work.I gave it some more thought and there is another reason to not model a football team as a list of players. In fact it might be a bad idea to model a football team as having a list of players too. The problem with a team as/having a list of players is that what you've got is a snapshot of the team at a moment in time. I don't know what your business case is for this class, but if I had a class that represented a football team I would want to ask it questions like \"how many Seahawks players missed games due to injury between 2003 and 2013?\" or \"What Denver player who previously played for another team had the largest year-over-year increase in yards ran?\" or \"Did the Piggers go all the way this year?\"That is, a football team seems to me to be well modeled as a collection of historical facts such as when a player was recruited, injured, retired, etc. Obviously the current player roster is an important fact that should probably be front-and-center, but there may be other interesting things you want to do with this object that require a more historical perspective.",
                "Wow, your post has an entire slew of questions and points. Most of the reasoning you get from Microsoft is exactly on point. Let's start with everything about List<T>If I were writing this code, the class would probably look something like so:",
                "Previous code means: a bunch of guys from the street playing football, and they happen to have a name. Something like:Anyway, this code (from m-y's answer)Means: this is a football team which has management, players, admins, etc. Something like:This is how is your logic presented in pictures\u2026",
                "This is a classic example of composition vs inheritance.In this specific case:Is the team a list of players with added behaviororIs the team an object of its own that happens to contain a list of players.By extending List you are limiting yourself in a number of ways:You cannot restrict access (for example, stopping people changing the roster). You get all the List methods whether you need/want them all or not.What happens if you want to have lists of other things as well. For example, teams have coaches, managers, fans, equipment, etc. Some of those might well be lists in their own right.You limit your options for inheritance. For example you might want to create a generic Team object, and then have BaseballTeam, FootballTeam, etc. that inherit from that. To inherit from List you need to do the inheritance from Team, but that then means that all the various types of team are forced to have the same implementation of that roster.Composition - including an object giving the behavior you want inside your object.Inheritance - your object becomes an instance of the object that has the behavior you want.Both have their uses, but this is a clear case where composition is preferable.",
                "As everyone has pointed out, a team of players is not a list of players. This mistake is made by many people everywhere, perhaps at various levels of expertise. Often the problem is subtle and occasionally very gross, as in this case. Such designs are bad because these violate the  Liskov Substitution Principle. The internet has many good articles explaining this concept e.g., http://en.wikipedia.org/wiki/Liskov_substitution_principleIn summary, there are two rules to be preserved in a Parent/Child relationship among classes:In other words, a Parent is a necessary definition of a child, and a child is a sufficient definition of a Parent.Here is a way to think through ones solution and apply the above principle that should help one avoid such a mistake. One should test ones hypothesis by verifying if all the operations of a parent class are valid for the derived class both structurally and semantically.As you see, only the first characteristic of a list is applicable to a team. Hence a team is not a list. A list would be a implementation detail of how you manage your team, so it should only be used to store the player objects and be manipulated with methods of Team class.At this point I'd like to remark that a Team class should, in my opinion, not even be implemented using a List; it should be implemented using a Set data structure (HashSet, for example) in most cases.",
                "What if the FootballTeam has a reserves team along with the main team?How would you model that with?The relationship is clearly has a and not is a.or RetiredPlayers?As a rule of thumb, if you ever want to inherit from a collection, name the class SomethingCollection.Does your SomethingCollection semantically make sense? Only do this if your type is a collection of Something.In the case of FootballTeam it doesn't sound right. A Team is more than a Collection. A Team can have coaches, trainers, etc as the other answers have pointed out.FootballCollection sounds like a collection of footballs or maybe a collection of football paraphernalia. TeamCollection, a collection of teams.FootballPlayerCollection sounds like a collection of players which would be a valid name for a class that inherits from List<FootballPlayer> if you really wanted to do that.Really List<FootballPlayer> is a perfectly good type to deal with. Maybe IList<FootballPlayer> if you are returning it from a method.In summaryAsk yourselfIs X a Y? or Has X a Y?Do my class names mean what they are?",
                "What methods and properties you expose is a design decision. What base class you inherit from is an implementation detail. I feel it's worth taking a step back to the former.An object is a collection of data and behaviour.So your first questions should be:Bear in mind that inheritance implies an \"isa\" (is a) relationship, whereas composition implies a \"has a\" (hasa) relationship. Choose the right one for your situation in your view, bearing in mind where things might go as your application evolves.Consider thinking in interfaces before you think in concrete types, as some people find it easier to put their brain in \"design mode\" that way.This isn't something everyone does consciously at this level in day to day coding. But if you're mulling this sort of topic, you're treading in design waters. Being aware of it can be liberating.Take a look at List<T> and IList<T> on MSDN or Visual Studio. See what methods and properties they expose. Do these methods all look like something someone would want to do to a FootballTeam in your view?Does footballTeam.Reverse() make sense to you? Does footballTeam.ConvertAll<TOutput>() look like something you want?This isn't a trick question; the answer might genuinely be \"yes\". If you implement/inherit List<Player> or IList<Player>, you're stuck with them; if that's ideal for your model, do it.If you decide yes, that makes sense, and you want your object to be treatable as a collection/list of players (behaviour), and you therefore want to implement ICollection<Player> or IList<Player>, by all means do so. Notionally:If you want your object to contain a collection/list of players (data), and you therefore want the collection or list to be a property or member, by all means do so. Notionally:You might feel that you want people to be able to only enumerate the set of players, rather than count them, add to them or remove them. IEnumerable<Player> is a perfectly valid option to consider.You might feel that none of these interfaces are useful in your model at all. This is less likely (IEnumerable<T> is useful in many situations) but it's still possible.Anyone who attempts to tell you that one of these it is categorically and definitively wrong in every case is misguided. Anyone who attempts to tell you it is categorically and definitively right in every case is misguided.Once you've decided on data and behaviour, you can make a decision about implementation. This includes which concrete classes you depend on via inheritance or composition.This may not be a big step, and people often conflate design and implementation since it's quite possible to run through it all in your head in a second or two and start typing away.An artificial example: as others have mentioned, a team is not always \"just\" a collection of players. Do you maintain a collection of match scores for the team? Is the team interchangeable with the club, in your model? If so, and if your team isa collection of players, perhaps it also isa collection of staff and/or a collection of scores. Then you end up with:Design notwithstanding, at this point in C# you won't be able to implement all of these by inheriting from List<T> anyway, since C# \"only\" supports single inheritance. (If you've tried this malarkey in C++, you may consider this a Good Thing.) Implementing one collection via inheritance and one via composition is likely to feel dirty. And properties such as Count become confusing to users unless you implement ILIst<Player>.Count and IList<StaffMember>.Count etc. explicitly, and then they're just painful rather than confusing. You can see where this is going; gut feeling whilst thinking down this avenue may well tell you it feels wrong to head in this direction (and rightly or wrongly, your colleagues might also if you implemented it this way!)The guideline about not inheriting from collection classes isn't C# specific, you'll find it in many programming languages. It is received wisdom not a law. One reason is that in practice composition is considered to often win out over inheritance in terms of comprehensibility, implementability and maintainability. It's more common with real world / domain objects to find useful and consistent \"hasa\" relationships than useful and consistent \"isa\" relationships unless you're deep in the abstract, most especially as time passes and the precise data and behaviour of objects in code changes. This shouldn't cause you to always rule out inheriting from collection classes; but it may be suggestive.",
                "First of all, it has to do with usability. If you use inheritance, the Team class will expose behavior (methods) that are designed purely for object manipulation. For example, AsReadOnly() or CopyTo(obj) methods make no sense for the team object. Instead of the AddRange(items) method you would probably want a more descriptive AddPlayers(players) method.If you want to use LINQ, implementing a generic interface such as ICollection<T> or IEnumerable<T> would make more sense.As mentioned, composition is the right way to go about it. Just implement a list of players as a private variable.",
                "Let me rewrite your question. so you might see the subject from a different perspective.When I need to represent a football team, I understand that it is basically a name. Like: \"The Eagles\"Then later I realized teams also have players.Why can't I just extend the string type so that it also holds a list of players?Your point of entry into the problem is arbitrary. Try to think what does a team have (properties), not what it is.After you do that, you could see if it shares properties with other classes. And think about inheritance.",
                "When you consider your team as a list of players, you are projecting the \"idea\" of a foot ball team down to one aspect: You reduce the \"team\" to the people you see on the field. This projection is only correct in a certain context. In a different context, this might be completely wrong. Imagine you want to become a sponsor of the team. So you have to talk to the managers of the team. In this context the team is projected to the list of its managers. And these two lists usually don't overlap very much. Other contexts are the current versus the former players, etc.So the problem with considering a team as a list of its players is that its semantic depends on the context and that it cannot be extended when the context changes. Additionally it is hard to express, which context you are using.When you using a class with only one member (e.g. IList activePlayers), you can use the name of the member (and additionally its comment) to make the context clear. When there are additional contexts, you just add an additional member.In some cases it might be overkill to create an extra class. Each class definition must be loaded through the classloader and will be cached by the virtual machine. This costs you runtime performance and memory. When you have a very specific context it might be OK to consider a football team as a list of players. But in this case, you should really just use a  IList , not a class derived from it.When you have a very specific context, it is OK to consider a team as a list of players. For example inside a method it is completely OK to write:When using F#, it can even be OK to create a type abbreviation:But when the context is broader or even unclear, you should not do this. This is especially the case when you create a new class whose context in which it may be used in the future is not clear. A warning sign is when you start to add additional attributes to your class (name of the team, coach, etc.). This is a clear sign that the context where the class will be used is not fixed and will change in the future. In this case you cannot consider the team as a list of players, but you should model the list of the (currently active, not injured, etc.) players as an attribute of the team.",
                "A football team is not a list of football players. A football team is composed of a list of football players!This is logically wrong:and this is correct:",
                "Just because I think the other answers pretty much go off on a tangent of whether a football team \"is-a\" List<FootballPlayer> or \"has-a\" List<FootballPlayer>, which really doesn't answer this question as written.The OP chiefly asks for clarification on guidelines for inheriting from List<T>:A guideline says that you shouldn't inherit from List<T>. Why not?Because List<T> has no virtual methods. This is less of a problem in your own code, since you can usually switch out the implementation with relatively little pain - but can be a much bigger deal in a public API.What is a public API and why should I care?A public API is an interface you expose to 3rd party programmers. Think framework code. And recall that the guidelines being referenced are the \".NET Framework Design Guidelines\" and not the \".NET Application Design Guidelines\". There is a difference, and - generally speaking - public API design is a lot more strict.If my current project does not and is not likely to ever have this public API, can I safely ignore this guideline? If I do inherit from List and it turns out I need a public API, what difficulties will I have?Pretty much, yeah. You may want to consider the rationale behind it to see if it applies to your situation anyway, but if you're not building a public API then you don't particularly need to worry about API concerns like versioning (of which, this is a subset).If you add a public API in the future, you will either need to abstract out your API from your implementation (by not exposing your List<T> directly) or violate the guidelines with the possible future pain that entails.Why does it even matter? A list is a list. What could possibly change? What could I possibly want to change?Depends on the context, but since we're using FootballTeam as an example - imagine that you can't add a FootballPlayer if it would cause the team to go over the salary cap. A possible way of adding that would be something like:Ah...but you can't override Add because it's not virtual (for performance reasons).If you're in an application (which, basically, means that you and all of your callers are compiled together) then you can now change to using IList<T> and fix up any compile errors:but, if you've publically exposed to a 3rd party you just made a breaking change that will cause compile and/or runtime errors.TL;DR - the guidelines are for public APIs. For private APIs, do what you want.",
                "Does allowing people to saymake any sense at all? If not then it shouldn't be a List.",
                "There are a lot excellent answers here, but I want to touch on something I didn't see mentioned: Object oriented design is about empowering objects.You want to encapsulate all your rules, additional work and internal details inside an appropriate object. In this way other objects interacting with this one don't have to worry about it all. In fact, you want to go a step further and actively prevent other objects from bypassing these internals.When you inherit from List, all other objects can see you as a List. They have direct access to the methods for adding and removing players. And you'll have lost your control; for example:Suppose you want to differentiate when a player leaves by knowing whether they retired, resigned or were fired. You could implement a RemovePlayer method that takes an appropriate input enum. However, by inheriting from List, you would be unable to prevent direct access to Remove, RemoveAll and even Clear. As a result, you've actually disempowered your FootballTeam class.Additional thoughts on encapsulation... You raised the following concern:It makes my code needlessly verbose. I must now call my_team.Players.Count instead of just my_team.Count.You're correct, that would be needlessly verbose for all clients to use you team. However, that problem is very small in comparison to the fact that you've exposed List Players to all and sundry so they can fiddle with your team without your consent.You go on to say:It just plain doesn't make any sense. A football team doesn't \"have\" a list of players. It is the list of players. You don't say \"John McFootballer has joined SomeTeam's players\". You say \"John has joined SomeTeam\".You're wrong about the first bit: Drop the word 'list', and it's actually obvious that a team does have players.\nHowever, you hit the nail on the head with the second. You don't want clients calling ateam.Players.Add(...). You do want them calling ateam.AddPlayer(...). And your implemention would (possibly amongst other things) call Players.Add(...) internally.Hopefully you can see how important encapsulation is to the objective of empowering your objects. You want to allow each class to do its job well without fear of interference from other objects.",
                "It depends on the behaviour of your \"team\" object.  If it behaves just like a collection, it might be OK to represent it first with a plain List.  Then you might start to notice that you keep duplicating code that iterates on the list; at this point you have the option of creating a FootballTeam object that wraps the list of players.  The FootballTeam class becomes the home for all the code that iterates on the list of players.It makes my code needlessly verbose. I must now call my_team.Players.Count instead of just my_team.Count. Thankfully, with C# I can define indexers to make indexing transparent, and forward all the methods of the internal List... But that's a lot of code! What do I get for all that work?Encapsulation.  Your clients need not know what goes on inside of FootballTeam.  For all your clients know, it might be implemented by looking the list of players up in a database.  They don't need to know, and this improves your design.It just plain doesn't make any sense. A football team doesn't \"have\" a list of players. It is the list of players. You don't say \"John McFootballer has joined SomeTeam's players\". You say \"John has joined SomeTeam\". You don't add a letter to \"a string's characters\", you add a letter to a string. You don't add a book to a library's books, you add a book to a library.Exactly :) you will say footballTeam.Add(john), not footballTeam.List.Add(john).  The internal list will not be visible.",
                "What is the correct C# way of representing a data structure...Remeber, \"All models are wrong, but some are useful.\" -George E. P. BoxThere is no a \"correct way\", only a useful one.Choose one that is useful to you and/your users. That's it. Develop economically, don't over-engineer. The less code you write, the less code you will need to debug. (read the following editions).-- EditedMy best answer would be... it depends. Inheriting from a List would expose the clients of this class to methods that may be should not be exposed, primarily because FootballTeam looks like a business entity.-- Edition 2I sincerely don't remember to what I was referring on the \u201cdon't over-engineer\u201d comment. While I believe the KISS mindset is a good guide, I want to emphasize that inheriting a business class from List would create more problems than it resolves, due abstraction leakage.On the other hand, I believe there are a limited number of cases where simply to inherit from List is useful. As I wrote in the previous edition, it depends. The answer to each case is heavily influenced by both knowledge, experience and personal preferences.Thanks to @kai for helping me to think more precisely about the answer.",
                "This reminds me of the \"Is a\" versus \"has a\" tradeoff.  Sometimes it is easier and makesmore sense to inherit directly from a super class.  Other times it makes more sense to create a standalone class and include the class you would have inherited from as a member variable.  You can still access the functionality of the class but are not bound to the interface or any other constraints that might come from inheriting from the class.Which do you do?  As with a lot of things...it depends on the context.  The guide I would use is that in order to inherit from another class there truly should be an \"is a\" relationship.  So if you a writing a class called BMW, it could inherit from Car because a BMW truly is a car.  A Horse class can inherit from the Mammal class because a horse actually is a mammal in real life and any Mammal functionality should be relevant to Horse.  But can you say that a team is a list?  From what I can tell, it does not seem like a Team really \"is a\" List.  So in this case, I would have a List as a member variable.",
                "Further reading: When a class is inherited from List<>, XmlSerializer doesn't serialize other attributesPersonaly I wouldn't inherit from List but implement IList. Visual Studio will do the job for you and create a full working iplementation. Look here: How to get a full working implementation of IList",
                "What the guidelines say is that the public API should not reveal the internal design decision of whether you are using a list, a set, a dictionary, a tree or whatever. A \"team\" is not necessarily a list. You may implement it as a list but users of your public API should use you class on a need to know basis. This allows you to change your decision and use a different data structure without affecting the public interface.",
                "When they say List<T> is \"optimized\" I think they want to mean that it doesn't have features like virtual methods which are bit more expensive. So the problem is that once you expose List<T> in your public API, you loose ability to enforce business rules or customize its functionality later. But if you are using this inherited class as internal within your project (as opposed to potentially exposed to thousands of your customers/partners/other teams as API) then it may be OK if it saves your time and it is the functionality you want to duplicate. The advantage of inheriting from List<T> is that you eliminate lot of dumb wrapper code that is just never going to be customized in foreseeable future. Also if you want your class to explicitly have exact same semantics as List<T> for the life of your APIs then also it may be OK.I often see lot of people doing tons of extra work just because of FxCop rule says so or someone's blog says it's a \"bad\" practice. Many times, this turns code in to design pattern palooza weirdness. As with lot of guideline, treat it as guideline that can have exceptions.",
                "My dirty secret: I don't care what people say, and I do it. .NET Framework is spread with \"XxxxCollection\" (UIElementCollection for top of my head example).So what stops me saying:When I find it better thanMoreover, my PlayerCollection might be used by other class, like \"Club\" without any code duplication.Best practices of yesterday, might not be the one of tomorrow. There is no reason behind most best practices, most are only wide agreement among the community. Instead of asking the community if it will blame you when you do that ask yourself, what is more readable and maintainable?orReally. Do you have any doubt? Now maybe you need to play with other technical constraints that prevent you to use List<T> in your real use case. But don't add a constraint that should not exist. If Microsoft did not document the why, then it is surely a \"best practice\" coming from nowhere.",
                "While I don't have a complex comparison as most of these answers do, I would like to share my method for handling this situation. By extending IEnumerable<T>, you can allow your Team class to support Linq query extensions, without publicly exposing all the methods and properties of List<T>.",
                "I just wanted to add that Bertrand Meyer, the inventor of Eiffel and design by contract, would have Team inherit from List<Player> without so much as batting an eyelid.In his book, Object-Oriented Software Construction, he discusses the implementation of a GUI system where rectangular windows can have child windows. He simply has Window inherit from both Rectangle and Tree<Window> to reuse the implementation.However, C# is not Eiffel. The latter supports multiple inheritance and renaming of features. In C#, when you subclass, you inherit both the interface and the implemenation. You can override the implementation, but the calling conventions are copied directly from the superclass. In Eiffel, however, you can modify the names of the public methods, so you can rename Add and Remove to Hire and Fire in your Team. If an instance of Team is upcast back to List<Player>, the caller will use Add and Remove to modify it, but your virtual methods Hire and Fire will be called.",
                "If your class users need all the methods and properties** List has, you should derive your class from it. If they don't need them, enclose the List and make wrappers for methods your class users actually need.This is a strict rule, if you write a public API, or any other code that will be used by many people. You may ignore this rule if you have a tiny app and no more than 2 developers. This will save you some time.For tiny apps, you may also consider choosing another, less strict language. Ruby, JavaScript - anything that allows you to write less code.",
                "I think I don't agree with your generalization.  A team isn't just a collection of players.  A team has so much more information about it - name, emblem, collection of management/admin staff, collection of coaching crew, then collection of players. So properly, your FootballTeam class should have 3 collections and not itself be a collection; if it is to properly model the real world.You could consider a PlayerCollection class which like the Specialized StringCollection offers some other facilities - like validation and checks before objects are added to or removed from the internal store.Perhaps, the notion of a PlayerCollection betters suits your preferred approach?And then the FootballTeam can look like this:",
                "Classes should avoid deriving from classes and instead implement the minimal interfaces necessary.Deriving from classes breaks encapsulation:Among other things this makes it harder to refactor your code.Classes are an implementation detail that should be hidden from other parts of your code. \nIn short a System.List is a specific implementation of an abstract data type, that may or may not be appropriate now and in the future.Conceptually the fact that the System.List data type is called \"list\" is a bit of a red-herring. A System.List<T> is a mutable ordered collection that supports amortized O(1) operations for adding, inserting, and removing elements, and O(1) operations for retrieving the number of elements or getting and setting element by index.When designing a data structure, the simpler the interface is, the more flexible the code is. Just look at how powerful LINQ is for a demonstration of this.When you think \"list\" you should start by saying to yourself, \"I need to represent a collection of baseball players\". So let's say you decide to model this with a class. What you should do first is decide what the minimal amount of interfaces that this class will need to expose.Some questions that can help guide this process:This way you will not be coupling other parts of the code to implementation details of your baseball players collection and will be free to change how it is implemented as long as you respect the interface.By taking this approach you will find that code becomes easier to read, refactor, and reuse.Implementing interfaces in a modern IDE should be easy. Right click and choose \"Implement Interface\". Then forward all of the implementations to a member class if you need to.That said, if you find you are writing lots of boilerplate, it is potentially because you are exposing more functions than you should be. It is the same reason you shouldn't inherit from a class.You can also design smaller interfaces that make sense for your application, and maybe just a couple of helper extension functions to map those interfaces to any others that you need. This is the approach I took in my own IArray interface for the LinqArray library.",
                "When is it acceptable?To quote Eric Lippert:When you're building a mechanism that extends the List<T> mechanism.For example, you are tired of the absence of the AddRange method in IList<T>:"
            ]
        },
        {
            "tag": "const",
            "patterns": [
                "What is the difference between const and readonly in C#?", "what is const", "What is readonly"
            ],
            "responses": [
                "Apart from the apparent difference ofThere is a subtle difference. Consider a class defined in AssemblyA.AssemblyB references AssemblyA and uses these values in code. When this is compiled:So if you are confident that the value of the constant won't change, use a const.But if you have a constant that may change (e.g. w.r.t. precision) or when in doubt, use a readonly.Update: Aku needs to get a mention because he pointed this out first. Also I need to plug where I learned this: Effective C# - Bill Wagner",
                "There is a gotcha with consts! If you reference a constant from another assembly, its value will be compiled right into the calling assembly. That way when you update the constant in the referenced assembly it won't change in the calling assembly!",
                "Just to add, readonly for reference types only makes the reference read only not the values. For example:",
                "This explains it. Summary: const must be initialized at declaration time, readonly can be initialized on the constructor (and thus have a different value depending on the constructor used).EDIT: See Gishu's gotcha above for the subtle difference",
                "const: Can't be changed anywhere.readonly: This value can only be changed in the constructor. Can't be changed in normal functions.",
                "A constant member is defined at compile time and cannot be changed at runtime. Constants are declared as a field, using the const keyword and must be initialized as they are declared.A readonly member is like a constant in that it represents an unchanging value. The difference is that a readonly member can be initialized at runtime, in a constructor, as well being able to be initialized as they are declared.constreadonly",
                "There is a small gotcha with readonly. A readonly field can be set multiple times within the constructor(s). Even if the value is set in two different chained constructors it is still allowed.",
                "A const is a compile-time constant whereas readonly allows a value to be calculated at run-time and set in the constructor or field initializer. So, a 'const' is always constant but 'readonly' is read-only once it is assigned.Eric Lippert of the C# team has more information on different types of immutability.",
                "Here's another link demonstrating how const isn't version safe, or relevant for reference types.Summary:",
                "Read Only :\nValue can be changed through Ctor at runtime. But not through member FunctionConstant :\nBy default static. Value cannot be changed from anywhere ( Ctor, Function, runtime etc no-where)",
                "Yet another gotcha: readonly values can be changed by \"devious\" code via reflection.Can I change a private readonly inherited field in C# using reflection?",
                "I believe a const value is the same for all objects (and must be initialized with a literal expression), whereas readonly can be different for each instantiation...",
                "One of the team members in our office provided the following guidance on when to use const, static, and readonly:One final note: a const field is static, but the inverse is not true.",
                "They are both constant, but a const is available also at compile time. This means that one aspect of the difference is that you can use const variables as input to attribute constructors, but not readonly variables.Example:",
                "when to use const or readonlyconstreadonly",
                "Variables marked const are little more than strongly typed #define macros, at compile time const variable references are replaced with inline literal values. As a consequence only certain built-in primitive value types can be used in this way. Variables marked readonly can be set, in a constructor, at run-time and their read-only-ness is enforced during run-time as well. There is some minor performance cost associated with this but it means you can use readonly with any type (even reference types).Also, const variables are inherently static, whereas readonly variables can be instance specific if desired.",
                "There is notable difference between const and readonly fields in C#.Netconst is by default static and needs to be initialized with constant value, which can not be modified later on. Change of value is not allowed in constructors, too. It can not be used with all datatypes. For ex- DateTime. It can not be used with DateTime datatype.readonly can be declared as static, but not necessary. No need to initialize at the time of declaration. Its value can be assigned or changed using constructor. So, it gives advantage when used as instance class member. Two different instantiation may have different value of readonly field. For ex -Then readonly field can be initialised with instant specific values, as follows:Here, instance objOne will have value of readonly field as 5 and objTwo has 10. Which is not possible using const.",
                "Another gotcha.\nSince const really only works with basic data types, if you want to work with a class, you may feel \"forced\" to use ReadOnly.  However, beware of the trap!  ReadOnly means that you can not replace the object with another object (you can't make it refer to another object).  But any process that has a reference to the object is free to modify the values inside the object!\nSo don't be confused into thinking that ReadOnly implies a user can't change things.  There is no simple syntax in C# to prevent an instantiation of a class from having its internal values changed (as far as I know).Since const really only works with basic data types, if you want to work with a class, you may feel \"forced\" to use ReadOnly.  However, beware of the trap!  ReadOnly means that you can not replace the object with another object (you can't make it refer to another object).  But any process that has a reference to the object is free to modify the values inside the object!\nSo don't be confused into thinking that ReadOnly implies a user can't change things.  There is no simple syntax in C# to prevent an instantiation of a class from having its internal values changed (as far as I know).So don't be confused into thinking that ReadOnly implies a user can't change things.  There is no simple syntax in C# to prevent an instantiation of a class from having its internal values changed (as far as I know).",
                "A const has to be hard-coded, where as readonly can be set in the constructor of the class.",
                "A constant will be compiled into the consumer as a literal value while the static string will serve as a reference to the value defined.As an exercise, try creating an external library and consume it in a console application, then alter the values in the library and recompile it (without recompiling the consumer program), drop the DLL into the directory and run the EXE manually, you should find that the constant string does not change.",
                "Const and readonly are similar, but they are not exactly the same. A const field is a compile-time constant, meaning that that value can be computed at compile-time. A readonly field enables additional scenarios in which some code must be run during construction of the type. After construction, a readonly field cannot be changed.For instance, const members can be used to define members like:since values like 3.14 and 0 are compile-time constants. However, consider the case where you define a type and want to provide some pre-fab instances of it. E.g., you might want to define a Color class and provide \"constants\" for common colors like Black, White, etc. It isn't possible to do this with const members, as the right hand sides are not compile-time constants. One could do this with regular static members:but then there is nothing to keep a client of Color from mucking with it, perhaps by swapping the Black and White values. Needless to say, this would cause consternation for other clients of the Color class. The \"readonly\" feature addresses this scenario. By simply introducing the readonly keyword in the declarations, we preserve the flexible initialization while preventing client code from mucking around.It is interesting to note that const members are always static, whereas a readonly member can be either static or not, just like a regular field.It is possible to use a single keyword for these two purposes, but this leads to either versioning problems or performance problems. Assume for a moment that we used a single keyword for this (const) and a developer wrote:and a different developer wrote code that relied on A:Now, can the code that is generated rely on the fact that A.C is a compile-time constant? I.e., can the use of A.C simply be replaced by the value 0? If you say \"yes\" to this, then that means that the developer of A cannot change the way that A.C is initialized -- this ties the hands of the developer of A without permission. If you say \"no\" to this question then an important optimization is missed. Perhaps the author of A is positive that A.C will always be zero. The use of both const and readonly allows the developer of A to specify the intent. This makes for better versioning behavior and also better performance.",
                "ReadOnly :The value will be initialized only once from the constructor of the class.\nconst: can be initialized in any function but only once",
                "The difference is that the value of a static readonly field is set at run time, so it can have a different value for different executions of the program. However, the value of a const field is set to a compile time constant.Remember:\nFor reference types, in both cases (static and instance), the readonly modifier only prevents you from assigning a new reference to the field. It specifically does not make immutable the object pointed to by the reference.For details, please refer to C# Frequently Asked Questions on this topic:\nhttp://blogs.msdn.com/csharpfaq/archive/2004/12/03/274791.aspx",
                "Principally; you can assign a value to a static readonly field to a non-constant value at runtime, whereas a const has to be assigned a constant value.",
                "One thing to add to what people have said above. If you have an assembly containing a readonly value (e.g. readonly MaxFooCount = 4; ), you can change the value that calling assemblies see by shipping a new version of that assembly with a different value (e.g.  readonly MaxFooCount = 5;)But with a const, it would be folded into the caller's code when the caller was compiled.If you've reached this level of C# proficiency, you are ready for Bill Wagner's book, Effective C#: 50 Specific Ways to Improve Your C#\nWhich answers this question in detail, (and 49 other things).",
                "The key difference is that Const is the C equivalent of #DEFINE.  The number literally gets substituted a-la precompiler.  Readonly is actually treated as a variable.This distinction is especially relevant when you have Project A depending on a Public constant from Project B.  Suppose the public constant changes.  Now your choice of const/readonly will impact the behavior on project A:Const:  project A does not catch the new value (unless it is recompiled with the new const, of course) because it was compiled with the constants subtituted in.ReadOnly:  Project A will always ask project B for it's variable value, so it will pick up the new value of the public constant in B.Honestly, I would recommend you use readonly for nearly everything except truly universal constants ( e.g. Pi, Inches_To_Centimeters).  For anything that could possibly change, I say use readonly.Hope this helps,\nAlan.",
                "Const: Absolute constant value during the application life time.Readonly: It can be changed in running time.",
                "The value of readonly field can be changed. However, The value of the const field can not be changed.In readonly fields, we can assign values at the time of declaration or in the contructor of that class.Incase of constant we can only assign values at the time of declaration.Readonly can be used with Static modifiers but constant cannot be used with static."
            ]
        },
        {
            "tag": "relative_time",
            "patterns": [
                "Calculate relative time in C#", "Get relative time", "How to find relative time"
            ],
            "responses": [
                "Jeff, your code is nice but could be clearer with constants (as suggested in Code Complete).",
                "Jeff, because Stack Overflow uses jQuery extensively, I recommend the jquery.timeago plugin.Benefits:Just attach it to your timestamps on DOM ready:This will turn all abbr elements with a class of timeago and an ISO 8601 timestamp in the title:into something like this:which yields: 4 months ago. As time passes, the timestamps will automatically update.Disclaimer: I wrote this plugin, so I'm biased.",
                "Here's how I do itSuggestions? Comments? Ways to improve this algorithm?",
                "I prefer this version for its conciseness, and ability to add in new tick points.\nThis could be encapsulated with a Latest() extension to Timespan instead of that long 1 liner, but for the sake of brevity in posting, this will do.\nThis fixes the an hour ago, 1 hours ago, by providing an hour until 2 hours have elapsed",
                "http://refactormycode.com/codes/493-twitter-esque-relative-datesC# 6 version:",
                "Here a rewrite from Jeffs Script for PHP:",
                "Here's an implementation I added as an extension method to the DateTime class that handles both future and past dates and provides an approximation option that allows you to specify the level of detail you're looking for (\"3 hour ago\" vs \"3 hours, 23 minutes, 12 seconds ago\"):",
                "There are also a package called Humanizr on Nuget, and it actually works really well, and is in the .NET Foundation.Scott Hanselman has a writeup on it on his blog",
                "I would recommend computing this on the client side too. Less work for the server.The following is the version that I use (from Zach Leatherman)",
                "@jeffIMHO yours seems a little long. However it does seem a little more robust with support for \"yesterday\" and \"years\".  But in my experience when this is used, the person is most likely to view the content in the first 30 days. It is only the really hardcore people that come after that. So, I usually elect to keep this short and simple.This is the method I am currently using in one of my websites. This returns only a relative day, hour and time.  And then the user has to slap on \"ago\" in the output.",
                "A couple of years late to the party, but I had a requirement to do this for both past and future dates, so I combined Jeff's and Vincent's into this.  It's a ternarytastic extravaganza! :)",
                "Given the world and her husband appear to be posting code samples, here is what I wrote a while ago, based on a couple of these answers.I had a specific need for this code to be localisable. So I have two classes \u2014 Grammar, which specifies the localisable terms, and FuzzyDateExtensions, which holds a bunch of extension methods. I had no need to deal with future datetimes, so no attempt is made to handle them with this code.I've left some of the XMLdoc in the source, but removed most (where they'd be obvious) for brevity's sake. I've also not included every class member here:The FuzzyDateString class contains:One of the key things I wanted to achieve, as well as localisation, was that \"today\" would only mean \"this calendar day\", so the IsToday, IsThisMonth, IsThisYear methods look like this:and the rounding methods are like this (I've included RoundedMonths, as that's a bit different):I hope people find this useful and/or interesting  :o)",
                "using Fluent DateTime",
                "Is there an easy way to do this in Java? The java.util.Date class seems rather limited.Here is my quick and dirty Java solution:",
                "I thought I'd give this a shot using classes and polymorphism. I had a previous iteration which used sub-classing which ended up having way too much overhead. I've switched to a more flexible delegate / public property object model which is significantly better. My code is very slightly more accurate, I wish I could come up with a better way to generate \"months ago\" that didn't seem too over-engineered.I think I'd still stick with Jeff's if-then cascade because it's less code and it's simpler (it's definitely easier to ensure it'll work as expected).For the below code PrintRelativeTime.GetRelativeTimeMessage(TimeSpan ago) returns the relative time message (e.g. \"yesterday\").",
                "When you know the viewer's time zone, it might be clearer to use calendar days at the day scale. I'm not familiar with the .NET libraries so I don't know how you'd do that in C#, unfortunately.On consumer sites, you could also be hand-wavier under a minute. \"Less than a minute ago\" or \"just now\" could be good enough.",
                "The same as another answer to this question but as an extension method with a static dictionary.",
                "In PHP, I do it this way:",
                "you can try this.I think it will work correctly.",
                "@JeffDoing a subtraction on DateTime returns a TimeSpan anyway.So you can just doI'm also surprised to see the constants multiplied-out by hand and then comments added with the multiplications in.   Was that some misguided optimisation?",
                "You can use TimeAgo extension as below:Or use jQuery plugin with Razor extension from Timeago.",
                "You can reduce the server-side load by performing this logic client-side. View source on some Digg pages for reference. They have the server emit an epoch time value that gets processed by Javascript. This way you don't need to manage the end user's time zone. The new server-side code would be something like:You could even add a NOSCRIPT block there and just perform a ToString().",
                "Here's the algorithm stackoverflow uses but rewritten more concisely in perlish pseudocode with a bug fix (no \"one hours ago\").  The function takes a (positive) number of seconds ago and returns a human-friendly string like \"3 hours ago\" or \"yesterday\".",
                "I got this answer from one of Bill Gates' blogs. I need to find it on my browser history and I'll give you the link.The Javascript code to do the same thing (as requested):Basically, you work in terms of seconds.",
                "Java for client-side gwt usage:",
                "I think there is already a number of answers related to this post, but one can use this which is easy to use just like plugin and also easily readable for programmers. \nSend your specific date, and get its value in string form:",
                "If you want to have an output like \"2 days, 4 hours and 12 minutes ago\", you need a timespan:Then you can access the values you like:etc...",
                "I would provide some handy extensions methods for this and make the code more readable. First, couple of extension methods for Int32.Then, one for DateTime.Now, you can do something like below:"
            ]
        },
        {
            "tag": "GetHashCode",
            "patterns": [
                "Why is it important to override GetHashCode when Equals method is overridden?", "Override GetHashCode", "GetHashCode"
            ],
            "responses": [
                "Yes, it is important if your item will be used as a key in a dictionary, or HashSet<T>, etc - since this is used (in the absence of a custom IEqualityComparer<T>) to group items into buckets. If the hash-code for two items does not match, they may never be considered equal (Equals will simply never be called).The GetHashCode() method should reflect the Equals logic; the rules are:In this case, it looks like \"return FooId;\" is a suitable GetHashCode() implementation. If you are testing multiple properties, it is common to combine them using code like below, to reduce diagonal collisions (i.e. so that new Foo(3,5) has a different hash-code to new Foo(5,3)):In modern frameworks, the HashCode type has methods to help you create a hashcode from multiple values; on older frameworks, you'd need to go without, so something like:Oh - for convenience, you might also consider providing == and != operators when overriding Equals and GetHashCode.A demonstration of what happens when you get this wrong is here.",
                "It's actually very hard to implement GetHashCode() correctly because, in addition to the rules Marc already mentioned, the hash code should not change during the lifetime of an object. Therefore the fields which are used to calculate the hash code must be immutable.I finally found a solution to this problem when I was working with NHibernate.\nMy approach is to calculate the hash code from the ID of the object. The ID can only be set though the constructor so if you want to change the ID, which is very unlikely, you have to create a new object which has a new ID and therefore a new hash code. This approach works best with GUIDs because you can provide a parameterless constructor which randomly generates an ID.",
                "By overriding Equals you're basically stating that you know better how to compare two instances of a given type.Below you can see an example of how ReSharper writes a GetHashCode() function for you. Note that this snippet is meant to be tweaked by the programmer:As you can see it just tries to guess a good hash code based on all the fields in the class, but if you know your object's domain or value ranges you could still provide a better one.",
                "Please don\u00b4t forget to check the obj parameter against null when overriding Equals().\nAnd also compare the type.The reason for this is: Equals must return false on comparison to null. See also http://msdn.microsoft.com/en-us/library/bsc2ak47.aspx",
                "How about:Assuming performance is not an issue :)",
                "As of .NET 4.7 the preferred method of overriding GetHashCode() is shown below. If targeting older .NET versions, include the System.ValueTuple nuget package.In terms of performance, this method will outperform most composite hash code implementations. The ValueTuple is a struct so there won't be any garbage, and the underlying algorithm is as fast as it gets.",
                "Just to add on above answers:If you don't override Equals then the default behavior is that references of the objects are compared. The same applies to hashcode - the default implmentation is typically based on a memory address of the reference.\nBecause you did override Equals it means the correct behavior is to compare whatever you implemented on Equals and not the references, so you should do the same for the hashcode.Clients of your class will expect the hashcode to have similar logic to the equals method, for example linq methods which use a IEqualityComparer first compare the hashcodes and only if they're equal they'll compare the Equals() method which might be more expensive to run, if we didn't implement hashcode, equal object will probably have different hashcodes (because they have different memory address) and will be determined wrongly as not equal (Equals() won't even hit).In addition, except the problem that you might not be able to find your object if you used it in a dictionary (because it was inserted by one hashcode and when you look for it the default hashcode will probably be different and again the Equals() won't even be called, like Marc Gravell explains in his answer, you also introduce a violation of the dictionary or hashset concept which should not allow identical keys - \nyou already declared that those objects are essentially the same when you overrode Equals so you don't want both of them as different keys on a data structure which suppose to have a unique key. But because they have a different hashcode the \"same\" key will be inserted as different one.",
                "It is because the framework requires that two objects that are the same must have the same hashcode.  If you override the equals method to do a special comparison of two objects and the two objects are considered the same by the method, then the hash code of the two objects must also be the same.  (Dictionaries and Hashtables rely on this principle).",
                "We have two problems to cope with.You cannot provide a sensible GetHashCode() if any field in the\nobject can be changed.   Also often a object will NEVER be used in a\ncollection that depends on  GetHashCode().   So the cost of\nimplementing GetHashCode() is often not worth it, or it is not\npossible.If someone puts your object in a collection that calls\nGetHashCode() and you have overrided Equals() without also making\nGetHashCode() behave in a correct way, that person may spend days\ntracking down the problem.Therefore by default I do.",
                "Hash code is used for hash-based collections like Dictionary, Hashtable, HashSet etc. The purpose of this code is to very quickly pre-sort specific object by putting it into specific group (bucket). This pre-sorting helps tremendously in finding this object when you need to retrieve it back from hash-collection because code has to search for your object in just one bucket instead of in all objects it contains. The better distribution of hash codes (better uniqueness) the faster retrieval. In ideal situation where each object has a unique hash code, finding it is an O(1) operation. In most cases it approaches O(1).",
                "It's not necessarily important; it depends on the size of your collections and your performance requirements and whether your class will be used in a library where you may not know the performance requirements. I frequently know my collection sizes are not very large and my time is more valuable than a few microseconds of performance gained by creating a perfect hash code; so (to get rid of the annoying warning by the compiler) I simply use:(Of course I could use a #pragma to turn off the warning as well but I prefer this way.)When you are in the position that you do need the performance than all of the issues mentioned by others here apply, of course. Most important - otherwise you will get wrong results when retrieving items from a hash set or dictionary: the hash code must not vary with the life time of an object (more accurately, during the time whenever the hash code is needed, such as while being a key in a dictionary): for example, the following is wrong as Value is public and so can be changed externally to the class during the life time of the instance, so you must not use it as the basis for the hash code:On the other hand, if Value can't be changed it's ok to use:",
                "You should always guarantee that if two objects are equal, as defined by Equals(), they should return the same hash code. As some of the other comments state, in theory this is not mandatory if the object will never be used in a hash based container like HashSet or Dictionary. I would advice you to always follow this rule though. The reason is simply because it is way too easy for someone to change a collection from one type to another with the good intention of actually improving the performance or just conveying the code semantics in a better way.For example, suppose we keep some objects in a List. Sometime later someone actually realizes that a HashSet is a much better alternative because of the better search characteristics for example. This is when we can get into trouble. List would internally use the default equality comparer for the type which means Equals in your case while HashSet makes use of GetHashCode(). If the two behave differently, so will your program. And bear in mind that such issues are not the easiest to troubleshoot.I've summarized this behavior with some other GetHashCode() pitfalls in a blog post where you can find further examples and explanations.",
                "As of C# 9(.net 5 or .net core 3.1), you may want to use records as it does Value Based Equality by default.",
                "It's my understanding that the original GetHashCode() returns the memory address of the object, so it's essential to override it if you wish to compare two different objects.EDITED:\nThat was incorrect, the original GetHashCode() method cannot assure the equality of 2 values. Though objects that are equal return the same hash code.",
                "Below using reflection seems to me a better option considering public properties as with this you don't have have to worry about addition / removal of properties (although not so common scenario). This I found to be performing better also.(Compared time using Diagonistics stop watch)."
            ]
        },
        {
            "tag": "try_catch",
            "patterns": [
                "Try-catch speeding up my code?", "What is try catching", "Try catch", "How to try catch"
            ],
            "responses": [
                "One of the Roslyn engineers who specializes in understanding optimization of stack usage took a look at this and reports to me that there seems to be a problem in the interaction between the way the C# compiler generates local variable stores and the way the JIT compiler does register scheduling in the corresponding x86 code. The result is suboptimal code generation on the loads and stores of the locals.For some reason unclear to all of us, the problematic code generation path is avoided when the JITter knows that the block is in a try-protected region.This is pretty weird. We'll follow up with the JITter team and see whether we can get a bug entered so that they can fix this.Also, we are working on improvements for Roslyn to the C# and VB compilers' algorithms for determining when locals can be made \"ephemeral\" -- that is, just pushed and popped on the stack, rather than allocated a specific location on the stack for the duration of the activation. We believe that the JITter will be able to do a better job of register allocation and whatnot if we give it better hints about when locals can be made \"dead\" earlier.Thanks for bringing this to our attention, and apologies for the odd behaviour.",
                "Well, the way you're timing things looks pretty nasty to me. It would be much more sensible to just time the whole loop:That way you're not at the mercy of tiny timings, floating point arithmetic and accumulated error.Having made that change, see whether the \"non-catch\" version is still slower than the \"catch\" version.EDIT: Okay, I've tried it myself - and I'm seeing the same result. Very odd. I wondered whether the try/catch was disabling some bad inlining, but using [MethodImpl(MethodImplOptions.NoInlining)] instead didn't help...Basically you'll need to look at the optimized JITted code under cordbg, I suspect...EDIT: A few more bits of information:Weird...EDIT: Okay, we have disassembly...This is using the C# 2 compiler and .NET 2 (32-bit) CLR, disassembling with mdbg (as I don't have cordbg on my machine). I still see the same performance effects, even under the debugger. The fast version uses a try block around everything between the variable declarations and the return statement, with just a catch{} handler. Obviously the slow version is the same except without the try/catch. The calling code (i.e. Main) is the same in both cases, and has the same assembly representation (so it's not an inlining issue).Disassembled code for fast version:Disassembled code for slow version:In each case the * shows where the debugger entered in a simple \"step-into\".EDIT: Okay, I've now looked through the code and I think I can see how each version works... and I believe the slower version is slower because it uses fewer registers and more stack space. For small values of n that's possibly faster - but when the loop takes up the bulk of the time, it's slower.Possibly the try/catch block forces more registers to be saved and restored, so the JIT uses those for the loop as well... which happens to improve the performance overall. It's not clear whether it's a reasonable decision for the JIT to not use as many registers in the \"normal\" code.EDIT: Just tried this on my x64 machine. The x64 CLR is much faster (about 3-4 times faster) than the x86 CLR on this code, and under x64 the try/catch block doesn't make a noticeable difference.",
                "Jon's disassemblies show, that the difference between the two versions is that the fast version uses a pair of registers (esi,edi) to store one of the local variables where the slow version doesn't.The JIT compiler makes different assumptions regarding register use for code that contains a try-catch block vs. code which doesn't. This causes it to make different register allocation choices. In this case, this favors the code with the try-catch block. Different code may lead to the opposite effect, so I would not count this as a general-purpose speed-up technique.In the end, it's very hard to tell which code will end up running the fastest. Something like register allocation and the factors that influence it are such low-level implementation details that I don't see how any specific technique could reliably produce faster code.For example, consider the following two methods. They were adapted from a real-life example:One is a generic version of the other. Replacing the generic type with StructArray would make the methods identical. Because StructArray is a value type, it gets its own compiled version of the generic method. Yet the actual running time is significantly longer than the specialized method's, but only for x86. For x64, the timings are pretty much identical. In other cases, I've observed differences for x64 as well.",
                "This looks like a case of inlining gone bad.  On an x86 core, the jitter has the ebx, edx, esi and edi register available for general purpose storage of local variables.  The ecx register becomes available in a static method, it doesn't have to store this.  The eax register often is needed for calculations.  But these are 32-bit registers, for variables of type long it must use a pair of registers.  Which are edx:eax for calculations and edi:ebx for storage.Which is what stands out in the disassembly for the slow version, neither edi nor ebx are used.When the jitter can't find enough registers to store local variables then it must generate code to load and store them from the stack frame.  That slows down code, it prevents a processor optimization named \"register renaming\", an internal processor core optimization trick that uses multiple copies of a register and allows super-scalar execution.  Which permits several instructions to run concurrently, even when they use the same register.  Not having enough registers is a common problem on x86 cores, addressed in x64 which has 8 extra registers (r9 through r15).The jitter will do its best to apply another code generation optimization, it will try to inline your Fibo() method.  In other words, not make a call to the method but generate the code for the method inline in the Main() method.  Pretty important optimization that, for one, makes properties of a C# class for free, giving them the perf of a field.  It avoids the overhead of making the method call and setting up its stack frame, saves a couple of nanoseconds.There are several rules that determine exactly when a method can be inlined.  They are not exactly documented but have been mentioned in blog posts.  One rule is that it won't happen when the method body is too large.  That defeats the gain from inlining, it generates too much code that doesn't fit as well in the L1 instruction cache.  Another hard rule that applies here is that a method won't be inlined when it contains a try/catch statement.  The background behind that one is an implementation detail of exceptions, they piggy-back onto Windows' built-in support for SEH (Structure Exception Handling) which is stack-frame based.One behavior of the register allocation algorithm in the jitter can be inferred from playing with this code.  It appears to be aware of when the jitter is trying to inline a method.  One rule it appears to use that only the edx:eax register pair can be used for inlined code that has local variables of type long.  But not edi:ebx.  No doubt because that would be too detrimental to the code generation for the calling method, both edi and ebx are important storage registers.So you get the fast version because the jitter knows up front that the method body contains try/catch statements.  It knows it can never be inlined so readily uses edi:ebx for storage for the long variable.  You got the slow version because the jitter didn't know up front that inlining wouldn't work.  It only found out after generating the code for the method body.The flaw then is that it didn't go back and re-generate the code for the method.  Which is understandable, given the time constraints it has to operate in.This slow-down doesn't occur on x64 because for one it has 8 more registers.  For another because it can store a long in just one register (like rax).  And the slow-down doesn't occur when you use int instead of long because the jitter has a lot more flexibility in picking registers.",
                "I'd have put this in as a comment as I'm really not certain that this is likely to be the case, but as I recall it doesn't a try/except statement involve a modification to the way the garbage disposal mechanism of the compiler works, in that it clears up object memory allocations in a recursive way off the stack.  There may not be an object to be cleared up in this case or the for loop may constitute a closure that the garbage collection mechanism recognises sufficient to enforce a different collection method.\nProbably not, but I thought it worth a mention as I hadn't seen it discussed anywhere else.",
                "9 years later and the bug is still there!  You can see it easily with:The ratio is less than one on my machine, running the latest version of MSVS 2019, .NET 4.6.1"
            ]
        },
        {
            "tag": "structs",
            "patterns": [
                "When should I use a struct rather than a class in C#?", "What are structs", "structs over classes", "structs to class", "structs"
            ],
            "responses": [
                "The source referenced by the OP has some credibility ...but what about Microsoft - what is the stance on struct usage? I sought some extra learning from Microsoft, and here is what I found:Consider defining a structure instead of a class if instances of the\n  type are small and commonly short-lived or are commonly embedded in\n  other objects.Do not define a structure unless the type has all of the following characteristics:Okay, #2 and #3 anyway. Our beloved dictionary has 2 internal structs:*Reference SourceThe 'JonnyCantCode.com' source got 3 out of 4 - quite forgivable since #4 probably wouldn't be an issue. If you find yourself boxing a struct, rethink your architecture.Let's look at why Microsoft would use these structs:Update - In addition, realize that when a struct implements an interface - as Enumerator does - and is cast to that implemented type, the struct becomes a reference type and is moved to the heap. Internal to the Dictionary class, Enumerator is still a value type. However, as soon as a method calls GetEnumerator(), a reference-type IEnumerator is returned.What we don't see here is any attempt or proof of requirement to keep structs immutable or maintaining an instance size of only 16 bytes or less:And ...\n 4. Both structs store TKey and TValue, which we all know are quite capable of being reference types (added bonus info)Hashed keys notwithstanding, dictionaries are fast in part because instancing a struct is quicker than a reference type. Here, I have a Dictionary<int, int> that stores 300,000 random integers with sequentially incremented keys.Capacity: 312874\n  MemSize:  2660827 bytes\n  Completed Resize:  5ms\n  Total time to fill:  889msCapacity:  number of elements available before the internal array must be resized.MemSize:  determined by serializing the dictionary into a MemoryStream and getting a byte length (accurate enough for our purposes).Completed Resize:  the time it takes to resize the internal array from 150862 elements to 312874 elements. When you figure that each element is sequentially copied via Array.CopyTo(), that ain't too shabby.Total time to fill: admittedly skewed due to logging and an OnResize event I added to the source; however, still impressive to fill 300k integers while resizing 15 times during the operation. Just out of curiosity, what would the total time to fill be if I already knew the capacity? 13msSo, now, what if Entry were a class? Would these times or metrics really differ that much?Capacity:  312874\n  MemSize:  2660827 bytes\n  Completed Resize:  26ms\n  Total time to fill:  964msObviously, the big difference is in resizing. Any difference if Dictionary is initialized with the Capacity? Not enough to be concerned with ... 12ms.What happens is, because Entry is a struct, it does not require initialization like a reference type. This is both the beauty and the bane of the value type. In order to use Entry as a reference type, I had to insert the following code:The reason I had to initialize each array element of Entry as a reference type can be found at MSDN: Structure Design. In short:Do not provide a default constructor for a structure.If a structure defines a default constructor, when arrays of the\n  structure are created, the common language runtime automatically\n  executes the default constructor on each array element.Some compilers, such as the C# compiler, do not allow structures to\n  have default constructors.It is actually quite simple and we will borrow from Asimov's Three Laws of Robotics:...what do we take away from this: in short, be responsible with the use of value types. They are quick and efficient, but have the ability to cause many unexpected behaviors if not properly maintained (i.e. unintentional copies).",
                "Whenever you:The caveat, however, is that structs (arbitrarily large) are more expensive to pass around than class references (usually one machine word), so classes could end up being faster in practice.",
                "I do not agree with the rules given in the original post. Here are my rules:You use structs for performance when stored in arrays. (see also When are structs the answer?)You need them in code passing structured data to/from C/C++Do not use structs unless you need them:",
                "Use a struct when you want value semantics as opposed to reference semantics.If you need reference semantics you need a class not a struct.",
                "In addition to the \"it is a value\" answer, one specific scenario for using structs is when you know that you have a set of data that is causing garbage collection issues, and you have lots of objects. For example, a large list/array of Person instances. The natural metaphor here is a class, but if you have large number of long-lived Person instance, they can end up clogging GEN-2 and causing GC stalls. If the scenario warrants it, one potential approach here is to use an array (not list) of Person structs, i.e. Person[]. Now, instead of having millions of objects in GEN-2, you have a single chunk on the LOH (I'm assuming no strings etc here - i.e. a pure value without any references). This has very little GC impact.Working with this data is awkward, as the data is probably over-sized for a struct, and you don't want to copy fat values all the time. However, accessing it directly in an array does not copy the struct - it is in-place (contrast to a list indexer, which does copy). This means lots of work with indexes:Note that keeping the values themselves immutable will help here. For more complex logic, use a method with a by-ref parameter:Again, this is in-place - we have not copied the value.In very specific scenarios, this tactic can be very successful; however, it is a fairly advanced scernario that should be attempted only if you know what you are doing and why. The default here would be a class.",
                "From the C# Language specification:1.7 StructsLike classes, structs are data structures that can contain data members and function members, but unlike classes, structs are\n  value types and do not require heap allocation. A variable of a struct\n  type directly stores the data of the struct, whereas a variable of a\n  class type stores a reference to a dynamically allocated object.\n  Struct types do not support user-specified inheritance, and all struct\n  types implicitly inherit from type object.Structs are particularly useful for small data structures that have\n  value semantics. Complex numbers, points in a coordinate system, or\n  key-value pairs in a dictionary are all good examples of structs. The\n  use of structs rather than classes for small data structures can make\n  a large difference in the number of memory allocations an application\n  performs. For example, the following program creates and initializes\n  an array of 100 points. With Point implemented as a class, 101\n  separate objects are instantiated\u2014one for the array and one each for\n  the 100 elements.An alternative is to make Point a struct.Now, only one object is instantiated\u2014the one for the array\u2014and the Point instances are stored in-line in the array.Struct constructors are invoked with the new operator, but that does not imply that memory is being allocated. Instead of dynamically allocating an object and returning a reference to it, a struct constructor simply returns the struct value itself (typically in a temporary location on the stack), and this value is then copied as necessary.With classes, it is possible for two variables to reference the same object and thus possible for operations on one variable to affect the object referenced by the other variable. With structs, the variables each have their own copy of the data, and it is not possible for operations on one to affect the other. For example, the output produced by the following code fragment depends on whether Point is a class or a struct.If Point is a class, the output is 20 because a and b reference the same object. If Point is a struct, the output is 10 because the assignment of a to b creates a copy of the value, and this copy is unaffected by the subsequent assignment to a.x.The previous example highlights two of the limitations of structs. First, copying an entire struct is typically less efficient than copying an object reference, so assignment and value parameter passing can be more expensive with structs than with reference types. Second, except for ref and out parameters, it is not possible to create references to structs, which rules out their usage in a number of situations.",
                "Structs are good for atomic representation of data, where the said data can be copied multiple times by the code. Cloning an object is in general more expensive than copying a struct, as it involves allocating the memory, running the constructor and deallocating/garbage collection when done with it.",
                "Here is a basic rule.If all member fields are value types create a struct.If any one member field is a reference type, create a class. This is because the reference type field will need the  heap allocation anyway.Exmaples",
                "First: Interop scenarios or when you need to specify the memory layoutSecond: When the data is almost the same size as a reference pointer anyway.",
                "You need to use a \"struct\" in situations where you want to explicitly specify memory layout using the StructLayoutAttribute - typically for PInvoke.Edit: Comment points out that you can use class or struct with StructLayoutAttribute and that is certainly true. In practice, you would typically use a struct - it is allocated on the stack vs the heap which makes sense if you are just passing an argument to an unmanaged method call.",
                "I made a small benchmark with BenchmarkDotNet to get a better understanding of \"struct\" benefit in numbers. I'm testing looping through array (or list) of structs (or classes). Creating those arrays or lists is out of the benchmark's scope - it is clear that \"class\" is more heavy will utilize more memory, and will involve GC.So the conclusion is: be careful with LINQ and hidden structs boxing/unboxing and using structs for microoptimizations strictly stay with arrays.P.S. Another benchmark about passing struct/class through call stack is there https://stackoverflow.com/a/47864451/506147Code:",
                "I use structs for packing or unpacking any sort of binary communication format. That includes reading or writing to disk, DirectX vertex lists, network protocols, or dealing with encrypted/compressed data.The three guidelines you list haven't been useful for me in this context. When I need to write out four hundred bytes of stuff in a Particular Order, I'm gonna define a four-hundred-byte struct, and I'm gonna fill it with whatever unrelated values it's supposed to have, and I'm going to set it up whatever way makes the most sense at the time. (Okay, four hundred bytes would be pretty strange-- but back when I was writing Excel files for a living, I was dealing with structs of up to about forty bytes all over, because that's how big some of the BIFF records ARE.)",
                "With the exception of the valuetypes that are used directly by the runtime and various others for PInvoke purposes, you should only use valuetypes in 2 scenarios.",
                "A struct is a value type.  If you assign a struct to a new variable, the new variable will contain a copy of the original.Excecution of the following results in 5 instances of the struct stored in memory:A class is a reference type.  When you assign a class to a new variable, the variable contains a reference to the original class object.Excecution of the following results in only one instance of the class object in memory.Structs may increase the likelihood of a code mistake.  If a value object is treated like a mutable reference object, a developer may be surprised when changes made are unexpectedly lost.",
                "MYTH #1: STRUCTS ARE LIGHTWEIGHT CLASSESThis myth comes in a variety of forms. Some people believe that value types can\u2019t or\nshouldn\u2019t have methods or other significant behavior\u2014they should be used as simple\ndata transfer types, with just public fields or simple properties. The DateTime type is a\ngood counterexample to this: it makes sense for it to be a value type, in terms of being\na fundamental unit like a number or a character, and it also makes sense for it to be\nable to perform calculations based on its value. Looking at things from the other\ndirection, data transfer types should often be reference types anyway\u2014the decision\nshould be based on the desired value or reference type semantics, not the simplicity of\nthe type.\n Other people believe that value types are \u201clighter\u201d than reference types in terms\nof performance. The truth is that in some cases value types are more performant\u2014\nthey don\u2019t require garbage collection unless they\u2019re boxed, don\u2019t have the type\nidentification overhead, and don\u2019t require dereferencing, for example. But in other\nways, reference types are more performant\u2014parameter passing, assigning values to\nvariables, returning values, and similar operations only require 4 or 8 bytes to becopied (depending on whether you\u2019re running the 32-bit or 64-bit CLR) rather than\ncopying all the data. Imagine if ArrayList were somehow a \u201cpure\u201d value type, and\npassing an ArrayList expression to a method involved copying all its data! In almost\nall cases, performance isn\u2019t really determined by this sort of decision anyway. Bottlenecks are almost never where you think they\u2019ll be, and before you make a design decision based on performance, you should measure the different options.\n It\u2019s worth noting that the combination of the two beliefs doesn\u2019t work either. It\ndoesn\u2019t matter how many methods a type has (whether it\u2019s a class or a struct)\u2014the\nmemory taken per instance isn\u2019t affected. (There\u2019s a cost in terms of the memory\ntaken up for the code itself, but that\u2019s incurred once rather than for each instance.)MYTH #2: REFERENCE TYPES LIVE ON THE HEAP; VALUE TYPES LIVE ON THE STACKThis one is often caused by laziness on the part of the person repeating it. The first\npart is correct\u2014an instance of a reference type is always created on the heap. It\u2019s the\nsecond part that causes problems. As I\u2019ve already noted, a variable\u2019s value lives wherever it\u2019s declared, so if you have a class with an instance variable of type int, that variable\u2019s value for any given object will always be where the rest of the data for the object\nis\u2014on the heap. Only local variables (variables declared within methods) and method\nparameters live on the stack. In C# 2 and later, even some local variables don\u2019t really\nlive on the stack, as you\u2019ll see when we look at anonymous methods in chapter 5.\nARE THESE CONCEPTS RELEVANT NOW? It\u2019s arguable that if you\u2019re writing managed code, you should let the runtime worry about how memory is best used.\nIndeed, the language specification makes no guarantees about what lives\nwhere; a future runtime may be able to create some objects on the stack if it\nknows it can get away with it, or the C# compiler could generate code that\nhardly uses the stack at all.\nThe next myth is usually just a terminology issue.MYTH #3: OBJECTS ARE PASSED BY REFERENCE IN C# BY DEFAULTThis is probably the most widely propagated myth. Again, the people who make this\nclaim often (though not always) know how C# actually behaves, but they don\u2019t know\nwhat \u201cpass by reference\u201d really means. Unfortunately, this is confusing for people who\ndo know what it means.\n The formal definition of pass by reference is relatively complicated, involving l-values\nand similar computer-science terminology, but the important thing is that if you pass a\nvariable by reference, the method you\u2019re calling can change the value of the caller\u2019s variable by changing its parameter value. Now, remember that the value of a reference\ntype variable is the reference, not the object itself. You can change the contents of the\nobject that a parameter refers to without the parameter itself being passed by reference. For instance, the following method changes the contents of the StringBuilder\nobject in question, but the caller\u2019s expression will still refer to the same object as\nbefore:When this method is called, the parameter value (a reference to a StringBuilder) is\npassed by value. If you were to change the value of the builder variable within the\nmethod\u2014for example, with the statement builder = null;\u2014that change wouldn\u2019t be\nseen by the caller, contrary to the myth.\n It\u2019s interesting to note that not only is the \u201cby reference\u201d bit of the myth inaccurate, but so is the \u201cobjects are passed\u201d bit. Objects themselves are never passed, either\nby reference or by value. When a reference type is involved, either the variable is\npassed by reference or the value of the argument (the reference) is passed by value.\nAside from anything else, this answers the question of what happens when null is\nused as a by-value argument\u2014if objects were being passed around, that would cause\nissues, as there wouldn\u2019t be an object to pass! Instead, the null reference is passed by\nvalue in the same way as any other reference would be.\n If this quick explanation has left you bewildered, you might want to look at my article, \u201cParameter passing in C#,\u201d (http://mng.bz/otVt), which goes into much more\ndetail.\n These myths aren\u2019t the only ones around. Boxing and unboxing come in for their\nfair share of misunderstanding, which I\u2019ll try to clear up next.Reference: C# in Depth 3rd Edition by Jon Skeet",
                ".NET supports value types and reference types (in Java, you can define only reference types). Instances of reference types get allocated in the managed heap and are garbage collected when there are no outstanding references to them. Instances of value types, on the other hand, are allocated in the stack, and hence allocated memory is reclaimed as soon as their scope ends. And of course, value types get passed by value, and reference types by reference. All C# primitive data types, except for System.String, are value types.When to use struct over class,In C#, structs are value types, classes are reference types. You can create value types, in C#, using the enum keyword and the struct keyword. Using a value type instead of a reference type will result in fewer objects on the managed heap, which results in lesser load on the garbage collector (GC), less frequent GC cycles, and consequently better performance. However, value types have their downsides too. Passing around a big struct is definitely costlier than passing a reference, that's one obvious problem. The other problem is the overhead associated with boxing/unboxing. In case you're wondering what boxing/unboxing mean, follow these links for a good explanation on boxing and unboxing. Apart from performance, there are times when you simply need types to have value semantics, which would be very difficult (or ugly) to implement if reference types are all you have. You should use value types only, When you need copy semantics or need automatic initialization, normally in arrays of these types.",
                "Structure types in C# or other .net languages are generally used to hold things that should behave like fixed-sized groups of values.  A useful aspect of structure types is that the fields of a structure-type instance can be modified by modifying the storage location in which it is held, and in no other way.  It's possible to code a structure in such a way that the only way to mutate any field is to construct a whole new instance and then use a struct assignment to mutate all the fields of the target by overwriting them with values from the new instance, but unless a struct provides no means of creating an instance where its fields have non-default values, all of its fields will be mutable if and if the struct itself is stored in a mutable location.Note that it's possible to design a structure type so that it will essentially behave like a class type, if the structure contains a private class-type field, and redirects its own members to that of the wrapped class object.  For example, a PersonCollection might offer properties SortedByName and SortedById, both of which hold an \"immutable\" reference to a PersonCollection (set in their constructor) and implement GetEnumerator by calling either creator.GetNameSortedEnumerator or creator.GetIdSortedEnumerator.  Such structs would behave much like a reference to a PersonCollection, except that their GetEnumerator methods would be bound to different methods in the PersonCollection.  One could also have a structure wrap a portion of an array (e.g. one could define an ArrayRange<T> structure which would hold a T[] called Arr, an int Offset, and an int Length, with an indexed property which, for an index idx in the range 0 to Length-1, would access Arr[idx+Offset]).  Unfortunately, if foo is a read-only instance of such a structure, current compiler versions won't allow operations like foo[3]+=4; because they have no way to determine whether such operations would attempt to write to fields of foo.It's also possible to design a structure to behave a like a value type which holds a variable-sized collection (which will appear to be copied whenever the struct is) but the only way to make that work is to ensure that no object to which the struct holds a reference will ever be exposed to anything which might mutate it.  For example, one could have an array-like struct which holds a private array, and whose indexed \"put\" method creates a new array whose content is like that of the original except for one changed element.  Unfortunately, it can be somewhat difficult to make such structs perform efficiently.  While there are times that struct semantics can be convenient (e.g. being able to pass an array-like collection to a routine, with the caller and callee both knowing that outside code won't modify the collection, may be better than requiring both caller and callee to defensively copy any data they're given), the requirement that class references point to objects that will never be mutated is often a pretty severe constraint.",
                "Nah - I don't entirely agree with the rules. They are good guidelines to consider with performance and standardization, but not in light of the possibilities.As you can see in the responses, there are a lot of creative ways to use them. So, these guidelines need to just be that, always for the sake of performance and efficiency.In this case, I use classes to represent real world objects in their larger form, I use structs to represent smaller objects that have more exact uses. The way you said it, \"a more cohesive whole.\" The keyword being cohesive. The classes will be more object oriented elements, while structs can have some of those characteristics, though on a smaller scale. IMO.I use them a lot in Treeview and Listview tags where common static attributes can be accessed very quickly. I have always struggled to get this info another way. For example, in my database applications, I use a Treeview where I have Tables, SPs, Functions, or any other objects. I create and populate my struct, put it in the tag, pull it out, get the data of the selection and so forth. I wouldn't do this with a class!I do try and keep them small, use them in single instance situations, and keep them from changing. It's prudent to be aware of memory, allocation, and performance. And testing is so necessary.",
                "My rule is1, Always use class;2, If there is any performance issue, I try to change some class to struct depending on the rules which @IAbstract mentioned, and then do a test to see if these changes can improve performance.",
                "A class is a reference type. When an object of the class is created, the variable to which the object is assigned holds only a reference to that memory. When the object reference is assigned to a new variable, the new variable refers to the original object. Changes made through one variable are reflected in the other variable because they both refer to the same data.\nA struct is a value type. When a struct is created, the variable to which the struct is assigned holds the struct's actual data. When the struct is assigned to a new variable, it is copied. The new variable and the original variable therefore contain two separate copies of the same data. Changes made to one copy do not affect the other copy.\nIn general, classes are used to model more complex behavior, or data that is intended to be modified after a class object is created. Structs are best suited for small data structures that contain primarily data that is not intended to be modified after the struct is created.Classes and Structs (C# Programming Guide)",
                "I was just dealing with Windows Communication Foundation [WCF] Named Pipe and I did notice that it does make sense to use Structs in order to ensure that exchange of data is of value type instead of reference type.",
                "Briefly, use struct if:your object properties/fields do not need to be changed. I mean you just want to give them an initial value and then read them.properties and fields in your object are value type and they are not so large.If that's the case, you can take advantage of structs for a better performance and optimized memory allocation as they use only stacks rather than both stacks and heaps (in classes)",
                "The C# struct is a lightweight alternative to a class. It can do almost the same as a class, but it's less \"expensive\" to use a struct rather than a class. The reason for this is a bit technical, but to sum up, new instances of a class is placed on the heap, where newly instantiated structs are placed on the stack. Furthermore, you are not dealing with references to structs, like with classes, but instead you are working directly with the struct instance. This also means that when you pass a struct to a function, it is by value, instead of as a reference. There is more about this in the chapter about function parameters.So, you should use structs when you wish to represent more simple data structures, and especially if you know that you will be instantiating lots of them. There are lots of examples in the .NET framework, where Microsoft has used structs instead of classes, for instance the Point, Rectangle and Color struct.",
                "I think a good first approximation is \"never\".I think a good second approximation is \"never\".If you are desperate for perf, consider them, but then always measure.",
                "Struct can be used to improve garbage collection performance.  While you usually don't have to worry about GC performance, there are scenarios where it can be a killer.  Like large caches in low latency applications.  See this post for an example:http://00sharp.wordpress.com/2013/07/03/a-case-for-the-struct/",
                "Following are the rules defined at Microsoft website:\u2714\ufe0f CONSIDER defining a struct instead of a class if instances of the type are small and commonly short-lived or are commonly embedded in other objects.\u274c AVOID defining a struct unless the type has all of the following characteristics:It logically represents a single value, similar to primitive types (int, double, etc.).It has an instance size under 16 bytes.It is immutable.It will not have to be boxed frequently.for further reading",
                "Let me add another aspect besides the commonly cited performance difference and that is the intention revealing usage of default values.Do not use a struct if the default values of its fields do not represent a sensible default value of the modeled concept.Eg.If you implement a concept with a class then you can enforce certain invariants, eg. that a person must have a first name and a last name. But with a struct it is always possible to create an instance with all of its fields set to their default values.So when modeling a concept that has no sensible default value prefer a class. The users of your class will understand that null means that a PersonName is not specified but they will be confused if you hand them a PersonName struct instance with all of its properties set to null.(Usual disclaimer: performance considerations may override this advice. If you have performance concerns always measure before deciding on a solution. Try BenchmarkDotNet it's awsome!)",
                "I rarely use a struct for things. But that's just me. It depends whether I need the object to be nullable or not.As stated in other answers, I use classes for real-world objects. I also have the mindset of structs are used for storing small amounts of data.",
                "\u2714\ufe0f CONSIDER Struct Usage",
                "Classes are best suited for grouping together complex actions and data\nthat will change throughout a program; structs are a better choice for\nsimple objects and data that will remain constant for the most part.\nBesides their uses, they are fundamentally different in one key\narea\u2014that is, how they are passed or assigned between variables.\nClasses are reference types, meaning that they are passed by\nreference; structs are value types, meaning that they are passed by\nvalue.When a struct object is created, all of its data is stored in its\ncorresponding variable with no references or connections to its memory\nlocation. This makes structs useful for creating objects that need to\nbe copied quickly and efficiently, while still retaining their\nseparate identities.modifying struct2 wont affect struct1.Basically, structs are created to increase performance. But, sometimes structs may be slower because of all the copying involved. If your struct has lots of variables that need to be copied converting it to a class and just passing references around may be fasterIf you have an array of structs, the array itself is an object on the heap and struct values are contained in the array. So garbage collector only has one object to consider. If the array goes out of the scope, the garbage collector can deallocate all the structs inside the array in one step. If any other part of your code is using structs from this array, since structs are copied we can safely deallocate the array itself and its contents.If you have an array of objects, the array itself and each object in the array are separe objects on the heap. Each object could be stored in a totally different part of the heap and another part of your code might have references to those objects. So when our array goes out of scope, we cannot deallocate the array right away. Because the garbage collector has to consider each object individually and make sure there are no references to each object before de-allocating them."
            ]
        },
        {
            "tag": "hexadecimal",
            "patterns": [
                "How do you convert a byte array to a hexadecimal string, and vice versa?", "hexadecimal", "convert bytes", "convert to hexadecimal", "convert to bytes", "hexadecimal conversion"
            ],
            "responses": [
                "You can use Convert.ToHexString starting with .NET 5. \nThere's also a method for the reverse operation: Convert.FromHexString.For older versions of .NET you can either use:or:There are even more variants of doing it, for example here.The reverse conversion would go like this:Using Substring is the best option in combination with Convert.ToByte. See this answer for more information. If you need better performance, you must avoid Convert.ToByte before you can drop SubString.",
                "Note: new leader as of 2015-08-20.I ran each of the various conversion methods through some crude Stopwatch performance testing, a run with a random sentence (n=61, 1000 iterations) and a run with a Project Gutenburg text (n=1,238,957, 150 iterations). Here are the results, roughly from fastest to slowest. All measurements are in ticks (10,000 ticks = 1 ms) and all relative notes are compared to the [slowest] StringBuilder implementation. For the code used, see below or the test framework repo where I now maintain the code for running this.WARNING: Do not rely on these stats for anything concrete; they are simply a sample run of sample data. If you really need top-notch performance, please test these methods in an environment representative of your production needs with data representative of what you will use.Lookup tables have taken the lead over byte manipulation. Basically, there is some form of precomputing what any given nibble or byte will be in hex. Then, as you rip through the data, you simply look up the next portion to see what hex string it would be. That value is then added to the resulting string output in some fashion. For a long time byte manipulation, potentially harder to read by some developers, was the top-performing approach.Your best bet is still going to be finding some representative data and trying it out in a production-like environment. If you have different memory constraints, you may prefer a method with fewer allocations to one that would be faster but consume more memory.Feel free to play with the testing code I used. A version is included here but feel free to clone the repo and add your own methods. Please submit a pull request if you find anything interesting or want to help improve the testing framework it uses.Added Waleed's answer to analysis. Quite fast.Added string.Concat Array.ConvertAll variant for completeness (requires .NET 4.0). On par with string.Join version.Test repo includes more variants such as StringBuilder.Append(b.ToString(\"X2\")). None upset the results any. foreach is faster than {IEnumerable}.Aggregate, for instance, but BitConverter still wins.Added Mykroft's SoapHexBinary answer to analysis, which took over third place.Added CodesInChaos's byte manipulation answer, which took over first place (by a large margin on large blocks of text).Added Nathan Moinvaziri's lookup answer and the variant from Brian Lambert's blog. Both rather fast, but not taking the lead on the test machine I used (AMD Phenom 9750).Added @CodesInChaos's new byte-based lookup answer. It appears to have taken the lead on both the sentence tests and the full-text tests.Added airbreather's optimizations and unsafe variant to this answer's repo. If you want to play in the unsafe game, you can get some huge performance gains over any of the prior top winners on both short strings and large texts.",
                "There's a class called SoapHexBinary that does exactly what you want.",
                "When writing crypto code it's common to avoid data dependent branches and table lookups to ensure the runtime doesn't depend on the data, since data dependent timing can lead to side-channel attacks.It's also pretty fast.Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagnAbandon all hope, ye who enter hereAn explanation of the weird bit fiddling:Some further considerations:",
                "If you want more flexibility than BitConverter, but don't want those clunky 1990s-style explicit loops, then you can do:Or, if you're using .NET 4.0:(The latter from a comment on the original post.)",
                "Another lookup table based approach. This one uses only one lookup table for each byte, instead of a lookup table per nibble.I also tested variants of this using ushort, struct{char X1, X2}, struct{byte X1, X2} in the lookup table.Depending on the compilation target (x86, X64) those either had the approximately same performance or were slightly slower than this variant.And for even higher performance, its unsafe sibling:Or if you consider it acceptable to write into the string directly:",
                "You can use the BitConverter.ToString method:Output:00-01-02-04-08-10-20-40-80-FFMore information: BitConverter.ToString Method (Byte[])",
                "I just encountered the very same problem today, and I came across this code:Source: Forum post byte[] Array to Hex String (see the post by PZahra). I modified the code a little to remove the 0x prefix.I did some performance testing to the code and it was almost eight times faster than using BitConverter.ToString() (the fastest according to patridge's post).",
                "As of .NET 5 RC2 you can use:Overloads are available that take span parameters.",
                "This is an answer to revision 4 of Tomalak's highly popular answer (and subsequent edits).I'll make the case that this edit is wrong, and explain why it could be reverted. Along the way, you might learn a thing or two about some internals, and see yet another example of what premature optimization really is and how it can bite you.tl;dr: Just use Convert.ToByte and String.Substring if you're in a hurry (\"Original code\" below), it's the best combination if you don't want to re-implement Convert.ToByte. Use something more advanced (see other answers) that doesn't use Convert.ToByte if you need performance. Do not use anything else other than String.Substring in combination with Convert.ToByte, unless someone has something interesting to say about this in the comments of this answer.warning: This answer may become obsolete if a Convert.ToByte(char[], Int32) overload is implemented in the framework. This is unlikely to happen soon.As a general rule, I don't much like to say \"don't optimize prematurely\", because nobody knows when \"premature\" is. The only thing you must consider when deciding whether to optimize or not is: \"Do I have the time and resources to investigate optimization approaches properly?\". If you don't, then it's too soon, wait until your project is more mature or until you need the performance (if there is a real need, then you will make the time). In the meantime, do the simplest thing that could possibly work instead.Original code:Revision 4:The revision avoids String.Substring and uses a StringReader instead. The given reason is:Edit: you can improve performance for long strings by using a single\n  pass parser, like so:Well, looking at the reference code for String.Substring, it's clearly \"single-pass\" already; and why shouldn't it be? It operates at byte-level, not on surrogate pairs.It does allocate a new string however, but then you need to allocate one to pass to Convert.ToByte anyway. Furthermore, the solution provided in the revision allocates yet another object on every iteration (the two-char array); you can safely put that allocation outside the loop and reuse the array to avoid that.Each hexadecimal numeral represents a single octet using two digits (symbols).But then, why call StringReader.Read twice? Just call its second overload and ask it to read two characters in the two-char array at once; and reduce the amount of calls by two.What you're left with is a string reader whose only added \"value\" is a parallel index (internal _pos) which you could have declared yourself (as j for example), a redundant length variable (internal _length), and a redundant reference to the input string (internal _s). In other words, it's useless.If you wonder how Read \"reads\", just look at the code, all it does is call String.CopyTo on the input string. The rest is just book-keeping overhead to maintain values we don't need.So, remove the string reader already, and call CopyTo yourself; it's simpler, clearer, and more efficient.Do you really need a j index that increments in steps of two parallel to i? Of course not, just multiply i by two (which the compiler should be able to optimize to an addition).What does the solution look like now? Exactly like it was at the beginning, only instead of using String.Substring to allocate the string and copy the data to it, you're using an intermediary array to which you copy the hexadecimal numerals to, then allocate the string yourself and copy the data again from the array and into the string (when you pass it in the string constructor). The second copy might be optimized-out if the string is already in the intern pool, but then String.Substring will also be able to avoid it in these cases.In fact, if you look at String.Substring again, you see that it uses some low-level internal knowledge of how strings are constructed to allocate the string faster than you could normally do it, and it inlines the same code used by CopyTo directly in there to avoid the call overhead.String.SubstringManual methodConclusion? If you want to use Convert.ToByte(String, Int32) (because you don't want to re-implement that functionality yourself), there doesn't seem to be a way to beat String.Substring; all you do is run in circles, re-inventing the wheel (only with sub-optimal materials).Note that using Convert.ToByte and String.Substring is a perfectly valid choice if you don't need extreme performance. Remember: only opt for an alternative if you have the time and resources to investigate how it works properly.If there was a Convert.ToByte(char[], Int32), things would be different of course (it would be possible to do what I described above and completely avoid String).I suspect that people who report better performance by \"avoiding String.Substring\" also avoid Convert.ToByte(String, Int32), which you should really be doing if you need the performance anyway. Look at the countless other answers to discover all the different approaches to do that.Disclaimer: I haven't decompiled the latest version of the framework to verify that the reference source is up-to-date, I assume it is.Now, it all sounds good and logical, hopefully even obvious if you've managed to get so far.  But is it true?Yes!Props to Partridge for the bench framework, it's easy to hack. The input used is the following SHA-1 hash repeated 5000 times to make a 100,000 bytes long string.Have fun! (But optimize with moderation.)",
                "Complement to answer by @CodesInChaos (reversed method)Explanation:& 0x0f is to support  also lower case lettershi = hi + 10 + ((hi >> 31) & 7); is the same as:hi = ch-65 + 10 + (((ch-65) >> 31) & 7);For '0'..'9' it is the same as hi = ch - 65 + 10 + 7; which is hi = ch - 48 (this is because of 0xffffffff & 7).For 'A'..'F' it is hi = ch - 65 + 10; (this is because of 0x00000000 & 7).For 'a'..'f' we have to big numbers so we must subtract 32 from default version by making some bits 0 by using & 0x0f.65 is code for 'A'48 is code for '0'7 is the number of letters between '9' and 'A' in the ASCII table (...456789:;<=>?@ABCD...).",
                "This problem could also be solved using a look-up table. This would require a small amount of static memory for both the encoder and decoder. This method will however be fast:My solution uses 1024\u00a0bytes for the encoding table, and 256\u00a0bytes for decoding.* this solutionDuring decoding IOException and IndexOutOfRangeException could occur (if a character has a too high value > 256). Methods for de/encoding streams or arrays should be implemented, this is just a proof of concept.",
                "Why make it complex? This is simple in Visual\u00a0Studio\u00a02008:C#:VB:",
                "This is a great post. I like Waleed's solution. I haven't run it through patridge's test but it seems to be quite fast. I also needed the reverse process, converting a hex string to a byte array, so I wrote it as a reversal of Waleed's solution. Not sure if it's any faster than Tomalak's original solution. Again, I did not run the reverse process through patridge's test either.",
                "Updated on: 2022-04-17The comparison from Thymine seems to be outdated and incomplete, especially after .NET 5 with its Convert.ToHexString, so I decided to ~~fall into the bytes to hex string rabbit hole~~ create a new, updated comparison with more methods from answers to both of these two questions.I went with BenchamrkDotNet instead of a custom-made benchmarking script, which will, hopefully, make the result more accurate.\nRemember that micro-benchmarking won't ever represent the actual situation, and you should do your tests.I ran these benchmarks on a Linux with Kernel 5.15.32 on an AMD Ryzen 5800H with 2x8 GB DDR4 @ 2133 MHz.\nBe aware that the whole benchmark might take a lot of time to complete - around 40 minutes on my machine.All methods mentioned (unless stated otherwise) focus on UPPERCASE output only. That means the output will look like B33F69, not b33f69.The output from Convert.ToHexString is always uppercase. Still, thankfully there isn't any significant performance drop when paired with ToLower(), although both unsafe methods will be faster if that's your concern.Making the string lowercase efficiently might be a challenge in some methods (especially the ones with bit operators magic), but in most, it's enough to change a parameter X2 to x2 or change the letters from uppercase to lowercase in a mapping.It is sorted by Mean N=100. The reference point is the StringBuilderForEachByte method.The method ConvertToHexString is undoubtedly the fastest out there, and in my perspective, it should always be used if you have the option - it's swift and clean.If not, I decided to highlight two other methods I consider worthy below.\nI decided not to highlight unsafe methods since such code might be not only, well, unsafe, but most projects I've worked with don't allow such code.The first one is LookupPerByteSpan.\nThe code is almost identical to the code in LookupPerByte by CodesInChaos from this answer. This one is the fastest not-unsafe method benchmarked. The difference between the original and this one is using stack allocation for shorter inputs (up to 512 bytes). This makes this method around 10 % faster on these inputs but around 5 % slower on larger ones. Since most of the data I work with is shorter than larger, I opted for this one. LookupSpanPerByteSpan is also very fast, but the code size of its ReadOnlySpan<byte> mapping is too large compared to all other methods.The second one is LookupAndShiftAlphabetSpanMultiply.\nFirst, I would like to mention that this one is my creation. However, I believe this method is not only pretty fast but also simple to understand.\nThe speed comes from a change that happened in C# 7.3, where declared ReadOnlySpan<byte> methods returning a constant array initialization - new byte {1, 2, 3, ...} - are compiled as the program's static data, therefore omitting a redundant memory. [source]The source code for all methods, the benchmark, and this answer can be found here as a Gist on my GitHub.",
                "Not to pile on to the many answers here, but I found a fairly optimal (~4.5x better than accepted), straightforward implementation of the hex string parser. First, output from my tests (the first batch is my implementation):The base64 and 'BitConverter'd' lines are there to test for correctness. Note that they are equal.The implementation:I tried some stuff with unsafe and moving the (clearly redundant) character-to-nibble if sequence to another method, but this was the fastest it got.(I concede that this answers half the question. I felt that the string->byte[] conversion was underrepresented, while the byte[]->string angle seems to be well covered. Thus, this answer.)",
                "Safe versions:Unsafe versions For those who prefer performance and do not afraid of unsafeness. About 35% faster ToHex and 10% faster FromHex.BTW\nFor benchmark testing initializing alphabet every time convert function called is wrong, alphabet must be const (for string) or static readonly (for char[]). Then alphabet-based conversion of byte[] to string becomes as fast as byte manipulation versions.And of course test must be compiled in Release (with optimization) and with debug option \"Suppress JIT optimization\" turned off (same for \"Enable Just My Code\" if code must be debuggable).",
                "From Microsoft's developers, a nice, simple conversion:While the above is clean and compact, performance junkies will scream about it using enumerators. You can get peak performance with an improved version of Tomalak's original answer:This is the fastest of all the routines I've seen posted here so far. Don't just take my word for it... performance test each routine and inspect its CIL code for yourself.",
                "Inverse function for Waleed Eissa code (Hex String To Byte Array):Waleed Eissa function with lower case support:",
                "Extension methods (disclaimer: completely untested code, BTW...):etc.. Use either of Tomalak's three solutions (with the last one being an extension method on a string).",
                ".NET 5 has added the Convert.ToHexString method.For those using an older version of .NETAdapted from the .NET repository\nhttps://github.com/dotnet/runtime/blob/v5.0.3/src/libraries/System.Private.CoreLib/src/System/Convert.cs\nhttps://github.com/dotnet/runtime/blob/v5.0.3/src/libraries/Common/src/System/HexConverter.cs",
                "Fastest method for old school people... miss you pointers",
                "I noticed that most of tests were performed on functions that convert Bytes array to Hex string.\nSo, in this post I will focus on the other side: functions that convert Hex String To Byte Array.\nIf you are interested in result only, you could skip down to Summary section.\nThe test code file is supplied at the end of the post.I would like to name the function from the accepted answer (by Tomalak) StringToByteArrayV1, or to shortcut it to V1. rest of functions will be named in same way: V2, V3, V4, ..., etc.I have tested correctness by passing all 256 possible values of 1 byte, then checking output to see if correct.\nResult:note: V5_3 solves this issue (of V5_1 and V5_2)I have done performance tests using Stopwatch class.It is good idea to read Disclaimer section down here in this post, before using any from the following code\nhttps://github.com/Ghosticollis/performance-tests/blob/main/MTestPerformance.csI recommend using one of the following functions, because of the good performance, and support both upper and lower case:Here is the final shape of V5_3:WARNING: I don't have proper knowledge in testing. The main purpose of these primitive tests is to give quick overview on what might be good from all of posted functions.\nIf you need accurate results, please use proper testing tools.Finally, I would like to say I am new to be active at stackoverflow, sorry if my post is lacking.\ncomments to enhance this post would be appreciated.",
                "And for inserting into an SQL string (if you're not using command parameters):",
                "In terms of speed, this seems to be better than anything here:",
                "I did not get the code you suggested to work, Olipro. hex[i] + hex[i+1] apparently returned an int.I did, however have some success by taking some hints from Waleeds code and hammering this together. It's ugly as hell but it seems to work and performs at 1/3 of the time compared to the others according to my tests (using patridges testing mechanism). Depending on input size. Switching around the ?:s to separate out 0-9 first would probably yield a slightly faster result since there are more numbers than letters.",
                "This version of ByteArrayToHexViaByteManipulation could be faster.From my reports:...And I think this one is an optimization:",
                "I'll enter this bit fiddling competition as I have an answer that also uses bit-fiddling to decode hexadecimals. Note that using character arrays may be even faster as calling StringBuilder methods will take time as well.Converted from Java code.",
                "For performance I would go with drphrozens solution. A tiny optimization for the decoder could be to use a table for either char to get rid of the \"<< 4\".Clearly the two method calls are costly. If some kind of check is made either on input or output data (could be CRC, checksum or whatever) the if (b == 255)... could be skipped and thereby also the method calls altogether.Using offset++ and offset instead of offset and offset + 1 might give some theoretical benefit but I suspect the compiler handles this better than me.This is just off the top of my head and has not been tested or benchmarked."
            ]
        },
        {
            "tag": "sort_list",
            "patterns": [
                "How to Sort a List<T> by a property in the object", "How to sort a list", "How to sort by property", "Sort by property of list", "Sort lists"
            ],
            "responses": [
                "The easiest way I can think of is to use Linq:",
                "If you need to sort the list in-place then you can use the Sort method, passing a Comparison<T> delegate:If you prefer to create a new, sorted sequence rather than sort in-place then you can use LINQ's OrderBy method, as mentioned in the other answers.",
                "To do this without LINQ on .Net2.0:If you're on .Net3.0, then LukeH's answer is what you're after.To sort on multiple properties, you can still do it within a delegate. For example:This would give you ascending dates with descending orderIds.However, I wouldn't recommend sticking delegates as it will mean lots of places without code re-use. You should implement an IComparer and just pass that through to your Sort method. See here.And then to use this IComparer class, just instantiate it and pass it to your Sort method:",
                "Simplest way to order a list is to use OrderByIf you want to order by multiple columns like following SQL Query.To achieve this you can use ThenBy like following.",
                "Doing it without Linq as you said:Then just call .sort() on your list of Orders",
                "A Classical Object Oriented SolutionFirst I must genuflect to the awesomeness of LINQ....  Now that we've got that out of the wayA variation on JimmyHoffa answer. With generics the CompareTo parameter becomes type safe.This default sortability is re-usable of course. That is each client does not have to redundantly re-write the sorting logic. Swapping the \"1\" and \"-1\" (or the logic operators, your choice) reverses the sort order.",
                "// Totally generic sorting for use with a gridview",
                "Using LINQ",
                "Here is a generic LINQ extension method that does not create an extra copy of the list:To use it:I recently built this additional one which accepts an ICompare<U>, so that you can customize the comparison.  This came in handy when I needed to do a Natural string sort:",
                "Please let me complete the answer by @LukeH with some sample code, as I have tested it I believe it may be useful for some:",
                "Anybody working with nullable types, Value is required to use CompareTo.",
                "An improved of Roger's version.The problem with GetDynamicSortProperty is that only get the property names but what happen if in the GridView we use NavigationProperties? it will send an exception, since it finds null.Example:\"Employee.Company.Name; \" will crash... since allows only \"Name\" as a parameter to get its value.Here's an improved version that allows us to sort by Navigation Properties.",
                "You can do something more generic about the properties selection yet be specific about the type you're selecting from, in your case 'Order':write your function as a generic one:and then use it like this:You can be even more generic and define an open type for what you want to order:and use it the same way:Which is a stupid unnecessary complex way of doing a LINQ style 'OrderBy',\nBut it may give you a clue of how it can be implemented in a generic way",
                "Suppose you have the following code, in this code, we have a Passenger class with a couple of properties that we want to sort based on.So you can implement your sort structure by using Composition delegate.",
                "I made this extension method for List<T>.The extension method takes the property you wish to sort as a parsed string and then uses the OrderBy method of the List<T>. Then it sets each index of the original list to the same index of the ordered list.If an object in the list has the property Name you sort your list testList as so:I would recommend that you change the name of SortBy, to something like Prefix_SortBy. To prevent potential collisions if you import another library.I know this method works for alphabetical and numerical ordering. Its sorting capabilites may be limited yet it is very simple to operate.If there are some major flaws or issues with this, do tell, I've been programming C# for about 3 months.Best regards",
                "Make use of LiNQ OrderBy",
                "Based on GenericTypeTea's Comparer :\nwe can obtain more flexibility by adding sorting flags :In this scenario, you must instantiate it as MyOrderingClass explicitly( rather then IComparer )\nin order to set its sorting properties :",
                "None of the above answers were generic enough for me so I made this one:Careful on massive data sets though. It's easy code but could get you in trouble if the collection is huge and the object type of the collection has a large number of fields.\nRun time is NxM where:N = # of Elements in collectionM = # of Properties within Object",
                "If you need to sort the Id that is string in Question entityUse Sort function and delegate to sort the Id after parsing the Id\nvalue",
                "From performance point of view the best is to use a sorted list so that data is sorted as it is added to result.\nOther approaches need at least one extra iteration on data and most create a copy of data so not only performance but memory usage will be affected too. Might not be an issue with couple of hundreds of elements but will be with thousands, especially in services where many concurrent requests may do sorting at the same time.\nHave a look at System.Collections.Generic namespace and choose a class with sorting instead of List.And avoid generic implementations using reflection when possible, this can cause performance issues too.",
                "hi just to come back at the question.\nIf you want to sort the List of this sequence  \"1\" \"10\" \"100\" \"200\" \"2\" \"20\" \"3\" \"30\" \"300\" and get the sorted items in this form 1;2;3;10;20;30;100;200;300 you can use this:and you can use it in code behind in this form:"
            ]
        },
        {
            "tag": "update_GUI",
            "patterns": [
                "How do I update the GUI from another thread?", "updating GUI", "Updating from another thread"
            ],
            "responses": [
                "The simplest way is an anonymous method passed into Label.Invoke:Notice that Invoke blocks execution until it completes--this is synchronous code. The question doesn't ask about asynchronous code, but there is lots of content on Stack Overflow about writing asynchronous code when you want to learn about it.",
                "For .NET 2.0, here's a nice bit of code I wrote that does exactly what you want, and works for any property on a Control:Call it like this:If you're using .NET 3.0 or above, you could rewrite the above method as an extension method of the Control class, which would then simplify the call to:UPDATE 05/10/2010:For .NET 3.0 you should use this code:which uses LINQ and lambda expressions to allow much cleaner, simpler and safer syntax:Not only is the property name now checked at compile time, the property's type is as well, so it's impossible to (for example) assign a string value to a boolean property, and hence cause a runtime exception.Unfortunately this doesn't stop anyone from doing stupid things such as passing in another Control's property and value, so the following will happily compile:Hence I added the runtime checks to ensure that the passed-in property does actually belong to the Control that the method's being called on. Not perfect, but still a lot better than the .NET 2.0 version.If anyone has any further suggestions on how to improve this code for compile-time safety, please comment!",
                "Since .NET 4.5 and C# 5.0 you should use Task-based Asynchronous Pattern (TAP) along with async-await keywords in all areas (including the GUI):TAP is the recommended asynchronous design pattern for new developmentinstead of Asynchronous Programming Model (APM) and Event-based Asynchronous Pattern (EAP) (the latter includes the BackgroundWorker Class).Then, the recommended solution for new development is:Asynchronous implementation of an event handler (Yes, that's all):Implementation of the second thread that notifies the UI thread:Notice the following:For a more verbose examples see: The Future of C#: Good things come to those who 'await' by Joseph Albahari.See also about UI Threading Model concept.The below snippet is an example of how to handle exceptions and toggle button's Enabled property to prevent multiple clicks during background execution.",
                "Variation of Marc Gravell's simplest solution for .NET 4:Or use Action delegate instead:See here for a comparison of the two: MethodInvoker vs Action for Control.BeginInvoke",
                "Fire and forget extension method for .NET 3.5+This can be called using the following line of code:",
                "This is the classic way you should do this:Your worker thread has an event. Your UI thread starts off another thread to do the work and hooks up that worker event so you can display the state of the worker thread.Then in the UI you need to cross threads to change the actual control... like a label or a progress bar.",
                "The simple solution is to use Control.Invoke.",
                "Threading code is often buggy and always hard to test. You don't need to write threading code to update the user interface from a background task. Just use the BackgroundWorker class to run the task and its ReportProgress method to update the user interface. Usually, you just report a percentage complete, but there's another overload that includes a state object. Here's an example that just reports a string object:That's fine if you always want to update the same field. If you've got more complicated updates to make, you could define a class to represent the UI state and pass it to the ReportProgress method.One final thing, be sure to set the WorkerReportsProgress flag, or the ReportProgress method will be completely ignored.",
                "The vast majority of answers use Control.Invoke which is a race condition waiting to happen. For example, consider the accepted answer:If the user closes the form just before this.Invoke is called (remember, this is the Form object), an ObjectDisposedException will be likely fired.The solution is to use SynchronizationContext, specifically SynchronizationContext.Current as hamilton.danielb suggests (other answers rely on specific SynchronizationContext implementations which is completely unnecessary). I would slightly modify his code to use SynchronizationContext.Post rather than SynchronizationContext.Send though (as there's typically no need for the worker thread to wait):Note that on .NET 4.0 and up you should really be using tasks for async operations. See n-san's answer for the equivalent task-based approach (using TaskScheduler.FromCurrentSynchronizationContext).Finally, on .NET 4.5 and up you can also use Progress<T> (which basically captures SynchronizationContext.Current upon its creation) as demonstrated by Ryszard D\u017cegan's for cases where the long-running operation needs to run UI code while still working.",
                "You'll have to make sure that the update happens on the correct thread; the UI thread.In order to do this, you'll have to Invoke the event-handler instead of calling it directly.You can do this by raising your event like this:(The code is typed here out of my head, so I haven't checked for correct syntax, etc., but it should get you going.)Note that the code above will not work on WPF projects, since WPF controls do not implement the ISynchronizeInvoke interface.In order to make sure that the code above works with Windows Forms and WPF, and all other platforms, you can have a look at the AsyncOperation, AsyncOperationManager and SynchronizationContext classes.In order to easily raise events this way, I've created an extension method, which allows me to simplify raising an event by just calling:Of course, you can also make use of the BackGroundWorker class, which will abstract this matter for you.",
                "Because of the triviality of the scenario I would actually have the UI thread poll for the status. I think you will find that it can be quite elegant.The approach avoids the marshaling operation required when using the ISynchronizeInvoke.Invoke and ISynchronizeInvoke.BeginInvoke methods. There is nothing wrong with using the marshaling technique, but there are a couple of caveats you need to be aware of.The strategy I propose in this answer reverses the communication roles of the threads. Instead of the worker thread pushing the data the UI thread polls for it. This a common pattern used in many scenarios. Since all you are wanting to do is display progress information from the worker thread then I think you will find that this solution is a great alternative to the marshaling solution. It has the following advantages.",
                "You'll need to Invoke the method on the GUI thread. You can do that by calling Control.Invoke.For example:",
                "None of the Invoke stuff in the previous answers is necessary.You need to look at WindowsFormsSynchronizationContext:",
                "This one is similar to the solution above using .NET Framework 3.0, but it solved the issue of compile-time safety support.To use:The compiler will fail if the user passes the wrong data type.",
                "Salvete! Having searched for this question, I found the answers by FrankG and Oregon Ghost to be the easiest most useful to me. Now, I code in Visual Basic and ran this snippet through a convertor; so I'm not sure quite how it turns out.I have a dialog form called form_Diagnostics, which has a richtext box, called updateDiagWindow, which I am using as a sort of logging display.  I needed to be able to update its text from all threads. The extra lines allow the window to automatically scroll to the newest lines.And so, I can now update the display with one line, from anywhere in the entire program in the manner which you think it would work without any threading:Main Code (put this inside of your form's class code):",
                "Note that BeginInvoke() is preferred over Invoke() because it's less likely to cause deadlocks (however, this is not an issue here when just assigning text to a label):When using Invoke() you are waiting for the method to return. Now, it may be that you do something in the invoked code that will need to wait for the thread, which may not be immediately obvious if it's buried in some functions that you are calling, which itself may happen indirectly via event handlers. So you would be waiting for the thread, the thread would be waiting for you and you are deadlocked.This actually caused some of our released software to hang. It was easy enough to fix by replacing Invoke() with BeginInvoke(). Unless you have a need for synchronous operation, which may be the case if you need a return value, use BeginInvoke().",
                "For many purposes it's as simple as this:\"serviceGUI()\" is a GUI level method within the form (this) that can change as many controls as you want. Call \"updateGUI()\" from the other thread. Parameters can be added to pass values, or (probably faster) use class scope variables with locks on them as required if there is any possibility of a clash between threads accessing them that could cause instability.  Use BeginInvoke instead of Invoke if the non-GUI thread is time critical (keeping Brian Gideon's warning in mind).",
                "When I encountered the same issue I sought help from Google, but rather than give me a simple solution it confused me more by giving examples of MethodInvoker and blah blah blah. So I decided to solve it on my own. Here is my solution:Make a delegate like this:You can call this function in a new thread like thisDon't be confused with Thread(() => .....). I use an anonymous function or lambda expression when I work on a thread. To reduce the lines of code you can use the ThreadStart(..) method too which I am not supposed to explain here.",
                "This in my C# 3.0 variation of Ian Kemp's solution:You call it like this:Otherwise, the original is a very nice solution.",
                "Most of the other answers are a little complex for me on this question (I'm new to C#), so I am writing mine:I have a WPF application and have defined a worker as below:Issue:Solution:I am yet to find out what the above line means, but it works.For WinForms:Solution:",
                "Simply use something like this:",
                "My version is to insert one line of recursive \"mantra\":For no arguments:For a function that has arguments:THAT is IT.Some argumentation: Usually it is bad for code readability to put {} after an if () statement in one line. But in this case it is routine all-the-same \"mantra\". It doesn't break code readability if this method is consistent over the project. And it saves your code from littering (one line of code instead of five).As you see if(InvokeRequired) {something long} you just know \"this function is safe to call from another thread\".",
                "You may use the already-existing delegate Action:",
                "Create a class variable:Set it in the constructor that creates your UI:When you want to update the label:",
                "And yet another generic Control extension aproach..First add an extension method for objects of type Controland call like this from another thread to access a Control named object1 in UI-thread:..or like this",
                "You must use invoke and delegate",
                "Try to refresh the label using this",
                "The simplest way in WPF applications is:",
                "When you're in the UI thread you could ask it for its synchronization context task scheduler. It would give you a TaskScheduler that schedules everything on the UI thread.Then you can chain your tasks so that when the result is ready then another task (which is scheduled on the UI thread) picks it and assigns it to a label.This works for tasks (not threads) which are the preferred way of writing concurrent code now.",
                "For example, access a control other than in the current thread:There the lblThreshold is a Label and Speed_Threshold is a global variable."
            ]
        },
        {
            "tag": "readonly",
            "patterns": [
                "'Static readonly' vs. 'const'", "readonly vs const", "readonly", "const", "What is the difference between readonly and const"
            ],
            "responses": [
                "public static readonly fields are a little unusual; public static properties (with only a get) would be more common (perhaps backed by a private static readonly field).const values are burned directly into the call-site; this is double edged:If the value will never change, then const is fine - Zero etc make reasonable consts ;p Other than that, static properties are more common.",
                "I would use static readonly if the Consumer is in a different assembly. Having the const and the Consumer in two different assemblies is a nice way to shoot yourself in the foot.",
                "const int areadonly int a",
                "This is just a supplement to the other answers. I will not repeat them (now four years later).There are situations where a const and a non-const have different semantics. For example:prints out True, whereas:writes False.The reason is that the method x.Equals has two overloads, one that takes in a short (System.Int16) and one that takes an object (System.Object). Now the question is whether one or both apply with my y argument.When y is a compile-time constant (literal), the const case, it becomes important that there does exist an implicit conversion from int to short provided that the int is a constant, and provided that the C# compiler verifies that its value is within the range of a short (which 42 is). See Implicit constant expression conversions in the C# Language Specification. So both overloads have to be considered. The overload Equals(short) is preferred (any short is an object, but not all object are short). So y is converted to short, and that overload is used. Then Equals compares two short of identical value, and that gives true.When y is not a constant, no implicit conversion from int to short exists. That's because in general an int may be too huge to fit into a short. (An explicit conversion does exist, but I didn't say Equals((short)y), so that's not relevant.) We see that only one overload applies, the Equals(object) one. So y is boxed to object. Then Equals is going to compare a System.Int16 to a System.Int32, and since the run-time types do not even agree, that will yield false.We conclude that in some (rare) cases, changing a const type member to a static readonly field (or the other way, when that is possible) can change the behavior of the program.",
                "One thing to note is const is restricted to primitive/value types (the exception being strings).",
                "Static Read Only:The value can be changed through a static constructor at runtime. But not through a member function.Constant:By default static. A value cannot be changed from anywhere (constructor, function, runtime, etc. nowhere).Read Only:The value can be changed through a constructor at runtime. But not through a member function.You can have a look at my repository: C# property types.",
                "The readonly keyword is different from the const keyword. A const field can only be initialized at the declaration of the field. A readonly field can be initialized either at the declaration or in a constructor. Therefore, readonly fields can have different values depending on the constructor used. Also, while a const field is a compile-time constant, the readonly field can be used for runtime constantsFrom this short and clear MSDN reference.",
                "const and readonly are similar, but they are not exactly the same.A const field is a compile-time constant, meaning that that value can be computed at compile-time. A readonly field enables additional scenarios in which some code must be run during construction of the type. After construction, a readonly field cannot be changed.For instance, const members can be used to define members like:Since values like 3.14 and 0 are compile-time constants. However, consider the case where you define a type and want to provide some pre-fab instances of it. E.g., you might want to define a Color class and provide \"constants\" for common colors like Black, White, etc. It isn't possible to do this with const members, as the right hand sides are not compile-time constants. One could do this with regular static members:But then there is nothing to keep a client of Color from mucking with it, perhaps by swapping the Black and White values. Needless to say, this would cause consternation for other clients of the Color class. The \"readonly\" feature addresses this scenario.By simply introducing the readonly keyword in the declarations, we preserve the flexible initialization while preventing client code from mucking around.It is interesting to note that const members are always static, whereas a readonly member can be either static or not, just like a regular field.It is possible to use a single keyword for these two purposes, but this leads to either versioning problems or performance problems. Assume for a moment that we used a single keyword for this (const) and a developer wrote:and a different developer wrote code that relied on A:Now, can the code that is generated rely on the fact that A.C is a compile-time constant? I.e., can the use of A.C simply be replaced by the value 0? If you say \"yes\" to this, then that means that the developer of A cannot change the way that A.C is initialized -- this ties the hands of the developer of A without permission.If you say \"no\" to this question then an important optimization is missed. Perhaps the author of A is positive that A.C will always be zero. The use of both const and readonly allows the developer of A to specify the intent. This makes for better versioning behavior and also better performance.",
                "My preference is to use const whenever I can, which, as mentioned in previous answers, is limited to literal expressions or something that does not require evaluation.If I hit up against that limitation, then I fallback to static readonly, with one caveat. I would generally use a public static property with a getter and a backing private static readonly field as Marc mentions here.",
                "Const: Constant variable values have to be defined along with the declaration and after that it won't change.const are implicitly static, so without creating a class instance we can access them. This has a value at compile time.ReadOnly: We can define read-only variable values while declaring as well as using the constructor at runtime. Read-only variables can't access without a class instance.Static readonly: We can define static readonly variable values while declaring as well as only through a static constructor, but not with any other constructor. We can also access these variables without creating a class instance (as static variables).Static readonly will be better choice if we have to consume the variables in different assemblies. Please check the full details in the below blog post:Const Strings \u2013 a very convenient way to shoot yourself in the foot",
                "A static readonly field is advantageous when exposing to\nother assemblies a value that might change in a later version.For instance, suppose assembly X exposes a constant as follows:If assembly Y references X and uses this constant, the value 2.3\nwill be baked into assembly Y when compiled. This means that\nif X is later recompiled with the constant set to 2.4, Y will still\nuse the old value of 2.3 until Y is recompiled. A static\nreadonly field avoids this problem.Another way of looking at this is that any value that might\nchange in the future is not constant by definition, and so should\nnot be represented as one.",
                "Const: Const is nothing but \"constant\", a variable of which the value is constant but at compile time. And it's mandatory to assign a value to it. By default a const is static and we cannot change the value of a const variable throughout the entire program.Static ReadOnly: A Static Readonly type variable's value can be assigned at runtime or assigned at compile time and changed at runtime. But this variable's value can only be changed in the static constructor. And cannot be changed further. It can change only once at runtimeReference: c-sharpcorner",
                "There is a minor difference between const and static readonly fields in C#.Netconst must be initialized with value at compile time.const is by default static and needs to be initialized with constant value, which can not be modified later on.\nIt can not be used with all datatypes. For ex- DateTime. It can not be used with DateTime datatype.readonly can be declared as static, but not necessary. No need to initialize at the time of declaration. Its value can be assigned or changed using constructor once. So there is a possibility to change value of readonly field once (does not matter, if it is static or not), which is not possible with const.",
                "const:readonly:",
                "A const (being determined at compile-time) can be used in cases where a readonly static can't, like in switch statements, or attribute constructors. This is because readonly fields are only resolved at run-time, and some code constructs require compile time assurance. A readonly static can be calculated in a constructor, which is often an essential and useful thing. The difference is functional, as should be their usage in my opinion.In terms of memory allocation, at least with strings (being a reference type), there seems to be no difference in that both are interned and will reference the one interned instance.Personally, my default is readonly static, as it makes more semantic and logical sense to me, especially since most values are not needed at compile time. And, by the way, public readonly statics are not unusual or uncommon at all as the marked answer states: for instance, System.String.Empty is one.",
                "Another difference between declaring const and static readonly is in memory allocation.A static field belongs to the type of an object rather than to an instance of that type. As a result, once the class is referenced for the first time, the static field would \"live\" in the memory for the rest of time, and the same instance of the static field would be referenced by all instances of the type.On the other hand, a const field \"belongs to an instance of the type.If memory of deallocation is more important for you, prefer to use const. If speed, then use static readonly.",
                "Use const if you can provide a compile-time constant:Use static readonly if you need your value evaluated during run-time:This will give a compile error because it is impossible to get the value at compile-time.",
                "Constants are like the name implies, fields which don't change and are usually defined statically at compile time in the code.Read-only variables are fields that can change under specific conditions.They can be either initialized when you first declare them like a constant, but usually they are initialized during object construction inside the constructor.They cannot be changed after the initialization takes place, in the conditions mentioned above.Static read-only sounds like a poor choice to me since, if it's static and it never changes, so just use it public const. If it can change then it's not a constant and then, depending on your needs, you can either use read-only or just a regular variable.Also, another important distinction is that a constant belongs to the class, while the read-only variable belongs to the instance!",
                "There is one important question, that is not mentioned anywhere in the above answers, and should drive you to prefer \"const\" especially for basic types like \"int\", \"string\" etc.Constants can be used as Attribute parameters, static readonly field not!Azure functions HttpTrigger, not using HttpMethods class in attributeIf only microsoft used constants for Http's GET, POST, DELETE etc.It would be possible to writeBut instead I have to resort toOr use my own constant:",
                "ConstStatic read onlyDuring Refactoring, All const can be safely converted to Static read only, but not vise versa as we have seen above when converted  code may break as some static readonly variable could be initialized in constructors.",
                "One additional difference that I don't believe is mentioned above:const and static readonly values don't get CodeLens applied to them in the Visual Studio IDE.static get only properties DO get CodeLens applied to them.I consider the addition of CodeLens to be quite valuable.Note: Currently using Visual Studio 2022.",
                "Const, readonly, static readonly - keywords that perform a similar action but have an important difference:\u2022 Const - is a variable whose value is constant and is assigned at compile time. You must assign a value to it. The default constants are static, and we cannot change the value of the const variable throughout the program.\u2022 Readonly - means a value that we can change at run time, or we can assign it at run time, but only through a non-static constructor.\u2022 Static readonly - values \u200b\u200bcan be assigned at run time or assigned at compile time and changed at run time. But the value of this variable can be changed only in the static constructor. And cannot be changed further. It can only be changed once during execution.Examples you can find here - https://www.c-sharpcorner.com/UploadFile/c210df/difference-between-const-readonly-and-static-readonly-in-C-Sharp/"
            ]
        },
        {
            "tag": "hashtables",
            "patterns": [
                "Why is Dictionary preferred over Hashtable in C#?", "Hashtables over dictionaries", "hashtables and dictionaries", "why are hashtables better than dictionaries"
            ],
            "responses": [
                "For what it's worth, a Dictionary is (conceptually) a hash table.If you meant \"why do we use the Dictionary<TKey, TValue> class instead of the Hashtable class?\", then it's an easy answer: Dictionary<TKey, TValue> is a generic type, Hashtable is not. That means you get type safety with Dictionary<TKey, TValue>, because you can't insert any random object into it, and you don't have to cast the values you take out.Interestingly, the Dictionary<TKey, TValue> implementation in the .NET Framework is based on the Hashtable, as you can tell from this comment in its source code:The generic Dictionary was copied from Hashtable's sourceSource",
                "(candidates to use instead of Dictionary and Hashtable)",
                "Because Dictionary is a generic class ( Dictionary<TKey, TValue> ), so that accessing its content is type-safe (i.e. you do not need to cast from Object, as you do with a Hashtable).ComparetoHowever, Dictionary is implemented as hash table internally, so technically it works the same way.",
                "FYI: In .NET, Hashtable is thread safe for use by multiple reader threads and a single writing thread, while in Dictionary public static members are thread safe, but any instance members are not guaranteed to be thread safe.We had to change all our Dictionaries back to Hashtable because of this.",
                "In .NET, the difference between Dictionary<,> and HashTable is primarily that the former  is a generic type, so you get all the benefits of generics in terms of static type checking (and reduced boxing, but this isn't as big as people tend to think in terms of performance - there is a definite memory cost to boxing, though).",
                "People are saying that a Dictionary is the same as a hash table.This is not necessarily true. A hash table is one way to implement a dictionary. A typical one at that, and it may be the default one in .NET in the Dictionary class, but it's not by definition the only one.You could equally well implement a dictionary using a linked list or a search tree, it just wouldn't be as efficient (for some metric of efficient).",
                "Collections & Generics are useful for handling group of objects. In .NET, all the collections objects comes under the interface IEnumerable, which in turn has ArrayList(Index-Value)) & HashTable(Key-Value). After .NET framework 2.0, ArrayList & HashTable were replaced with List & Dictionary. Now, the Arraylist & HashTable are no more used in nowadays projects.Coming to the difference between HashTable & Dictionary, Dictionary is generic where as Hastable is not Generic. We can add any type of object to HashTable, but while retrieving we need to cast it to the required type. So, it is not type safe. But to dictionary, while declaring itself we can specify the type of key and value, so there is no need to cast while retrieving.Let's look at an example:HashTableDictionary,",
                "The Extensive Examination of Data Structures Using C# article on MSDN states that there is also a difference in the  collision resolution strategy:The Hashtable class uses a technique referred to as rehashing.Rehashing works as follows: there is a set of hash different functions,\n  H1 ... Hn, and when inserting or retrieving an item from the hash\n  table, initially the H1 hash function is used. If this leads to a\n  collision, H2 is tried instead, and onwards up to Hn if needed.The Dictionary uses a technique referred to as chaining.With rehashing, in the event of a collision the hash is recomputed, and the new slot corresponding to a hash is tried.  With chaining, however, a secondary data structure is utilized to hold\n  any collisions. Specifically, each slot in the Dictionary has an array\n  of elements that map to that bucket. In the event of a collision, the\n  colliding element is prepended to the bucket's list.",
                "Dictionary:It returns/throws Exception if we try to find a key which does not exist.It is faster than a Hashtable because there is no boxing and unboxing.Only public static members are thread safe.Dictionary is a generic type which means we can use it with any data type (When creating, must specify the data types for both keys and values).Example: Dictionary<string, string> <NameOfDictionaryVar> = \n               new Dictionary<string, string>();Dictionay is a type-safe implementation of Hashtable, Keys and Values are strongly typed.Hashtable:It returns null if we try to find a key which does not exist.It is slower than dictionary because it requires boxing and unboxing.All the members in a Hashtable are thread safe,Hashtable is not a generic type,Hashtable is loosely-typed data structure, we can add keys and values of any type.",
                "Since .NET Framework 3.5 there is also a HashSet<T> which provides all the pros of the Dictionary<TKey, TValue> if you need only the keys and no values.So if you use a Dictionary<MyType, object> and always set the value to null to simulate the type safe hash table you should maybe consider switching to the HashSet<T>.",
                "The Hashtable is a loosely-typed data structure, so you can add keys and values of any type to the Hashtable. The Dictionary class is a type-safe Hashtable implementation, and the keys and values are strongly typed. When creating a Dictionary instance, you must specify the data types for both the key and value.",
                "Notice that the documentation says: \"the Dictionary<(Of <(TKey, TValue>)>) class is implemented as a hash table\", not \"the Dictionary<(Of <(TKey, TValue>)>) class is implemented as a HashTable\"Dictionary is NOT implemented as a HashTable, but it is implemented following the concept of a hash table. The implementation is unrelated to the HashTable class because of the use of Generics, although internally Microsoft could have used the same code and replaced the symbols of type Object with TKey and TValue.In .NET 1.0 Generics did not exist; this is where the HashTable and ArrayList originally began.",
                "HashTable:Key/value will be converted into an object (boxing) type while storing into the heap.Key/value needs to be converted into the desired type while reading from the heap.These operations are very costly. We need to avoid boxing/unboxing as much as possible.Dictionary : Generic variant of HashTable.No boxing/unboxing. No conversions required.",
                "A Hashtable object consists of buckets that contain the elements of the collection. A bucket is a virtual subgroup of elements within the Hashtable, which makes searching and retrieving easier and faster than in most collections.The Dictionary class has the same functionality as the Hashtable class. A Dictionary of a specific type (other than Object) has better performance than a Hashtable for value types because the elements of Hashtable are of type Object and, therefore, boxing and unboxing typically occur if storing or retrieving a value type.For further reading: Hashtable and Dictionary Collection Types",
                "Another important difference is that Hashtable is thread safe. Hashtable has built-in multiple reader/single writer (MR/SW) thread safety which means Hashtable allows ONE writer together with multiple readers without locking.In the case of Dictionary there is no thread safety; if you need thread safety you must implement your own synchronization.To elaborate further:Hashtable provides some thread-safety through the Synchronized property, which returns a thread-safe wrapper around the collection. The wrapper works by locking the entire collection on every add or remove operation. Therefore, each thread that is attempting to access the collection must wait for its turn to take the one lock. This is not scalable and can cause significant performance degradation for large collections. Also, the design is not completely protected from race conditions.The .NET Framework 2.0 collection classes like List<T>, Dictionary<TKey, TValue>, etc. do not provide any thread synchronization; user code must provide all synchronization when items are added or removed on multiple threads concurrentlyIf you need type safety as well thread safety, use concurrent collections classes in the .NET Framework. Further reading here.An additional difference is that when we add the multiple entries in Dictionary, the order in which the entries are added is maintained. When we retrieve the items from Dictionary we will get the records in the same order we have inserted them. Whereas Hashtable doesn't preserve the insertion order.",
                "One more difference that I can figure out is:We can not use Dictionary<KT,VT> (generics) with web services. The reason is no web service standard supports the generics standard.",
                "Dictionary<> is a generic type and so it's type safe.You can insert any value type in HashTable and this may sometimes throw an exception. But Dictionary<int> will only accept integer values and similarly Dictionary<string> will only accept strings.So, it is better to use Dictionary<> instead of HashTable.",
                "In most programming languages, dictionaries are preferred over hashtablesI don't think this is necessarily true, most languages have one or the other, depending on the terminology they prefer.In C#, however, the clear reason (for me) is that C# HashTables and other members of the System.Collections namespace are largely obsolete. They were present in c# V1.1.  They have been replaced from C# 2.0 by the Generic classes in the System.Collections.Generic namespace.",
                "According to what I see by using .NET Reflector:So we can be sure that DictionaryBase uses a HashTable internally."
            ]
        },
        {
            "tag": "hidden_features",
            "patterns": [
                "Hidden Features of C#?", "What are the hidden features of C#", "C# hidden", "C# features"
            ],
            "responses": [
                "This isn't C# per se, but I haven't seen anyone who really uses System.IO.Path.Combine() to the extent that they should. In fact, the whole Path class is really useful, but no one uses it!I'm willing to bet that every production app has the following code, even though it shouldn't:",
                "lambdas and type inference are underrated. Lambdas can have multiple statements and they double as a compatible delegate object automatically (just make sure the signature match) as in:Note that I don't have a new CancellationEventHandler nor do I have to specify types of sender and e, they're inferable from the event. Which is why this is less cumbersome to writing the whole delegate (blah blah) which also requires you to specify types of parameters.Lambdas don't need to return anything and type inference is extremely powerful in context like this.And BTW, you can always return Lambdas that make Lambdas in the functional programming sense. For example, here's a lambda that makes a lambda that handles a Button.Click event:Note the chaining: (dx, dy) => (sender, e) =>Now that's why I'm happy to have taken the functional programming class :-)Other than the pointers in C, I think it's the other fundamental thing you should learn :-)",
                "From Rick Strahl:You can chain the ?? operator so that you can do a bunch of null comparisons.",
                "Aliased generics:It allows you to use ASimpleName, instead of Dictionary<string, Dictionary<string, List<string>>>.Use it when you would use the same generic big long complex thing in a lot of places.",
                "From CLR via C#:When normalizing strings, it is highly\n  recommended that you use\n  ToUpperInvariant instead of\n  ToLowerInvariant because Microsoft has\n  optimized the code for performing\n  uppercase comparisons.I remember one time my coworker always changed strings to uppercase before comparing. I've always wondered why he does that because I feel it's more \"natural\" to convert to lowercase first. After reading the book now I know why.",
                "My favorite trick is using the null coalesce operator and parentheses to automagically instantiate collections for me.",
                "Avoid checking for null event handlersAdding an empty delegate to events at declaration, suppressing the need to always check the event for null before calling it is awesome. Example:Let you do thisInstead of thisPlease also see this related discussion and this blog post by Eric Lippert on this topic (and possible downsides).",
                "Everything else, plus1) implicit generics (why only on methods and not on classes?)2) simple lambdas with one parameter:3) anonymous types and initialisers:Another one:4) Auto properties can have different scopes:Thanks @pzycoman for reminding me:5) Namespace aliases (not that you're likely to need this particular distinction):",
                "I didn't know the \"as\" keyword for quite a while.vsThe second will return null if obj isn't a MyClass, rather than throw a class cast exception.",
                "Two things I like are Automatic properties so you can collapse your code down even further:becomesAlso object initializers:becomes",
                "The 'default' keyword in generic types:results in a 'null' if T is a reference type, and 0 if it is an int, false if it is a boolean,\netcetera.",
                "Attributes in general, but most of all DebuggerDisplay. Saves you years.",
                "The @ tells the compiler to ignore any\n  escape characters in a string.Just wanted to clarify this one... it doesn't tell it to ignore the escape characters, it actually tells the compiler to interpret the string as a literal.If you haveit will actually print out as (note that it even includes the whitespace used for indentation):",
                "I think one of the most under-appreciated and lesser-known features of C# (.NET 3.5) are Expression Trees, especially when combined with Generics and Lambdas. This is an approach to API creation that newer libraries like NInject and Moq are using.For example, let's say that I want to register a method with an API and that API needs to get the method nameGiven this class:Before, it was very common to see developers do this with strings and types (or something else largely string-based):Well, that sucks because of the lack of strong-typing. What if I rename \"SomeMethod\"? Now, in 3.5 however, I can do this in a strongly-typed fashion:In which the RegisterMethod class uses Expression<Action<T>> like this:This is one big reason that I'm in love with Lambdas and Expression Trees right now.",
                "\"yield\" would come to my mind. Some of the attributes like [DefaultValue()] are also among my favorites.The \"var\" keyword is a bit more known, but that you can use it in .NET 2.0 applications as well (as long as you use the .NET 3.5 compiler and set it to output 2.0 code) does not seem to be known very well.Edit: kokos, thanks for pointing out the ?? operator, that's indeed really useful. Since it's a bit hard to google for it (as ?? is just ignored), here is the MSDN documentation page for that operator: ?? Operator (C# Reference)",
                "I tend to find that most C# developers don't know about 'nullable' types. Basically, primitives that can have a null value.Set a nullable double, num1, to null, then set a regular double, num2, to num1 or -100 if num1 was null.http://msdn.microsoft.com/en-us/library/1t3y8s4s(VS.80).aspxone more thing about Nullable type:it is return String.Empty. Check this link for more details",
                "Here are some interesting hidden C# features, in the form of undocumented C# keywords:These are undocumented C# keywords (even Visual Studio recognizes them!) that were added to for a more efficient boxing/unboxing prior to generics. They work in coordination with the System.TypedReference struct.There's also __arglist, which is used for variable length parameter lists.One thing folks don't know much about is System.WeakReference -- a very useful class that keeps track of an object but still allows the garbage collector to collect it.The most useful \"hidden\" feature would be the yield return keyword. It's not really hidden, but a lot of folks don't know about it. LINQ is built atop this; it allows for delay-executed queries by generating a state machine under the hood. Raymond Chen recently posted about the internal, gritty details.",
                "Unions (the C++ shared memory kind) in pure, safe C#Without resorting to unsafe mode and pointers, you can have class members share memory space in a class/struct.  Given the following class:You can modify the values of the byte fields by manipulating the Int32 field and vice-versa.  For example, this program:Outputs this:just add\nusing System.Runtime.InteropServices;",
                "Using @ for variable names that are keywords.",
                "If you want to exit your program without calling any finally blocks or finalizers use FailFast:",
                "Returning anonymous types from a method and accessing members without reflection.",
                "Here's a useful one for regular expressions and file paths:The @ tells the compiler to ignore any escape characters in a string.",
                "Mixins. Basically, if you want to add a feature to several classes, but cannot use one base class for all of them, get each class to implement an interface (with no members). Then, write an extension method for the interface, i.e.Of course, some clarity is sacrificed. But it works!",
                "Not sure why anyone would ever want to use Nullable<bool> though. :-)True, False, FileNotFound?",
                "This one is not \"hidden\" so much as it is misnamed.A lot of attention is paid to the algorithms \"map\", \"reduce\", and \"filter\". What most people don't realize is that .NET 3.5 added all three of these algorithms, but it gave them very SQL-ish names, based on the fact that they're part of LINQ.\"map\" => Select Transforms data\n  from one form into another\"reduce\" => Aggregate Aggregates\n  values into a single result\"filter\" => Where Filters data\n  based on a criteriaThe ability to use LINQ to do inline work on collections that used to take iteration and conditionals can be incredibly valuable. It's worth learning how all the LINQ extension methods can help make your code much more compact and maintainable.",
                "for system independent newlines.",
                "If you're trying to use curly brackets inside a String.Format expression...",
                "@Ed, I'm a bit reticent about posting this as it's little more than nitpicking. However, I would point out that in your code sample:If you're going to use 'is', why follow it up with a safe cast using 'as'? If you've ascertained that obj is indeed MyClass, a bog-standard cast:...is never going to fail.Similarly, you could just say:I don't know enough about .NET's innards to be sure, but my instincts tell me that this would cut a maximum of two type casts operations down to a maximum of one. It's hardly likely to break the processing bank either way; personally, I think the latter form looks cleaner too.",
                "Maybe not an advanced technique, but one I see all the time that drives me crazy:can be condensed to:"
            ]
        },
        {
            "tag": "field",
            "patterns": [
                "What is the difference between a field and a property?", "what are fields", "what are properties", "fields and properties"
            ],
            "responses": [
                "Properties expose fields.  Fields should (almost always) be kept private to a class and accessed via get and set properties.  Properties provide a level of abstraction allowing you to change the fields while not affecting the external way they are accessed by the things that use your class.@Kent points out that Properties are not required to encapsulate fields, they could do a calculation on other fields, or serve other purposes.@GSS points out that you can also do other logic, such as validation, when a property is accessed, another useful feature.",
                "Object orientated programming principles say that, the internal workings of a class should be hidden from the outside world. If you expose a field you're in essence exposing the internal implementation of the class. Therefore we wrap fields with Properties (or methods in Java's case) to give us the ability to change the implementation without breaking code depending on us. Seeing as we can put logic in the Property also allows us to perform validation logic etc if we need it.\nC# 3 has the possibly confusing notion of autoproperties. This allows us to simply define the Property and the C#3 compiler will generate the private field for us.",
                "An important difference is that interfaces can have properties but not fields. This, to me, underlines that properties should be used to define a class's public interface while fields are meant to be used in the private, internal workings of a class. As a rule I rarely create public fields and similarly I rarely create non-public properties.",
                "I'll give you a couple examples of using properties that might get the gears turning:",
                "Using Properties, you can raise an event, when the value of the property is changed (aka. PropertyChangedEvent) or before the value is changed to support cancellation.This is not possible with (direct access to) fields.",
                "Since many of them have explained with technical pros and cons of Properties and Field, it's time to get into real time examples.1. Properties allows you to set the read-only access levelConsider the case of dataTable.Rows.Count and dataTable.Columns[i].Caption. They come from the class DataTable and both are public to us. The difference in the access-level to them is that we cannot set value to dataTable.Rows.Count but we can read and write to dataTable.Columns[i].Caption. Is that possible through Field? No!!! This can be done with Properties only.2. Properties in PropertyGridYou might have worked with Button in Visual Studio. Its properties are shown in the PropertyGrid like Text,Name etc. When we drag and drop a button, and when we click the properties, it will automatically find the class Button and filters Properties and show that in PropertyGrid (where PropertyGrid won't show Field even though they are public).In PropertyGrid, the properties Name and Text will be shown, but not SomeProperty. Why??? Because Properties can accept Attributes. It does not show in case where [Browsable(false)] is false.3. Can execute statements inside Properties4. Only Properties can be used in Binding SourceBinding Source helps us to decrease the number of lines of code. Fields are not accepted by BindingSource. We should use Properties for that.5. Debugging modeConsider we are using Field to hold a value. At some point we need to debug and check where the value is getting null for that field. It will be difficult to do where the number of lines of code are more than 1000. In such situations we can use Property and can set debug mode inside Property.",
                "A field is a variable that is declared directly in a class or struct. A class or struct may have instance fields or static fields or both. Generally, you should use fields only for variables that have private or protected accessibility. Data that your class exposes to client code should be provided through methods, properties and indexers. By using these constructs for indirect access to internal fields, you can guard against invalid input values.A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field. Properties can be used as if they are public data members, but they are actually special methods called accessors. This enables data to be accessed easily and still helps promote the safety and flexibility of methods.\nProperties enable a class to expose a public way of getting and setting values, while hiding implementation or verification code. A get property accessor is used to return the property value, and a set accessor is used to assign a new value.",
                "Though fields and properties look to be similar to each other, they are 2 completely different language elements.Fields are the only mechanism how to store data on class level. Fields are conceptually variables at class scope. If you want to store some data to instances of your classes (objects) you need to use fields. There is no other choice. Properties can't store any data even though, it may look they are able to do so. See bellow.Properties on the other hand never store data. They are just the pairs of methods (get and set) that can be syntactically called in a similar way as fields and in most cases they access (for read or write) fields, which is the source of some confusion. But because property methods are (with some limitations like fixed prototype) regular C# methods they can do whatever regular methods can do. It means they can have 1000 lines of code, they can throw exceptions, call another methods, can be even virtual, abstract or overridden. What makes properties special, is the fact that C# compiler stores some extra metadata into assemblies that can be used to search for specific properties - widely used feature.Get and set property methods has the following prototypes.So it means that properties can be 'emulated' by defining a field and 2 corresponding methods.Such property emulation is typical for programming languages that don't support properties - like standard C++. In C# there you should always prefer properties as the way how to access to your fields.Because only the fields can store a data, it means that more fields class contains, more memory objects of such class will consume. On the other hand, adding new properties into a class doesn't make objects of such class bigger. Here is the example.Though property methods can do anything, in most cases they serve as a way how to access objects' fields. If you want to make a field accessible to other classes you can do by 2 ways.Here is a class using public fields.While the code is perfectly valid, from design point of view, it has several drawbacks. Because fields can be both read and written, you can't prevent user from writing to fields. You can apply readonly keyword, but in this way, you have to initialize readonly fields only in constructor. What's more, nothing prevents you to store invalid values into your fields.The code is valid, all assignments will be executed though they are illogical. Age has a negative value, YearOfBirth is far in future and doesn't correspond to Age and FullName is null. With fields you can't prevent users of class Name to make such mistakes.Here is a code with properties that fixes these issues.The updated version of class has the following advantages.Beside this, properties can be defined as virtual or overridden - simply because they are regular .NET methods. The same rules applies for such property methods as for regular methods.C# also supports indexers which are the properties that have an index parameter in property methods. Here is the example.Since C# 3.0 allows you to define automatic properties. Here is the example.Even though class AutoProps contains only properties (or it looks like), it can store 2 values and size of objects of this class is equal to sizeof(Value1)+sizeof(Value2)=4+4=8 bytes.The reason for this is simple. When you define an automatic property, C# compiler generates automatic code that contains hidden field and a property with property methods accessing this hidden field. Here is the code compiler produces.Here is a code generated by the ILSpy from compiled assembly. Class contains generated hidden fields and properties.So, as you can see, the compiler still uses the fields to store the values - since fields are the only way how to store values into objects.So as you can see, though properties and fields have similar usage syntax they are very different concepts. Even if you use automatic properties or events - hidden fields are generated by compiler where the real data are stored.If you need to make a field value accessible to the outside world (users of your class) don't use public or protected fields. Fields always should be marked as private. Properties allow you to make value checks, formatting, conversions etc. and generally make your code safer, more readable and more extensible for future modifications.",
                "Properties have the primary advantage of allowing you to change the way data on an object is accessed without breaking it's public interface. For example, if you need to add extra validation, or to change a stored field into a calculated you can do so easily if you initially exposed the field as a property. If you just exposed a field directly, then you would have to change the public interface of your class to add the new functionality. That change would break existing clients, requiring them to be recompiled before they could use the new version of your code.If you write a class library designed for wide consumption (like the .NET Framework, which is used by millions of people), that can be a problem. However, if you are writing a class used internally inside a small code base (say <= 50 K lines), it's really not a big deal, because no one would be adversely affected by your changes. In that case it really just comes down to personal preference.",
                "Properties support asymmetric access, i.e. you can have either a getter and a setter or just one of the two. Similarly properties support individual accessibility for getter/setter. Fields are always symmetric, i.e. you can always both get and set the value. Exception to this is readonly fields which obviously cannot be set after initialization.Properties may run for a very long time, have side effects, and may even throw exceptions. Fields are fast, with no side effects, and will never throw exceptions. Due to side effects a property may return a different value for each call (as may be the case for DateTime.Now, i.e. DateTime.Now is not always equal to DateTime.Now). Fields always return the same value.Fields may be used for out / ref parameters, properties may not. \nProperties support additional logic \u2013 this could be used to implement lazy loading among other things.Properties support a level of abstraction by encapsulating whatever it means to get/set the value.Use properties in most / all cases, but try to avoid side effects.",
                "In the background a property is compiled into methods. So a Name property is compiled into get_Name() and set_Name(string value). You can see this if you study the compiled code. \nSo there is a (very) small performance overhead when using them. Normally you will always use a Property if you expose a field to the outside, and you will often use it internally if you need to do validation of the value.",
                "When you want your private variable(field) to be accessible to object of your class from other classes you need to create properties for those variables.for example if I have  variables named as \"id\" and \"name\" which is private \nbut there might be situation where this variable needed for read/write operation outside of the class. At that situation , property can help me to get that variable to read/write depending upon the get/set defined for the property. A property can be a readonly / writeonly / readwrite both.here is the demo",
                "The second question here, \"when should a field be used instead of a property?\", is only briefly touched on in this other answer and kinda this one too, but not really much detail.In general, all the other answers are spot-on about good design: prefer exposing properties over exposing fields.  While you probably won't regularly find yourself saying \"wow, imagine how much worse things would be if I had made this a field instead of a property\", it's so much more rare to think of a situation where you would say \"wow, thank God I used a field here instead of a property.\"But there's one advantage that fields have over properties, and that's their ability to be used as \"ref\" / \"out\" parameters.  Suppose you have a method with the following signature:and suppose that you want to use that method to transform an array created like this:Here's I think the fastest way to do it, since X and Y are properties:And that's going to be pretty good!  Unless you have measurements that prove otherwise, there's no reason to throw a stink.  But I believe it's not technically guaranteed to be as fast as this:Doing some measurements myself, the version with fields takes about 61% of the time as the version with properties (.NET 4.6, Windows 7, x64, release mode, no debugger attached).  The more expensive the TransformPoint method gets, the less pronounced that the difference becomes.  To repeat this yourself, run with the first line commented-out and with it not commented-out.Even if there were no performance benefits for the above, there are other places where being able to use ref and out parameters might be beneficial, such as when calling the Interlocked or Volatile family of methods.  Note: In case this is new to you, Volatile is basically a way to get at the same behavior provided by the volatile keyword.  As such, like volatile, it doesn't magically solve all thread-safety woes like its name suggests that it might.I definitely don't want to seem like I'm advocating that you go \"oh, I should start exposing fields instead of properties.\"  The point is that if you need to regularly use these members in calls that take \"ref\" or \"out\" parameters, especially on something that might be a simple value type that's unlikely to ever need any of the value-added elements of properties, an argument can be made.",
                "Also, properties allow you to use logic when setting values.So you can say you only want to set a value to an integer field, if the value is greater than x, otherwise throw an exception.Really useful feature.",
                "(This should really be a comment, but I can't post a comment, so please excuse if it is not appropriate as a post).I once worked at a place where the recommended practice was to use public fields instead of properties when the equivalent property def would just have been accessing a field, as in :Their reasoning was that the public field could be converted into a property later in future if required. It seemed a little strange to me at the time. Judging by these posts, it looks like not many here would agree either. What might you have said to try to change things ?Edit : I should add that all of the code base at this place was compiled at the same time, so they might have thought that changing the public interface of classes (by changing a public field to a property) was not a problem.",
                "Technically, i don't think that there is a difference, because properties are just wrappers around fields created by the user or automatically created by the compiler.The purpose of properties is to enforce encapsuation and to offer a lightweight method-like feature.\nIt's just a bad practice to declare fields as public, but it does not have any issues.",
                "Fields are ordinary member variables or member instances of a class. Properties are an abstraction to get and set their values. Properties are also called accessors because they offer a way to change and retrieve a field if you expose a field in the class as private. Generally, you should declare your member variables private, then declare or define properties for them.",
                "If you are going to use thread primitives you are forced to use fields. Properties can break your threaded code. Apart from that, what cory said is correct.",
                "My design of a field is that a field needs to be modified only by its parent, hence the class. Result the variable becomes private, then to be able to give the right to read the classes / methods outside I go through the system of property with only the Get. The field is then retrieved by the property and read-only! If you want to modify it you have to go through methods (for example the constructor) and I find that thanks to this way of making you secure, we have better control over our code because we \"flange\". One could very well always put everything in public so every possible case, the notion of variables / methods / classes etc ... in my opinion is just an aid to the development, maintenance of the code. For example, if a person resumes a code with public fields, he can do anything and therefore things \"illogical\" in relation to the objective, the logic of why the code was written. It's my point of view.When i use a classic model private field / public readonly properties,for 10 privates fields i should write 10 publics properties! The code can be really big faster. I discover the private setter and now i only use public properties with a private setter.\nThe setter create in background a private field.That why my old classic programming style was:My new programming style:",
                "Basic and general difference is:FieldsProperties",
                "Properties encapsulate fields, thus enabling you to perform additional processing on the value to be set or retrieved. It is typically overkill to use properties if you will not be doing any pre- or postprocessing on the field value.",
                "IMO, Properties are just the \"SetXXX()\" \"GetXXX()\" functions/methods/interfaces pairs we used before, but they are more concise and elegant.",
                "Traditionally private fields are set via getter and setter methods.  For the sake of less code you can use properties to set fields instead.",
                "when you have a class which is \"Car\". The properties are color,shape..Where as fields are variables defined within the scope of a class.",
                "From Wikipedia -- Object-oriented programming:Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which are data structures that contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. (emphasis added)Properties are actually part of an object's behavior, but are designed to give consumers of the object the illusion/abstraction of working with the object's data.",
                "Properties are special kind of class member, In properties we use a predefined Set or Get method.They use accessors through which we can read, written or change the values of the private fields.For example, let us take a class named Employee, with private fields for name, age and Employee_Id. We cannot access these fields from outside the class , but we can access these private fields through properties.Why do we use properties?Making the class field public & exposing it is risky, as you will not have control what gets assigned & returned.To understand this clearly with an example lets take a student class who have ID, passmark, name. Now in this example some problem with public fieldTo remove this problem We use Get and set method.Now we take an example of get and set method",
                "Additional info:\nBy default, get and set accessors are as accessible as the property itself.\nYou can control/restrict accessor accessibility individually (for get and set) by applying more restrictive access modifiers on them.Example:Here get is still publicly accessed (as the property is public), but set is protected (a more restricted access specifier).",
                "Think about it : You have a room and a door to enter this room. If you want to check how who is coming in and secure your room, then you should use properties otherwise they won't be any door and every one easily come in w/o any regulationPeople is getting in to sectionOne pretty easily, there wasn't any checkingNow you checked the person and know about whether he has something evil with him",
                "Fields are the variables in classes. Fields are the data which you can encapsulate through the use of access modifiers.Properties are similar to Fields in that they define states and the data associated with an object.Unlike a field a property has a special syntax that controls how a person reads the data and writes the data, these are known as the get and set operators. The set logic can often be used to do validation.",
                "Properties are used to expose field. They use accessors(set, get) through which the values of the private fields can be read, written or manipulated.Properties do not name the storage locations. Instead, they have accessors that read, write, or compute their values.Using properties we can set validation on the type of data that is set on a field.For example we have private integer field age on that we should allow positive values since age cannot be negative.We can do this in two ways using getter and setters and using property.Auto Implemented property if we don't logic in get and set accessors we can use auto implemented property.When use auto-implemented property compiles creates a private, anonymous field that can only be accessed through get and set accessors.Abstract Properties\nAn abstract class may have an abstract property, which should be implemented in the derived classWe can privately set a property\nIn this we can privately set the auto property(set with in the class)You can achieve same with this code. In this property set feature is not available as we have to set value to field directly."
            ]
        },
        {
            "tag": "Path.Combine",
            "patterns": [
                "Path.Combine for URLs?", "What is Path.Combine"
            ],
            "responses": [
                "Uri has a constructor that should do this for you: new Uri(Uri baseUri, string relativeUri)Here's an example:Note from editor: Beware, this method does not work as expected. It can cut part of baseUri in some cases. See comments and other answers.",
                "This may be a suitably simple solution:",
                "There's already some great answers here. Based on mdsharpe suggestion, here's an extension method that can easily be used when you want to deal with Uri instances:And usage example:This will produce http://example.com/subpath/part1/part2If you want to work with strings instead of Uris then the following will also produce the same result, simply adapt it to suit your needs:",
                "You use Uri.TryCreate( ... ) :Will return:http://msdn.microsoft.com/en-us/library/system.uri.trycreate.aspx",
                "There is a Todd Menier's comment above that Flurl includes a Url.Combine.More details:Url.Combine is basically a Path.Combine for URLs, ensuring one\nand only one separator character between parts:Get Flurl.Http on NuGet:PM> Install-Package Flurl.HttpOr get the stand-alone URL builder without the HTTP features:PM> Install-Package Flurl",
                "Ryan Cook's answer is close to what I'm after and may be more appropriate for other developers. However, it adds http:// to the beginning of the string and in general it does a bit more formatting than I'm after.Also, for my use cases, resolving relative paths is not important.mdsharp's answer also contains the seed of a good idea, although that actual implementation needed a few more details to be complete. This is an attempt to flesh it out (and I'm using this in production):C#VB.NETThis code passes the following test, which happens to be in VB:",
                "Path.Combine does not work for me because there can be characters like \"|\" in QueryString arguments and therefore the URL, which will result in an ArgumentException.I first tried the new Uri(Uri baseUri, string relativeUri) approach, which failed for me because of URIs like http://www.mediawiki.org/wiki/Special:SpecialPages:will result in Special:SpecialPages, because of the colon after Special that denotes a scheme.So I finally had to take mdsharpe/Brian MacKays route and developed it a bit further to work with multiple URI parts:Usage: CombineUri(\"http://www.mediawiki.org/\", \"wiki\", \"Special:SpecialPages\")",
                "Based on the sample URL you provided, I'm going to assume you want to combine URLs that are relative to your site.Based on this assumption I'll propose this solution as the most appropriate response to your question which was: \"Path.Combine is handy, is there a similar function in the framework for URLs?\"Since there the is a similar function in the framework for URLs I propose the correct is: \"VirtualPathUtility.Combine\" method.\nHere's the MSDN reference link: VirtualPathUtility.Combine MethodThere is one caveat: I believe this only works for URLs relative to your site (that is, you cannot use it to generate links to another web site. For example, var url = VirtualPathUtility.Combine(\"www.google.com\", \"accounts/widgets\");).",
                "I just put together a small extension method:It can be used like this:",
                "Witty example, Ryan, to end with a link to the function. Well done.One recommendation Brian: if you wrap this code in a function, you may want to use a UriBuilder to wrap the base URL prior to the TryCreate call.Otherwise, the base URL MUST include the scheme (where the UriBuilder will assume http://). Just a thought:",
                "An easy way to combine them and ensure it's always correct is:",
                "I think this should give you more flexibility as you can deal with as many path segments as you want:",
                "Combining multiple parts of a URL could be a little bit tricky. You can use the two-parameter constructor Uri(baseUri, relativeUri), or you can use the Uri.TryCreate() utility function.In either case, you might end up returning an incorrect result because these methods keep on truncating the relative parts off of the first parameter baseUri, i.e. from something like http://google.com/some/thing to http://google.com.To be able to combine multiple parts into a final URL, you can copy the two functions below:Full code with unit tests to demonstrate usage can be found at https://uricombine.codeplex.com/SourceControl/latest#UriCombine/Uri.csI have unit tests to cover the three most common cases:",
                "As found in other answers, either new Uri() or TryCreate() can do the tick.\nHowever, the base Uri has to end with / and the relative has to NOT begin with /; otherwise it will remove the trailing part of the base UrlI think this is best done as an extension method, i.e.and to use it:In terms of performance, this consumes more resources than it needs, because of the Uri class which does a lot of parsing and validation; a very rough profiling (Debug) did a million operations in about 2 seconds.\nThis will work for most scenarios, however to be more efficient, it's better to manipulate everything as strings, this takes 125 milliseconds for 1 million operations.\nI.e.And if you still want to return a URI, it takes around 600 milliseconds for 1 million operations.I hope this helps.",
                "I found UriBuilder worked really well for this sort of thing:See UriBuilder Class - MSDN for more constructors and documentation.",
                "If you don't want to have a dependency like Flurl, you can use its source code:",
                "I find the following useful and has the following features :ClassTests",
                "So I have another approach, similar to everyone who used UriBuilder.I did not want to split my BaseUrl (which can contain a part of the path - e.g. http://mybaseurl.com/dev/) as javajavajavajavajava did.The following snippet shows the code + Tests.Beware: This solution lowercases the host and appends a port. If this is not desired, one can write a string representation by e.g. leveraging the Uri Property of UriBuilder.Tested with .NET Core 2.1 on Windows 10.Why does this work?Even though Path.Combine will return Backslashes (on Windows atleast), the UriBuilder handles this case in the Setter of Path.Taken from https://github.com/dotnet/corefx/blob/master/src/System.Private.Uri/src/System/UriBuilder.cs (mind the call to string.Replace)Is this the best approach?Certainly this solution is pretty self describing (at least in my opinion). But you are relying on undocumented (at least I found nothing with a quick google search) \"feature\" from the .NET API. This may change with a future release so please cover the Method with Tests.There are tests in https://github.com/dotnet/corefx/blob/master/src/System.Private.Uri/tests/FunctionalTests/UriBuilderTests.cs (Path_Get_Set) which check, if the \\ is correctly transformed.Side Note: One could also work with the UriBuilder.Uri property directly, if the uri will be used for a System.Uri ctor.",
                "For anyone who is looking for a one-liner and simply wants to join parts of a path without creating a new method or referencing a new library or construct a URI value and convert that to a string, then...It's pretty basic, but I don't see what more you need. If you're afraid of doubled '/' then you can simply do a .Replace(\"//\", \"/\") afterward. If you're afraid of replacing the doubled '//' in 'https://', then instead do one join, replace the doubled '/', then join the website url (however I'm pretty sure most browsers will automatically convert anything with 'https:' in the front of it to read in the correct format). This would look like:There are plenty of answers here that will handle all the above, but in my case, I only needed it once in one location and won't need to heavily rely on it. Also, it's really easy to see what is going on here.See: https://learn.microsoft.com/en-us/dotnet/api/system.string.join?view=netframework-4.8",
                "My generic solution:",
                "Here's Microsoft's (OfficeDev PnP) method UrlUtility.Combine:Source: GitHub",
                "I have an allocation-free string creation version that I've been using with great success.NOTE:Hope you find this useful!with Benchmark DotNet output:",
                "Here is my approach and I will use it for myself too:",
                "I created this function that will make your life easier:It works for URLs as well as normal paths.Usage:",
                "I found that the Uri constructor flips '\\' into '/'. So you can also use Path.Combine, with the Uri constructor.",
                "Why not just use the following.",
                "For what it's worth, here a couple of extension methods.  The first one will combine paths and the second one adds parameters to the URL.",
                "If you don't want to add a third-party dependency such as Flurl or create a custom extension method, in ASP.NET Core (also available in Microsoft.Owin), you can use PathString which is intended for the purpose of building up URI paths. You can then create your full URI using a combination of this, Uri and UriBuilder.In this case, it would be:This gives you all the constituent parts without having to specify the separators in the base URL. Unfortunately, PathString requires that / is prepended to each string otherwise it in fact throws an ArgumentException! But at least you can build up your URI deterministically in a way that is easily unit-testable.",
                "// Read all above samples and as result created my self:// usage"
            ]
        },
        {
            "tag": "virtual_member",
            "patterns": [
                "Virtual member call in a constructor", "what are virtual member calls", "constructor calls"
            ],
            "responses": [
                "When an object written in C# is constructed, what happens is that the initializers run in order from the most derived class to the base class, and then constructors run in order from the base class to the most derived class (see Eric Lippert's blog for details as to why this is).Also in .NET objects do not change type as they are constructed, but start out as the most derived type, with the method table being for the most derived type. This means that virtual method calls always run on the most derived type.When you combine these two facts you are left with the problem that if you make a virtual method call in a constructor, and it is not the most derived type in its inheritance hierarchy, that it will be called on a class whose constructor has not been run, and therefore may not be in a suitable state to have that method called.This problem is, of course, mitigated if you mark your class as sealed to ensure that it is the most derived type in the inheritance hierarchy - in which case it is perfectly safe to call the virtual method.",
                "In order to answer your question, consider this question: what will the below code print out when the Child object is instantiated?The answer is that in fact a NullReferenceException will be thrown, because foo is null. An object's base constructor is called before its own constructor. By having a virtual call in an object's constructor you are introducing the possibility that inheriting objects will execute code before they have been fully initialized.",
                "The rules of C# are very different from that of Java and C++.When you are in the constructor for some object in C#, that object exists in a fully initialized (just not \"constructed\") form, as its fully derived type.This means that if you call a virtual function from the constructor of A, it will resolve to any override in B, if one is provided.Even if you intentionally set up A and B like this, fully understanding the behavior of the system, you could be in for a shock later. Say you called virtual functions in B's constructor, \"knowing\" they would be handled by B or A as appropriate. Then time passes, and someone else decides they need to define C, and override some of the virtual functions there. All of a sudden B's constructor ends up calling code in C, which could lead to quite surprising behavior.It is probably a good idea to avoid virtual functions in constructors anyway, since the rules are so different between C#, C++, and Java. Your programmers may not know what to expect!",
                "Reasons of the warning are already described, but how would you fix the warning? You have to seal either class or virtual member.You can seal class A:Or you can seal method Foo:",
                "In C#, a base class' constructor runs before the derived class' constructor, so any instance fields that a derived class might use in the possibly-overridden virtual member are not initialized yet.Do note that this is just a warning to make you pay attention and make sure it's all-right.  There are actual use-cases for this scenario, you just have to document the behavior of the virtual member that it can not use any instance fields declared in a derived class below where the constructor calling it is.",
                "There are well-written answers above for why you wouldn't want to do that.  Here's a counter-example where perhaps you would want to do that (translated into C# from Practical Object-Oriented Design in Ruby by Sandi Metz, p. 126).Note that GetDependency() isn't touching any instance variables.  It would be static if static methods could be virtual.(To be fair, there are probably smarter ways of doing this via dependency injection containers or object initializers...)",
                "Yes, it's generally bad to call virtual method in the constructor.At this point, the objet may not be fully constructed yet, and the invariants expected by methods may not hold yet.",
                "Because until the constructor has completed executing, the object is not fully instantiated. Any members referenced by the virtual function may not be initialised. In C++, when you are in a constructor, this only refers to the static type of the constructor you are in, and not the actual dynamic type of the object that is being created. This means that the virtual function call might not even go where you expect it to.",
                "One important missing bit is, what is the correct way to resolve this issue?As Greg explained, the root problem here is that a base class constructor would invoke the virtual member before the derived class has been constructed.The following code, taken from MSDN's constructor design guidelines, demonstrates this issue.When a new instance of DerivedFromBad is created, the base class constructor calls to DisplayState and shows BadBaseClass because the field has not yet been update by the derived constructor.An improved implementation removes the virtual method from the base class constructor, and uses an Initialize method. Creating a new instance of DerivedFromBetter displays the expected \"DerivedFromBetter\"",
                "Your constructor may (later, in an extension of your software) be called from the constructor of a subclass that overrides the virtual method.  Now not the subclass's implementation of the function, but the implementation of the base class will be called.  So it doesn't really make sense to call a virtual function here.However, if your design satisfies the Liskov Substitution principle, no harm will be done. Probably that's why it's tolerated - a warning, not an error.",
                "One important aspect of this question which other answers have not yet addressed is that it is safe for a base-class to call virtual members from within its constructor if that is what the derived classes are expecting it to do.  In such cases, the designer of the derived class is responsible for ensuring that any methods which are run before construction is complete will behave as sensibly as they can under the circumstances.  For example, in C++/CLI, constructors are wrapped in code which will call Dispose on the partially-constructed object if construction fails.  Calling Dispose in such cases is often necessary to prevent resource leaks, but Dispose methods must be prepared for the possibility that the object upon which they are run may not have been fully constructed.",
                "The warning is a reminder that virtual members are likely to be overridden on derived class. In that case whatever the parent class did to a virtual member will be undone or changed by overriding child class. Look at the small example blow for clarityThe parent class below attempts to set value to a virtual member on its constructor. And this will trigger Re-sharper warning, let see on code:The child class here overrides the parent property. If this property was not marked virtual the compiler would warn that the property hides property on the parent class and suggest that you add 'new' keyword if it is intentional.Finally the impact on use, the output of the example below abandons the initial value set by parent class constructor.\nAnd this is what Re-sharper attempts to to warn you, values set on the Parent class constructor are open to be overwritten by the child class constructor which is called right after the parent class constructor.",
                "Beware of blindly following Resharper's advice and making the class sealed! \nIf it's a model in EF Code First it will remove the virtual keyword and that would disable lazy loading of it's relationships.",
                "There's a difference between C++ and C# in this specific case.\nIn C++ the object is not initialized and therefore it is unsafe to call a virutal function inside a constructor.\nIn C# when a class object is created all its members are zero initialized. It is possible to call a virtual function in the constructor but if you'll might access members that are still zero. If you don't need to access members it is quite safe to call a virtual function in C#.",
                "Just to add my thoughts. If you always initialize the private field when define it, this problem should be avoid. At least below code works like a charm:",
                "I think that ignoring the warning might be legitimate if you want to give the child class the ability to set or override a property that the parent constructor will use right away:The risk here would be for the child class to set the property from its constructor in which case the change in the value would occur after the base class constructor has been called.My use case is that I want the child class to provide a specific value or a utility class such as a converter and I don't want to have to call an initialization method on the base.The output of the above when instantiating the child class is:",
                "I would just add an Initialize() method to the base class and then call that from derived constructors. That method will call any virtual/abstract methods/properties AFTER all of the constructors have been executed :)",
                "Another interesting thing I found is that the ReSharper error can be 'satisfied' by doing something like below which is dumb to me. However, as mentioned by many earlier, it still is not a good idea to call virtual properties/methods in constructor."
            ]
        },
        {
            "tag": "post_requests",
            "patterns": [
                "Send HTTP POST request in .NET", "What are post requests", "What are HTTP Post requests", "HTTP Posts"
            ],
            "responses": [
                "There are several ways to perform HTTP GET and POST requests:Available in: .NET Framework 4.5+, .NET Standard 1.1+, and .NET Core 1.0+.It is currently the preferred approach, and is asynchronous and high performance. Use the built-in version in most cases, but for very old platforms there is a NuGet package.It is recommended to instantiate one HttpClient for your application's lifetime and share it unless you have a specific reason not to.See HttpClientFactory for a dependency injection solution.POSTGETRestSharpPOSTFlurl.HttpIt is a newer library sporting a fluent API, testing helpers, uses HttpClient under the hood, and is portable. It is available via NuGet.POSTGETAvailable in: .NET Framework 1.1+, .NET Standard 2.0+, .NET Core 1.0+. In .NET Core, it is mostly for compatibility -- it wraps HttpClient, is less performant, and won't get new features.POSTGETThis is a wrapper around HttpWebRequest. Compare with HttpClient.Available in: .NET Framework 1.1+, NET Standard 2.0+, and .NET Core 2.0+.In some circumstances (.NET Framework 4.5-4.8), if you need to do a HTTP request synchronously, WebClient can still be used.POSTGET",
                "Simple GET requestSimple POST request",
                "MSDN has a sample.",
                "This is a complete working example of sending/receiving data in JSON format, I used Visual Studio 2013 Express Edition:",
                "There are some really good answers on here. Let me post a different way to set your headers with the WebClient(). I will also show you how to set an API key.",
                "Simple (one-liner, no error checking, no wait for response) solution I've found so far:Use with caution!",
                "This solution uses nothing but standard .NET calls.Tested:Reference:Code:To call with no parameters (uses a \"GET\" behind the scenes):To call with parameters (uses a \"POST\" behind the scenes):",
                "If you like a fluent API you can use Tiny.RestClient. It's available at NuGet.",
                "Yet another way of doing it:This way you can easily post a stream.",
                "When using the Windows.Web.Http namespace, for POST instead of FormUrlEncodedContent, we write HttpFormUrlEncodedContent. Also the response is type of HttpResponseMessage. The rest is as Evan Mulawski wrote down.",
                "Why is this not totally trivial? Doing the request is not and especially not dealing with the results. And it seems like there are some .NET bugs involved as well - see Bug in HttpClient.GetAsync should throw WebException, not TaskCanceledExceptionI ended up with this code:This will do a GET or POST depending on if postBuffer is null or not.If Success is true, the response will then be in ResponseAsString.If Success is false, you can check WebExceptionStatus, HttpStatusCode and ResponseAsString to try to see what went wrong.",
                "This an example of an HTTPS web request. You can echo any results in a PHP script. Finally, a PHP echo string will be shown as an alert on the C# client side.PHP server side:The result will be \"Yes, hi Ali\".This is for Xamarin Forms. For a C# .NET application, replace DisplayAlert with:",
                "In .NET Core you can make a POST call with the following code. Here I added some extra features to this code, so you can make your code work behind a proxy and with network credentials if any.Also here I mention that you can change the encoding of your message.",
                "Here's what I use in .NET 4.8 to make an HTTP POST request.\nWith this code, one can send multiple POST requests at a time asynchronously.At the end of each request an event is raised. And also at the end of all requests another event is raised.The one below is the core class:the AeonLabs.Envoriment is a class with a collection or fields and properties.And the one bellow is for making a POST request:The Aoenlabs.Security is a class for sending POST data encrypted using standard encryption algorithms.",
                "If you need to POST a JSON message body, you could use the following. Assuming you have a class instance named m."
            ]
        },
        {
            "tag": "Linq",
            "patterns": [
                "LINQ's Distinct() on a particular property", "Distinct objects in Linq"
            ],
            "responses": [
                "What if I want to obtain a distinct list based on one or more properties?Simple! You want to group them and pick a winner out of the group.If you want to define groups on multiple properties, here's how:Note: Certain query providers are unable to resolve that each group must have at least one element, and that First is the appropriate method to call in that situation. If you find yourself working with such a query provider, FirstOrDefault may help get your query through the query provider.Note2: Consider this answer for an EF Core (prior to EF Core 6) compatible approach. https://stackoverflow.com/a/66529949/8155",
                "EDIT: This is now part of MoreLINQ.What you need is a \"distinct-by\" effectively. I don't believe it's part of LINQ as it stands, although it's fairly easy to write:So to find the distinct values using just the Id property, you could use:And to use multiple properties, you can use anonymous types, which implement equality appropriately:Untested, but it should work (and it now at least compiles).It assumes the default comparer for the keys though - if you want to pass in an equality comparer, just pass it on to the HashSet constructor.",
                "Use:The where helps you filter the entries (could be more complex) and the groupby and select perform the distinct function.",
                "You could also use query syntax if you want it to look all LINQ-like:",
                "I think it is enough:",
                "Solution first group by your fields then select FirstOrDefault item.",
                "Starting with .NET 6, there is new solution using the new DistinctBy() extension in Linq, so we can do:The signature of the DistinctBy method:",
                "You can do this with the standard Linq.ToLookup(). This will create a collection of values for each unique key. Just select the first item in the collection",
                "The following code is functionally equivalent to Jon Skeet's answer.Tested on .NET 4.5, should work on any earlier version of LINQ.Incidentially, check out Jon Skeet's latest version of DistinctBy.cs on Google Code.Based on an comment by Andrew McClement, best to take John Skeet's answer over this one.",
                "I've written an article that explains how to extend the Distinct function so that you can do as follows:Here's the article (now in the Web Archive): Extending LINQ - Specifying a Property in the Distinct Function",
                "Personally I use the following class:Then, an extension method:Finally, the intended usage:The advantage I found using this approach is the re-usage of LambdaEqualityComparer class for other methods that accept an IEqualityComparer. (Oh, and I leave the yield stuff to the original LINQ implementation...)",
                "You can use DistinctBy() for getting Distinct records by an object property. Just add the following statement before using it:using Microsoft.Ajax.Utilities;and then use it like following:where 'Index' is the property on which i want the data to be distinct.",
                "You can do it (albeit not lightning-quickly) like so:That is, \"select all people where there isn't another different person in the list with the same ID.\"Mind you, in your example, that would just select person 3.  I'm not sure how to tell which you want, out of the previous two.",
                "In case you need a Distinct method on multiple properties, you can check out my PowerfulExtensions library. Currently it's in a very young stage, but already you can use methods like Distinct, Union, Intersect, Except on any number of properties;This is how you use it:",
                "When we faced such a task in our project we defined a small API to compose comparators.So, the use case was like this:And API itself looks like this:More details is on our site: IEqualityComparer in LINQ.",
                "If you don't want to add the MoreLinq library to your project just to get the DistinctBy functionality then you can get the same end result using the overload of Linq's Distinct method that takes in an IEqualityComparer argument.You begin by creating a generic custom equality comparer class that uses lambda syntax to perform custom comparison of two instances of a generic class:Then in your main code you use it like so:Voila!  :)The above assumes the following:If the collection could contain nulls then simply rewrite the lambdas to check for null, e.g.:EDITThis approach is similar to the one in Vladimir Nesterovsky's answer but simpler.It is also similar to the one in Joel's answer but allows for complex comparison logic involving multiple properties.However, if your objects can only ever differ by Id then another user gave the correct answer that all you need to do is override the default implementations of GetHashCode() and Equals() in your Person class and then just use the out-of-the-box Distinct() method of Linq to filter out any duplicates.",
                "Override Equals(object obj) and GetHashCode() methods:and then just call:",
                "The best way to do this that will be compatible with other .NET versions is to override Equals and GetHash to handle this (see Stack Overflow question This code returns distinct values. However, what I want is to return a strongly typed collection as opposed to an anonymous type), but if you need something that is generic throughout your code, the solutions in this article are great.",
                "You should be able to override Equals on person to actually do Equals on Person.id.  This ought to result in the behavior you're after.",
                "If you use old .NET version, where the extension method is not built-in, then you may define your own extension method:Example of usage:",
                "May be this could help, Try this. Using HashSet is more code performant.",
                "Please give a try with below code."
            ]
        },
        {
            "tag": "dates",
            "patterns": [
                "Calculate difference between two dates (number of days)?", "Different dates", "Find days", "Find Months"
            ],
            "responses": [
                "Assuming StartDate and EndDate are of type DateTime:",
                "The top answer is correct, however if you would like only WHOLE days as an int and are happy to forgo the time component of the date then consider:Again assuming StartDate and EndDate are of type DateTime.",
                "Use TimeSpan object which is the result of date substraction:",
                "I think this will do what you want:",
                "You can also get the difference in seconds, milliseconds and ticks.",
                "In case someone wants numer of whole days as a double (a, b of type DateTime):",
                "There often is a debate on time (hours) when it comes to counting days between two dates. The responses to the question and their comments show no exception.Considering StartDate and EndDate are of type DateTime: if performance is not a concern, I would strongly recommend documenting your calculation through intermediate conversions. For example, (EndDate - StartDate).Days is unintuitive because rounding will depend on the hour component of StartDate and EndDate.",
                "You can try this",
                "Using a timespan would solve the problems as it has many attributes:",
                "For a and b as two DateTime types:",
                "For beginners like me that will stumble upon this tiny problem, in a simple line, with sample conversion to int:This calculates the total days from today (DateTime.UtcNow.Date) to a desired date (myDateTime.Date).If myDateTime is yesterday, or older date than today, this will give a positive (+) integer result.On the other side, if the myDateTime is tomorrow or on the future date, this will give a negative (-) integer result due to rules of addition.Happy coding! ^_^",
                "First declare a class that will return later:Use a button control to call the above class. Here is an example:",
                "You can use the code below:",
                "Get the difference between the two dates and then get the days from:",
                "try this truly worked Get actual days diff. date format is \"dd/MM/yyyy\""
            ]
        },
        {
            "tag": "Constraining_to_enum",
            "patterns": [
                "Create Generic method constraining T to an Enum", "How to constrain to enum", "Constraining to enum", "Method for enums"
            ],
            "responses": [
                "Since Enum Type implements IConvertible interface, a better implementation should be something like this:This will still permit passing of value types implementing IConvertible. The chances are rare though.",
                "The following snippet (from the dotnet samples) demonstrates how:Be sure to set your language version in your C# project to version 7.3.Original Answer below:I'm late to the game, but I took it as a challenge to see how it could be done.  It's not possible in C# (or VB.NET, but scroll down for F#), but is possible in MSIL.  I wrote this little....thingWhich generates a function that would look like this, if it were valid C#:Then with the following C# code:Unfortunately, this means having this part of your code written in MSIL instead of C#, with the only added benefit being that you're able to constrain this method by System.Enum.  It's also kind of a bummer, because it gets compiled into a separate assembly.  However, it doesn't mean you have to deploy it that way.By removing the line .assembly MyThing{} and invoking ilasm as follows:you get a netmodule instead of an assembly.Unfortunately, VS2010 (and earlier, obviously) does not support adding netmodule references, which means you'd have to leave it in 2 separate assemblies when you're debugging.  The only way you can add them as part of your assembly would be to run csc.exe yourself using the /addmodule:{files} command line argument.  It wouldn't be too painful in an MSBuild script.  Of course, if you're brave or stupid, you can run csc yourself manually each time.  And it certainly gets more complicated as multiple assemblies need access to it.So, it CAN be done in .Net.  Is it worth the extra effort?  Um, well, I guess I'll let you decide on that one.Extra Credit:  It turns out that a generic restriction on enum is possible in at least one other .NET language besides MSIL: F#.This one is easier to maintain since it's a well-known language with full Visual Studio IDE support, but you still need a separate project in your solution for it. However, it naturally produces considerably different IL (the code is very different) and it relies on the FSharp.Core library, which, just like any other external library, needs to become part of your distribution.Here's how you can use it (basically the same as the MSIL solution), and to show that it correctly fails on otherwise synonymous structs:",
                "Starting with C# 7.3 (available with Visual Studio 2017 \u2265 v15.7), this code is now completely valid:You can have a real compiler enforced enum constraint by abusing constraint inheritance. The following code specifies both a class and a struct constraints at the same time:Usage:Note: this is specifically stated in the C# 5.0 language specification:If type parameter S depends on type parameter T then:\n  [...] It is valid for\n  S to have the value type constraint and T to have the reference type\n  constraint. Effectively this limits T to the types System.Object,\n  System.ValueType, System.Enum, and any interface type.",
                "EditThe question has now superbly been answered by Julien Lebosquain.\nI would also like to extend his answer with ignoreCase, defaultValue and optional arguments, while adding TryParse and ParseOrDefault.Examples of usage:OldMy old improvements on Vivek's answer by using the comments and 'new' developments:resulting in:",
                "The existing answers are true as of C# <=7.2. However, there is a C# language feature request (tied to a corefx feature request) to allow the following;At time of writing, the feature is \"In discussion\" at the Language Development Meetings.EDITAs per nawfal's info, this is being introduced in C# 7.3.EDIT 2This is now in C# 7.3 forward (release notes)Sample;",
                "You can define a static constructor for the class that will check that the type T is an enum and throw an exception if it is not. This is the method mentioned by Jeffery Richter in his book CLR via C#.Then in the parse method, you can just use Enum.Parse(typeof(T), input, true) to convert from string to the enum. The last true parameter is for ignoring case of the input.",
                "It should also be considered that since the release of C# 7.3 using Enum constraints is supported out-of-the-box without having to do additional checking and stuff.So going forward and given you've changed the language version of your project to C# 7.3 the following code is going to work perfectly fine:In case you're don't know how to change the language version to C# 7.3 see the following screenshot:EDIT 1 - Required Visual Studio Version and considering ReSharperFor Visual Studio to recognize the new syntax you need at least version 15.7. You can find that also mentioned in Microsoft's release notes, see Visual Studio 2017 15.7 Release Notes. Thanks @MohamedElshawaf for pointing out this valid question.Pls also note that in my case ReSharper 2018.1 as of writing this EDIT does not yet support C# 7.3. Having ReSharper activated it highlights the Enum constraint as an error telling me Cannot use 'System.Array', 'System.Delegate', 'System.Enum', 'System.ValueType', 'object' as type parameter constraint. \nReSharper suggests as a quick fix to Remove 'Enum' constraint of type paramter T of methodHowever, if you turn off ReSharper temporarily under Tools -> Options -> ReSharper Ultimate -> General you'll see that the syntax is perfectly fine given that you use VS 15.7 or higher and C# 7.3 or higher.",
                "I modified the sample by dimarzionist. This version will only work with Enums and not let structs get through.",
                "I tried to improve the code a bit:",
                "I do have specific requirement where I required to use enum with text associated with enum value. For example when I use enum to specify error type it required to describe error details.",
                "Hope this is helpful:",
                "note that System.Enum Parse() & TryParse() methods still have where struct constraints rather than where Enum, so that this won't compile:but this will:as a result, where struct,Enum may be preferable to just where Enum",
                "Interestingly enough, apparently this is possible in other langauges (Managed C++, IL directly).To Quote:... Both constraints actually produce valid IL and can also be consumed by C# if written in another language (you can declare those constraints in managed C++ or in IL).Who knows",
                "This is my take at it. Combined from the answers and MSDNMSDN Source",
                "I always liked this (you could modify as appropriate):",
                "I loved Christopher Currens's solution using IL but for those who don't want to deal with tricky business of including MSIL into their build process I wrote similar function in C#.Please note though that you can't use generic restriction like where T : Enum because Enum is special type. Therefore I have to check if given generic type is really enum.My function is:",
                "I've encapsulated Vivek's solution into a utility class that you can reuse. Please note that you still should define type constraints \"where T : struct, IConvertible\" on your type.",
                "I created an extension Method to get integer value from enum \ntake look at method implementationthis is usage",
                "As stated in other answers before; while this cannot be expressed in source-code it can actually be done on IL Level.\n@Christopher Currens answer shows how the IL do to that.With Fodys Add-In ExtraConstraints.Fody there's a very simple way, complete with build-tooling, to achieve this. Just add their nuget packages (Fody, ExtraConstraints.Fody) to your project and add the constraints as follows (Excerpt from the Readme of ExtraConstraints):and Fody will add the necessary IL for the constraint to be present.\nAlso note the additional feature of constraining delegates:Regarding Enums, you might also want to take note of the highly interesting Enums.NET.",
                "This is my implementation. Basically, you can setup any attribute and it works.",
                "If it's ok to use direct casting afterwards, I guess you can use the System.Enum base class in your method, wherever necessary. You just need to replace the type parameters carefully. So the method implementation would be like:Then you can use it like:",
                "Just for completeness, the following is a Java solution.  I am certain the same could be done in C# as well.  It avoids having to specify the type anywhere in code - instead, you specify it in the strings you are trying to parse.The problem is that there isn't any way to know which enumeration the String might match - so the answer is to solve that problem.Instead of accepting just the string value, accept a String that has both the enumeration and the value in the form \"enumeration.value\".  Working code is below - requires Java 1.8 or later.  This would also make the XML more precise as in you would see something like color=\"Color.red\" instead of just color=\"red\".You would call the acceptEnumeratedValue() method with a string containing the enum name dot value name.The method returns the formal enumerated value."
            ]
        },
        {
            "tag": "JavaScriptSerializer",
            "patterns": [
                "JavaScriptSerializer - JSON serialization of enum as string", "What is JavaScriptSerializer", "How to serialize JSON strings", "Enum strings"
            ],
            "responses": [
                "I have found that Json.NET provides the exact functionality I'm looking for with a StringEnumConverter attribute:More details at available on StringEnumConverter documentation.There are other places to configure this converter more globally:enum itself if you want enum always be serialized/deserialized as string:In case anyone wants to avoid attribute decoration, you can add the converter to your JsonSerializer (suggested by Bj\u00f8rn Egil):and it will work for every enum it sees during that serialization (suggested by Travis).or JsonConverter (suggested by banana):Additionally you can control casing and whether numbers are still accepted by using StringEnumConverter(NamingStrategy, Boolean) constructor.",
                "No there is no special attribute you can use. JavaScriptSerializer serializes enums to their numeric values and not their string representation. You would need to use custom serialization to serialize the enum as its name instead of numeric value.If you can use JSON.Net instead of JavaScriptSerializer than see  answer on this question provided by Omer Bokhari: JSON.net covers this use case (via the attribute [JsonConverter(typeof(StringEnumConverter))]) and many others not handled by the built in .net serializers. Here is a link comparing features and functionalities of the serializers.",
                "Add the below to your global.asax for JSON serialization of c# enum as string",
                "@Iggy answer sets JSON serialization of c# enum as string only for ASP.NET (Web API and so).But to make it work also with ad hoc serialization, add following to your start class (like Global.asax Application_Start)More information on the Json.NET pageAdditionally, to have your enum member to serialize/deserialize to/from specific text, use theSystem.Runtime.Serialization.EnumMemberattribute, like this:",
                "I wasn't able to change the source model like in the top answer (of @ob.), and I didn't want to register it globally like @Iggy.  So I combined https://stackoverflow.com/a/2870420/237091 and @Iggy's https://stackoverflow.com/a/18152942/237091 to allow setting up the string enum converter on during the SerializeObject command itself:",
                "In .net core 3 this is now possible with the built-in classes in System.Text.Json (edit: System.Text.Json is also available as a NuGet package for .net core 2.0 and .net framework 4.7.2 and later versions according to the docs):To configure JsonStringEnumConverter with attribute decoration for the specific property:If you want to always convert the enum as string, put the attribute at the enum itself.",
                "The combination of Omer Bokhari and uri 's answers is alsways my solution since the values that I want to provide is usually different from what I have in my enum specially that I would like to be able to change my enums if I need to.So if anyone is interested, it is something like this:",
                "ASP.NET Core way:https://gist.github.com/regisdiogo/27f62ef83a804668eb0d9d0f63989e3e",
                "This is easily done by adding a ScriptIgnore attribute to the Gender property, causing it to not be serialised, and adding a GenderString property which does get serialised:",
                "This version of Stephen's answer doesn't change the name in the JSON:",
                "Here is the answer for newtonsoft.json",
                "Asp.Net Core 3 with System.Text.Json",
                "You can also add a converter to your JsonSerializer if you don't want to use JsonConverter attribute:It will work for every enum it sees during that serialization.",
                "Here is a simple solution that serializes a server-side C# enum to JSON and uses the result to populate a client-side <select> element. This works for both simple enums and bitflag enums.I have included the end-to-end solution because I think most people wanting to serialize a C# enum to JSON will also probably be using it to fill a <select> drop-down.Here goes:Example EnumA complex enum that uses bitwise ORs to generate a permissions system. So you can't rely on the simple index [0,1,2..] for the integer value of the enum.Server Side - C#The code above uses the NancyFX framework to handle the Get request. It uses Nancy's Response.AsJson() helper method - but don't worry, you can use any standard JSON formatter as the enum has already been projected into a simple anonymous type ready for serialization.Generated JSONClient Side - CoffeeScriptHTML BeforeHTML After",
                "For ASP.Net core Just add the following to your Startup Class:",
                "For .NET 6.0 if you want to use the built-in JsonSerializer (System.Text.Json)Then, it comes out-of-the-box, you just need to use the built-in JsonStringEnumConverter attribute. For example:And that's it, BUT make sure your SomeEnumType contains values with the exact string values, otherwise it will throw an exception. Casing seems to be insensitive.Reference: https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-customize-properties?pivots=dotnet-6-0#enums-as-strings",
                "You can create JsonSerializerSettings with the call to JsonConverter.SerializeObject as below:",
                "Noticed that there is no answer for serialization when there is a Description attribute.Here is my implementation that supports the Description attribute.Enum:Usage:",
                "For .Net Core :-",
                "Use this:",
                "Just in case anybody finds the above insufficient, I ended up settling with this overload:",
                "This is an old question but I thought I'd contribute just in case. In my projects I use separate models for any Json requests. A model would typically have same name as domain object with \"Json\" prefix. Models are mapped using AutoMapper. By having the json model declare a string property that is an enum on domain class, AutoMapper will resolve to it's string presentation.In case you are wondering, I need separate models for Json serialized classes because inbuilt serializer comes up with circular references otherwise.Hope this helps someone.",
                "You can actually use a JavaScriptConverter to accomplish this with the built-in JavaScriptSerializer. By converting your enum to a Uri you can encode it as a string.I've described how to do this for dates but it can be used for enums as well. \n Custom DateTime JSON Format for .NET JavaScriptSerializer.",
                "Facing the same question, we determined that we needed a custom version of StringEnumConverter to make sure that our enum values could expand over time without breaking catastrophically on the deserializing side (see background below). Using the SafeEnumConverter below allows deserialization to finish even if the payload contains a value for the enum that does not have a named definition, closer to how int-to-enum conversion would work.Usage:orSource:When we looked at using the StringEnumConverter, the problem we had is that we also needed passivity for cases when a new enum value was added, but not every client was immediately aware of the new value. In these cases, the StringEnumConverter packaged with Newtonsoft JSON throws a JsonSerializationException similar to \"Error converting value SomeString to type EnumType\" and then the whole deserialization process fails. This was a deal breaker for us, because even if the client planned on ignoring/discarding the property value that it didn't understand, it still needed to be capable of deserializing the rest of the payload!",
                "Not sure if this is still relevant but I had to write straight to a json file and I came up with the following piecing several stackoverflow answers togetherIt assures all my json keys are lowercase starting according to json \"rules\".  Formats it cleanly indented and ignores nulls in the output.  Aslo by adding a StringEnumConverter it prints enums with their string value.Personally I find this the cleanest I could come up with, without having to dirty the model with annotations.usage:",
                "And for VB.net I found the following works:",
                "I have put together all of the pieces of this solution using the Newtonsoft.Json library. It fixes the enum issue and also makes the error handling much better, and it works in IIS hosted services. It's quite a lot of code, so you can find it on GitHub here: https://github.com/jongrant/wcfjsonserializer/blob/master/NewtonsoftJsonFormatter.csYou have to add some entries to your Web.config to get it to work, you can see an example file here:\nhttps://github.com/jongrant/wcfjsonserializer/blob/master/Web.config",
                "For anyone needing a solution in May of '22 for .NET 6 and still using Newtonsoft, you can register the converter globally like this:"
            ]
        },
        {
            "tag": "async",
            "patterns": [
                "How and when to use \u2018async\u2019 and \u2018await\u2019", "What is async", "What is await", "async", "await"
            ],
            "responses": [
                "When using async and await the compiler generates a state machine in the background.Here's an example on which I hope I can explain some of the high-level details that are going on:OK, so what happens here:Task<int> longRunningTask = LongRunningOperationAsync(); starts executing LongRunningOperationIndependent work is done on let's assume the Main Thread (Thread ID = 1) then await longRunningTask is reached.Now, if the longRunningTask hasn't finished and it is still running, MyMethodAsync() will return to its calling method, thus the main thread doesn't get blocked. When the longRunningTask is done then a thread from the ThreadPool (can be any thread) will return to MyMethodAsync() in its previous context and continue execution (in this case printing the result to the console).A second case would be that the longRunningTask has already finished its execution and the result is available. When reaching the await longRunningTask we already have the result so the code will continue executing on the very same thread. (in this case printing result to console). Of course this is not the case for the above example, where there's a Task.Delay(1000) involved.",
                "From my understanding one of the main things that async and await do is to make code easy to write and read.They're to make asynchronous code easy to write and read, yes.Is it the same thing as spawning background threads to perform long duration logic?Not at all.// I don't understand why this method must be marked as 'async'.The async keyword enables the await keyword. So any method using await must be marked async.// This line is reached after the 5 seconds sleep from DoSomethingAsync() method. Shouldn't it be reached immediately?No, because async methods are not run on another thread by default.// Is this executed on a background thread?No.You may find my async/await intro helpful. The official MSDN docs are also unusually good (particularly the TAP section), and the async team put out an excellent FAQ.",
                "Here is a quick example of async/await at a high level. There are a lot more details to consider beyond this.Note: Task.Delay(1000) simulates doing work for 1 second. I think it's best to think of this as waiting for a response from an external resource. Since our code is waiting for a response, the system can set the running task off to the side and come back to it once it's finished. Meanwhile, it can do some other work on that thread.In the example below, the first block is doing exactly that. It starts all the tasks immediately (the Task.Delay lines) and sets them off to the side. The code will pause on the await a line until the 1 second delay is done before going to the next line. Since b, c, d, and e all started executing at almost the exact same time as a (due to lack of the await), they should finish at roughly the same time in this case.In the example below, the second block is starting a task and waiting for it to finish (that is what await does) before starting the subsequent tasks. Each iteration of this takes 1 second. The await is pausing the program and waiting for the result before continuing. This is the main difference between the first and second blocks.OUTPUT:Note: This is where things get a little foggy for me, so if I'm wrong on anything, please correct me and I will update the answer. It's important to have a basic understanding of how this works but you can get by without being an expert on it as long as you never use ConfigureAwait(false), although you will likely lose out on some opportunity for optimization, I assume.There is one aspect of this which makes the async/await concept somewhat trickier to grasp. That's the fact that in this example, this is all happening on the same thread (or at least what appears to be the same thread in regards to its SynchronizationContext). By default, await will restore the synchronization context of the original thread that it was running on. For example, in ASP.NET you have an HttpContext which is tied to a thread when a request comes in. This context contains things specific to the original Http request such as the original Request object which has things like language, IP address, headers, etc. If you switch threads halfway through processing something, you could potentially end up trying to pull information out of this object on a different HttpContext which could be disastrous. If you know you won't be using the context for anything, you can choose to \"not care\" about it. This basically allows your code to run on a separate thread without bringing the context around with it.How do you achieve this? By default, the await a; code actually is making an assumption that you DO want to capture and restore the context:If you want to allow the main code to continue on a new thread without the original context, you simply use false instead of true so it knows it doesn't need to restore the context.After the program is done being paused, it will continue potentially on an entirely different thread with a different context. This is where the performance improvement would come from -- it could continue on on any available thread without having to restore the original context it started with.Is this stuff confusing? Hell yeah! Can you figure it out? Probably! Once you have a grasp of the concepts, then move on to Stephen Cleary's explanations which tend to be geared more toward someone with a technical understanding of async/await already.",
                "Further to the other answers, have a look at await (C# Reference)and more specifically at the example included, it explains your situation a bitThe following Windows Forms example illustrates the use of await in an\n  async method, WaitAsynchronouslyAsync. Contrast the behavior of that\n  method with the behavior of WaitSynchronously. Without an await\n  operator applied to a task, WaitSynchronously runs synchronously\n  despite the use of the async modifier in its definition and a call to\n  Thread.Sleep in its body.",
                "For fastest learning..Understand method execution flow(with a diagram): 3 minsQuestion introspection (learning sake): 1 minQuickly get through syntax sugar: 5 minsShare the confusion of a developer : 5 minsProblem: Quickly change a real-world implementation of normal code to\nAsync code: 2 minsWhere to Next?Understand method execution flow(with a diagram): 3 minsIn this image, just focus on #6 (nothing more)At #6 step, execution ran out of work and stopped. To continue it needs a result from getStringTask(kind of a function). Therefore, it uses an await operator to suspend its progress and give control back(yield) to the caller(of this method we are in). The actual call to getStringTask was made earlier in #2. At #2 a promise was made to return a string result. But when will it return the result? Should we(#1:AccessTheWebAsync) make a 2nd call again? Who gets the result, #2(calling statement) or #6(awaiting statement)?The external caller of AccessTheWebAsync() also is waiting now. So caller waiting for AccessTheWebAsync, and AccessTheWebAsync is waiting for GetStringAsync at the moment. Interesting thing is AccessTheWebAsync did some work(#4) before waiting perhaps to save time from waiting. The same freedom to multitask is also available for the external caller(and all callers in the chain) and this is the biggest plus of this 'async' thingy! You feel like it is synchronous..or normal but it is not.#2 and #6 is split so we have the advantage of #4(work while waiting). But we can also do it without splitting. So #2 will be: string urlContents = await client.GetStringAsync(\"...\");. Here we see no advantage but somewhere in the chain one function will be splitting while rest of them call it without splitting. It depends which function/class in the chain you use. This change in behavior from function to function is the most confusing part about this topic.Remember, the method was already returned(#2), it cannot return again(no second time). So how will the caller know? It is all about Tasks! Task was returned. Task status was waited for (not method, not value). Value will be set in Task. Task status will be set to complete. Caller just monitors Task(#6). So 6# is the answer to where/who gets the result. Further reads for later here.Question introspection for learning sake: 1 minLet us adjust the question a bit:How and When to use  async and await  Tasks?Because learning Task automatically covers the other two(and answers your question).The whole idea is pretty simple. A method can return any data type(double, int, object, etc.) but here we just deny that and force a 'Task' object return! But we still need the returned data(except void), right? That will be set in a standard property inside 'Task' object eg: 'Result' property.Quickly get through syntax sugar: 5 minsDid we mention await or async? No. Call the above method and you get a task which you can monitor. You already know what the task returns(or contains).. an integer.Same code above added as image below:await is easy to understand but the remaining two (async,Async) may not be :). Well, it should make a lot more sense to the compiler though.Further reads for later hereSo there are 2 parts.Create 'Task' (only one task and it will be an additional method)Create syntactic sugar to call the task with await+async(this involves changing existing code if you are converting a non-async method)Remember, we had an external caller to AccessTheWebAsync() and that caller is not spared either... i.e it needs the same await+async too. And the chain continues(hence this is a breaking change which could affect many classes). It can also be considered a non-breaking change because the original method is still there to be called. Change it's access (or delete and move it inside a task) if you want to impose a breaking change and then the classes will be forced to use Task-method. Anyways, in an async call there will always be a Task at one end and only one.All okay, but one developer was surprised to see Task\nmissing...Share the confusion of a developer: 5 minsA developer has made a mistake of not implementing Task but it still works! Try to understand the question and just the accepted answer provided here. Hope you have read and fully understood. The summary is that we may not see/implement 'Task' but it is implemented somewhere in a parent/associated class. Likewise in our example calling an already built MethodAsync() is way easier than implementing that method with a Task (MethodTask()) ourself. Most developers find it difficult to get their head around Tasks while converting a code to Asynchronous one.Tip: Try to find an existing Async implementation (like MethodAsync or ToListAsync) to outsource the difficulty. So we only need to deal with Async and await (which is easy and pretty similar to normal code)Problem: Quickly change a real-world implementation of normal code to\nAsync operation: 2 minsCode line shown below in Data Layer started to break(many places). Because we updated some of our code from .Net framework 4.2.* to .Net core. We had to fix this in 1 hour all over the application!easypeasy!calling code line got changed like thisContract GetContract(int contractnumber)toasync Task<Contract> GetContractAsync(int contractnumber)Wait! what is that Result? Good catch! GetContractAsync only returns a Task not the value we wanted(Contract). Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the Result property.\nWe can also do a time-out implementation with a similar 'Wait()'TimeSpan ts = TimeSpan.FromMilliseconds(150);if (! t.Wait(ts))\nConsole.WriteLine(\"The timeout interval elapsed.\");But the architect told us not to use EntityFramework library just for this! oops! drama! Then we made a custom Task implementation(yuk!). Which you know how. Still easy! ..still yuk..Where to Next?\nThere is a wonderful quick video we could watch about Converting Synchronous Calls to Asynchronous in ASP.Net Core, perhaps that is likely the direction one would go after reading this. Or have I explained enough? ;)",
                "Showing the above explanations in action in a simple console program:And the output is:Thus,Thus, not thread is blocked.",
                "I think you've picked a bad example with System.Threading.Thread.SleepPoint of an async Task is to let it execute in background without locking the main thread, such as doing a DownloadFileAsyncSystem.Threading.Thread.Sleep isn't something that is \"being done\", it just sleeps, and therefore your next line is reached after 5 seconds ...Read this article, I think it is a great explanation of async and await concept: http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx",
                "Simple AnalogyA person may wait for their morning train. This is all they are doing as this is their primary task that they are currently performing. (synchronous programming (what you normally do!))Another person may await their morning train whilst they smoke a cigarette and then drink their coffee. (Asynchronous programming)What is asynchronous programming?Asynchronous programming is where a programmer will choose to run some of his code on a separate thread from the main thread of execution and then notify the main thread on it's completion.What does the async keyword actually do?Prefixing the async keyword to a method name likeallows the programmer to use the await keyword when calling asynchronous tasks. That's all it does.Why is this important?In a lot of software systems the main thread is reserved for operations specifically relating to the User Interface. If I am running a very complex recursive algorithm that takes 5 seconds to complete on my computer, but I am running this on the Main Thread (UI thread) When the user tries to click on anything on my application, it will appear to be frozen as my main thread has queued and is currently processing far too many operations. As a result the main thread cannot process the mouse click to run the method from the button click.When do you use Async and Await?Use the asynchronous keywords ideally when you are doing anything that doesn't involve the user interface.So lets say you're writing a program that allows the user to sketch on their mobile phone but every 5 seconds it is going to be checking the weather on the internet.We should be awaiting the call the polling calls every 5 seconds to the network to get the weather as the user of the application needs to keep interacting with the mobile touch screen to draw pretty pictures.How do you use Async and AwaitFollowing on from the example above, here is some pseudo code of how to write it:Additional Notes - UpdateI forgot to mention in my original notes that in C# you can only await methods that are wrapped in Tasks. for example you may await this method:You cannot await methods that are not tasks like this:Feel free to review the source code for the Task class here.",
                "Here is a quick console program to make it clear to those who follow. The TaskToDo method is your long running method that you want to make async. Making it run async is done by the TestAsync method. The test loops method just runs through the TaskToDo tasks and runs them async. You can see that in the results because they don't complete in the same order from run to run - they are reporting to the console UI thread when they complete. Simplistic, but I think the simplistic examples bring out the core of the pattern better than more involved examples:",
                "All the answers here use Task.Delay() or some other built in async function. But here is my example that use none of those async functions:",
                "This answer aims to provide some info specific to ASP.NET.By utilizing async/await in the MVC controller, it is possible to increase thread pool utilization and achieve much better throughput, as explained in the below article,http://www.asp.net/mvc/tutorials/mvc-4/using-asynchronous-methods-in-aspnet-mvc-4In web applications that see a large number of concurrent requests at\nstart-up or have a bursty load (where concurrency increases suddenly),\nmaking these web service calls asynchronous will increase the\nresponsiveness of your application. An asynchronous request takes the\nsame amount of time to process as a synchronous request. For example,\nif a request makes a web service call that requires two seconds to\ncomplete, the request takes two seconds whether it is performed\nsynchronously or asynchronously. However, during an asynchronous call,\na thread is not blocked from responding to other requests while it\nwaits for the first request to complete. Therefore, asynchronous\nrequests prevent request queuing and thread pool growth when there are\nmany concurrent requests that invoke long-running operations.",
                "Actually, Async / Await is a pair of keywords that are just syntactic sugar for creating a callback of an asynchronous task.Take by example this operation:The code above has several disadvantages. Errors are not passed on and it's hard to read.\nBut Async and Await come in to help us out:Await calls have to be in Async methods. This has some advantages:NOTE: Async and Await are used with asynchronous calls not to make these. You have to use Task Libary for this, like Task.Run() .Here is a comparison between await and none await solutionsThis is the none async solution:This is the async method:You can actually call an async method without the await keyword but this means that any Exception here is swallowed in release mode:Async and Await are not meant for parallel computing. They are used to not block your main thread. When it's about asp.net or Windows applications, blocking your main thread due to a network call is a bad thing. If you do this, your app will get unresponsive or even crash.Check out MS docs for more examples.",
                "To be honest I still think the best explanation is the one about future and promises on the Wikipedia: http://en.wikipedia.org/wiki/Futures_and_promisesThe basic idea is that you have a separate pool of threads that execute tasks asynchronously. When using it. The object does however make the promise that it will execute the operation at some time and give you the result when you request it. This means that it will block when you request the result and hasn't finished, but execute in the thread pool otherwise.From there you can optimize things: some operations can be implemented async and you can optimize things like file IO and network communication by batching together subsequent requests and/or reordering them. I'm not sure if this is already in the task framework of Microsoft - but if it isn't that would be one of the first things I would add.You can actually implement the future pattern sort-of with yields in C# 4.0. If you want to know how it works exactly, I can recommend this link that does a decent job: http://code.google.com/p/fracture/source/browse/trunk/Squared/TaskLib/ . However, if you start toying with it yourself, you will notice that you really need language support if you want to do all the cool things -- which is exactly what Microsoft did.",
                "See this fiddle https://dotnetfiddle.net/VhZdLU (and improve it if possible) for running a simple console application which shows usages of Task, Task.WaitAll(), async and await operators in the same program.This fiddle should clear your execution cycle concept.Here is the sample codeTrace coming from Output Window:",
                "I'd like to give my two cents to this, I'm sorry if any other answer contains what I will explain, I read most of it and haven't find it, but I could have missed something.I saw a lot of missconceptions and a lot of good explanations, just want to explain async in terms of how it differs from parallel programming, that I believe will make things easier to understand.When you need to do long computations, processor intensive work, you should opt to use parallel programming, if it's possible, to optimize cores usage. This opens some threads and process things simultaneosly.Say you have an array of numbers and want to make some expensive long calculation with every and each one of than. Parallel is your friend.Asyncronous programming is used in a different use case.It's used to free your thread when you are waiting for something that do not depend on your processor, like IO for example (writing and reading to/from disk), your thread does nothing when you do IO, same thing when you are awaiting for some result from an expensive query to return from DB.Async methods free your thread when it's waiting for something long to return results. This thread can be used by other parts of your application (in a web app it process other requests, for example) or can return to OS for other use.When your result is done, the same thread (or another one) is given back to your application to resume processing.Async programming is not mandatory (but a good practice) in a multithreaded environment like .net, in a web app other threads will respond to new requests, but if you are in a singlethreaded framework like nodejs it's mandatory, because you can't block your only thread, or you won't be able to anwser any other request.To summarize, long processor intensive calculations will benefit more from parallel programming and long waiting periods that do not depend on your processor, like IO or DB query or a call to some API will benefit more from async programming.That's why Entity Framework, for example, has an async api to save, list, find, etc...Remember that async/await is not the same as wait or waitAll, the contexts are different. Async/await release the thread and are asyncronous programming. wait / waitAll blocks all threads (they are not released) to force syncronization in parallel context... different stuff...Hope this is usefull for someone...",
                "The way I understand it is also, there should be a third term added to the mix: Task.Async is just a qualifier you put on your method to say it's an asynchronous method.Task is the return of the async function. It executes asynchronously.You await a Task. When code execution reaches this line, control jumps out back to caller of your surrounding original function.If instead, you assign the return of an async function (ie Task) to a variable, when code execution reaches this line, it just continues past that line in the surrounding function while the Task executes asynchronously.",
                "On a higher level:1) Async keyword enables the await and that's all it does. Async keyword does not run the method in a separate thread. The beginning f async method runs synchronously until it hits await on a time-consuming task.2) You can await on a method that returns Task or Task of type T. You cannot await on async void method.3) The moment main thread encounters await on time-consuming task or when the actual work is started, the main thread returns to the caller of the current method.4) If the main thread sees await on a task that is still executing, it doesn't wait for it and returns to the caller of the current method. In this way, the application remains responsive.5) Await on processing task, will now execute on a separate thread from the thread pool.6) When this await task is completed, all the code below it will be executed by the separate threadBelow is the sample code. Execute it and check the thread id",
                "The best example is here,enjoy:",
                "is using them equal to spawning background threads to perform long\n  duration logic?This article MDSN:Asynchronous Programming with async and await (C#) explains it explicitly:The async and await keywords don't cause additional threads to be\n  created. Async methods don't require multithreading because an async\n  method doesn't run on its own thread. The method runs on the current\n  synchronization context and uses time on the thread only when the\n  method is active.",
                "Below is code which reads excel file by opening dialog and then uses async and wait to run asynchronous the code which reads one by one line from excel and binds to grid",
                "Answering your second question - WHEN to use async - here's a fairly easy approach we use:Explanation: when you're doing I/O work - sending a network request, reading data from disk etc - the actual work is done by \"external\" silicon (network card, disk controller etc). Once the work is done - the I/O device driver will \"ping\" the OS back, and the OS will execute your continuation code, callback/etc. Until then the CPU is free to do it's own work (and as a bonus you might also free up a threadpool thread which is a very nice bonus for web app scalability)P.S. The 50ms threshold is MS's recommendation. Otherwise the overhead added by async (creating the state machine, execution context etc) eats up all the benefits. Can't find the original MS article now, but it's mentioned here too https://www.red-gate.com/simple-talk/dotnet/net-framework/the-overhead-of-asyncawait-in-net-4-5/",
                "The answers here are useful as a general guidance about await/async.  They also contain some detail about how await/async is wired. I would like to share some practical experience with you that you should know before using this design pattern.The term \"await\" is literal, so whatever thread you call it on will wait for the result of the method before continuing.  On the foreground thread, this is a disaster.  The foreground thread carries the burden of constructing your app, including views, view models, initial animations, and whatever else you have boot-strapped with those elements. So when you await the foreground thread, you stop the app.  The user waits and waits when nothing appears to happen. This provides a negative user experience.You can certainly await a background thread using a variety of means:The complete code for these remarks is at https://github.com/marcusts/xamarin-forms-annoyances.  See the solution called AwaitAsyncAntipattern.sln.The GitHub site also provides links to a more detailed discussion on this topic.",
                "The async is used with a function to makes it into an asynchronous function. The await keyword is used to invoke an asynchronous function synchronously. The await keyword holds the JS engine execution until promise is resolved.We should use async & await only when we want the result immediately. Maybe the result returned from the function is getting used in the next line.Follow this blog, It is very well written in simple word",
                "Maybe my insight is relevant. async tells the compiler to treat a function specially, the function is suspendable/resumable, it saves state in some way. await suspends a function, but is also a way to enforce discipline, is restrictive; you need to specify what you are waiting for, you can't just suspend without cause, which is what makes the code more readable and perhaps also more efficient. This opens up another question. Why not await multiple things, why just one at a time? I believe this is because such a pattern established itself and programmers are following the principle of least astonishment. There exists the possibility of ambiguity: are you satisfied with just one of conditions being fulfilled, or do you want all to be fulfilled, perhaps just some of them?"
            ]
        },
        {
            "tag": "Multiline_strings",
            "patterns": [
                "Multiline string literal in C#", "What are multiline strings", "String literals", "verbatim"
            ],
            "responses": [
                "You can use the @ symbol in front of a string to form a verbatim string literal:You also do not have to escape special characters when you use this method, except for double quotes as shown in Jon Skeet's answer.",
                "It's called a verbatim string literal in C#, and it's just a matter of putting @ before the literal. Not only does this allow multiple lines, but it also turns off escaping. So for example you can do:This includes the line breaks (using whatever line break your source has them as) into the string, however. For SQL, that's not only harmless but probably improves the readability anywhere you see the string - but in other places it may not be required, in which case you'd either need to not use a multi-line verbatim string literal to start with, or remove them from the resulting string.The only bit of escaping is that if you want a double quote, you have to add an extra double quote symbol:",
                "As a side-note, with C# 6.0 you can now combine interpolated strings with the verbatim string literal:",
                "The problem with using string literal I find is that it can make your code look a bit \"weird\" because in order to not get spaces in the string itself, it has to be completely left aligned:Yuck.So the solution I like to use, which keeps everything nicely aligned with the rest of your code is:And of course, if you just want to logically split up lines of an SQL statement like you are and don't actually need a new line, you can always just substitute Environment.NewLine for \" \".",
                "One other gotcha to watch for is the use of string literals in string.Format. In that case you need to escape curly braces/brackets '{' and '}'.",
                "Why do people keep confusing strings with string literals? The accepted answer is a great answer to a different question; not to this one.I know this is an old topic, but I came here with possibly the same question as the OP, and it is frustrating to see how people keep misreading it. Or maybe I am misreading it, I don't know.Roughly speaking, a string is a region of computer memory that, during the execution of a program, contains a sequence of bytes that can be mapped to text characters. A string literal, on the other hand, is a piece of source code, not yet compiled, that represents the value used to initialize a string later on, during the execution of the program in which it appears.In C#, the statement...... does not produce a three-line string but a one liner; the concatenation of three strings (each initialized from a different literal) none of which contains a new-line modifier.What the OP seems to be asking -at least what I would be asking with those words- is not how to introduce, in the compiled string, line breaks that mimick those found in the source code, but how to break up for clarity a long, single line of text in the source code without introducing breaks in the compiled string. And without requiring an extended execution time, spent joining the multiple substrings coming from the source code. Like the trailing backslashes within a multiline string literal in javascript or C++.Suggesting the use of verbatim strings, nevermind StringBuilders, String.Joins or even nested functions with string reversals and what not, makes me think that people are not really understanding the question. Or maybe I do not understand it.As far as I know, C# does not (at least in the paleolithic version I am still using, from the previous decade) have a feature to cleanly produce multiline string literals that can be resolved during compilation rather than execution.Maybe current versions do support it, but I thought I'd share the difference I perceive between strings and string literals.UPDATE:(From MeowCat2012's comment) You can. The \"+\" approach by OP is the best. According to spec the optimization is guaranteed: http://stackoverflow.com/a/288802/9399618",
                "Add multiple lines : use @Add String Values to the middle :  use $Multiple line string Add Values to the middle:  use $@",
                "You can use @ and \"\".",
                "In C# 11 [2022], you will be able to use Raw String literals.\nThe use of Raw String Literals makes it easier to use \" characters without having to write escape sequences.Solution for OP:More details about Raw String LiteralsSee the Raw String Literals GitHub Issue for full details; and Blog article C# 11 Preview Updates \u2013 Raw string literals, UTF-8 and more!",
                "I haven't seen this, so I will post it here (if you are interested in passing a string you can do this as well.) The idea is that you can break the string up on multiple lines and add your own content (also on multiple lines) in any way you wish. Here \"tableName\" can be passed into the string.",
                "Yes, you can split a string out onto multiple lines without introducing newlines into the actual string, but it aint pretty:The trick is to introduce code that evaluates to empty, and that code may contain newlines without affecting the output. I adapted this approach from this answer to a similar question.There is apparently some confusion as to what the question is, but there are two hints that what we want here is a string literal not containing any newline characters, whose definition spans multiple lines. (in the comments he says so, and \"here's what I have\" shows code that does not create a string with newlines in it)This unit test shows the intent:Change the above definition of query so that it is one string literal, instead of the concatenation of two string literals which may or may not be optimized into one by the compiler.The C++ approach would be to end each line with a backslash, causing the newline character to be escaped and not appear in the output. Unfortunately, there is still then the issue that each line after the first must be left aligned in order to not add additional whitespace to the result.There is only one option that does not rely on compiler optimizations that might not happen, which is to put your definition on one line. If you want to rely on compiler optimizations, the + you already have is great; you don't have to left-align the string, you don't get newlines in the result, and it's just one operation, no function calls, to expect optimization on.",
                "If you don't want spaces/newlines, string addition seems to work:You can run the above here if you like."
            ]
        },
        {
            "tag": "\\d",
            "patterns": [
                "\\d less efficient than [0-9]", "What is \\d", "What does \\d do", "Unicode digits"
            ],
            "responses": [
                "\\d checks all Unicode digits, while [0-9] is limited to these 10 characters. For example, Persian digits, \u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9, are an example of Unicode digits which are matched with \\d, but not [0-9].You can generate a list of all such characters using the following code:Which generates:0123456789\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9\u07c0\u07c1\u07c2\u07c3\u07c4\u07c5\u07c6\u07c7\u07c8\u07c9\u0966\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u09e6\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u0a66\u0a67\u0a68\u0a69\u0a6a\u0a6b\u0a6c\u0a6d\u0a6e\u0a6f\u0ae6\u0ae7\u0ae8\u0ae9\u0aea\u0aeb\u0aec\u0aed\u0aee\u0aef\u0b66\u0b67\u0b68\u0b69\u0b6a\u0b6b\u0b6c\u0b6d\u0b6e\u0b6f\u0be6\u0be7\u0be8\u0be9\u0bea\u0beb\u0bec\u0bed\u0bee\u0bef\u0c66\u0c67\u0c68\u0c69\u0c6a\u0c6b\u0c6c\u0c6d\u0c6e\u0c6f\u0ce6\u0ce7\u0ce8\u0ce9\u0cea\u0ceb\u0cec\u0ced\u0cee\u0cef\u0d66\u0d67\u0d68\u0d69\u0d6a\u0d6b\u0d6c\u0d6d\u0d6e\u0d6f\u0e50\u0e51\u0e52\u0e53\u0e54\u0e55\u0e56\u0e57\u0e58\u0e59\u0ed0\u0ed1\u0ed2\u0ed3\u0ed4\u0ed5\u0ed6\u0ed7\u0ed8\u0ed9\u0f20\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u1040\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1090\u1091\u1092\u1093\u1094\u1095\u1096\u1097\u1098\u1099\u17e0\u17e1\u17e2\u17e3\u17e4\u17e5\u17e6\u17e7\u17e8\u17e9\u1810\u1811\u1812\u1813\u1814\u1815\u1816\u1817\u1818\u1819\u1946\u1947\u1948\u1949\u194a\u194b\u194c\u194d\u194e\u194f\u19d0\u19d1\u19d2\u19d3\u19d4\u19d5\u19d6\u19d7\u19d8\u19d9\u1b50\u1b51\u1b52\u1b53\u1b54\u1b55\u1b56\u1b57\u1b58\u1b59\u1bb0\u1bb1\u1bb2\u1bb3\u1bb4\u1bb5\u1bb6\u1bb7\u1bb8\u1bb9\u1c40\u1c41\u1c42\u1c43\u1c44\u1c45\u1c46\u1c47\u1c48\u1c49\u1c50\u1c51\u1c52\u1c53\u1c54\u1c55\u1c56\u1c57\u1c58\u1c59\ua620\ua621\ua622\ua623\ua624\ua625\ua626\ua627\ua628\ua629\ua8d0\ua8d1\ua8d2\ua8d3\ua8d4\ua8d5\ua8d6\ua8d7\ua8d8\ua8d9\ua900\ua901\ua902\ua903\ua904\ua905\ua906\ua907\ua908\ua909\uaa50\uaa51\uaa52\uaa53\uaa54\uaa55\uaa56\uaa57\uaa58\uaa59\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19",
                "Credit to ByteBlast for noticing this in the docs. Just changing the regex constructor:Gives new timings:",
                "From Does \u201c\\d\u201d in regex mean a digit?:[0-9] isn't equivalent to \\d. [0-9] matches only 0123456789 characters, while \\d matches [0-9] and other digit characters, for example Eastern Arabic numerals \u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669",
                "An addition to top answer from Sina Iravianian, here is a .NET 4.5 version (since only that version supports UTF16 output, c.f. the first three lines) of his code,\nusing the full range of Unicode code points.\nDue to the lack of proper support for higher Unicode planes, many people are not aware of always checking for and including the upper Unicode planes. Nevertheless they sometimes do contain some important characters.UpdateSince \\d does not support non-BMP characters in regex (thanks xanatos), here a version that uses the Unicode character databaseUpdate 2Thanks to damilola-adegunwa, I have added the missing reference to the UCD (via NuGet package UnicodeInformation). Also udpated to the latest .NET core version and UTF-8 output.Yielding the following output:",
                "\\d checks all Unicode, while [0-9] is limited to these 10 characters. \nIf just 10 digits, you should use.\nOthers I recommend using \\d\uff0cBecause writing less."
            ]
        },
        {
            "tag": "SelectMany",
            "patterns": [
                "Difference Between Select and SelectMany", "What is SelectMany", "what is Select", "Flatten queries", "What is select and SelectMany methods"
            ],
            "responses": [
                "SelectMany flattens queries that return lists of lists. For exampleLive Demo on .NET Fiddle",
                "Select many is like cross join operation in SQL where it takes the cross product.\nFor example if we haveSelect many can be used to get the following setNote that here we take the all the possible combinations that can be made from the elements of set A and set B.Here is a LINQ example you can trythe mix will have following elements in flat structure like",
                "...",
                "SelectMany() lets you collapse a multidimensional sequence in a way that would otherwise require a second Select() or loop.More details at this blog post.",
                "There are several overloads to SelectMany. One of them allows you to keep trace of any relationship between parent and children while traversing the hierarchy.Example: suppose you have the following structure: League -> Teams -> Player.You can easily return a flat collection of players. However you may lose any reference to the team the player is part of.Fortunately there is an overload for such purpose:The previous example is taken from Dan's IK blog. I strongly recommend you take a look at it.",
                "I understand SelectMany to work like a join shortcut.So you can:",
                "The SelectMany() method is used to flatten a sequence in which each of the elements of the sequence is a separate.I have class user same like thismain:You can use operations on any item of sequence",
                "Select is a simple one-to-one projection from source element to a result element. Select-\nMany is used when there are multiple from clauses in a query expression: each element in the original sequence is used to generate a new sequence.",
                "The formal description for SelectMany() is:Projects each element of a sequence to an IEnumerable and flattens\nthe resulting sequences into one sequence.SelectMany() flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.The main difference is the result of each method while SelectMany() returns a flattern results; the Select() returns a list of list instead of a flattern result set.Therefor the result of SelectMany is a list  like{Scruffy,  Sam , Walker,  Sugar,  Scratches , Diesel}which you can iterate each item by just one foreach. But with the result of select you need  an extra foreach loop to iterate through the results  because the query returns a collection of arrays.",
                "Some SelectMany may not be necessary. Below 2 queries give the same result.For 1-to-Many relationship,",
                "Just for an alternate view that may help some functional programmers out there:",
                "Without getting too technical - database with many Organizations, each with many Users:-both return the same ApplicationUser list for the selected Organization.The first \"projects\" from Organization to Users, the second queries the Users table directly.",
                "It's more clear when the query return a string (an array of char):For example if the list 'Fruits' contains 'apple''Select' returns the string:'SelectMany' flattens the string:",
                "Consider this example :So as you see duplicate values like \"I\" or \"like\" have been removed from query2 because \"SelectMany\" flattens and projects across multiple sequences.\nBut query1 returns sequence of string arrays. and since there are two different arrays in query1 (first and second element), nothing would be removed.",
                "The SelectMany method knocks down an IEnumerable<IEnumerable<T>> into an IEnumerable<T>, like communism, every element is behaved in the same manner(a stupid guy has same rights of a genious one).",
                "One more example how SelectMany + Select can be used in order to accumulate sub array objects data.Suppose we have users with they phones:Now we need to select all phones' BaseParts of all users:",
                "Here is a code example with an initialized small collection for testing:",
                "Suppose you have an array of countriesIf you perform Select on countries, you will get each element of the array as IEnumerable<T>In the above code, the country represents a string that refers to each country in the array. now iterate over selectQuery to get countries:If you want to print every character of countries you have to use nested foreachOK. now try to perform SelectMany on countries. This time SelectMany gets each country as string (as before) and because of string type is a collection of chars, SelectMany tries to divide each country into its constituent parts (chars) and then returns a collection of chars as IEnumerable<T>In the above code, the country represents a string that refers to each country in the array as before, but the return value is the chars of each countryActually SelectMany likes to fetch two levels inside of collections and flatten the second level as IEnumerable<T>Now iterate over selectManyQuery to get chars of each country:",
                "A select operator is used to select value from a collection and SelectMany operator is used to selecting values from a collection of collection i.e. nested collection.",
                "It is the best way to understand i think.Multiplication Table example."
            ]
        },
        {
            "tag": "asynchronous",
            "patterns": [
                "How to call asynchronous method from synchronous method in C#?", "What are asynchronous methods", "What are synchronous methods"
            ],
            "responses": [
                "Asynchronous programming does \"grow\" through the code base. It has been compared to a zombie virus. The best solution is to allow it to grow, but sometimes that's not possible.I have written a few types in my Nito.AsyncEx library for dealing with a partially-asynchronous code base. There's no solution that works in every situation, though.Solution AIf you have a simple asynchronous method that doesn't need to synchronize back to its context, then you can use Task.WaitAndUnwrapException:You do not want to use Task.Wait or Task.Result because they wrap exceptions in AggregateException.This solution is only appropriate if MyAsyncMethod does not synchronize back to its context. In other words, every await in MyAsyncMethod should end with ConfigureAwait(false). This means it can't update any UI elements or access the ASP.NET request context.Solution BIf MyAsyncMethod does need to synchronize back to its context, then you may be able to use AsyncContext.RunTask to provide a nested context:*Update 4/14/2014: In more recent versions of the library the API is as follows:(It's OK to use Task.Result in this example because RunTask will propagate Task exceptions).The reason you may need AsyncContext.RunTask instead of Task.WaitAndUnwrapException is because of a rather subtle deadlock possibility that happens on WinForms/WPF/SL/ASP.NET:This is one reason why it's a good idea to use ConfigureAwait(false) within every async method as much as possible.Solution CAsyncContext.RunTask won't work in every scenario. For example, if the async method awaits something that requires a UI event to complete, then you'll deadlock even with the nested context. In that case, you could start the async method on the thread pool:However, this solution requires a MyAsyncMethod that will work in the thread pool context. So it can't update UI elements or access the ASP.NET request context. And in that case, you may as well add ConfigureAwait(false) to its await statements, and use solution A.Update, 2019-05-01: The current \"least-worst practices\" are in an MSDN article here.",
                "Adding a solution that finally solved my problem, hopefully saves somebody's time.Firstly read a couple articles of Stephen Cleary:From the \"two best practices\" in \"Don't Block on Async Code\", the first one didn't work for me and the second one wasn't applicable (basically if I can use await, I do!).So here is my workaround: wrap the call inside a Task.Run<>(async () => await FunctionAsync()); and hopefully no deadlock anymore.Here is my code:",
                "Microsoft built an AsyncHelper (internal) class to run Async as Sync.  The source looks like:The Microsoft.AspNet.Identity base classes only have Async methods and in order to call them as Sync there are classes with extension methods that look like (example usage):For those concerned about the licensing terms of code, here is a link to very similar code (just adds support for culture on the thread) that has comments to indicate that it is MIT Licensed by Microsoft.  https://github.com/aspnet/AspNetIdentity/blob/master/src/Microsoft.AspNet.Identity.Core/AsyncHelper.csWouldn't this be the same as just calling Task.Run(async ()=> await AsyncFunc()).Result? AFAIK, Microsoft is now discouraging from calling TaskFactory.StartNew, since they are both equivalent and one is more readable than the other.Absolutely not.The easy answer is thatFirst off theIs Task.Result the same as .GetAwaiter.GetResult()?Secondly .Unwrap() causes the setup of the Task not to block the wrapped task.Which should lead anyone to askWouldn't this be the same as just calling Task.Run(async ()=> await AsyncFunc()).GetAwaiter().GetResult()Which would then be a It Depends.Regarding usage of Task.Start() , Task.Run() and Task.Factory.StartNew()Excerpt:Task.Run uses TaskCreationOptions.DenyChildAttach which means that children's tasks can not be attached to the parent and it uses TaskScheduler.Default which means that the one that runs tasks on Thread Pool will always be used to run tasks.Task.Factory.StartNew uses TaskScheduler.Current which means scheduler of the current thread, it might be TaskScheduler.Default but not always.Additional Reading:Specifying a synchronization contextASP.NET Core SynchronizationContextFor extra safety, wouldn't it be better to call it like this AsyncHelper.RunSync(async () => await AsyncMethod().ConfigureAwait(false)); This way we're telling the \"inner\" method \"please don't try to sync to upper context and dealock\"Really great point and as most object architectural questions go it depends.As an extension method do you want to force that for absolutely every call, or do you let the programmer using the function configure that on their own async calls?  I could see a use case for call three scenarios; it most likely is not something you want in WPF, certainly makes sense in most cases, but considering there is no Context in ASP.Net Core if you could guarantee it was say internal for a ASP.Net Core, then it wouldn't matter.",
                "async Main is now part of C# 7.2 and can be enabled in the projects advanced build settings.For C# < 7.2, the correct way is:You'll see this used in a lot of Microsoft documentation, for example:\nhttps://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dotnet-how-to-use-topics-subscriptions",
                "I'm not 100% sure, but I believe the technique described in this blog should work in many circumstances:You can thus use task.GetAwaiter().GetResult() if you want to directly invoke this propagation logic.",
                "You read the 'await' keyword as \"start this long running task, then return control to the calling method\". Once the long-running task is done, then it executes the code after it. The code after the await is similar to what used to be CallBack methods. The big difference being the logical flow is not interrupted which makes it much easier to write and read.",
                "There is, however, a good solution that works in (almost: see comments) every situation: an ad-hoc message pump (SynchronizationContext).The calling thread will be blocked as expected, while still ensuring that all continuations called from the async function don't deadlock as they'll be marshaled to the ad-hoc SynchronizationContext (message pump) running on the calling thread.The code of the ad-hoc message pump helper:Usage:More detailed description of the async pump is available here.",
                "To anyone paying attention to this question anymore...If you look in Microsoft.VisualStudio.Services.WebApi there's a class called TaskExtensions. Within that class you'll see the static extension method Task.SyncResult(), which like totally just blocks the thread till the task returns.Internally it calls task.GetAwaiter().GetResult() which is pretty simple, however it's overloaded to work on any async method that return Task, Task<T> or Task<HttpResponseMessage>... syntactic sugar, baby... daddy's got a sweet tooth.It looks like ...GetAwaiter().GetResult() is the MS-official way to execute async code in a blocking context. Seems to work very fine for my use case.",
                "Or use this:",
                "You can call any asynchronous method from synchronous code, that is, until you need to await on them, in which case they have to be marked as async too.As a lot of people are suggesting here, you could call Wait() or Result on the resulting task in your synchronous method, but then you end up with a blocking call in that method, which sort of defeats the purpose of async.If you really can't make your method async and you don't want to lock up the synchronous method, then you're going to have to use a callback method by passing it as parameter to the ContinueWith() method on task.",
                "Inspired by some of the other answers, I created the following simple helper methods:They can be called as follows (depending on whether you are returning a value or not):Note that the signature in the original question public async void Foo() is incorrect. It should be public async Task Foo() as you should return Task not void for async methods that don't return a value (yes, there are some rare exceptions).",
                "Stephen Cleary's Answer;That approach shouldn't cause a deadlock (assuming that\nProblemMethodAsync doesn't send updates to the UI thread or anything\nlike that). It does assume that ProblemMethodAsync can be called on a\nthread pool thread, which is not always the case.https://blog.stephencleary.com/2012/07/dont-block-on-async-code.htmlAnd here is the approach;The Thread Pool Hack A similar approach to the Blocking Hack is to\noffload the asynchronous work to the thread pool, then block on the\nresulting task. The code using this hack would look like the code\nshown in Figure 7.Figure 7 Code for the Thread Pool HackC#The call to Task.Run executes the asynchronous method on a thread pool\nthread. Here it will run without a context, thus avoiding the\ndeadlock. One of the problems with this approach is the asynchronous\nmethod can\u2019t depend on executing within a specific context. So, it\ncan\u2019t use UI elements or the ASP.NET HttpContext.Current.",
                "After hours of trying different methods, with more or less success, this is what I ended with. It doesn't end in a deadlock while getting result and it also gets and throws the original exception and not the wrapped one.",
                "Here is the simplest solution. I saw it somewhere on the Internet, I didn't remember where, but I have been using it successfully. It will not deadlock the calling thread.",
                "You can now use source generators to create a sync version of your method using Sync Method Generator library (nuget).Use it as follows:Which will generate Foo method which you can call synchronously.",
                "Those windows async methods have a nifty little method called AsTask(). You can use this to have the method return itself as a task so that you can manually call Wait() on it.For example, on a Windows Phone 8 Silverlight application, you can do the following:Hope this helps!",
                "If you want to run it Sync"
            ]
        },
        {
            "tag": "sorted_array",
            "patterns": [
                "Why is processing a sorted array faster than processing an unsorted array?",
                "Sorted arrays verses unsorted arrays",
                "sorted arrays and unsorted arrays",
                "What is the difference between sorted arrays and unsorted arrays?",
                "sorted and unsorted arrays",
                "sorted arrays"
            ],
            "responses": [
                "You are a victim of branch prediction fail.Consider a railroad junction:Image by Mecanismo, via Wikimedia Commons. Used under the CC-By-SA 3.0 license.Now for the sake of argument, suppose this is back in the 1800s - before long-distance or radio communication.You are a blind operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.Trains are heavy and have a lot of inertia, so they take forever to start up and slow down.Is there a better way? You guess which direction the train will go!If you guess right every time, the train will never have to stop.\nIf you guess wrong too often, the train will spend a lot of time stopping, backing up, and restarting.Consider an if-statement: At the processor level, it is a branch instruction:You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.Modern processors are complicated and have long pipelines. This means they take forever to \"warm up\" and \"slow down\".Is there a better way? You guess which direction the branch will go!If you guess right every time, the execution will never have to stop.\nIf you guess wrong too often, you spend a lot of time stalling, rolling back, and restarting.This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.How would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every three times, you guess the same...In other words, you try to identify a pattern and follow it. This is more or less how branch predictors work.Most applications have well-behaved branches. Therefore, modern branch predictors will typically achieve >90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.Further reading: \"Branch predictor\" article on Wikipedia.Notice that the data is evenly distributed between 0 and 255. When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.This is very friendly to the branch predictor since the branch consecutively goes the same direction many times. Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.Quick visualization:However, when the data is completely random, the branch predictor is rendered useless, because it can't predict random data. Thus there will probably be around 50% misprediction (no better than random guessing).What can be done?If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.Replace:with:This eliminates the branch and replaces it with some bitwise operations.(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of data[].)Benchmarks: Core i7 920 @ 3.5 GHzC++ - Visual Studio 2010 - x64 ReleaseJava - NetBeans 7.1.1 JDK 7 - x64Observations:A general rule of thumb is to avoid data-dependent branching in critical loops (such as in this example).Update:GCC 4.6.1 with -O3 or -ftree-vectorize on x64 is able to generate a conditional move, so there is no difference between the sorted and unsorted data - both are fast.(Or somewhat fast: for the already-sorted case, cmov can be slower especially if GCC puts it on the critical path instead of just add, especially on Intel before Broadwell where cmov has 2 cycle latency: gcc optimization flag -O3 makes code slower than -O2)VC++ 2010 is unable to generate conditional moves for this branch even under /Ox.Intel C++ Compiler (ICC) 11 does something miraculous. It interchanges the two loops, thereby hoisting the unpredictable branch to the outer loop. Not only is it immune to the mispredictions, it's also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...If you give the Intel compiler the branchless code, it just outright vectorizes it... and is just as fast as with the branch (with the loop interchange).This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...",
                "Branch prediction.With a sorted array, the condition data[c] >= 128 is first false for a streak of values, then becomes true for all later values. That's easy to predict. With an unsorted array, you pay for the branching cost.",
                "The reason why performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in Mysticial's answer.Now, if we look at the codewe can find that the meaning of this particular if... else... branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a conditional move statement, which would be compiled into a conditional move instruction: cmovl, in an x86 system. The branch and thus the potential branch prediction penalty is removed.In C, thus C++, the statement, which would compile directly (without any optimization) into the conditional move instruction in x86, is the ternary operator ... ? ... : .... So we rewrite the above statement into an equivalent one:While maintaining readability, we can check the speedup factor.On an Intel Core i7-2600K @ 3.4\u00a0GHz and Visual Studio 2010 Release Mode, the benchmark is:x86x64The result is robust in multiple tests. We get a great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.Now let's look more closely by investigating the x86 assembly they generate. For simplicity, we use two functions max1 and max2.max1 uses the conditional branch if... else ...:max2 uses the ternary operator ... ? ... : ...:On an x86-64 machine, GCC -S generates the assembly below.max2 uses much less code due to the usage of instruction cmovge. But the real gain is that max2 does not involve branch jumps, jmp, which would have a significant performance penalty if the predicted result is not right.So why does a conditional move perform better?In a typical x86 processor, the execution of an instruction is divided into several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called pipelining.In a branch case, the following instruction is determined by the preceding one, so we cannot do pipelining. We have to either wait or predict.In a conditional move case, the execution of conditional move instruction is divided into several stages, but the earlier stages like Fetch and Decode do not depend on the result of the previous instruction; only the latter stages need the result. Thus, we wait a fraction of one instruction's execution time. This is why the conditional move version is slower than the branch when the prediction is easy.The book Computer Systems: A Programmer's Perspective, second edition explains this in detail. You can check Section 3.6.6 for Conditional Move Instructions, entire Chapter 4 for Processor Architecture, and Section 5.11.2 for special treatment for Branch Prediction and Misprediction Penalties.Sometimes, some modern compilers can optimize our code to assembly with better performance, and sometimes some compilers can't (the code in question is using Visual Studio's native compiler). Knowing the performance difference between a branch and a conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.",
                "If you are curious about even more optimizations that can be done to this code, consider this:Starting with the original loop:With loop interchange, we can safely change this loop to:Then, you can see that the if conditional is constant throughout the execution of the i loop, so you can hoist the if out:Then, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (/fp:fast is thrown, for example)That one is 100,000 times faster than before.",
                "No doubt some of us would be interested in ways of identifying code that is problematic for the CPU's branch-predictor. The Valgrind tool cachegrind has a branch-predictor simulator, enabled by using the --branch-sim=yes flag. Running it over the examples in this question, with the number of outer loops reduced to 10000 and compiled with g++, gives these results:Sorted:Unsorted:Drilling down into the line-by-line output produced by cg_annotate we see for the loop in question:Sorted:Unsorted:This lets you easily identify the problematic line - in the unsorted version the if (data[c] >= 128) line is causing 164,050,007 mispredicted conditional branches (Bcm) under cachegrind's branch-predictor model, whereas it's only causing 10,006 in the sorted version.Alternatively, on Linux you can use the performance counters subsystem to accomplish the same task, but with native performance using CPU counters.Sorted:Unsorted:It can also do source code annotation with dissassembly.See the performance tutorial for more details.",
                "I just read up on this question and its answers, and I feel an answer is missing.A common way to eliminate branch prediction that I've found to work particularly good in managed languages is a table lookup instead of using a branch (although I haven't tested it in this case).This approach works in general if:Background and whyFrom a processor perspective, your memory is slow. To compensate for the difference in speed, a couple of caches are built into your processor (L1/L2 cache). So imagine that you're doing your nice calculations and figure out that you need a piece of memory. The processor will get its 'load' operation and loads the piece of memory into cache -- and then uses the cache to do the rest of the calculations. Because memory is relatively slow, this 'load' will slow down your program.Like branch prediction, this was optimized in the Pentium processors: the processor predicts that it needs to load a piece of data and attempts to load that into the cache before the operation actually hits the cache. As we've already seen, branch prediction sometimes goes horribly wrong -- in the worst case scenario you need to go back and actually wait for a memory load, which will take forever (in other words: failing branch prediction is bad, a memory load after a branch prediction fail is just horrible!).Fortunately for us, if the memory access pattern is predictable, the processor will load it in its fast cache and all is well.The first thing we need to know is what is small? While smaller is generally better, a rule of thumb is to stick to lookup tables that are <= 4096 bytes in size. As an upper limit: if your lookup table is larger than 64K it's probably worth reconsidering.Constructing a tableSo we've figured out that we can create a small table. Next thing to do is get a lookup function in place. Lookup functions are usually small functions that use a couple of basic integer operations (and, or, xor, shift, add, remove and perhaps multiply). You want to have your input translated by the lookup function to some kind of 'unique key' in your table, which then simply gives you the answer of all the work you wanted it to do.In this case: >= 128 means we can keep the value, < 128 means we get rid of it. The easiest way to do that is by using an 'AND': if we keep it, we AND it with 7FFFFFFF; if we want to get rid of it, we AND it with 0. Notice also that 128 is a power of 2 -- so we can go ahead and make a table of 32768/128 integers and fill it with one zero and a lot of 7FFFFFFFF's.Managed languagesYou might wonder why this works well in managed languages. After all, managed languages check the boundaries of the arrays with a branch to ensure you don't mess up...Well, not exactly... :-)There has been quite some work on eliminating this branch for managed languages. For example:In this case, it's obvious to the compiler that the boundary condition will never be hit. At least the Microsoft JIT compiler (but I expect Java does similar things) will notice this and remove the check altogether. WOW, that means no branch. Similarly, it will deal with other obvious cases.If you run into trouble with lookups in managed languages -- the key is to add a & 0x[something]FFF to your lookup function to make the boundary check predictable -- and watch it going faster.The result of this case",
                "As data is distributed between 0 and 255 when the array is sorted, around the first half of the iterations will not enter the if-statement (the if statement is shared below).The question is: What makes the above statement not execute in certain cases as in case of sorted data? Here comes the \"branch predictor\". A branch predictor is a digital circuit that tries to guess which way a branch (e.g. an if-then-else structure) will go before this is known for sure. The purpose of the branch predictor is to improve the flow in the instruction pipeline. Branch predictors play a critical role in achieving high effective performance!Let's do some bench marking to understand it betterThe performance of an if-statement depends on whether its condition has a predictable pattern. If the condition is always true or always false, the branch prediction logic in the processor will pick up the pattern. On the other hand, if the pattern is unpredictable, the if-statement will be much more expensive.Let\u2019s measure the performance of this loop with different conditions:Here are the timings of the loop with different true-false patterns:A \u201cbad\u201d true-false pattern can make an if-statement up to six times slower than a \u201cgood\u201d pattern! Of course, which pattern is good and which is bad depends on the exact instructions generated by the compiler and on the specific processor.So there is no doubt about the impact of branch prediction on performance!",
                "One way to avoid branch prediction errors is to build a lookup table, and index it using the data.  Stefan de Bruijn discussed that in his answer.But in this case, we know values are in the range [0, 255] and we only care about values >= 128.  That means we can easily extract a single bit that will tell us whether we want a value or not: by shifting the data to the right 7 bits, we are left with a 0 bit or a 1 bit, and we only want to add the value when we have a 1 bit.  Let's call this bit the \"decision bit\".By using the 0/1 value of the decision bit as an index into an array, we can make code that will be equally fast whether the data is sorted or not sorted.  Our code will always add a value, but when the decision bit is 0, we will add the value somewhere we don't care about.  Here's the code:This code wastes half of the adds but never has a branch prediction failure.  It's tremendously faster on random data than the version with an actual if statement.But in my testing, an explicit lookup table was slightly faster than this, probably because indexing into a lookup table was slightly faster than bit shifting.  This shows how my code sets up and uses the lookup table (unimaginatively called lut for \"LookUp Table\" in the code).  Here's the C++ code:In this case, the lookup table was only 256 bytes, so it fits nicely in a cache and all was fast.  This technique wouldn't work well if the data was 24-bit values and we only wanted half of them... the lookup table would be far too big to be practical.  On the other hand, we can combine the two techniques shown above: first shift the bits over, then index a lookup table.  For a 24-bit value that we only want the top half value, we could potentially shift the data right by 12 bits, and be left with a 12-bit value for a table index.  A 12-bit table index implies a table of 4096 values, which might be practical.The technique of indexing into an array, instead of using an if statement, can be used for deciding which pointer to use.  I saw a library that implemented binary trees, and instead of having two named pointers (pLeft and pRight or whatever) had a length-2 array of pointers and used the \"decision bit\" technique to decide which one to follow.  For example, instead of:this library would do something like:Here's a link to this code: Red Black Trees, Eternally Confuzzled",
                "In the sorted case, you can do better than relying on successful branch prediction or any branchless comparison trick: completely remove the branch.Indeed, the array is partitioned in a contiguous zone with data < 128 and another with data >= 128. So you should find the partition point with a dichotomic search (using Lg(arraySize) = 15 comparisons), then do a straight accumulation from that point.Something like (unchecked)or, slightly more obfuscatedA yet faster approach, that gives an approximate solution for both sorted or unsorted is: sum= 3137536; (assuming a truly uniform distribution, 16384 samples with expected value 191.5) :-)",
                "The above behavior is happening because of Branch prediction.To understand branch prediction one must first understand an Instruction Pipeline.The the steps of running an instruction can be overlapped with the sequence of steps of running the previous and next instruction, so that different steps can be executed concurrently in parallel. This technique is known as instruction pipelining and is used to increase throughput in modern processors. To understand this better please see this example on Wikipedia.Generally, modern processors have quite long (and wide) pipelines, so many instruction can be in flight.  See Modern Microprocessors\nA 90-Minute Guide! which starts by introducing basic in-order pipelining and goes from there.But for ease let's consider a simple in-order pipeline with these 4 steps only.\n(Like a classic 5-stage RISC, but omitting a separate MEM stage.)4-stage pipeline in general for 2 instructions.Moving back to the above question let's consider the following instructions:Without branch prediction, the following would occur:To execute instruction B or instruction C the processor will have to wait (stall) till the instruction A leaves the EX stage in the pipeline, as the decision to go to instruction B or instruction C depends on the result of instruction A.  (i.e. where to fetch from next.) So the pipeline will look like this:Without prediction: when if condition is true:Without prediction: When if condition is false:As a result of waiting for the result of instruction A, the total CPU cycles spent in the above case (without branch prediction; for both true and false) is 7.So what is branch prediction?Branch predictor will try to guess which way a branch (an if-then-else structure) will go before this is known for sure. It will not wait for the instruction A to reach the EX stage of the pipeline, but it will guess the decision and go to that instruction (B or C in case of our example).In case of a correct guess, the pipeline looks something like this:If it is later detected that the guess was wrong then the partially executed instructions are discarded and the pipeline starts over with the correct branch, incurring a delay.\nThe time that is wasted in case of a branch misprediction is equal to the number of stages in the pipeline from the fetch stage to the execute stage. Modern microprocessors tend to have quite long pipelines so that the misprediction delay is between 10 and 20 clock cycles. The longer the pipeline the greater the need for a good branch predictor.In the OP's code, the first time when the conditional, the branch predictor does not have any information to base up prediction, so the first time it will randomly choose the next instruction. (Or fall back to static prediction, typically forward not-taken, backward taken).  Later in the for loop, it can base the prediction on the history.\nFor an array sorted in ascending order, there are three possibilities:Let us assume that the predictor will always assume the true branch on the first run.So in the first case, it will always take the true branch since historically all its predictions are correct.\nIn the 2nd case, initially it will predict wrong, but after a few iterations, it will predict correctly.\nIn the 3rd case, it will initially predict correctly till the elements are less than 128. After which it will fail for some time and the correct itself when it sees branch prediction failure in history.In all these cases the failure will be too less in number and as a result, only a few times it will need to discard the partially executed instructions and start over with the correct branch, resulting in fewer CPU cycles.But in case of a random unsorted array, the prediction will need to discard the partially executed instructions and start over with the correct branch most of the time and result in more CPU cycles compared to the sorted array.Further reading:",
                "An official answer would be fromYou can also see from this lovely diagram why the branch predictor gets confused.Each element in the original code is a random valueso the predictor will change sides as the std::rand() blow.On the other hand, once it's sorted, the predictor will first move into a state of strongly not taken and when the values change to the high value the predictor will in three runs through change all the way from strongly not taken to strongly taken.",
                "In the same line (I think this was not highlighted by any answer) it's good to mention that sometimes (specially in software where the performance matters\u2014like in the Linux kernel) you can find some if statements like the following:or similarly:Both likely() and unlikely() are in fact macros that are defined by using something like the GCC's __builtin_expect to help the compiler insert prediction code to favour the condition taking into account the information provided by the user. GCC supports other builtins that could change the behavior of the running program or emit low level instructions like clearing the cache, etc. See this documentation that goes through the available GCC's builtins.Normally this kind of optimizations are mainly found in hard-real time applications or embedded systems where execution time matters and it's critical. For example, if you are checking for some error condition that only happens 1/10000000 times, then why not inform the compiler about this? This way, by default, the branch prediction would assume that the condition is false.",
                "Frequently used Boolean operations in C++ produce many branches in the compiled program. If these branches are inside loops and are hard to predict they can slow down execution significantly. Boolean variables are stored as 8-bit integers with the value 0 for false and 1 for true.Boolean variables are overdetermined in the sense that all operators that have Boolean variables as input check if the inputs have any other value than 0 or 1, but operators that have Booleans as output can produce no other value than 0 or 1. This makes operations with Boolean variables as input less efficient than necessary.\nConsider example:This is typically implemented by the compiler in the following way:This code is far from optimal. The branches may take a long time in case of mispredictions. The Boolean operations can be made much more efficient if it is known with certainty that the operands have no other values than 0 and 1. The reason why the compiler does not make such an assumption is that the variables might have other values if they are uninitialized or come from unknown sources. The above code can be optimized if a and b has been initialized to valid values or if they come from operators that produce Boolean output. The optimized code looks like this:char is used instead of bool in order to make it possible to use the bitwise operators (& and |) instead of the Boolean operators (&& and ||). The bitwise operators are single instructions that take only one clock cycle. The OR operator (|) works even if a and b have other values than 0 or 1. The AND operator (&) and the EXCLUSIVE OR operator (^) may give inconsistent results if the operands have other values than 0 and 1.~ can not be used for NOT. Instead, you can make a Boolean NOT on a variable which is known to be 0 or 1 by XOR'ing it with 1:can be optimized to:a && b cannot be replaced with a & b if b is an expression that should not be evaluated if a is false ( && will not evaluate b, & will). Likewise, a || b can not be replaced with a | b if b is an expression that should not be evaluated if a is true.Using bitwise operators is more advantageous if the operands are variables than if the operands are comparisons:is optimal in most cases (unless you expect the && expression to generate many branch mispredictions).",
                "That's for sure!...Branch prediction makes the logic run slower, because of the switching which happens in your code! It's like you are going a straight street or a street with a lot of turnings, for sure the straight one is going to be done quicker!...If the array is sorted, your condition is false at the first step: data[c] >= 128, then becomes a true value for the whole way to the end of the street. That's how you get to the end of the logic faster. On the other hand, using an unsorted array, you need a lot of turning and processing which make your code run slower for sure...Look at the image I created for you below. Which street is going to be finished faster?So programmatically, branch prediction causes the process to be slower...Also at the end, it's good to know we have two kinds of branch predictions that each is going to affect your code differently:1. Static2. DynamicStatic branch prediction is used by the microprocessor the first time\na conditional branch is encountered, and dynamic branch prediction is\nused for succeeding executions of the conditional branch code.In order to effectively write your code to take advantage of these\nrules, when writing if-else or switch statements, check the most\ncommon cases first and work progressively down to the least common.\nLoops do not necessarily require any special ordering of code for\nstatic branch prediction, as only the condition of the loop iterator\nis normally used.",
                "This question has already been answered excellently many times over. Still I'd like to draw the group's attention to yet another interesting analysis.Recently this example (modified very slightly) was also used as a way to demonstrate how a piece of code can be profiled within the program itself on Windows. Along the way, the author also shows how to use the results to determine where the code is spending most of its time in both the sorted & unsorted case. Finally the piece also shows how to use a little known feature of the HAL (Hardware Abstraction Layer) to determine just how much branch misprediction is happening in the unsorted case.The link is here:\nA Demonstration of Self-Profiling",
                "As what has already been mentioned by others, what behind the mystery is Branch Predictor.I'm not trying to add something but explaining the concept in another way. \nThere is a concise introduction on the wiki which contains text and diagram.\nI do like the explanation below which uses a diagram to elaborate the Branch Predictor intuitively.In computer architecture, a branch predictor is a\n  digital circuit that tries to guess which way a branch (e.g. an\n  if-then-else structure) will go before this is known for sure. The\n  purpose of the branch predictor is to improve the flow in the\n  instruction pipeline. Branch predictors play a critical role in\n  achieving high effective performance in many modern pipelined\n  microprocessor architectures such as x86.Two-way branching is usually implemented with a conditional jump\n  instruction. A conditional jump can either be \"not taken\" and continue\n  execution with the first branch of code which follows immediately\n  after the conditional jump, or it can be \"taken\" and jump to a\n  different place in program memory where the second branch of code is\n  stored. It is not known for certain whether a conditional jump will be\n  taken or not taken until the condition has been calculated and the\n  conditional jump has passed the execution stage in the instruction\n  pipeline (see fig. 1).Based on the described scenario, I have written an animation demo to show how instructions are executed in a pipeline in different situations.Without branch prediction, the processor would have to wait until the\n  conditional jump instruction has passed the execute stage before the\n  next instruction can enter the fetch stage in the pipeline.The example contains three instructions and the first one is a conditional jump instruction. The latter two instructions can go into the pipeline until the conditional jump instruction is executed.It will take 9 clock cycles for 3 instructions to be completed.It will take 7 clock cycles for 3 instructions to be completed.It will take 9 clock cycles for 3 instructions to be completed.The time that is wasted in case of a branch misprediction is equal to\n  the number of stages in the pipeline from the fetch stage to the\n  execute stage. Modern microprocessors tend to have quite long\n  pipelines so that the misprediction delay is between 10 and 20 clock\n  cycles. As a result, making a pipeline longer increases the need for a\n  more advanced branch predictor.As you can see, it seems we don't have a reason not to use Branch Predictor.It's quite a simple demo that clarifies the very basic part of Branch Predictor. If those gifs are annoying, please feel free to remove them from the answer and visitors can also get the live demo source code from BranchPredictorDemo",
                "Branch-prediction gain!It is important to understand that branch misprediction doesn't slow down programs. The cost of a missed prediction is just as if branch prediction didn't exist and you waited for the evaluation of the expression to decide what code to run (further explanation in the next paragraph).Whenever there's an if-else \\ switch statement, the expression has to be evaluated to determine which block should be executed. In the assembly code generated by the compiler, conditional branch instructions are inserted.A branch instruction can cause a computer to begin executing a different instruction sequence and thus deviate from its default behavior of executing instructions in order (i.e. if the expression is false, the program skips the code of the if block) depending on some condition, which is the expression evaluation in our case.That being said, the compiler tries to predict the outcome prior to it being actually evaluated. It will fetch instructions from the if block, and if the expression turns out to be true, then wonderful! We gained the time it took to evaluate it and made progress in the code; if not then we are running the wrong code, the pipeline is flushed, and the correct block is run.Let's say you need to pick route 1 or route 2. Waiting for your partner to check the map, you have stopped at ## and waited, or you could just pick route1 and if you were lucky (route 1 is the correct route), then great you didn't have to wait for your partner to check the map (you saved the time it would have taken him to check the map), otherwise you will just turn back.While flushing pipelines is super fast, nowadays taking this gamble is worth it. Predicting sorted data or a data that changes slowly is always easier and better than predicting fast changes.",
                "On ARM, there is no branch needed, because every instruction has a 4-bit condition field, which tests (at zero cost) any of 16 different different conditions that may arise in the Processor Status Register, and if the condition on an instruction is false, the instruction is skipped. This eliminates the need for short branches, and there would be no branch prediction hit for this algorithm. Therefore, the sorted version of this algorithm would run slower than the unsorted version on ARM, because of the extra overhead of sorting.The inner loop for this algorithm would look something like the following in ARM assembly language:But this is actually part of a bigger picture:CMP opcodes always update the status bits in the Processor Status Register (PSR), because that is their purpose, but most other instructions do not touch the PSR unless you add an optional S suffix to the instruction, specifying that the PSR should be updated based on the result of the instruction. Just like the 4-bit condition suffix, being able to execute instructions without affecting the PSR is a mechanism that reduces the need for branches on ARM, and also facilitates out of order dispatch at the hardware level, because after performing some operation X that updates the status bits, subsequently (or in parallel) you can do a bunch of other work that explicitly should not affect (or be affected by) the status bits, then you can test the state of the status bits set earlier by X.The condition testing field and the optional \"set status bit\" field can be combined, for example:Most processor architectures do not have this ability to specify whether or not the status bits should be updated for a given operation, which can necessitate writing additional code to save and later restore status bits, or may require additional branches, or may limit the processor's out of order execution efficiency: one of the side effects of most CPU instruction set architectures forcibly updating status bits after most instructions is that it is much harder to tease apart which instructions can be run in parallel without interfering with each other. Updating status bits has side effects, therefore has a linearizing effect on code. ARM's ability to mix and match branch-free condition testing on any instruction with the option to either update or not update the status bits after any instruction is extremely powerful, for both assembly language programmers and compilers, and produces very efficient code.When you don't have to branch, you can avoid the time cost of flushing the pipeline for what would otherwise be short branches, and you can avoid the design complexity of many forms of speculative evalution. The performance impact of the initial naive imlementations of the mitigations for many recently discovered processor vulnerabilities (Spectre etc.) shows you just how much the performance of modern processors depends upon complex speculative evaluation logic. With a short pipeline and the dramatically reduced need for branching, ARM just doesn't need to rely on speculative evaluation as much as CISC processors. (Of course high-end ARM implementations do include speculative evaluation, but it's a smaller part of the performance story.)If you have ever wondered why ARM has been so phenomenally successful, the brilliant effectiveness and interplay of these two mechanisms (combined with another mechanism that lets you \"barrel shift\" left or right one of the two arguments of any arithmetic operator or offset memory access operator at zero additional cost) are a big part of the story, because they are some of the greatest sources of the ARM architecture's efficiency. The brilliance of the original designers of the ARM ISA back in 1983, Steve Furber and Roger (now Sophie) Wilson, cannot be overstated.",
                "It's about branch prediction. What is it?A branch predictor is one of the ancient performance-improving techniques which still finds relevance in modern architectures. While the simple prediction techniques provide fast lookup and power efficiency they suffer from a high misprediction rate.On the other hand, complex branch predictions \u2013either neural-based or variants of two-level branch prediction \u2013provide better prediction accuracy, but they consume more power and complexity increases exponentially.In addition to this, in complex prediction techniques, the time taken to predict the branches is itself very high \u2013ranging from 2 to 5 cycles \u2013which is comparable to the execution time of actual branches.Branch prediction is essentially an optimization (minimization) problem where the emphasis is on to achieve lowest possible miss rate, low power consumption, and low complexity with minimum resources.There really are three different kinds of branches:Forward conditional branches - based on a run-time condition, the PC (program counter) is changed to point to an address forward in the instruction stream.Backward conditional branches - the PC is changed to point backward in the instruction stream. The branch is based on some condition, such as branching backwards to the beginning of a program loop when a test at the end of the loop states the loop should be executed again.Unconditional branches - this includes jumps, procedure calls, and returns that have no specific condition. For example, an unconditional jump instruction might be coded in assembly language as simply \"jmp\", and the instruction stream must immediately be directed to the target location pointed to by the jump instruction, whereas a conditional jump that might be coded as \"jmpne\" would redirect the instruction stream only if the result of a comparison of two values in a previous \"compare\" instructions shows the values to not be equal. (The segmented addressing scheme used by the x86 architecture adds extra complexity since jumps can be either \"near\" (within a segment) or \"far\" (outside the segment). Each type has different effects on branch prediction algorithms.)Static/dynamic Branch Prediction: Static branch prediction is used by the microprocessor the first time a conditional branch is encountered, and dynamic branch prediction is used for succeeding executions of the conditional branch code.References:Branch predictorA Demonstration of Self-ProfilingBranch Prediction ReviewBranch Prediction (Using wayback machine)",
                "Besides the fact that the branch prediction may slow you down, a sorted array has another advantage:You can have a stop condition instead of just checking the value, this way you only loop over the relevant data, and ignore the rest.\nThe branch prediction will miss only once.",
                "Sorted arrays are processed faster than an unsorted array, due to a phenomena called branch prediction.The branch predictor is a digital circuit (in computer architecture) trying to predict which way a branch will go, improving the flow in the instruction pipeline. The circuit/computer predicts the next step and executes it.Making a wrong prediction leads to going back to the previous step, and executing with another prediction. Assuming the prediction is correct, the code will continue to the next step. A wrong prediction results in repeating the same step, until a correct prediction occurs.The answer to your question is very simple.In an unsorted array, the computer makes multiple predictions, leading to an increased chance of errors.\nWhereas, in a sorted array, the computer makes fewer predictions, reducing the chance of errors.\nMaking more predictions requires more time.Sorted Array: Straight RoadUnsorted Array: Curved RoadBranch prediction: Guessing/predicting which road is straight and following it without checkingAlthough both the roads reach the same destination, the straight road is shorter, and the other is longer. If then you choose the other by mistake, there is no turning back, and so you will waste some extra time if you choose the longer road. This is similar to what happens in the computer, and I hope this helped you understand better.Also I want to cite @Simon_Weaver from the comments:It doesn\u2019t make fewer predictions - it makes fewer incorrect predictions. It still has to predict for each time through the loop...",
                "I tried the same code with MATLAB 2011b with my MacBook Pro (Intel i7, 64 bit, 2.4 GHz) for the following MATLAB code:The results for the above MATLAB code are as follows:The results of the C code as in @GManNickG I get:Based on this, it looks MATLAB is almost 175 times slower than the C implementation without sorting and 350 times slower with sorting. In other words, the effect (of branch prediction) is 1.46x for MATLAB implementation and 2.7x for the C implementation.",
                "The assumption by other answers that one needs to sort the data is not correct.The following code does not sort the entire array, but only 200-element segments of it, and thereby runs the fastest.Sorting only k-element sections completes the pre-processing in linear time, O(n), rather than the O(n.log(n)) time needed to sort the entire array.This also \"proves\" that it has nothing to do with any algorithmic issue such as sort order, and it is indeed branch prediction.",
                "Bjarne Stroustrup's Answer to this question:That sounds like an interview question. Is it true? How would you know? It is a bad idea to answer questions about efficiency without first doing some measurements, so it is important to know how to measure.So, I tried with a vector of a million integers and got:I ran that a few times to be sure. Yes, the phenomenon is real. My key code was:At least the phenomenon is real with this compiler, standard library, and optimizer settings. Different implementations can and do give different answers. In fact, someone did do a more systematic study (a quick web search will find it) and most implementations show that effect.One reason is branch prediction: the key operation in the sort algorithm is \u201cif(v[i] < pivot]) \u2026\u201d or equivalent. For a sorted sequence that test is always true whereas, for a random sequence, the branch chosen varies randomly.Another reason is that when the vector is already sorted, we never need to move elements to their correct position. The effect of these little details is the factor of five or six that we saw.Quicksort (and sorting in general) is a complex study that has attracted some of the greatest minds of computer science. A good sort function is a result of both choosing a good algorithm and paying attention to hardware performance in its implementation.If you want to write efficient code, you need to know a bit about machine architecture.",
                "This question is rooted in branch prediction models on CPUs. I'd recommend reading this paper:Increasing the Instruction Fetch Rate via Multiple Branch Prediction and a Branch Address Cache  (But real CPUs these days still don't make multiple taken branch-predictions per clock cycle, except for Haswell and later effectively unrolling tiny loops in its loop buffer.  Modern CPUs can predict multiple branches not-taken to make use of their fetches in large contiguous blocks.)When you have sorted elements, branch prediction easily predicts correctly except right at the boundary, letting instructions flow through the CPU pipeline efficiently, without having to rewind and take the correct path on mispredictions.",
                "An answer for quick and simple understanding (read the others for more details)This concept is called branch predictionBranch prediction is an optimization technique that predicts the path the code will take before it is known with certainty. This is important because during the code execution, the machine prefetches several code statements and stores them in the pipeline.The problem arises in conditional branching, where there are two possible paths or parts of the code that can be executed.When the prediction was true, the optimization technique worked out.When the prediction was false, to explain it in a simple way, the code statement stored in the pipeline gets proved wrong and the actual code has to be completely reloaded, which takes up a lot of time.As common sense suggests, predictions of something sorted are way more accurate than predictions of something unsorted.branch prediction visualisation:sorted\n\nunsorted",
                "It is a branch prediction failure. You don't need to sort the array, but you just need to partition it with the value 128. Sorting is n*log(n), whereas partitioning is just linear. Basically it is just one run of the quick sort partitioning step with the pivot chosen to be 128. Unfortunately in C++ there is just nth_element function, which partition by position, not by value.The answer to this question is that it auto-vectorizes. As usual compilers don't pick perfect strategies. (Although GCC's might be optimal for SSE2 or SSE4.)"
            ]
        },
        {
            "tag": "pass_by_reference",
            "patterns": [
                "Is Java \"pass-by-reference\" or \"pass-by-value\"?",
                "pass by reference",
                "pass by value",
                "Is Java pass by reference?",
                "Is Java pass by value?",
                "Pass by value and pass by reference",
                "Difference between Pass by value and pass by reference"
            ],
            "responses": [
                "The terms \"pass-by-value\" and \"pass-by-reference\" have special, precisely defined meanings in computer science. These meanings differ from the intuition many people have when first hearing the terms. Much of the confusion in this discussion seems to come from this fact.The terms \"pass-by-value\" and \"pass-by-reference\" are talking about variables. Pass-by-value means that the value of a variable is passed to a function/method. Pass-by-reference means that a reference to that variable is passed to the function. The latter gives the function a way to change the contents of the variable.By those definitions, Java is always pass-by-value.  Unfortunately, when we deal with variables holding objects we are really dealing with object-handles called references which are passed-by-value as well.  This terminology and semantics easily confuse many beginners.It goes like this:In the example above aDog.getName() will still return \"Max\". The value aDog within main is not changed in the function foo with the Dog \"Fifi\" as the object reference is passed by value. If it were passed by reference, then the aDog.getName() in main would return \"Fifi\" after the call to foo.Likewise:In the above example, Fifi is the dog's name after call to foo(aDog) because the object's name was set inside of foo(...). Any operations that foo performs on d are such that, for all practical purposes, they are performed on aDog, but it is not possible to change the value of the variable aDog itself.For more information on pass by reference and pass by value, consult the following answer: https://stackoverflow.com/a/430958/6005228. This explains more thoroughly the semantics and history behind the two and also explains why Java and many other modern languages appear to do both in certain cases.",
                "I just noticed you referenced my article.The Java Spec says that everything in Java is pass-by-value. There is no such thing as \"pass-by-reference\" in Java.The key to understanding this is that something likeis not a Dog; it's actually a pointer to a Dog. The use of the term \"reference\" in Java is very misleading and is what causes most of the confusion here. What they call \"references\" act/feel more like what we'd call \"pointers\" in most other languages.What that means, is when you haveyou're essentially passing the address of the created Dog object to the foo method.(I say essentially because Java pointers/references aren't direct addresses, but it's easiest to think of them that way.)Suppose the Dog object resides at memory address 42. This means we pass 42 to the method.if the Method were defined aslet's look at what's happening.Now let's think about what happens outside the method:Did myDog change?There's the key.Keeping in mind that myDog is a pointer, and not an actual Dog, the answer is NO. myDog still has the value 42; it's still pointing to the original Dog (but note that because of line \"AAA\", its name is now \"Max\" - still the same Dog; myDog's value has not changed.)It's perfectly valid to follow an address and change what's at the end of it; that does not change the variable, however.Java works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, the caller will not see any changes you make to where that pointer points. (In a language with pass-by-reference semantics, the method function can change the pointer and the caller will see that change.)In C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed.If Java had pass-by-reference semantics, the foo method we defined above would have changed where myDog was pointing when it assigned someDog on line BBB.Think of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.A discussion in the comments warrants some clarification...In C, you can writeThis is not a special case in C. Both languages use pass-by-value semantics. Here the call site is creating additional data structure to assist the function to access and manipulate data.The function is being passed pointers to data, and follows those pointers to access and modify that data.A similar approach in Java, where the caller sets up assisting structure, might be:(or if you wanted both examples to demonstrate features the other language doesn't have, create a mutable IntWrapper class to use in place of the arrays)In these cases, both C and Java are simulating pass-by-reference. They're still both passing values (pointers to ints or arrays), and following those pointers inside the called function to manipulate the data.Pass-by-reference is all about the function declaration/definition, and how it handles its parameters. Reference semantics apply to every call to that function, and the call site only needs to pass variables, no additional data structure.These simulations require the call site and the function to cooperate. No doubt it's useful, but it's still pass-by-value.",
                "Java always passes arguments by value, NOT by reference.Let me explain this through an example:I will explain this in steps:Declaring a reference named f of type Foo and assign it a new object of type Foo with an attribute \"f\".From the method side, a reference of type Foo with a name a is declared and it's initially assigned null.As you call the method changeReference, the reference a will be assigned the object which is passed as an argument.Declaring a reference named b of type Foo and assign it a new object of type Foo with an attribute \"b\".a = b makes a new assignment to the reference a, not f, of the object whose attribute is \"b\".As you call modifyReference(Foo c) method, a reference c is created and assigned the object with attribute \"f\".c.setAttribute(\"c\"); will change the attribute of the object that reference c points to it, and it's the same object that reference f points to it.I hope you understand now how passing objects as arguments works in Java :)",
                "Java is always pass by value, with no exceptions, ever.So how is it that anyone can be at all confused by this, and believe that Java is pass by reference, or think they have an example of Java acting as pass by reference? The key point is that Java never provides direct access to the values of objects themselves, in any circumstances. The only access to objects is through a reference to that object. Because Java objects are always accessed through a reference, rather than directly, it is common to talk about fields and variables and method arguments as being objects, when pedantically they are only references to objects. The confusion stems from this (strictly speaking, incorrect) change in nomenclature.So, when calling a methodSo if you have doSomething(foo) and public void doSomething(Foo foo) { .. } the two Foos have copied references that point to the same objects.Naturally, passing by value a reference to an object looks very much like (and is indistinguishable in practice from) passing an object by reference.",
                "This will give you some insights of how Java really works to the point that in your next discussion about Java passing by reference or passing by value you'll just smile :-)Step one please erase from your mind that word that starts with 'p' \"_ _ _ _ _ _ _\", especially if you come from other programming languages. Java and 'p' cannot be written in the same book, forum, or even txt.Step two remember that when you pass an Object into a method you're passing the Object reference and not the Object itself.Now think of what an Object's reference/variable does/is:In the following (please don't try to compile/execute this...):What happens?A picture is worth a thousand words:Note that the anotherReferenceToTheSamePersonObject arrows is directed towards the Object and not towards the variable person!If you didn't get it then just trust me and remember that it's better to say that Java is pass by value. Well, pass by reference value. Oh well, even better is pass-by-copy-of-the-variable-value! ;)Now feel free to hate me but note that given this there is no difference between passing primitive data types and Objects when talking about method arguments.You always pass a copy of the bits of the value of the reference!Java is pass-by-value because inside a method you can modify the referenced Object as much as you want but no matter how hard you try you'll never be able to modify the passed variable that will keep referencing (not p _ _ _ _ _ _ _) the same Object no matter what!The changeName function above will never be able to modify the actual content (the bit values) of the passed reference. In other word changeName cannot make Person person refer to another Object.Of course you can cut it short and just say that  Java is pass-by-value!",
                "Java passes references by value.So you can't change the reference that gets passed in.",
                "I feel like arguing about \"pass-by-reference vs pass-by-value\" is not super-helpful.If you say, \"Java is pass-by-whatever (reference/value)\", in either case, you're not provide a complete answer. Here's some additional information that will hopefully aid in understanding what's happening in memory.Crash course on stack/heap before we get to the Java implementation:\nValues go on and off the stack in a nice orderly fashion, like a stack of plates at a cafeteria.\nMemory in the heap (also known as dynamic memory) is haphazard and disorganized. The JVM just finds space wherever it can, and frees it up as the variables that use it are no longer needed.Okay. First off, local primitives go on the stack. So this code:results in this:When you declare and instantiate an object. The actual object goes on the heap. What goes on the stack? The address of the object on the heap. C++ programmers would call this a pointer, but some Java developers are against the word \"pointer\". Whatever. Just know that the address of the object goes on the stack.Like so:An array is an object, so it goes on the heap as well. And what about the objects in the array? They get their own heap space, and the address of each object goes inside the array.So, what gets passed in when you call a method? If you pass in an object, what you're actually passing in is the address of the object. Some might say the \"value\" of the address, and some say it's just a reference to the object. This is the genesis of the holy war between \"reference\" and \"value\" proponents. What you call it isn't as important as that you understand that what's getting passed in is the address to the object.One String gets created and space for it is allocated in the heap, and the address to the string is stored on the stack and given the identifier hisName, since the address of the second String is the same as the first, no new String is created and no new heap space is allocated, but a new identifier is created on the stack. Then we call shout(): a new stack frame is created and a new identifier, name is created and assigned the address of the already-existing String.So, value, reference? You say \"potato\".",
                "Basically, reassigning Object parameters doesn't affect the argument, e.g.,will print out \"Hah!\" instead of null. The reason this works is because bar is a copy of the value of baz, which is just a reference to \"Hah!\". If it were the actual reference itself, then foo would have redefined baz to null.",
                "Just to show the contrast, compare the following C++ and Java snippets:In C++: Note: Bad code - memory leaks!  But it demonstrates the point.In Java,Java only has the two types of passing: by value for built-in types, and by value of the pointer for object types.",
                "Java passes references to objects by value.",
                "I can't believe that nobody mentioned Barbara Liskov yet. When she designed CLU in 1974, she ran into this same terminology problem, and she invented the term call by sharing (also known as call by object-sharing and call by object) for this specific case of \"call by value where the value is a reference\".",
                "The crux of the matter is that the word reference in the expression \"pass by reference\" means something completely different from the usual meaning of the word reference in Java.Usually in Java reference means a a reference to an object. But the technical terms pass by reference/value from programming language theory is talking about a reference to the memory cell holding the variable, which is something completely different.",
                "There are already great answers that cover this. I wanted to make a small contribution by sharing a very simple example (which will compile) contrasting the behaviors between Pass-by-reference in c++ and Pass-by-value in Java.A few points:C++ pass by reference example:Java pass \"a Java reference\" by value exampleEDITSeveral people have written comments which seem to indicate that either they are not looking at my examples or they don't get the c++ example. Not sure where the disconnect is, but guessing the c++ example is not clear. I'm posting the same example in pascal because I think pass-by-reference looks cleaner in pascal, but I could be wrong. I might just be confusing people more; I hope not.In pascal, parameters passed-by-reference are called \"var parameters\". In the procedure setToNil below, please note the keyword 'var' which precedes the parameter 'ptr'. When a pointer is passed to this procedure, it will be passed by reference. Note the behavior: when this procedure sets ptr to nil (that's pascal speak for NULL), it will set the argument to nil--you can't do that in Java.EDIT 2Some excerpts from \"THE Java Programming Language\" by Ken Arnold, James Gosling (the guy who invented Java), and David Holmes, chapter 2, section 2.6.5All parameters to methods are passed \"by value\". In other words,\nvalues of parameter variables in a method are copies of the invoker\nspecified as arguments.He goes on to make the same point regarding objects . . .You should note that when the parameter is an object reference, it is\nthe object reference-not the object itself-that is passed \"by value\".And towards the end of the same section he makes a broader statement about java being only pass by value and never pass by reference.The Java programming language does not pass objects by reference; it\npasses object references by value. Because two copies of the same\nreference refer to the same actual object, changes made through one\nreference variable are visible through the other. There is exactly one\nparameter passing mode-pass by value-and that helps keep things\nsimple.This section of the book has a great explanation of parameter passing in Java and of the distinction between pass-by-reference and pass-by-value and it's by the creator of Java. I would encourage anyone to read it, especially if you're still not convinced.I think the difference between the two models is very subtle and unless you've done programming where you actually used pass-by-reference, it's easy to miss where two models differ.I hope this settles the debate, but probably won't.EDIT 3I might be a little obsessed with this post. Probably because I feel that the makers of Java inadvertently spread misinformation. If instead of using the word \"reference\" for pointers they had used something else, say\ndingleberry, there would've been no problem. You could say, \"Java passes dingleberries by value and not by reference\", and nobody would be confused.That's the reason only Java developers have issue with this. They look at the word \"reference\" and think they know exactly what that means, so they don't even bother to consider the opposing argument.Anyway, I noticed a comment in an older post, which made a balloon analogy which I really liked. So much so that I decided to glue together some clip-art to make a set of cartoons to illustrate the point.Passing a reference by value--Changes to the reference are not reflected in the caller's scope, but the changes to the object are. This is because the reference is copied, but the both the original and the copy refer to the same object.Pass by reference--There is no copy of the reference. Single reference is shared by both the caller and the function being called. Any changes to the reference or the Object's data are reflected in the caller's scope.EDIT 4I have seen posts on this topic which describe the low level implementation of parameter passing in Java, which I think is great and very helpful because it makes an abstract idea concrete. However, to me the question is more about the behavior described in the language specification than about the technical implementation of the behavior. This is an exerpt from the Java Language Specification, section 8.4.1 :When the method or constructor is invoked (\u00a715.12), the values of the\nactual argument expressions initialize newly created parameter\nvariables, each of the declared type, before execution of the body of\nthe method or constructor. The Identifier that appears in the\nDeclaratorId may be used as a simple name in the body of the method or\nconstructor to refer to the formal parameter.Which means, java creates a copy of the passed parameters before executing a method. Like most people who studied compilers in college, I used \"The Dragon Book\" which is THE compilers book. It has a good description of \"Call-by-value\" and \"Call-by-Reference\" in Chapter 1. The Call-by-value description matches up with Java Specs exactly.Back when I studied compilers-in the 90's, I used the first edition of the book from 1986 which pre-dated Java by about 9 or 10 years. However, I just ran across a copy of the 2nd Eddition from 2007 which actually mentions Java! Section 1.6.6 labeled \"Parameter Passing Mechanisms\" describes parameter passing pretty nicely. Here is an excerpt under the heading \"Call-by-value\" which mentions Java:In call-by-value, the actual parameter is evaluated (if it is an\nexpression) or copied (if it is a variable). The value is placed in\nthe location belonging to the corresponding formal parameter of the\ncalled procedure. This method is used in C and Java, and is a common\noption in C++ , as well as in most other languages.",
                "In java everything is reference, so when you have something like:\n    Point pnt1 = new Point(0,0); Java does following:Java doesn't pass method arguments by reference; it passes them by value. I will use example from this site:Flow of the program:Creating two different Point object with two different reference associated.As expected output will be:On this line 'pass-by-value' goes into the play...References pnt1 and pnt2 are passed by value to the tricky method, which means that now yours references pnt1 and pnt2 have their copies named arg1 and arg2.So pnt1 and arg1 points to the same object. (Same for the pnt2 and arg2)In the tricky method:Next in the tricky methodHere, you first create new temp Point reference which will point on same place like arg1 reference. Then you move reference arg1 to point to the same place like arg2 reference.\nFinally arg2 will point to the same place like temp.From here scope of tricky method is gone and you don't have access any more to the references: arg1, arg2, temp. But important note is that everything you do with these references when they are 'in life' will permanently affect object on which they are point to.So after executing method tricky, when you return to main, you have this situation:So now, completely execution of program will be:",
                "Java is always pass by value, not pass by referenceFirst of all, we need to understand what pass by value and pass by reference are.Pass by value means that you are making a copy in memory of the actual parameter's value that is passed in. This is a copy of the contents of the actual parameter.Pass by reference (also called pass by address) means that a copy of the address of the actual parameter is stored.Sometimes Java can give the illusion of pass by reference. Let's see how it works by using the example below:The output of this program is:Let's understand step by step:As we all know it will create an object in the heap and return the reference value back to t. For example, suppose the value of t is 0x100234 (we don't know the actual JVM internal value, this is just an example) .When passing reference t to the function it will not directly pass the actual reference value of object test,  but it will create a copy of t and then pass it to the function. Since it is passing by value, it passes a copy of the variable rather than the actual reference of it. Since we said the value of t was 0x100234, both t and f will have the same value and hence they will point to the same object.If you change anything in the function using reference f it will modify the existing contents of the object. That is why we got the output changevalue,   which is updated in the function.To understand this more clearly, consider the following example:Will this throw a NullPointerException? No, because it only passes a copy of the reference.\nIn the case of passing by reference, it could have thrown a NullPointerException, as seen below:Hopefully this will help.",
                "Java is a pass by value(stack memory)How it worksLet's first understand that where java stores primitive data type and object data type.Primitive data types itself and object references are stored in the stack.\nObjects themselves are stored in the heap.It means, Stack memory stores primitive data types and also the\naddresses of objects.And you always pass a copy of the bits of the value of the reference.If it's a primitive data type then these copied bits contain the value of the primitive data type itself, That's why when we change the value of argument inside the method then it does not reflect the changes outside.If it's an object data type like Foo foo=new Foo() then in this case copy of the address of the object passes like file shortcut  , suppose we have a text file abc.txt at C:\\desktop and suppose we make shortcut of the same file and put this inside C:\\desktop\\abc-shortcut so when you access the file from C:\\desktop\\abc.txt and write 'Stack Overflow' and close the file and again you open the file from shortcut then you write ' is the largest online community for programmers to learn' then total file change will be 'Stack Overflow is the largest online community for programmers to learn' which means it doesn't matter from where you open the file , each time we were accessing the same file , here we can assume Foo as a file and suppose foo stored at 123hd7h(original address like C:\\desktop\\abc.txt ) address and 234jdid(copied address like C:\\desktop\\abc-shortcut which actually contains the original address of the file inside) ..\nSo for better understanding make shortcut file and feel.",
                "Getting an outside of the box view, let's look at Assembly or some low level memory management. At the CPU level a reference to anything immediately becomes a value if it gets written to memory or to one of the CPU registers. (That is why pointer is a good definition. It is a value, which has a purpose at the same time).Data in memory has a Location and at that location there is a value (byte,word, whatever). In Assembly we have a convenient solution to give a Name to certain Location (aka variable), but when compiling the code, the assembler simply replaces Name with the designated location just like your browser replaces domain names with IP addresses.Down to the core it is technically impossible to pass a reference to anything in any language without representing it (when it immediately becomes a value).Lets say we have a variable Foo, its Location is at the 47th byte in memory and its Value is 5. We have another variable Ref2Foo which is at 223rd byte in memory, and its value will be 47. This Ref2Foo might be a technical variable, not explicitly created by the program. If you just look at 5 and 47 without any other information, you will see just two Values.\nIf you use them as references then to reach to 5 we have to travel:This is how jump-tables work.If we want to call a method/function/procedure with Foo's value, there are a few possible way to pass the variable to the method, depending on the language and its several method invocation modes:In every cases above a value - a copy of an existing value - has been created, it is now upto the receiving method to handle it. When you write \"Foo\" inside the method, it is either read out from EAX, or automatically  dereferenced, or double dereferenced, the process depends on how the language works and/or what the type of Foo dictates. This is hidden from the developer until she circumvents the dereferencing process. So a reference is a value when represented, because a reference is a value that has to be processed (at language level).Now we have passed Foo to the method:Nitpicking on insignificant details, even languages that do pass-by-reference will pass values to functions, but those functions know that they have to use it for dereferencing purposes. This pass-the-reference-as-value is just hidden from the programmer because it is practically useless and the terminology is only pass-by-reference.Strict pass-by-value is also useless, it would mean that a 100 Mbyte array should have to be copied every time we call a method with the array as argument, therefore Java cannot be stricly pass-by-value. Every language would pass a reference to this huge array (as a value) and either employs copy-on-write mechanism if that array can be changed locally inside the method or allows the method (as Java does) to modify the array globally (from the caller's view) and a few languages allows to modify the Value of the reference itself.So in short and in Java's own terminology, Java is pass-by-value where value can be: either a real value or a value that is a representation of a reference.",
                "In Java, method arguments are all passed by value :Java arguments are all passed by value (the value  or reference is copied when used by the method) :In the case of primitive types, Java behaviour is simple:\nThe value is copied in another instance of the primitive type.In case of Objects, this is the same:\nObject variables are references (mem buckets holding only Object\u2019s address instead of a primitive value) that was created using the \"new\" keyword, and are copied like primitive types.The behaviour can appear different from primitive types: Because the copied object-variable contains the same address (to the same Object).\nObject's content/members might still be modified within a method and later access outside, giving the illusion that the (containing) Object itself was passed by reference.\"String\" Objects appear to be a good counter-example to the urban legend saying that \"Objects are passed by reference\":In effect, using a method, you will never be able, to update the value of a String passed as argument:A String Object, holds characters by an array declared final that can't be modified.\nOnly the address of the Object might be replaced by another using \"new\".\nUsing \"new\" to update the variable, will not let the Object be accessed from outside, since the variable was initially passed by value and copied.",
                "As far as I know, Java only knows call by value. This means for primitive datatypes you will work with an copy and for objects you will work with an copy of the reference to the objects. However I think there are some pitfalls; for example, this will not work:This will populate Hello World and not World Hello because in the swap function you use copys which have no impact on the references in the main. But if your objects are not immutable you can change it for example:This will populate Hello World on the command line. If you change StringBuffer into String it will produce just Hello because String is immutable. For example:However you could make a wrapper for String like this which would make it able to use it with Strings:edit: i believe this is also the reason to use StringBuffer when it comes to \"adding\" two Strings because you can modifie the original object which u can't with immutable objects like String is.",
                "No, it's not pass by reference.Java is pass by value according to the Java Language Specification:When the method or constructor is invoked (\u00a715.12), the values of the actual argument expressions initialize newly created parameter variables, each of the declared type, before execution of the body of the method or constructor. The Identifier that appears in the DeclaratorId may be used as a simple name in the body of the method or constructor to refer to the formal parameter.",
                "Let me try to explain my understanding with the help of four examples. Java is pass-by-value, and not pass-by-reference/**Pass By ValueIn Java, all parameters are passed by value, i.e. assigning a method argument is not visible to the caller.*/Example 1:ResultExample 2:/**\n * \n * Pass By Value\n *\n */ResultExample 3:/**\n  This 'Pass By Value has a feeling of 'Pass By Reference'Some people say primitive types and 'String' are 'pass by value'\n  and objects are 'pass by reference'.But from this example, we can understand that it is infact pass by value only,\n  keeping in mind that here we are passing the reference as the value.\n  ie: reference is passed by value.\n  That's why are able to change and still it holds true after the local scope.\n  But we cannot change the actual reference outside the original scope.\n  what that means is demonstrated by next example of PassByValueObjectCase2.*/ResultExample 4:/**In addition to what was mentioned in Example3 (PassByValueObjectCase1.java),  we cannot change the actual reference outside the original scope.\"Note: I am not pasting the code for private class Student. The class definition for Student is same as Example3.*/Result",
                "I thought I'd contribute this answer to add more details from the Specifications.First, What's the difference between passing by reference vs. passing by value?Passing by reference means the called functions' parameter will be the\nsame as the callers' passed argument (not the value, but the identityPass by value means the called functions' parameter will be a copy of\nthe callers' passed argument.Or from wikipedia, on the subject of pass-by-referenceIn call-by-reference evaluation (also referred to as\npass-by-reference), a function receives an implicit reference to a\nvariable used as argument, rather than a copy of its value. This\ntypically means that the function can modify (i.e. assign to) the\nvariable used as argument\u2014something that will be seen by its caller.And on the subject of pass-by-valueIn call-by-value, the argument expression is evaluated, and the\nresulting value is bound to the corresponding variable in the function [...].\nIf the function or procedure is able to assign values to its\nparameters, only its local copy is assigned [...].Second, we need to know what Java uses in its method invocations. The Java Language Specification statesWhen the method or constructor is invoked (\u00a715.12), the values of the\nactual argument expressions initialize newly created parameter\nvariables, each of the declared type, before execution of the body of\nthe method or constructor.So it assigns (or binds) the value of the argument to the corresponding parameter variable.What is the value of the argument?Let's consider reference types, the Java Virtual Machine Specification statesThere are three kinds of reference types: class types, array types,\nand interface types. Their values are references to dynamically\ncreated class instances, arrays, or class instances or arrays that\nimplement interfaces, respectively.The Java Language Specification also statesThe reference values (often just references) are pointers to these objects, and a special null reference, which refers to no object.The value of an argument (of some reference type) is a pointer to an object. Note that a variable, an invocation of a method with a reference type return type, and an instance creation expression (new ...) all resolve to a reference type value.Soall bind the value of a reference to a String instance to the method's newly created parameter, param. This is exactly what the definition of pass-by-value describes. As such, Java is pass-by-value.The fact that you can follow the reference to invoke a method or access a field of the referenced object is completely irrelevant to the conversation. The definition of pass-by-reference wasThis typically means that the function can modify (i.e. assign to) the\nvariable used as argument\u2014something that will be seen by its caller.In Java, modifying the variable means reassigning it. In Java, if you reassigned the variable within the method, it would go unnoticed to the caller. Modifying the object referenced by the variable is a different concept entirely.Primitive values are also defined in the Java Virtual Machine Specification, here. The value of the type is the corresponding integral or floating point value, encoded appropriately (8, 16, 32, 64, etc. bits).",
                "You can never pass by reference in Java, and one of the ways that is obvious is when you want to return more than one value from a method call. Consider the following bit of code in C++:Sometimes you want to use the same pattern in Java, but you can't; at least not directly. Instead you could do something like this:As was explained in previous answers, in Java you're passing a pointer to the array as a value into getValues. That is enough, because the method then modifies the array element, and by convention you're expecting element 0 to contain the return value. Obviously you can do this in other ways, such as structuring your code so this isn't necessary, or constructing a class that can contain the return value or allow it to be set. But the simple pattern available to you in C++ above is not available in Java.",
                "The distinction, or perhaps just the way I remember as I used to be under the same impression as the original poster is this: Java is always pass by value. All objects( in Java, anything except for primitives) in Java are references. These references are passed by value.",
                "As many people mentioned it before, Java is always pass-by-valueHere is another example that will help you understand the difference (the classic swap example):Prints:Before: a = 2, b = 3\n  After: a = 2, b = 3This happens because iA and iB are new local reference variables that have the same value of the passed references (they point to a and b respectively). So, trying to change the references of iA or iB will only change in the local scope and not outside of this method.",
                "I always think of it as \"pass by copy\". It is a copy of the value be it primitive or reference. If it is a primitive it is a copy of the bits that are the value and if it is an Object it is a copy of the reference.output of java PassByCopy:name= Maxx\n  name= FidoPrimitive wrapper classes and Strings are immutable so any example using those types will not work the same as other types/objects.",
                "Unlike some other languages, Java does not allow you to choose between pass-by-value and pass-by-reference\u2014all arguments are passed by value. A method call can pass two types of values to a method\u2014copies of primitive values (e.g., values of int and double) and copies of references to objects.When a method modifies a primitive-type parameter, changes to the parameter have no effect on the original argument value in the calling method.When it comes to objects, objects themselves cannot be passed to methods. So we pass the reference(address) of the object. We can manipulate the original object using this reference.How Java creates and stores objects: When we create an object we store the object\u2019s address in a reference variable. Let's analyze the following statement.\u201cAccount account1\u201d is the type and name of the reference variable, \u201c=\u201d is the assignment operator, \u201cnew\u201d asks for the required amount of space from the system. The constructor to the right of keyword new which creates the object is called implicitly by the keyword new. Address of the created object(result of right value, which is an expression called \"class instance creation expression\") is assigned to the left value (which is a reference variable with a name and a type specified) using the assign operator.Although an object\u2019s reference is passed by value, a method can still interact with the referenced object by calling its public methods using the copy of the object\u2019s reference. Since the reference stored in the parameter is a copy of the reference that was passed as an argument, the parameter in the called method and the argument in the calling method refer to the same object in memory.Passing references to arrays, instead of the array objects themselves, makes sense for performance reasons. Because everything in Java is passed by value, if array objects were passed,\na copy of each element would be passed. For large arrays, this would waste time and consume\nconsiderable storage for the copies of the elements.In the image below you can see we have two reference variables(These are called pointers in C/C++, and I think that term makes it easier to understand this feature.) in the main method. Primitive and reference variables are kept in stack memory(left side in images below). array1 and array2 reference variables \"point\" (as C/C++ programmers call it) or reference to a and b arrays respectively, which are objects (values these reference variables hold are addresses of objects) in heap memory (right side in images below).If we pass the value of array1 reference variable as an argument to the reverseArray method, a reference variable is created in the method and that reference variable starts pointing to the same array (a).So, if we sayin reverseArray method, it will make a change in array a.We have another reference variable in reverseArray method (array2) that points to an array c. If we were to sayin reverseArray method, then the reference variable array1 in method reverseArray would stop pointing to array a and start pointing to array c (Dotted line in second image).If we return value of reference variable array2 as the return value of method reverseArray and assign this value to reference variable array1 in main method, array1 in main will start pointing to array c.So let's write all the things we have done at once now.And now that reverseArray method is over, its reference variables(array1 and array2) are gone. Which means we now only have the two reference variables in main method array1 and array2 which point to c and b arrays respectively. No reference variable is pointing to object (array) a. So it is eligible for garbage collection.You could also assign value of array2 in main to array1. array1 would start pointing to b.",
                "Java has only pass by value. A very simple example to validate this.",
                "To make a long story short, Java objects have some very peculiar properties.In general, Java has primitive types (int, bool, char, double, etc) that are passed directly by value. Then Java has objects (everything that derives from java.lang.Object). Objects are actually always handled through a reference (a reference being a pointer that you can't touch). That means that in effect, objects are passed by reference, as the references are normally not interesting. It does however mean that you cannot change which object is pointed to as the reference itself is passed by value.Does this sound strange and confusing? Let's consider how C implements pass by reference and pass by value. In C, the default convention is pass by value. void foo(int x) passes an int by value. void foo(int *x) is a function that does not want an int a, but a pointer to an int: foo(&a). One would use this with the & operator to pass a variable address.Take this to C++, and we have references. References are basically (in this context) syntactic sugar that hide the pointer part of the equation: void foo(int &x) is called by foo(a), where the compiler itself knows that it is a reference and the address of the non-reference a should be passed. In Java, all variables referring to objects are actually of reference type, in effect forcing call by reference for most intends and purposes without the fine grained control (and complexity) afforded by, for example, C++.",
                "I have created a thread devoted to these kind of questions for any programming languages here.Java is also mentioned. Here is the short summary:"
            ]
        },
        {
            "tag": "InputStream",
            "patterns": [
                "How do I read / convert an InputStream into a String in Java?",
                "InputStream",
                "InputStream to string"
            ],
            "responses": [
                "Summarize other answers I found 11 main ways to do this (see below). And I wrote some performance tests (see results below):Ways to convert an InputStream to a String:Using IOUtils.toString (Apache Utils)Using CharStreams (Guava)Using Scanner (JDK)Using Stream API (Java 8). Warning: This solution converts different line breaks (like \\r\\n) to \\n.Using parallel Stream API (Java 8). Warning: This solution converts different line breaks (like \\r\\n) to \\n.Using InputStreamReader and StringBuilder (JDK)Using StringWriter and IOUtils.copy (Apache Commons)Using ByteArrayOutputStream and inputStream.read (JDK)Using BufferedReader (JDK). Warning: This solution converts different line breaks (like \\n\\r) to line.separator system property (for example, in Windows to \"\\r\\n\").Using BufferedInputStream and ByteArrayOutputStream (JDK)Using inputStream.read() and StringBuilder (JDK). Warning: This solution has problems with Unicode, for example with Russian text (works correctly only with non-Unicode text)Warning:Solutions 4, 5 and 9 convert different line breaks to one.Solution 11 can't work correctly with Unicode textPerformance testsPerformance tests for small String (length = 175), url in github (mode = Average Time, system = Linux, score 1,343 is the best):Performance tests for big String (length = 50100), url in github (mode = Average Time, system = Linux, score 200,715 is the best):Graphs (performance tests depending on Input Stream length in Windows 7 system)Performance test (Average Time) depending on Input Stream length in Windows 7 system:",
                "A nice way to do this is using Apache commons IOUtils to copy the InputStream into a StringWriter... something likeor evenAlternatively, you could use ByteArrayOutputStream if you don't want to mix your Streams and Writers",
                "Here's a way using only the standard Java library (note that the stream is not closed, your mileage may vary).I learned this trick from \"Stupid Scanner tricks\" article. The reason it works is because Scanner iterates over tokens in the stream, and in this case we separate tokens using \"beginning of the input boundary\" (\\A), thus giving us only one token for the entire contents of the stream.Note, if you need to be specific about the input stream's encoding, you can provide the second argument to Scanner constructor that indicates what character set to use (e.g. \"UTF-8\").Hat tip goes also to Jacob, who once pointed me to the said article.",
                "Apache Commons allows:Of course, you could choose other character encodings besides UTF-8.Also see: (documentation)",
                "Taking into account file one should first get a java.io.Reader instance. This can then be read and added to a StringBuilder (we don't need StringBuffer if we are not accessing it in multiple threads, and StringBuilder is faster). The trick here is that we work in blocks, and as such don't need other buffering streams. The block size is parameterized for run-time performance optimization.",
                "Use:",
                "If you are using Google-Collections/Guava you could do the following:Note that the second parameter (i.e. Charsets.UTF_8) for the InputStreamReader isn't necessary, but it is generally a good idea to specify the encoding if you know it (which you should!)",
                "For completeness here is Java 9 solution:This uses the readAllBytes method which was added to Java 9.",
                "This is the best pure Java solution that fits perfectly for Android and any other JVM.This solution works amazingly well... it is simple, fast, and works on small and large streams just the same!! (see benchmark above.. No. 8)",
                "Use:",
                "Here's the most elegant, pure-Java (no library) solution I came up with after some experimentation:",
                "I did a benchmark upon 14 distinct answers here (sorry for not providing credits but there are too many duplicates).The result is very surprising. It turns out that Apache IOUtils is the slowest and ByteArrayOutputStream is the fastest solutions:So first here is the best method:Time in milliseconds",
                "I'd use some Java 8 tricks.Essentially the same as some other answers except more succinct.",
                "I ran some timing tests because time matters, always.I attempted to get the response into a String 3 different ways. (shown below)\nI left out try/catch blocks for the sake readability.To give context, this is the preceding code for all 3 approaches:1)2)3)So, after running 500 tests on each approach with the same request/response data, here are the numbers. Once again, these are my findings and your findings may not be exactly the same, but I wrote this to give some indication to others of the efficiency differences of these approaches.Ranks:\nApproach #1\nApproach #3 - 2.6% slower than #1\nApproach #2 - 4.3% slower than #1Any of these approaches is an appropriate solution for grabbing a response and creating a String from it.",
                "Pure Java solution using Streams, works since Java 8.As mentioned by Christoffer Hammarstr\u00f6m below other answer it is safer to explicitly specify the Charset. I.e. The InputStreamReader constructor can be changes as follows:",
                "Here's more-or-less sampath's answer, cleaned up a bit and represented as a function:",
                "If you were feeling adventurous, you could mix Scala and Java and end up with this:Mixing Java and Scala code and libraries has it's benefits.See full description here: Idiomatic way to convert an InputStream to a String in Scala",
                "If you can't use Commons IO (FileUtils/IOUtils/CopyUtils), here's an example using a BufferedReader to read the file line by line:Or if you want raw speed I'd propose a variation on what Paul de Vrieze suggested (which avoids using a StringWriter (which uses a StringBuffer internally):",
                "Use the java.io.InputStream.transferTo(OutputStream) supported in Java 9 and the ByteArrayOutputStream.toString(String) which takes the charset name:",
                "Make sure to close the streams at end if you use Stream ReadersEDIT: On JDK 7+, you can use try-with-resources construct.",
                "This is an answer adapted from org.apache.commons.io.IOUtils source code, for those who want to have the apache implementation but do not want the whole library.",
                "This one is nice because:How to do it?For JDK 9",
                "Here is the complete method for converting InputStream into String without using any third party library. Use StringBuilder for single threaded environment otherwise use StringBuffer.",
                "Another one, for all the Spring users:The utility methods in org.springframework.util.StreamUtils are similar to the ones in FileCopyUtils, but they leave the stream open when done.",
                "Here's how to do it using just the JDK using byte array buffers. This is actually how the commons-io IOUtils.copy() methods all work. You can replace byte[] with char[] if you're copying from a Reader instead of an InputStream.",
                "Kotlin users simply do:whereasis Kotlin standard library\u2019s built-in extension method.",
                "The easiest way in JDK is with the following code snipplets.",
                "In terms of reduce, and concat it can be expressed in Java 8 as:",
                "Here's my Java 8 based solution, which uses the new Stream API to collect all lines from an InputStream:"
            ]
        },
        {
            "tag": "NullPointerException",
            "patterns": [
                "Avoiding NullPointerException in Java",
                "NullPointerException",
                "How to avoid NullPointerException"
            ],
            "responses": [
                "This to me sounds like a reasonably common problem that junior to intermediate developers tend to face at some point: they either don't know or don't trust the contracts they are participating in and defensively overcheck for nulls.  Additionally, when writing their own code, they tend to rely on returning nulls to indicate something thus requiring the caller to check for nulls.To put this another way, there are two instances where null checking comes up:Where null is a valid response in terms of the contract; andWhere it isn't a valid response.(2) is easy.  As of Java 1.7 you can use Objects.requireNonNull(foo). (If you are stuck with a previous version then assertions may be a good alternative.)\"Proper\" usage of this method would be like below. The method returns the object passed into it and throws a NullPointerException if the object is null. This means that the returned value is always non-null. The method is primarily intended for validating parameters.It can also be used like an assertion though since it throws an exception if the object is null. In both uses, a message can be added which will be shown in the exception. Below is using it like an assertion and providing a message.Generally throwing a specific exception like NullPointerException when a value is null but shouldn't be is favorable to throwing a more general exception like AssertionError. This is the approach the Java library takes; favoring NullPointerException over IllegalArgumentException when an argument is not allowed to be null.(1) is a little harder.  If you have no control over the code you're calling then you're stuck.  If null is a valid response, you have to check for it.If it's code that you do control, however (and this is often the case), then it's a different story.  Avoid using nulls as a response.  With methods that return collections, it's easy: return empty collections (or arrays) instead of nulls pretty much all the time.With non-collections it might be harder.  Consider this as an example: if you have these interfaces:where Parser takes raw user input and finds something to do, perhaps if you're implementing a command line interface for something.  Now you might make the contract that it returns null if there's no appropriate action.  That leads the null checking you're talking about.An alternative solution is to never return null and instead use the Null Object pattern:Compare:towhich is a much better design because it leads to more concise code.That said, perhaps it is entirely appropriate for the findAction() method to throw an Exception with a meaningful error message -- especially in this case where you are relying on user input.  It would be much better for the findAction method to throw an Exception than for the calling method to blow up with a simple NullPointerException with no explanation.Or if you think the try/catch mechanism is too ugly, rather than Do Nothing your default action should provide feedback to the user.",
                "If you use (or planning to use) a Java IDE like JetBrains IntelliJ IDEA, Eclipse or Netbeans or a tool like findbugs then you can use annotations to solve this problem.Basically, you've got @Nullable and @NotNull.You can use in method and parameters, like this:orThe second example won't compile (in IntelliJ IDEA).When you use the first helloWorld() function in another piece of code:Now the IntelliJ IDEA compiler will tell you that the check is useless, since the helloWorld() function won't return null, ever.Using parameterif you write something like:This won't compile.Last example using @NullableDoing thisAnd you can be sure that this won't happen. :)It's a nice way to let the compiler check something more than it usually does and to enforce your contracts to be stronger. Unfortunately, it's not supported by all the compilers.In IntelliJ IDEA 10.5 and on, they added support for any other @Nullable @NotNull implementations.See blog post More flexible and configurable @Nullable/@NotNull annotations.",
                "If your method is called externally, start with something like this:Then, in the rest of that method, you'll know that object is not null.If it is an internal method (not part of an API), just document that it cannot be null, and that's it.Example:However, if your method just passes the value on, and the next method passes it on etc. it could get problematic. In that case you may want to check the argument as above.This really depends. If find that I often do something like this:So I branch, and do two completely different things. There is no ugly code snippet, because I really need to do two different things depending on the data. For example, should I work on the input, or should I calculate a good default value?It's actually rare for me to use the idiom \"if (object != null && ...\".It may be easier to give you examples, if you show examples of where you typically use the idiom.",
                "Wow, I almost hate to add another answer when we have 57 different ways to recommend the NullObject pattern, but I think that some people interested in this question may like to know that there is a proposal on the table for Java 7 to add \"null-safe handling\"\u2014a streamlined syntax for if-not-equal-null logic.The example given by Alex Miller looks like this:The ?. means only de-reference the left identifier if it is not null, otherwise evaluate the remainder of the expression as null. Some people, like Java Posse member Dick Wall and the voters at Devoxx really love this proposal, but there is opposition too, on the grounds that it will actually encourage more use of null as a sentinel value.Update: An official proposal for a null-safe operator in Java 7 has been submitted under Project Coin. The syntax is a little different than the example above, but it's the same notion.Update: The null-safe operator proposal didn't make it into Project Coin. So, you won't be seeing this syntax in Java 7.",
                "You might configure your IDE to warn you about potential null dereferencing. E.g. in Eclipse, see Preferences > Java > Compiler > Errors/Warnings/Null analysis.If you want to define a new API where undefined values make sense, use the Option Pattern (may be familiar from functional languages). It has the following advantages:Java 8 has a built-in Optional class (recommended); for earlier versions, there are library alternatives, for example Guava's Optional or FunctionalJava's Option. But like many functional-style patterns, using Option in Java (even 8) results in quite some boilerplate, which you can reduce using a less verbose JVM language, e.g. Scala or Xtend.If you have to deal with an API which might return nulls, you can't do much in Java. Xtend and Groovy have the Elvis operator ?: and the null-safe dereference operator ?., but note that this returns null in case of a null reference, so it just \"defers\" the proper handling of null.",
                "Only for this situation -Not checking if a variable is null before invoking an equals method (a string compare example below):will result in a NullPointerException if foo doesn't exist.You can avoid that if you compare your Strings like this:",
                "With Java 8 comes the new java.util.Optional class that arguably solves some of the problem. One can at least say that it improves the readability of the code, and in the case of public APIs make the API's contract clearer to the client developer.They work like that:An optional object for a given type (Fruit) is created as the return type of a method. It can be empty or contain a Fruit object:Now look at this code where we search a list of Fruit (fruits) for a given Fruit instance:You can use the map() operator to perform a computation on--or extract a value from--an optional object.  orElse() lets you provide a fallback for missing values.Of course, the check for null/empty value is still necessary, but at least the developer is conscious that the value might be empty and the risk of forgetting to check is limited.In an API built from scratch using Optional whenever a return value might be empty, and returning a plain object only when it cannot be null (convention), the client code might abandon null checks on simple object return values...Of course Optional could also be used as a method argument, perhaps a better way to indicate optional arguments than 5 or 10 overloading methods in some cases.Optional offers other convenient methods, such as orElse that allow the use of a default value, and ifPresent that works with lambda expressions.I invite you to read this article (my main source for writing this answer) in which the NullPointerException (and in general null pointer) problematic as well as the (partial) solution brought by Optional are well explained: Java Optional Objects.",
                "Depending on what kind of objects you are checking you may be able to use some of the classes in the apache commons such as: apache commons lang and apache commons collectionsExample:or (depending on what you need to check):The StringUtils class is only one of many; there are quite a few good classes in the commons that do null safe manipulation.Here follows an example of how you can use null vallidation in JAVA when you include apache library(commons-lang-2.4.jar)And if you are using Spring, Spring also has the same functionality in its package, see library(spring-2.4.6.jar)Example on how to use this static classf from spring(org.springframework.util.Assert)",
                "You have to check for object != null only if you want to handle the case where the object may be null...There is a proposal to add new annotations in Java7 to help with null / notnull params:\nhttp://tech.puredanger.com/java7/#jsr308",
                "I'm a fan of \"fail fast\" code. Ask yourself - are you doing something useful in the case where the parameter is null? If you don't have a clear answer for what your code should do in that case... i.e. - it should never be null in the first place, then ignore it and allow a NullPointerException to be thrown. The calling code will make just as much sense of an NPE as it would an IllegalArgumentException, but it'll be easier for the developer to debug and understand what went wrong if an NPE is thrown rather than your code attempting to execute some other unexpected contingency logic - which ultimately results in the application failing anyway.",
                "Rather than Null Object Pattern -- which has its uses -- you might consider situations where the null object is a bug.When the exception is thrown, examine the stack trace and work through the bug.",
                "Sometimes, you have methods that operate on its parameters that define a symmetric operation:If you know b can never be null, you can just swap it. It is most useful for equals:\nInstead of foo.equals(\"bar\"); better do \"bar\".equals(foo);.",
                "The Google collections framework offers a good and elegant way to achieve the null check.There is a method in a library class like this:And the usage is (with import static):Or in your example:",
                "Null is not a 'problem'. It is an integral part of a complete modeling tool set. Software aims to model the complexity of the world and null bears its burden. Null indicates 'No data' or 'Unknown' in Java and the like. So it is appropriate to use nulls for these purposes. I don't prefer the 'Null object' pattern; I think it rise the 'who will guard\nthe guardians' problem. \nIf you ask me what is the name of my girlfriend I'll tell you that I have no girlfriend. In the Java language I'll return null. \nAn alternative would be to throw meaningful exception to indicate some problem that can't be (or don't want to be) solved right there and delegate it somewhere higher in the stack to retry or report data access error to the user.For an 'unknown question' give 'unknown answer'. (Be null-safe where this is correct from business point of view) Checking arguments for null once inside a method before usage relieves multiple callers from checking them before a call.Previous leads to normal logic flow to get no photo of a non-existent girlfriend from my photo library.And it fits with new coming Java API (looking forward)While it is rather 'normal business flow' not to find photo stored into the DB for some person, I used to use pairs like below for some other casesAnd don't loathe to type <alt> + <shift> + <j> (generate javadoc in Eclipse) and write three additional words for you public API. This will be more than enough for all but those who don't read documentation.orThis is rather theoretical case and in most cases you should prefer java null safe API (in case it will be released in another 10 years), but NullPointerException is subclass of an Exception. Thus it is a form of Throwable that indicates conditions that a reasonable application might want to catch (javadoc)! To use the first most advantage of exceptions and separate error-handling code from 'regular' code (according to creators of Java) it is appropriate, as for me, to catch NullPointerException.Questions could arise:Q. What if getPhotoDataSource() returns null?\nA. It is up to business logic. If I fail to find a photo album I'll show you no photos. What if appContext is not initialized? This method's business logic puts up with this. If the same logic should be more strict then throwing an exception it is part of the business logic and explicit check for null should be used (case 3). The new Java Null-safe API fits better here to specify selectively what implies and what does not imply to be initialized to be fail-fast in case of programmer errors.Q. Redundant code could be executed and unnecessary resources could be grabbed.\nA. It could take place if getPhotoByName() would try to open a database connection, create PreparedStatement and use the person name as an SQL parameter at last. The approach for an unknown question gives an unknown answer (case 1) works here. Before grabbing resources the method should check parameters and return 'unknown' result if needed.Q. This approach has a performance penalty due to the try closure opening.\nA. Software should be easy to understand and modify firstly. Only after this, one could think about performance, and only if needed! and where needed! (source), and many others).PS. This approach will be as reasonable to use as the separate error-handling code from \"regular\" code principle is reasonable to use in some place. Consider the next example:PPS. For those fast to downvote (and not so fast to read documentation) I would like to say that I've never caught a null-pointer exception (NPE) in my life. But this possibility was intentionally designed by the Java creators because NPE is a subclass of Exception. We have a precedent in Java history when ThreadDeath is an Error not because it is actually an application error, but solely because it was not intended to be caught! How much NPE fits to be an Error than ThreadDeath! But it is not.Check for 'No data' only if business logic implies it.andIf appContext or dataSource is not initialized unhandled runtime NullPointerException will kill current thread and will be processed by Thread.defaultUncaughtExceptionHandler (for you to define and use your favorite logger or other notification mechanizm). If not set, ThreadGroup#uncaughtException will print stacktrace to system err. One should monitor application error log and open Jira issue for each unhandled exception which in fact is application error. Programmer should fix bug somewhere in initialization stuff.",
                "Java 7 has a new java.util.Objects utility class on which there is a requireNonNull() method. All this does is throw a NullPointerException if its argument is null, but it cleans up the code a bit. Example:The method is most useful for checking just before an assignment in a constructor, where each use of it can save three lines of code:becomes",
                "Ultimately, the only way to completely solve this problem is by using a different programming language:",
                "Common \"problem\" in Java indeed.First, my thoughts on this:I consider that it is bad to \"eat\" something when NULL was passed where NULL isn't a valid value. If you're not exiting the method with some sort of error then it means nothing went wrong in your method which is not true. Then you probably return null in this case, and in the receiving method you again check for null, and it never ends, and you end up with \"if != null\", etc..So, IMHO, null must be a critical error which prevents further execution (that is, where null is not a valid value).The way I solve this problem is this:First, I follow this convention:And finally, in the code, the first line of the public method goes like this:Note that addParam() returns self, so that you can add more parameters to check.Method validate() will throw checked ValidationException if any of the parameters is null (checked or unchecked is more a design/taste issue, but my ValidationException is checked).The message will contain the following text if, for example, \"plans\" is null:\"Illegal argument value null is encountered for parameter [plans]\"As you can see, the second value in the addParam() method (string) is needed for the user message, because you cannot easily detect passed-in variable name, even with reflection (not subject of this post anyway...).And yes, we know that beyond this line we will no longer encounter a null value so we just safely invoke methods on those objects.This way, the code is clean, easy maintainable and readable.",
                "Asking that question points out that you may be interested in error handling strategies.  How and where to handle errors is a pervasive architectural question.  There are several ways to do this.My favorite: allow the Exceptions to ripple through - catch them at the 'main loop' or in some other function with the appropriate responsibilities.  Checking for error conditions and handling them appropriately can be seen as a specialized responsibility.Sure do have a look at Aspect Oriented Programming, too - they have neat ways to insert if( o == null ) handleNull() into your bytecode.",
                "In addition to using assert you can use the following:This is slightly better than:",
                "Just don't ever use null. Don't allow it.In my classes, most fields and local variables have non-null default values, and I add contract statements (always-on asserts) everywhere in the code to make sure this is being enforced (since it's more succinct, and more expressive than letting it come up as an NPE and then having to resolve the line number, etc.).Once I adopted this practice, I noticed that the problems seemed to fix themselves. You'd catch things much earlier in the development process just by accident and realize you had a weak spot..  and more importantly.. it helps encapsulate different modules' concerns, different modules can 'trust' each other, and no more littering the code with if = null else constructs!This is defensive programming and results in much cleaner code in the long run. Always sanitize the data, e.g. here by enforcing rigid standards, and the problems go away.The contracts are like mini-unit tests which are always running, even in production, and when things fail, you know why, rather than a random NPE you have to somehow figure out.",
                "Guava, a very useful core library by Google, has a nice and useful API to avoid nulls. I find UsingAndAvoidingNullExplained very helpful.As explained in the wiki:Optional<T> is a way of replacing a nullable T reference with a\n  non-null value. An Optional may either contain a non-null T reference\n  (in which case we say the reference is \"present\"), or it may contain\n  nothing (in which case we say the reference is \"absent\"). It is never\n  said to \"contain null.\"Usage:",
                "This is a very common problem for every Java developer. So there is official support in Java\u00a08 to address these issues without cluttered code.Java 8 has introduced java.util.Optional<T>. It is a container that may or may not hold a non-null value. Java 8 has given a safer way to handle an object whose value may be null in some of the cases. It is inspired from the ideas of Haskell and Scala.In a nutshell, the Optional class includes methods to explicitly deal with the cases where a value is present or absent. However, the advantage compared to null references is that the Optional<T> class forces you to think about the case when the value is not present. As a consequence, you can prevent unintended null pointer exceptions.In above example we have a home service factory that returns a handle to multiple appliances available in the home. But these services may or may not be available/functional; it means it may result in a NullPointerException. Instead of adding a null if condition before using any service, let's wrap it in to Optional<Service>.WRAPPING TO OPTION<T>Let's consider a method to get a reference of a service from a factory. Instead of returning the service reference, wrap it with Optional. It lets the API user know that the returned service may or may not available/functional, use defensivelyAs you see Optional.ofNullable() provides an easy way to get the reference wrapped. There are another ways to get the reference of Optional, either Optional.empty() & Optional.of(). One for returning an empty object instead of retuning null and the other to wrap a non-nullable object, respectively.SO HOW EXACTLY IT HELPS TO AVOID A NULL CHECK?Once you have wrapped a reference object, Optional provides many useful methods to invoke methods on a wrapped reference without NPE.Optional.ifPresent invokes the given Consumer with a reference if it is a non-null value. Otherwise, it does nothing.Represents an operation that accepts a single input argument and returns no result. Unlike most other functional interfaces, Consumer is expected to operate via side-effects.\nIt is so clean and easy to understand. In the above code example, HomeService.switchOn(Service) gets invoked if the Optional holding reference is non-null.We use the ternary operator very often for checking null condition and return an alternative value or default value. Optional provides another way to handle the same condition without checking null. Optional.orElse(defaultObj) returns defaultObj if the Optional has a null value. Let's use this in our sample code:Now HomeServices.get() does same thing, but in a better way. It checks whether the service is already initialized of not. If it is then return the same or create a new New service. Optional<T>.orElse(T) helps to return a default value.Finally, here is our NPE as well as null check-free code:The complete post is NPE as well as Null check-free code \u2026 Really?.",
                "I like articles from Nat Pryce. Here are the links:In the articles there is also a link to a Git repository for a Java Maybe Type which I find interesting, but I don't think it alone could decrease the\nchecking code bloat. After doing some research on the Internet, I think != null code bloat could be decreased mainly by careful design.",
                "I've tried the NullObjectPattern but for me is not always the best way to go. There are sometimes when a \"no action\" is not appropiate.NullPointerException is a Runtime exception that means it's developers fault and with enough experience it tells you exactly where is the error.Now to the answer:Try to make all your attributes and its accessors as private as possible or avoid to  expose them to the clients at all. You can have the argument values in the constructor of course, but by reducing the scope you don't let the client class pass an invalid value. If you need to modify the values, you can always create a new object.  You check the values in the constructor only once and in the rest of the methods you can be almost sure that the values are not null.Of course, experience is the better way to understand and apply this suggestion.Byte!",
                "Probably the best alternative for Java 8 or newer is to use the Optional class.This is especially handy for long chains of possible null values. Example:Example on how to throw exception on null:Java 7 introduced the Objects.requireNonNull method which can be handy when something should be checked for non-nullness. Example:",
                "May I answer it more generally!We usually face this issue when the methods get the parameters in the way we not expected (bad method call is programmer's fault). For example: you expect to get an object, instead you get a null. You expect to get an String with at least one character, instead you get an empty String ...So there is no difference between:}orThey both want to make sure that we received valid parameters, before we do any other functions.As mentioned in some other answers, to avoid above problems you can follow the Design by contract pattern. Please see http://en.wikipedia.org/wiki/Design_by_contract.To implement this pattern in java, you can use core java annotations like javax.annotation.NotNull or use more sophisticated libraries like Hibernate Validator.Just a sample:Now you can safely develop the core function of your method without needing to check input parameters, they guard your methods from unexpected parameters.You can go a step further and make sure that only valid pojos could be created in your application. (sample from hibernate validator site)",
                "I highly disregard answers that suggest using the null objects in every situation. This pattern may break the contract and bury problems deeper and deeper instead of solving them, not mentioning that used inappropriately will create another pile of boilerplate code that will require future maintenance.In reality if something returned from a method can be null and the calling code has to make decision upon that, there should an earlier call that ensures the state.Also keep in mind, that null object pattern will be memory hungry if used without care. For this - the instance of a NullObject should be shared between owners, and not be an unigue instance for each of these.Also I would not recommend using this pattern where the type is meant to be a primitive type representation - like mathematical entities, that are not scalars: vectors, matrices, complex numbers and POD(Plain Old Data) objects, which are meant to hold state in form of Java built-in types. In the latter case you would end up calling getter methods with arbitrary results. For example what should a NullPerson.getName() method return?It's worth considering such cases in order to avoid absurd results.",
                "Doing this in your own code and you can avoid != null checks.Most of the time null checks seem to guard loops over collections or arrays, so just initialise them empty, you won't need any null checks.There is a tiny overhead in this, but it's worth it for cleaner code and less NullPointerExceptions.",
                "This is the most common error occurred for most of the developers.We have number of ways to handle this.Approach 1:notNull(Object object, String message)Approach 2:Approach 3:Approach 4:",
                "Java 8 has introduced a new class Optional in java.util package.Advantages of Java 8 Optional:1.) Null checks are not required.\n2.) No more NullPointerException at run-time.\n3.) We can develop clean and neat APIs.Optional - A container object which may or may not contain a non-null value. If a value is present, isPresent() will return true and get() will return the value.For more details find here oracle docs :-\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Optional.html"
            ]
        },
        {
            "tag": "HashMap",
            "patterns": [
                "What are the differences between a HashMap and a Hashtable in Java?",
                "HashMap",
                "Hashtable"
            ],
            "responses": [
                "There are several differences between HashMap and Hashtable in Java:Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.Hashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.One of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap.  This wouldn't be as easy if you were using Hashtable.Since synchronization is not an issue for you, I'd recommend HashMap. If synchronization becomes an issue, you may also look at ConcurrentHashMap.",
                "Note, that a lot of the answers state that Hashtable is synchronized.  In practice this buys you very little.  The synchronization is on the accessor/mutator methods will stop two threads adding or removing from the map concurrently, but in the real world, you will often need additional synchronization.A very common idiom is to \"check then put\" \u2014 i.e. look for an entry in the Map, and add it if it does not already exist. This is not in any way an atomic operation whether you use Hashtable or HashMap.An equivalently synchronised HashMap can be obtained by:But to correctly implement this logic you need additional synchronisation of the form:Even iterating over a Hashtable's entries (or a HashMap obtained by Collections.synchronizedMap) is not thread-safe unless you also guard the Map against being modified through additional synchronization.Implementations of the ConcurrentMap interface (for example ConcurrentHashMap) solve some of this by including thread safe check-then-act semantics such as:",
                "Hashtable is considered legacy code. There's nothing about Hashtable that can't be done using HashMap or derivations of HashMap, so for new code, I don't see any justification for going back to Hashtable.",
                "This question is often asked in interviews to check whether the candidate understands the correct usage of collection classes and is aware of alternative solutions available.Note on Some Important Terms:HashMap can be synchronized byMap m = Collections.synchronizeMap(hashMap);Map provides Collection views instead of direct support for iteration via Enumeration objects. Collection views greatly enhance the expressiveness of the interface, as discussed later in this section. Map allows you to iterate over keys, values, or key-value pairs; Hashtable does not provide the third option. Map provides a safe way to remove entries in the midst of iteration; Hashtable did not. Finally, Map fixes a minor deficiency in the Hashtable interface. Hashtable has a method called contains, which returns true if the Hashtable contains a given value. Given its name, you'd expect this method to return true if the Hashtable contained a given key because the key is the primary access mechanism for a Hashtable. The Map interface eliminates this source of confusion by renaming the method containsValue. Also, this improves the interface's consistency \u2014 containsValue parallels containsKey.The Map Interface",
                "HashMap: An implementation of the Map interface that uses hash codes to index an array.\nHashtable: Hi, 1998 called. They want their collections API back.Seriously though, you're better off staying away from Hashtable altogether. For single-threaded apps, you don't need the extra overhead of synchronisation. For highly concurrent apps, the paranoid synchronisation might lead to starvation, deadlocks, or unnecessary garbage collection pauses. Like Tim Howland pointed out, you might use ConcurrentHashMap instead.",
                "Keep in mind that HashTable was legacy class before Java Collections Framework (JCF) was introduced and was later retrofitted to implement the Map interface. So was Vector and Stack.Therefore, always stay away from them in new code since there always better alternative in the JCF as others had pointed out.Here is the Java collection cheat sheet that you will find useful. Notice the gray block contains the legacy class HashTable,Vector and Stack.",
                "There are many good answers already posted. I'm adding few new points and summarizing it.HashMap and Hashtable both are used to store data in key and value form. Both are using hashing technique to store unique keys.\nBut there are many differences between HashMap and Hashtable classes that are given below.HashMapHashtableFurther reading What is difference between HashMap and Hashtable in Java?",
                "Take a look at this chart. It provides comparisons between different data structures along with HashMap and Hashtable. The comparison is precise, clear and easy to understand.Java Collection Matrix",
                "In addition to what izb said, HashMap allows null values, whereas the Hashtable does not.Also note that Hashtable extends the Dictionary class, which as the Javadocs state, is obsolete and has been replaced by the Map interface.",
                "Hashtable is similar to the HashMap and has a similar interface. It is recommended that you use HashMap, unless you require support for legacy applications or you need synchronisation, as the Hashtables methods are synchronised. So in your case as you are not multi-threading, HashMaps are your best bet.",
                "Hashtable is synchronized, whereas HashMap isn't. That makes Hashtable slower than Hashmap.For single thread applications, use HashMap since they are otherwise the same in terms of functionality.",
                "Another key difference between hashtable and hashmap is that Iterator in the HashMap is  fail-fast  while the enumerator for the Hashtable is not and throw ConcurrentModificationException if any other Thread modifies the map structurally  by adding or removing any element except Iterator's own remove()  method. But this is not a guaranteed behavior and will be done by JVM on best effort.\"My source: http://javarevisited.blogspot.com/2010/10/difference-between-hashmap-and.html",
                "Beside all the other important aspects already mentioned here, Collections API (e.g. Map interface) is being modified all the time to conform to the \"latest and greatest\" additions to Java spec.For example, compare Java 5 Map iterating:versus the old Hashtable approach:In Java 1.8 we are also promised to be able to construct and access HashMaps like in good old scripting languages:Update: No, they won't land in 1.8... :(Are Project Coin's collection enhancements going to be in JDK8?",
                "HashTable is synchronized, if you are using it in a single thread you can use HashMap, which is an unsynchronized version. Unsynchronized objects are often a little more performant. By the way if multiple threads access a HashMap concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. \nYoun can wrap a unsynchronized map in a synchronized one using :HashTable can only contain non-null object as a key or as a value. HashMap can contain one null key and null values.The iterators returned by Map are fail-fast, if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own remove method, the iterator will throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Whereas the Enumerations returned by Hashtable's keys and elements methods are not fail-fast.HashTable and HashMap are member of the Java Collections Framework (since Java 2 platform v1.2, HashTable was retrofitted to implement the Map interface).HashTable is considered legacy code, the documentation advise to use ConcurrentHashMap in place of Hashtable if a thread-safe highly-concurrent implementation is desired.HashMap doesn't guarantee the order in which elements are returned. For HashTable I guess it's the same but I'm not entirely sure, I don't find ressource that clearly state that.",
                "HashMap and Hashtable have significant algorithmic differences as well. No one has mentioned this before so that's why I am bringing it up. HashMap will construct a hash table with power of two size, increase it dynamically such that you have at most about eight elements (collisions) in any bucket and will stir the elements very well for general element types. However, the Hashtable implementation provides better and finer control over the hashing if you know what you are doing, namely you can fix the table size using e.g. the closest prime number to your values domain size and this will result in better performance than HashMap i.e. less collisions for some cases.Separate from the obvious differences discussed extensively in this question, I see the Hashtable as a \"manual drive\" car where you have better control over the hashing and the HashMap as the \"automatic drive\" counterpart that will generally perform well.",
                "Based on the info here, I'd recommend going with HashMap.  I think the biggest advantage is that Java will prevent you from modifying it while you are iterating over it, unless you do it through the iterator.",
                "A Collection \u2014 sometimes called a container \u2014 is simply an object that groups multiple elements into a single unit. Collections are used to store, retrieve, manipulate, and communicate aggregate data. A collections framework W is a unified architecture for representing and manipulating collections.The HashMap JDK1.2 and Hashtable JDK1.0, both are used to represent a group of objects that are represented in <Key, Value> pair. Each <Key, Value> pair is called Entry object. The collection of Entries is referred by the object of HashMap and Hashtable. Keys in a collection must be unique or distinctive. [as they are used to retrieve a mapped value a particular key. values in a collection can be duplicated.]\u00ab Superclass, Legacy and Collection Framework memberHashtable is a legacy class introduced in JDK1.0, which is a subclass of Dictionary class. From JDK1.2 Hashtable is re-engineered to implement the Map interface to make a member of collection framework. HashMap is a member of Java Collection Framework right from the beginning of its introduction in JDK1.2. HashMap is the subclass of the AbstractMap class.\u00ab Initial capacity and Load factorThe capacity is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. Note that the hash table is open: in the case of a \"hash collision\", a single bucket stores multiple entries, which must be searched sequentially. The load factor is a measure of how full the hash table is allowed to get before its capacity is automatically increased.HashMap constructs an empty hash table with the default initial capacity (16) and the default load factor (0.75). Where as Hashtable constructs empty hashtable with a default initial capacity (11) and load factor/fill ratio (0.75).\u00ab Structural modification in case of hash collisionHashMap, Hashtable in case of hash collisions they store the map entries in linked lists. From Java8 for HashMap if hash bucket grows beyond a certain threshold, that bucket will switch from linked list of entries to a balanced tree. which improve worst-case performance from O(n) to O(log n). While converting the list to binary tree, hashcode is used as a branching variable. If there are two different hashcodes in the same bucket, one is considered bigger and goes to the right of the tree and other one to the left. But when both the hashcodes are equal, HashMap assumes that the keys are comparable, and compares the key to determine the direction so that some order can be maintained. It is a good practice to make the keys of HashMap comparable. On adding entries if bucket size reaches TREEIFY_THRESHOLD = 8 convert linked list of entries to a balanced tree, on removing entries less than TREEIFY_THRESHOLD  and at most UNTREEIFY_THRESHOLD = 6 will reconvert  balanced tree to linked list of entries. Java 8 SRC, stackpost\u00ab Collection-view iteration, Fail-Fast and Fail-SafeIterator is a fail-fast in nature. i.e it throws ConcurrentModificationException if a collection is modified while iterating other than it\u2019s own remove() method. Where as Enumeration is fail-safe in nature. It doesn\u2019t throw any exceptions if a collection is modified while iterating.According to Java API Docs, Iterator is always preferred over the Enumeration.NOTE: The functionality of Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.In Java 5 introduced ConcurrentMap Interface: ConcurrentHashMap - a highly concurrent, high-performance ConcurrentMap implementation backed by a hash table. This implementation never blocks when performing retrievals and allows the client to select the concurrency level for updates. It is intended as a drop-in replacement for Hashtable: in addition to implementing ConcurrentMap, it supports all of the \"legacy\" methods peculiar to Hashtable.Each HashMapEntrys value is volatile thereby ensuring fine grain consistency for contended modifications and subsequent reads; each read reflects the most recently completed updateIterators and Enumerations are Fail Safe - reflecting the state at some point since the creation of iterator/enumeration; this allows for simultaneous reads and modifications at the cost of reduced consistency. They do not throw ConcurrentModificationException. However, iterators are designed to be used by only one thread at a time.Like Hashtable but unlike HashMap, this class does not allow null to be used as a key or value.\u00ab Null Keys And Null ValuesHashMap allows maximum one null key and any number of null values. Where as Hashtable doesn\u2019t allow even a single null key and null value, if the key or value null is then it throws NullPointerException. Example\u00ab Synchronized, Thread SafeHashtable is internally synchronized. Therefore, it is very much safe to use Hashtable in multi threaded applications. Where as HashMap is not internally synchronized. Therefore, it is not safe to use HashMap in multi threaded applications without external synchronization. You can externally synchronize HashMap using Collections.synchronizedMap() method.\u00ab PerformanceAs Hashtable is internally synchronized, this makes Hashtable slightly slower than the HashMap.@See",
                "For threaded apps, you can often get away with ConcurrentHashMap- depends on your performance requirements.",
                "1.Hashmap and HashTable both store key and value.2.Hashmap can store one key as null. Hashtable can't store null.3.HashMap is not synchronized but Hashtable is synchronized.4.HashMap can be synchronized with Collection.SyncronizedMap(map)",
                "Apart from the differences already mentioned, it should be noted that since Java 8, HashMap dynamically replaces the Nodes (linked list) used in each bucket with TreeNodes (red-black tree), so that even if high hash collisions exist, the worst case when searching isO(log(n)) for HashMap Vs O(n) in Hashtable.*The aforementioned improvement has not been applied to Hashtable yet, but only to HashMap, LinkedHashMap, and ConcurrentHashMap.FYI, currently,",
                "There are 5 basic differentiations with HashTable and HashMaps.",
                "HashMap: It is a class available inside java.util package and it is used to store the element in key and value format.Hashtable: It is a legacy class which is being recognized inside collection framework.",
                "My small contribution :First and most significant different between Hashtable and HashMap is that, HashMap is not thread-safe  while Hashtable is a thread-safe collection.Second important difference between Hashtable and HashMap is performance, since HashMap is not synchronized it perform better than Hashtable.Third difference on Hashtable vs HashMap is that Hashtable is obsolete class and you should be using ConcurrentHashMap in place of Hashtable in Java.",
                "HashTable is a legacy class in the jdk that shouldn't be used anymore. Replace usages of it with ConcurrentHashMap. If you don't require thread safety, use HashMap which isn't threadsafe but faster and uses less memory.",
                "HashMap and HashTable1) Hashtable and Hashmap implement the java.util.Map interface\n2) Both Hashmap and Hashtable is the hash based collection. and working on hashing.\nso these are similarity of HashMap and HashTable.1) First difference is HashMap is not thread safe While HashTable is ThreadSafe\n2) HashMap is performance wise better because it is not thread safe. while Hashtable performance wise is not better because it is thread safe. so multiple thread can not access Hashtable at the same time.",
                "HashMap and Hashtable both are used to store data in key and value form. Both are using hashing technique to store unique keys.\nut there are many differences between HashMap and Hashtable classes that are given below.",
                "Hashtable:Hashtable is a data structure that retains values of key-value pair. It doesn\u2019t allow null for both the keys and the values. You will get a NullPointerException if you add null value. It is synchronized. So it comes with its cost. Only one thread can access HashTable at a particular time.Example :HashMap:HashMap is like Hashtable but it also accepts key value pair. It allows null for both the keys and the values. Its performance better is better than HashTable, because it is unsynchronized.Example:",
                "Since Hashtable in Java is a subclass of Dictionary class which is now obsolete due to the existence of Map Interface, it is not used anymore. Moreover, there isn't anything you can't do with a class that implements the Map Interface that you can do with a Hashtable.",
                "Old and classic topic, just want to add this helpful blog that explains this:http://blog.manishchhabra.com/2012/08/the-5-main-differences-betwen-hashmap-and-hashtable/Blog by Manish ChhabraThe 5 main differences betwen HashMap and HashtableHashMap and Hashtable both implement java.util.Map interface but there\n  are some differences that Java developers must understand to write\n  more efficient code. As of the Java 2 platform v1.2, Hashtable class\n  was retrofitted to implement the Map interface, making it a member of\n  the Java Collections Framework.One of the major differences between HashMap and Hashtable is that HashMap is non-synchronized whereas Hashtable is synchronized, which\n  means Hashtable is thread-safe and can be shared between multiple\n  threads but HashMap cannot be shared between multiple threads without\n  proper synchronization. Java 5 introduced ConcurrentHashMap which is\n  an alternative of Hashtable and provides better scalability than\n  Hashtable in Java.Synchronized means only one thread can modify a hash\n  table at one point of time. Basically, it means that any thread before\n  performing an update on a hashtable will have to acquire a lock on the\n  object while others will wait for lock to be released.The HashMap class is roughly equivalent to Hashtable, except that it permits nulls. (HashMap allows null values as key and value whereas\n  Hashtable doesn\u2019t allow nulls).The third significant difference between HashMap vs Hashtable is that Iterator in the HashMap is a fail-fast iterator while the\n  enumerator for the Hashtable is not and throw\n  ConcurrentModificationException if any other Thread modifies the map\n  structurally by adding or removing any element except Iterator\u2019s own\n  remove() method. But this is not a guaranteed behavior and will be\n  done by JVM on best effort. This is also an important difference\n  between Enumeration and Iterator in Java.One more notable difference between Hashtable and HashMap is that because of thread-safety and synchronization Hashtable is much slower\n  than HashMap if used in Single threaded environment. So if you don\u2019t\n  need synchronization and HashMap is only used by one thread, it out\n  perform Hashtable in Java.HashMap does not guarantee that the order of the map will remain constant over time.Note that HashMap can be synchronized byIn Summary there are significant differences between Hashtable and\n  HashMap in Java e.g. thread-safety and speed and based upon that only\n  use Hashtable if you absolutely need thread-safety, if you are running\n  Java 5 consider using ConcurrentHashMap in Java."
            ]
        },
        {
            "tag": "ArrayList",
            "patterns": [
                "Create ArrayList from array",
                "ArrayList"
            ],
            "responses": [
                "Given:The simplest answer is to do:This will work fine.  But some caveats:",
                "(old thread, but just 2 cents as none mention Guava or other libs and some other details)It's worth pointing out the Guava way, which greatly simplifies these shenanigans:Use the ImmutableList class and its of() and copyOf() factory methods (elements can't be null):Use the Lists class and its newArrayList() factory methods:Please also note the similar methods for other data structures in other classes, for instance in Sets.The main attraction could be to reduce the clutter due to generics for type-safety, as the use of the Guava factory methods allow the types to be inferred most of the time. However, this argument holds less water since Java 7 arrived with the new diamond operator.But it's not the only reason (and Java 7 isn't everywhere yet): the shorthand syntax is also very handy, and the methods initializers, as seen above, allow to write more expressive code. You do in one Guava call what takes 2 with the current Java Collections.Use the JDK's Arrays class and its asList() factory method, wrapped with a Collections.unmodifiableList():Note that the returned type for asList() is a List using a concrete ArrayList implementation, but it is NOT java.util.ArrayList. It's an inner type, which emulates an ArrayList but actually directly references the passed array and makes it \"write through\" (modifications are reflected in the array).It forbids modifications through some of the List API's methods by way of simply extending an AbstractList (so, adding or removing elements is unsupported), however it allows calls to set() to override elements. Thus this list isn't truly immutable and a call to asList() should be wrapped with Collections.unmodifiableList().See the next step if you need a mutable list.Same as above, but wrapped with an actual java.util.ArrayList:",
                "Since this question is pretty old, it surprises me that nobody suggested the simplest form yet:As of Java 5, Arrays.asList() takes a varargs parameter and you don't have to construct the array explicitly.",
                "Make sure that myArray is the same type as T. You'll get a compiler error if you try to create a List<Integer> from an array of int, for example.",
                "Another way (although essentially equivalent to the new ArrayList(Arrays.asList(array)) solution performance-wise:",
                "In Java 9, you can use List.of static factory method in order to create a List literal. Something like the following:This would return an immutable list containing three elements. If you want a mutable list, pass that list to the ArrayList constructor:JEP 269 provides some convenience factory methods for Java Collections API. These immutable static factory methods are built into the List, Set, and Map interfaces in Java 9 and later.",
                "You probably just need a List, not an ArrayList.  In that case you can just do:",
                "Another update, almost ending year 2014, you can do it with Java 8 too:A few characters would be saved, if this could be just a List",
                "If you use :you may create and fill two lists ! Filling twice a big list is exactly what you don't want to do because it will create another Object[] array each time the capacity needs to be extended.Fortunately the JDK implementation is fast and Arrays.asList(a[]) is very well done. It create a kind of ArrayList named Arrays.ArrayList where the Object[] data points directly to the array.The dangerous side is that if you change the initial array, you change the List ! Are you sure you want that ? Maybe yes, maybe not.If not, the most understandable way is to do this :Or as said @glglgl, you can create another independant ArrayList with :I love to use Collections, Arrays, or Guava. But if it don't fit, or you don't feel it, just write another inelegant line instead.",
                "In Java 9 you can use:",
                "According with the question the answer using java 1.7 is:However it's better always use the interface:",
                "Since Java 8 there is an easier way to transform:",
                "You can convert using different methodsList<Element> list = Arrays.asList(array);List<Element> list = new ArrayList();\nCollections.addAll(list, array);Arraylist list = new Arraylist();\nlist.addAll(Arrays.asList(array));For more detail you can refer to http://javarevisited.blogspot.in/2011/06/converting-array-to-arraylist-in-java.html",
                "as all said this will do soand the common newest way to create array is observableArraysObservableList: A list that allows listeners to track changes when they occur.for Java SE you can trythat is according to Oracle DocsobservableArrayList()\n  Creates a new empty observable list that is backed by an arraylist.\n  observableArrayList(E... items)\n  Creates a new observable array list with items added to it.also in Java 9 it's a little bit easy:",
                "You also can do it with stream in Java 8.",
                "If we see the definition of Arrays.asList() method you will get something like this:So, you might initialize arraylist like this:Note : each new Element(int args) will be treated as Individual Object and can be passed as a var-args.There might be another answer for this question too.\nIf you see declaration for java.util.Collections.addAll() method you will get something like this:So, this code is also useful to do so",
                "If the array is of a primitive type, the given answers won't work. But since Java 8 you can use:",
                "Another simple way is to add all elements from the array to a new ArrayList using a for-each loop.",
                "Even though there are many perfectly written answers to this question, I will add my inputs.Say you have Element[] array = { new Element(1), new Element(2), new Element(3) };New ArrayList can be created in the following waysAnd they very well support all operations of ArrayListBut the following operations returns just a List view of an ArrayList and not actual ArrayList.Therefore, they will give error when trying to make some ArrayList operationsMore on List representation of array link.",
                "Simplest way to do so is by adding following code. Tried and Tested.",
                "Another Java8 solution (I may have missed the answer among the large set. If so, my apologies). This creates an ArrayList (as opposed to a List) i.e. one can delete elementsOutput is... \nHello \nworld",
                "You can do it in java 8 as follows",
                "We can easily convert an array to ArrayList.\nWe use Collection interface's addAll() method for the purpose of copying content from one list to another.",
                "Use the following code to convert an element array into an ArrayList.",
                "Given Object Array:Convert Array to List:Convert Array to ArrayListConvert Array to LinkedListPrint List:OUTPUT123",
                "Already everyone has provided enough good answer for your problem. \nNow from the all suggestions, you need to decided which will fit your requirement. There are two types of collection which you need to know. One is unmodified collection and other one collection which will allow you to modify the object later.So, Here I will give short example for two use cases.Immutable collection creation :: When you don't want to modify the collection object after creationList<Element> elementList = Arrays.asList(array)Mutable collection creation :: When you may want to modify the created collection object after creation.List<Element> elementList = new ArrayList<Element>(Arrays.asList(array));",
                "Java 8\u2019s Arrays class provides a stream() method which has overloaded versions accepting both primitive arrays and Object arrays.",
                "You could also use polymorphism to declare the ArrayList while calling the Arrays-interface as following:List<Element> arraylist = new ArrayList<Integer>(Arrays.asList(array));Example:This should work like a charm."
            ]
        },
        {
            "tag": "random",
            "patterns": [
                "How do I generate random integers within a specific range in Java?",
                "random numbers",
                "generate random"
            ],
            "responses": [
                "In Java 1.7 or later, the standard way to do this is as follows:See the relevant JavaDoc.  This approach has the advantage of not needing to explicitly initialize a java.util.Random instance, which can be a source of confusion and error if used inappropriately.However, conversely there is no way to explicitly set the seed so it can be difficult to reproduce results in situations where that is useful such as testing or saving game states or similar.  In those situations, the pre-Java 1.7 technique shown below can be used.Before Java 1.7, the standard way to do this is as follows:See the relevant JavaDoc.  In practice, the java.util.Random class is often preferable to java.lang.Math.random().In particular, there is no need to reinvent the random integer generation wheel when there is a straightforward API within the standard library to accomplish the task.",
                "Note that this approach is more biased and less efficient than a nextInt approach, https://stackoverflow.com/a/738651/360211One standard pattern for accomplishing this is:The Java Math library function Math.random() generates a double value in the range [0,1). Notice this range does not include the 1.In order to get a specific range of values first, you need to multiply by the magnitude of the range of values you want covered.This returns a value in the range [0,Max-Min), where 'Max-Min' is not included.For example, if you want [5,10), you need to cover five integer values so you useThis would return a value in the range [0,5), where 5 is not included.Now you need to shift this range up to the range that you are targeting. You do this by adding the Min value.You now will get a value in the range [Min,Max). Following our example, that means [5,10):But, this still doesn't include Max and you are getting a double value. In order to get the Max value included, you need to add 1 to your range parameter (Max - Min) and then truncate the decimal part by casting to an int. This is accomplished via:And there you have it. A random integer value in the range [Min,Max], or per the example [5,10]:",
                "Use:The integer x is now the random number that has a possible outcome of 5-10.",
                "Use:",
                "With java-8 they introduced the method ints(int randomNumberOrigin, int randomNumberBound) in the Random class.For example if you want to generate five random integers (or a single one) in the range [0, 10], just do:The first parameter indicates just the size of the IntStream generated (which is the overloaded method of the one that produces an unlimited IntStream).If you need to do multiple separate calls, you can create an infinite primitive iterator from the stream:You can also do it for double and long values.",
                "You can edit your second code example to:",
                "Just a small modification of your first solution would suffice.See more here for implementation of Random",
                "ThreadLocalRandom equivalent of class java.util.Random for multithreaded environment. Generating a random number is carried out locally in each of the threads. So we have a better performance by reducing the conflicts.x,y - intervals e.g. (1,10)",
                "The Math.Random class in Java is 0-based. So, if you write something like this:x will be between 0-9 inclusive.So, given the following array of 25 items, the code to generate a random number between 0 (the base of the array) and array.length would be:Since i.length will return 25, the nextInt( i.length ) will return a number between the range of 0-24. The other option is going with Math.Random which works in the same way.For a better understanding, check out forum post Random Intervals (archive.org).",
                "It can be done by simply doing the statement:Below is its source code.It is just clean and simple.",
                "Forgive me for being fastidious, but the solution suggested by the majority, i.e., min + rng.nextInt(max - min + 1)), seems perilous due to the fact that:A foolproof solution would return correct results for any min <= max within [Integer.MIN_VALUE, Integer.MAX_VALUE]. Consider the following naive implementation:Although inefficient, note that the probability of success in the while loop will always be 50% or higher.",
                "I wonder if any of the random number generating methods provided by an Apache Commons Math library would fit the bill.For example: RandomDataGenerator.nextInt or RandomDataGenerator.nextLong",
                "I use this:You can cast it to an Integer if you want.",
                "As of Java 7, you should no longer use Random. For most uses, the\n  random number generator of choice is now\n  ThreadLocalRandom.For fork join pools and parallel\n  streams, use SplittableRandom.Joshua Bloch. Effective Java. Third Edition.For fork join pools and parallel streams, use SplittableRandom that is usually faster, has a better statistical independence and uniformity properties in comparison with Random.To generate a random int in the range [0, 1_000]:To generate a random int[100] array of values in the range [0, 1_000]:To return a Stream of random values:",
                "Let us take an example.Suppose I wish to generate a number between 5-10:Let us understand this...Initialize max with highest value and min with the lowest value.Now, we need to determine how many possible values can be obtained. For this example, it would be:5, 6, 7, 8, 9, 10So, count of this would be max - min + 1.i.e. 10 - 5 + 1 = 6The random number will generate a number between 0-5.i.e. 0, 1, 2, 3, 4, 5Adding the min value to the random number would produce:5, 6, 7, 8, 9, 10Hence we obtain the desired range.",
                "Generate a random number for the difference of min and max by using the nextint(n) method and then add min number to the result:",
                "To generate a random number \"in between two numbers\", use the following code:This gives you a random number in between 1 (inclusive) and 11 (exclusive), so initialize the upperBound value by adding 1. For example, if you want to generate random number between 1 to 10 then initialize the upperBound number with 11 instead of 10.",
                "Just use the Random class:",
                "These methods might be convenient to use:This method will return a random number between the provided minimum and maximum value:and this method will return a random number from the provided minimum and maximum value (so the generated number could also be the minimum or maximum number):",
                "In case of rolling a dice it would be random number between 1 to 6 (not 0 to 6), so:",
                "Or take a look to RandomUtils from Apache Commons.",
                "You can achieve that concisely in Java 8:",
                "Here's a helpful class to generate random ints in a range with any combination of inclusive/exclusive bounds:",
                "Another option is just using Apache Commons:",
                "I found this example Generate random numbers :This example generates random integers in a specific range.An example run of this class :",
                "Here is a simple sample that shows how to generate random number from closed [min, max] range, while min <= max is trueYou can reuse it as field in hole class, also having all Random.class methods in one placeResults example:Sources:",
                "It's better to use SecureRandom rather than just Random.",
                "This is working fine."
            ]
        },
        {
            "tag": "UserManager",
            "patterns": [
                "Proper use cases for Android UserManager.isUserAGoat()?",
                "UserManager",
                "What is UserManager?"
            ],
            "responses": [
                "From Android R, this method always returns false. Google says that this is done \"to protect goat privacy\":From their source, the method used to return false until it was changed in API 21.It looks like the method has no real use for us as developers. Someone has previously stated that it might be an Easter egg.In API 21 the implementation was changed to check if there is an installed app with the package com.coffeestainstudios.goatsimulatorHere is the source and the change.",
                "I don't know if this was \"the\" official use case, but the following produces a warning in Java (that can further produce compile errors if mixed with return statements, leading to unreachable code):However this is legal:So I often find myself writing a silly utility method for the quickest way to dummy out a code block, then in completing debugging find all calls to it, so provided the implementation doesn't change this can be used for that.JLS points out if (false) does not trigger \"unreachable code\" for the specific reason that this would break support for debug flags, i.e., basically this use case (h/t @auselen). (static final boolean DEBUG = false; for instance).I replaced while for if, producing a more obscure use case. I believe you can trip up your IDE, like Eclipse, with this behavior, but this edit is 4 years into the future, and I don't have an Eclipse environment to play with.",
                "This appears to be an inside joke at Google. It's also featured in the Google Chrome task manager. It has no purpose, other than some engineers finding it amusing. Which is a purpose by itself, if you will.There is even a huge Chromium bug report about too many teleported goats.The following Chromium source code snippet is stolen from the HN comments.",
                "Complementing the @djechlin answer (good answer by the way!), this function call could be also used as dummy code to hold a breakpoint in an IDE when you want to stop in some specific iteration or a particular recursive call, for example:isUserAGoat() could be used instead of a dummy variable declaration that will be shown in the IDE as a warning and, in Eclipse particular case, will clog the breakpoint mark, making it difficult to enable/disable it. If the method is used as a convention, all the invocations could be later filtered by some script (during commit phase maybe?).Google guys are heavy Eclipse users (they provide several of their projects as Eclipse plugins: Android SDK, GAE, etc), so the @djechlin answer and this complementary answer make a lot of sense (at least for me).",
                "There's a funny named method/constant/whatever in each version of Android.The only practical use I ever saw was in the Last Call for Google I/O Contest where they asked what it was for a particular version, to see if contestants read the API diff report for each release. The contest had programming problems too, but generally some trivia that could be graded automatically first to get the number of submissions down to reasonable amounts that would be easier to check.",
                "In the discipline of speech recognition, users are divided into goats and sheeps.For instance, here on page 89:Sheeps are people for whom speech recognition works exceptionally well, and goats are people for whom it works exceptionally poorly. Only the voice recognizer knows what separates them. People can't predict whose voice will be recognized easily and whose won't. The best policy is to design the interface so it can handle all kinds of voices in all kinds of environmentsMaybe, it is planned to mark Android users as goats in the future to be able to configure the speech recognition engine for goats' needs. ;-)",
                "As of API 21 (the first Android 5.0/Lollipop SDK), this detects whether the Goat Simulator app is installed:This should make it clear that djechlin's suggestion of using it as a warning-free if (false) is a potentially disastrous strategy. What previously returned false for every device now returns a seemingly random value: if this was buried deep enough in your code it could take a long time to figure out where your new bugs are coming from.Bottom line: if you don't control the implementation of a method and decide to use it for purposes other than stated in the API documentation, you're heading for trouble.",
                "Google has a serious liking for goats and goat based Easter eggs. There has even been previous Stack\u00a0Overflow posts about it.As has been mentioned in previous posts, it also exists within the Chrome task manager (it first appeared in the wild in 2009):And then in Windows, Linux and Mac versions of Chrome early 2010). The number of \"Goats Teleported\" is in fact random:Other Google references to goats include:The earliest correlation of goats and Google belongs in the original \"Mowing with goats\" blog post, as far as I can tell.We can safely assume that it's merely an Easter egg and has no real-world use, except for returning false.",
                "There is a similar call, isUserAMonkey(), that returns true if the MonkeyRunner tool is being used. The SDK explanation is just as curious as this one.Returns true if the user interface is currently being messed with by a monkey.Here is the source.I expect that this was added in anticipation of a new SDK tool named something with a goat and will actually be functional to test for the presence of that tool.Also see a similar question, Strange function in ActivityManager: isUserAMonkey. What does this mean, what is its use?.",
                "Funny Easter Egg. \nIn Ubuntu version of Chrome, in Task Manager (shift+esc), with right-click you can add a sci-fi column that in italian version is \"Capre Teletrasportate\" (Teleported Goats).A funny theory about it is here.",
                "It's not an inside jokeApparently it's just an application checker for\nGoat Simulator - by Coffee Stain StudiosIf you have Goat Simulator installed, you're a goat.\nIf you don't have it installed, you're not a goat.I imagine it was more of a personal experiment by one of the developers, most likely to find people with a common interest.",
                "It's important from a usability and accessibility angle to know whether or not your user is a Goat.Goats actually have very different needs from their software if they are going to truly benefit from all the information age has to offer.I think it wonderful that some kind developer was concerned about ALL of us users, not just the fashionable ones."
            ]
        },
        {
            "tag": "java_map",
            "patterns": [
                "How do I efficiently iterate over each entry in a Java Map?",
                "Java Map",
                "Iterate over Java Map"
            ],
            "responses": [
                "On Java 10+:",
                "To summarize the other answers and combine them with what I know, I found 10 main ways to do this (see below). Also, I wrote some performance tests (see results below). For example, if we want to find the sum of all of the keys and values of a map, we can write:Using iterator and Map.EntryUsing foreach and Map.EntryUsing forEach from Java 8Using keySet and foreachUsing keySet and iteratorUsing for and Map.EntryUsing the Java 8 Stream APIUsing the Java 8 Stream API parallelUsing IterableMap of Apache CollectionsUsing MutableMap of Eclipse (CS) collectionsPerfomance tests (mode = AverageTime, system = Windows\u00a08.1 64-bit, Intel i7-4790 3.60 GHz, 16\u00a0GB)For a small map (100 elements), score 0.308 is the bestFor a map with 10000 elements,  score 37.606 is the bestFor a map with 100000 elements,  score 1184.767 is the bestGraphs (performance tests depending on map size)Table (perfomance tests depending on map size)All tests are on GitHub.",
                "In Java 8 you can do it clean and fast using the new lambdas features:The type of k and v will be inferred by the compiler and there is no need to use Map.Entry anymore.Easy-peasy!",
                "Yes, the order depends on the specific Map implementation.@ScArcher2 has the more elegant Java 1.5 syntax. In 1.4, I would do something like this:",
                "Typical code for iterating over a map is:HashMap is the canonical map implementation and doesn't make guarantees (or though it should not change the order if no mutating operations are performed on it). SortedMap will return entries based on the natural ordering of the keys, or a Comparator, if provided. LinkedHashMap will either return entries in insertion-order or access-order depending upon how it has been constructed. EnumMap returns entries in the natural order of keys.(Update: I think this is no longer true.) Note, IdentityHashMap entrySet iterator currently has a peculiar implementation which returns the same Map.Entry instance for every item in the entrySet! However, every time a new iterator advances the Map.Entry is updated.",
                "Example of using iterator and generics:",
                "This is a two part question:How to iterate over the entries of a Map - @ScArcher2 has answered that perfectly.What is the order of iteration - if you are just using Map, then strictly speaking, there are no ordering guarantees.  So you shouldn't really rely on the ordering given by any implementation.  However, the SortedMap interface extends Map and provides exactly what you are looking for - implementations will aways give a consistent sort order.NavigableMap is another useful extension - this is a SortedMap with additional methods for finding entries by their ordered position in the key set.  So potentially this can remove the need for iterating in the first place - you might be able to find the specific entry you are after using the higherEntry, lowerEntry, ceilingEntry, or floorEntry methods.  The descendingMap method even gives you an explicit method of reversing the traversal order.",
                "There are several ways to iterate over map.Here is comparison of their performances for a common data set stored in map by storing a million key value pairs in map and will iterate over map.1) Using entrySet() in for each loop50 milliseconds2) Using keySet() in for each loop76 milliseconds3) Using entrySet() and iterator50 milliseconds4) Using keySet() and iterator75 millisecondsI have referred this link.",
                "FYI, you can also use map.keySet() and map.values() if you're only interested in keys/values of the map and not the other.",
                "The correct way to do this is to use the accepted answer as it is the most efficient. I find the following code looks a bit cleaner.",
                "With Java 8, you can iterate Map using forEach and lambda expression,",
                "With Eclipse Collections, you would use the forEachKeyValue method on the MapIterable interface, which is inherited by the MutableMap and ImmutableMap interfaces and their implementations.Using an anonymous inner class, you can write the code as follows:Note: I am a committer for Eclipse Collections.",
                "We have got forEach method that accepts a lambda expression. We have also got stream APIs. Consider a map:Iterate over keys:Iterate over values:Iterate over entries (Using forEach and Streams):The advantage with streams is they can be parallelized easily in case we want to. We simply need to use parallelStream() in place of stream() above.forEachOrdered vs forEach with streams ?\nThe forEach does not follow encounter order (if defined) and is inherently non-deterministic in nature where as the forEachOrdered does. So forEach does not guarantee that the order would be kept. Also check this for more.",
                "In theory, the most efficient way will depend on which implementation of Map. The official way to do this is to call map.entrySet(), which returns a set of Map.Entry, each of which contains a key and a value (entry.getKey() and entry.getValue()).In an idiosyncratic implementation, it might make some difference whether you use map.keySet(), map.entrySet() or something else. But I can't think of a reason why anyone would write it like that. Most likely it makes no difference to performance what you do.And yes, the order will depend on the implementation - as well as (possibly) the order of insertion and other hard-to-control factors.[edit] I wrote valueSet() originally but of course entrySet() is actually the answer.",
                "Lambda Expression Java 8In Java 1.8 (Java 8) this has become lot easier by using forEach method from Aggregate operations(Stream operations) that looks similar to iterators from Iterable Interface.Just copy paste below statement to your code and rename the HashMap variable from hm to your HashMap variable to print out key-value pair.Below is the sample code that I tried using Lambda Expression. This stuff is so cool. Must try.Also one can use Spliterator for the same.UPDATEIncluding documentation links to Oracle Docs.\nFor more on Lambda go to this link and must read Aggregate Operations and for Spliterator go to this link.",
                "Java 8:You can use lambda expressions:For more information, follow this.",
                "In Map one can Iteration over keys and/or values and/or both (e.g., entrySet)  depends on one's interested in_ Like:Iterate through the keys -> keySet() of the map:Iterate through the values -> values() of the map:Iterate through the both -> entrySet() of the map:Moreover, there are 3 different ways to iterate through a HashMap. They are as below:",
                "Try this with Java 1.4:",
                "The ordering will always depend on the specific map implementation.\nUsing Java\u00a08 you can use either of these:Or:The result will be the same (same order). The entrySet backed by the map so you are getting the same order. The second one is handy as it allows you to use lambdas, e.g. if you want only to print only Integer objects that are greater than 5:The code below shows iteration through LinkedHashMap and normal HashMap (example). You will see difference in the order:Output:",
                "Most compact with Java 8:",
                "If I have an object implementing the Map interface in Java and I wish to iterate over every pair contained within it, what is the most efficient way of going through the map?If efficiency of looping the keys is a priority for your app, then choose a Map implementation that maintains the keys in your desired order.Will the ordering of elements depend on the specific map implementation that I have for the interface?Yes, absolutely.See this table I created summarizing the various Map implementations bundled with Java 11. Specifically, notice the iteration order column. Click/tap to zoom.You can see there are four Map implementations maintaining an order:Two of those implement the NavigableMap interface: TreeMap & ConcurrentSkipListMap.The older SortedMap interface is effectively supplanted by the newer NavigableMap interface. But you may find 3rd-party implementations implementing the older interface only.If you want a Map that keeps its pairs arranged by the \u201cnatural order\u201d of the key, use TreeMap or ConcurrentSkipListMap. The term \u201cnatural order\u201d means the class of the keys implements Comparable. The value returned by the compareTo method is used for comparison in sorting.If you want to specify a custom sorting routine for your keys to be used in maintaining a sorted order, pass a Comparator implementation appropriate to the class of your keys. Use either TreeMap or ConcurrentSkipListMap, passing your Comparator.If you want the pairs of your map to be kept in their original order in which you inserted them into the map, use LinkedHashMap.If you are using an enum such as DayOfWeek or Month as your keys, use the EnumMap class. Not only is this class highly optimized to use very little memory and run very fast, it maintains your pairs in the order defined by the enum. For DayOfWeek, for example, the key of DayOfWeek.MONDAY will be first found when iterated, and the key of DayOfWeek.SUNDAY will be last.In choosing a Map implementation, also consider:Both of these considerations are covered in the graphic table above.",
                "If you have a generic untyped Map you can use:",
                "OR",
                "These are all the possible ways of iterating HashMap.",
                "An effective iterative solution over a Map is a for loop from Java 5 through Java 7. Here it is:From Java 8 you can use a lambda expression to iterate over a Map. It is an enhanced forEachIf you want to write a conditional for lambda you can write it like this:",
                "You can do it using generics:",
                "Use Java 8:",
                "There are a lot of ways to do this. Below is a few simple steps:Suppose you have one Map like:Then you can do something like the below to iterate over map elements."
            ]
        },
        {
            "tag": "compound_assignment",
            "patterns": [
                "Why don't Java's +=, -=, *=, /= compound assignment operators require casting?",
                "compound assignment operators"
            ],
            "responses": [
                "As always with these questions, the JLS holds the answer. In this case \u00a715.26.2 Compound Assignment Operators. An extract:A compound assignment expression of the form E1\u00a0op=\u00a0E2 is equivalent to E1\u00a0=\u00a0(T)((E1)\u00a0op\u00a0(E2)), where T is the type of E1, except that E1 is evaluated only once.An example cited from \u00a715.26.2[...] the following code is correct:and results in x having the value 7 because it is equivalent to:In other words, your assumption is correct.",
                "A good example of this casting is using *= or /=ororor",
                "Very good question. The Java Language specification confirms your suggestion.For example, the following code is correct:and results in x having the value 7 because it is equivalent to:",
                "Yes,basically when we writethe compiler converts this toI just checked the .class file code.Really a good thing to know",
                "you need to cast from long to int explicitly in case of i = i + l  then it will compile and give correct output. likeorbut in case of += it just works fine because the operator implicitly does the type casting from type of right variable to type of left variable so need not cast explicitly.",
                "The problem here involves type casting.When you add int and long,But += is coded in such a way that it does type casting. i=(int)(i+m)",
                "In Java type conversions are performed automatically when the type of the expression on the right hand side of an assignment operation can be safely promoted to the type of the variable on the left hand side of the assignment. Thus we can safely assign:The same will not work the other way round. For example we cannot automatically convert a long to an int because the first requires more storage than the second and consequently information may be lost. To force such a conversion we must carry out an explicit conversion.\nType - Conversion",
                "Sometimes, such a question can be asked at an interview.For example, when you write:there is no automatic typecasting. In C++ there will not be any error compiling the above code, but in Java you will get something like Incompatible type exception.So to avoid it, you must write your code like this:",
                "The main difference is that with a = a + b, there is no typecasting going on, and so the compiler gets angry at you for not typecasting. But with a += b, what it's really doing is typecasting b to a type compatible with a. So if you doWhat you're really doing is:",
                "Subtle point here...There is an implicit typecast for i+j when j is a double and i is an int.\nJava ALWAYS converts an integer into a double when there is an operation between them.To clarify i+=j where i is an integer and j is a double can be described asSee: this description of implicit castingYou might want to typecast j to (int) in this case for clarity.",
                "Java Language Specification defines E1 op= E2 to be equivalent to E1 = (T) ((E1) op (E2)) where T is a type of E1 and E1 is evaluated once.That's a technical answer, but you may be wondering why that's a case. Well, let's consider the following program.What does this program print?Did you guess 3? Too bad, this program won't compile. Why? Well, it so happens that addition of bytes in Java is defined to return an int. This, I believe was because the Java Virtual Machine doesn't define byte operations to save on bytecodes (there is a limited number of those, after all), using integer operations instead is an implementation detail exposed in a language.But if a = a + b doesn't work, that would mean a += b would never work for bytes if it E1 += E2 was defined to be E1 = E1 + E2. As the previous example shows, that would be indeed the case. As a hack to make += operator work for bytes and shorts, there is an implicit cast involved. It's not that great of a hack, but back during the Java 1.0 work, the focus was on getting the language released to begin with. Now, because of backwards compatibility, this hack introduced in Java 1.0 couldn't be removed."
            ]
        },
        {
            "tag": "passwords",
            "patterns": [
                "Why is char[] preferred over String for passwords?",
                "char[]",
                "char[] for passwords"
            ],
            "responses": [
                "Strings are immutable. That means once you've created the String, if another process can dump memory, there's no way (aside from reflection) you can get rid of the data before garbage collection kicks in.With an array, you can explicitly wipe the data after you're done with it. You can overwrite the array with anything you like, and the password won't be present anywhere in the system, even before garbage collection.So yes, this is a security concern - but even using char[] only reduces the window of opportunity for an attacker, and it's only for this specific type of attack.As noted in the comments, it's possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe this is implementation-specific - the garbage collector may clear all memory as it goes, to avoid this sort of thing. Even if it does, there's still the time during which the char[] contains the actual characters as an attack window.",
                "While other suggestions here seem valid, there is one other good reason. With plain String you have much higher chances of accidentally printing the password to logs, monitors or some other insecure place. char[] is less vulnerable.Consider this:Prints:",
                "To quote an official document, the Java Cryptography Architecture guide says this about char[] vs. String passwords (about password-based encryption, but this is more generally about passwords of course):It would seem logical to collect and store the password in an object\n  of type java.lang.String. However, here's the caveat: Objects of\n  type String are immutable, i.e., there are no methods defined that\n  allow you to change (overwrite) or zero out the contents of a String\n  after usage. This feature makes String objects unsuitable for\n  storing security sensitive information such as user passwords. You\n  should always collect and store security sensitive information in a\n  char array instead.Guideline 2-2 of the Secure Coding Guidelines for the Java Programming Language, Version 4.0 also says something similar (although it is originally in the context of logging):Guideline 2-2: Do not log highly sensitive informationSome information, such as Social Security numbers (SSNs) and\n  passwords, is highly sensitive. This information should not be kept\n  for longer than necessary nor where it may be seen, even by\n  administrators. For instance, it should not be sent to log files and\n  its presence should not be detectable through searches. Some transient\n  data may be kept in mutable data structures, such as char arrays, and\n  cleared immediately after use. Clearing data structures has reduced\n  effectiveness on typical Java runtime systems as objects are moved in\n  memory transparently to the programmer.This guideline also has implications for implementation and use of\n  lower-level libraries that do not have semantic knowledge of the data\n  they are dealing with. As an example, a low-level string parsing\n  library may log the text it works on. An application may parse an SSN\n  with the library. This creates a situation where the SSNs are\n  available to administrators with access to the log files.",
                "Character arrays (char[]) can be cleared after use by setting each character to zero and Strings not. If someone can somehow see the memory image, they can see a password in plain text if Strings are used, but if char[] is used, after purging data with 0's, the password is secure.",
                "Some people believe that you have to overwrite the memory used to store the password once you no longer need it. This reduces the time window an attacker has to read the password from your system and completely ignores the fact that the attacker already needs enough access to hijack the JVM memory to do this. An attacker with that much access can catch your key events making this completely useless (AFAIK, so please correct me if I am wrong).UpdateThanks to the comments I have to update my answer. Apparently there are two cases where this can add a (very) minor security improvement as it reduces the time a password could land on the hard drive. Still I think it's overkill for most use cases.If possible, disabling core dumps and the swap file would take care of both problems. However, they would require administrator rights and may reduce functionality (less memory to use) and pulling RAM from a running system would still be a valid concern.",
                "I don't think this is a valid suggestion, but, I can at least guess at the reason.I think the motivation is wanting to make sure that you can erase all trace of the password in memory promptly and with certainty after it is used. With a char[] you could overwrite each element of the array with a blank or something for sure. You can't edit the internal value of a String that way.But that alone isn't a good answer; why not just make sure a reference to the char[] or String doesn't escape? Then there's no security issue. But the thing is that String objects can be intern()ed in theory and kept alive inside the constant pool. I suppose using char[] forbids this possibility.",
                "The answer has already been given, but I'd like to share an issue that I discovered lately with Java standard libraries. While they take great care now of replacing password strings with char[] everywhere (which of course is a good thing), other security-critical data seems to be overlooked when it comes to clearing it from memory.I'm thinking of e.g. the PrivateKey class. Consider a scenario where you would load a private RSA key from a PKCS#12 file, using it to perform some operation. Now in this case, sniffing the password alone wouldn't help you much as long as physical access to the key file is properly restricted. As an attacker, you would be much better off if you obtained the key directly instead of the password. The desired information can be leaked manifold, core dumps, a debugger session or swap files are just some examples.And as it turns out, there is nothing that lets you clear the private information of a PrivateKey from memory, because there's no API that lets you wipe the bytes that form the corresponding information.This is a bad situation, as this paper describes how this circumstance could be potentially exploited.The OpenSSL library for example overwrites critical memory sections before private keys are freed. Since Java is garbage-collected, we would need explicit methods to wipe and invalidate private information for Java keys, which are to be applied immediately after using the key.",
                "As Jon Skeet states, there is no way except by using reflection.However, if reflection is an option for you, you can do this.when runNote: if the String's char[] has been copied as a part of a GC cycle, there is a chance the previous copy is somewhere in memory.This old copy wouldn't appear in a heap dump, but if you have direct access to the raw memory of the process you could see it.  In general you should avoid anyone having such access.",
                "These are all the reasons, one should choose a char[] array instead of String for a password.1.  Since Strings are immutable in Java, if you store the password as plain text it will be available in memory until the Garbage collector clears it, and since String is used in the String pool for reusability there is a pretty high chance that it will remain in memory for a long duration, which poses a security threat.Since anyone who has access to the memory dump can find the password in clear text, that's another reason you should always use an encrypted password rather than plain text. Since Strings are immutable there is no way the contents of Strings can be changed because any change will produce a new String, while if you use a char[] you can still set all the elements as blank or zero. So storing a password in a character array clearly mitigates the security risk of stealing a password.2.  Java itself recommends using the getPassword() method of JPasswordField which returns a char[], instead of the deprecated getText() method which returns passwords in clear text stating security reasons. It's good to follow advice from the Java team and adhere to standards rather than going against them.3.  With String there is always a risk of printing plain text in a log file or console but if you use an Array you won't print contents of an array, but instead its memory location gets printed. Though not a real reason, it still makes sense.Referenced from this blog.\nI hope this helps.",
                "There is nothing that char array gives you vs String unless you clean it up manually after use, and I haven't seen anyone actually doing that. So to me the preference of char[] vs String is a bit exaggerated.Take a look at the widely used Spring Security library here and ask yourself - are Spring Security guys incompetent or char[] passwords just don't make much sense. When some nasty hacker grabs memory dumps of your RAM be sure s/he'll get all the passwords even if you use sophisticated ways to hide them.However, Java changes all the time, and some scary features like String Deduplication feature of Java 8 might intern String objects without your knowledge. But that's a different conversation.",
                "Edit: Coming back to this answer after a year of security research, I realize it makes the rather unfortunate implication that you would ever actually compare plaintext passwords. Please don't. Use a secure one-way hash with a salt and a reasonable number of iterations. Consider using a library: this stuff is hard to get right!Original answer: What about the fact that String.equals() uses short-circuit evaluation, and is therefore vulnerable to a timing attack? It may be unlikely, but you could theoretically time the password comparison in order to determine the correct sequence of characters.Some more resources on timing attacks:",
                "Strings are immutable and cannot be altered once they have been created. Creating a password as a string will leave stray references to the password on the heap or on the String pool. Now if someone takes a heap dump of the Java process and carefully scans through he might be able to guess the passwords. Of course these non used strings will be garbage collected but that depends on when the GC kicks in.On the other side char[] are mutable as soon as the authentication is done you can overwrite them with any character like all M's or backslashes. Now even if someone takes a heap dump he might not be able to get the passwords which are not currently in use. This gives you more control in the sense like clearing the Object content yourself vs waiting for the GC to do it.",
                "String is immutable and it goes to the string pool. Once written, it cannot be overwritten.char[] is an array which you should overwrite once you used the password and this is how it should be done:One scenario where the attacker could use it is a crashdump - when the JVM crashes and generates a memory dump - you will be able to see the password.That is not necessarily a malicious external attacker. This could be a support user that has access to the server for monitoring purposes. He could peek into a crashdump and find the passwords.",
                "The short and straightforward answer would be because char[] is mutable while String objects are not.Strings in Java are immutable objects. That is why they can't be modified once created, and therefore the only way for their contents to be removed from memory is to have them garbage collected. It will be only then when the memory freed by the object can be overwritten, and the data will be gone.Now garbage collection in Java doesn't happen at any guaranteed interval. The String can thus persist in memory for a long time, and if a process crashes during this time, the contents of the string may end up in a memory dump or some log.With a character array, you can read the password, finish working with it as soon as you can, and then immediately change the contents.",
                "Case String:Case CHAR ARRAY:",
                "String in java is immutable. So whenever a string is created, it will remain in the memory until it is garbage collected. So anyone who has access to the memory can read the value of the string. \nIf the value of the string is modified then it will end up creating a new string. So both the original value and the modified value stay in the memory until it is garbage collected.  \nWith the character array, the contents of the array can be modified or erased once the purpose of the password is served. The original contents of the array will not be found in memory after it is modified and even before the garbage collection kicks in.\nBecause of the security concern it is better to store password as a character array.",
                "It is debatable as to whether you should use String or use Char[] for this purpose because both have their advantages and disadvantages. It depends on what the user needs.Since Strings in Java are immutable, whenever some tries to manipulate your string it creates a new Object and the existing String remains unaffected. This could be seen as an advantage for storing a password as a String, but the object remains in memory even after use. So if anyone somehow got the memory location of the object, that person can easily trace your password stored at that location.Char[] is mutable, but it has the advantage that after its usage the programmer can explicitly clean the array or override values. So when it's done being used it is cleaned and no one could ever know about the information you had stored.Based on the above circumstances, one can get an idea whether to go with String or to go with Char[] for their requirements.",
                "Lot of great answers above. There is another point which I am assuming(please correct me if I am wrong ). By default Java uses UTF-16 for storing strings. Using character arrays char[]array facilitates utilization of unicode, regional characters,etc. This technique allow all character set to be respected equally for storing the passwords and henceforth will not initiate certain crypto issues due to character set confusion. Finally using the char array we can convert the password array to our desired character set string."
            ]
        },
        {
            "tag": "HashMap",
            "patterns": [
                "Iterate through a HashMap [duplicate]",
                "Hash map",
                "Iterate over a hash map"
            ],
            "responses": [
                "If you're only interested in the keys, you can iterate through the keySet() of the map:If you only need the values, use values():Finally, if you want both the key and value, use entrySet():One caveat: if you want to remove items mid-iteration, you'll need to do so via an Iterator (see karim79's answer). However, changing item values is OK (see Map.Entry).",
                "Iterate through the entrySet() like so:Read more about Map.",
                "Extracted from the reference How to Iterate Over a Map in Java:There are several ways of iterating over a Map in Java. Let's go over the most common methods and review their advantages and disadvantages. Since all maps in Java implement the Map interface, the following techniques will work for any map implementation (HashMap, TreeMap, LinkedHashMap, Hashtable, etc.)Method #1: Iterating over entries using a For-Each loop.This is the most common method and is preferable in most cases. It should be used if you need both map keys and values in the loop.Note that the For-Each loop was introduced in Java 5, so this method is working only in newer versions of the language. Also a For-Each loop will throw NullPointerException if you try to iterate over a map that is null, so before iterating you should always check for null references.Method #2: Iterating over keys or values using a For-Each loop.If you need only keys or values from the map, you can iterate over keySet or values instead of entrySet.This method gives a slight performance advantage over entrySet iteration (about 10% faster) and is more clean.Method #3: Iterating using Iterator.Using Generics:Without Generics:You can also use same technique to iterate over keySet or values.This method might look redundant, but it has its own advantages. First of all, it is the only way to iterate over a map in older versions of Java. The other important feature is that it is the only method that allows you to remove entries from the map during iteration by calling iterator.remove(). If you try to do this during For-Each iteration you will get \"unpredictable results\" according to Javadoc.From a performance point of view this method is equal to a For-Each iteration.Method #4: Iterating over keys and searching for values (inefficient).This might look like a cleaner alternative for method #1, but in practice it is pretty slow and inefficient as getting values by a key might be time-consuming (this method in different Map implementations is 20%-200% slower than method #1). If you have FindBugs installed, it will detect this and warn you about inefficient iteration. This method should be avoided.Conclusion:If you need only keys or values from the map, use method #2. If you are stuck with older version of Java (less than 5) or planning to remove entries during iteration, you have to use method #3. Otherwise use method #1.",
                "You can iterate through the entries in a Map in several ways. Get each key and value like this:Or you can get the list of keys withIf you just want to get all of the values and aren't concerned with the keys, you can use:",
                "Smarter:",
                "It depends. If you know you're going to need both the key and the value of every entry, then go through the entrySet. If you just need the values, then there's the values() method. And if you just need the keys, then use keyset().A bad practice would be to iterate through all of the keys, and then within the loop, always do map.get(key) to get the value. If you're doing that, then the first option I wrote is for you."
            ]
        },
        {
            "tag": "leak",
            "patterns": [
                "How can I create a memory leak in Java?",
                "memory leaks",
                "memory"
            ],
            "responses": [
                "Here's a good way to create a true memory leak (objects inaccessible by running code but still stored in memory) in pure Java:Due to the way ThreadLocal is implemented in Oracle's JDK, this creates a memory leak:In this example, the chain of strong references looks like this:Thread object \u2192 threadLocals map \u2192 instance of example class \u2192 example class \u2192 static ThreadLocal field \u2192 ThreadLocal object.(The ClassLoader doesn't really play a role in creating the leak, it just makes the leak worse because of this additional reference chain: example class \u2192 ClassLoader \u2192 all the classes it has loaded. It was even worse in many JVM implementations, especially prior to Java 7, because classes and ClassLoaders were allocated straight into permgen and were never garbage-collected at all.)A variation on this pattern is why application containers (like Tomcat) can leak memory like a sieve if you frequently redeploy applications which happen to use ThreadLocals that in some way point back to themselves. This can happen for a number of subtle reasons and is often hard to debug and/or fix.Update: Since lots of people keep asking for it, here's some example code that shows this behavior in action.",
                "Static field holding an object reference [especially a final field](Unclosed) open streams (file , network, etc.)Unclosed connectionsAreas that are unreachable from JVM's garbage collector, such as memory allocated through native methods.In web applications, some objects are stored in application scope until the application is explicitly stopped or removed.Incorrect or inappropriate JVM options, such as the noclassgc option on IBM JDK that prevents unused class garbage collectionSee IBM JDK settings.",
                "A simple thing to do is to use a HashSet with an incorrect (or non-existent) hashCode() or equals(), and then keep adding \"duplicates\".  Instead of ignoring duplicates as it should, the set will only ever grow and you won't be able to remove them.If you want these bad keys/elements to hang around you can use a static field like",
                "Below there will be a non-obvious case where Java leaks, besides the standard case of forgotten listeners, static references, bogus/modifiable keys in hashmaps, or just threads stuck without any chance to end their life-cycle.I'll concentrate on threads to show the danger of unmanaged threads mostly, don't wish to even touch swing.Runtime.addShutdownHook and not remove... and then even with removeShutdownHook due to a bug in ThreadGroup class regarding unstarted threads it may not get collected, effectively leak the ThreadGroup. JGroup has the leak in GossipRouter.Creating, but not starting, a Thread goes into the same category as above.Creating a thread inherits the ContextClassLoader and AccessControlContext, plus the ThreadGroup and any InheritedThreadLocal, all those references are potential leaks, along with the entire classes loaded by the classloader and all static references, and ja-ja. The effect is especially visible with the entire j.u.c.Executor framework that features a super simple ThreadFactory interface, yet most developers have no clue of the lurking danger. Also a lot of libraries do start threads upon request (way too many industry popular libraries).ThreadLocal caches; those are evil in many cases. I am sure everyone has seen quite a bit of simple caches based on ThreadLocal, well the bad news: if the thread keeps going more than expected the life the context ClassLoader, it is a pure nice little leak. Do not use ThreadLocal caches unless really needed.Calling ThreadGroup.destroy() when the ThreadGroup has no threads itself, but it still keeps child ThreadGroups. A bad leak that will prevent the ThreadGroup to remove from its parent, but all the children become un-enumerateable.Using WeakHashMap and the value (in)directly references the key. This is a hard one to find without a heap dump. That applies to all extended Weak/SoftReference that might keep a hard reference back to the guarded object.Using java.net.URL with the HTTP(S) protocol and loading the resource from(!). This one is special, the KeepAliveCache creates a new thread in the system ThreadGroup which leaks the current thread's context classloader. The thread is created upon the first request when no alive thread exists, so either you may get lucky or just leak. The leak is already fixed in Java\u00a07 and the code that creates thread properly removes the context classloader. There are few more cases (like ImageFetcher, also fixed) of creating similar threads.Using InflaterInputStream passing new java.util.zip.Inflater() in the constructor (PNGImageDecoder for instance) and not calling end() of the inflater. Well, if you pass in the constructor with just new, no chance... And yes, calling close() on the stream does not close the inflater if it's manually passed as constructor parameter. This is not a true leak since it'd be released by the finalizer... when it deems it necessary. Till that moment it eats native memory so badly it can cause Linux oom_killer to kill the process with impunity. The main issue is that finalization in Java is very unreliable and G1 made it worse till 7.0.2. Moral of the story: release native resources as soon as you can; the finalizer is just too poor.The same case with java.util.zip.Deflater. This one is far worse since Deflater is memory hungry in Java, i.e. always uses 15\u00a0bits (max) and 8\u00a0memory levels (9 is max) allocating several hundreds KB of native memory. Fortunately, Deflater is not widely used and to my knowledge JDK contains no misuses. Always call end() if you manually create a Deflater or Inflater. The best part of the last two: you can't find them via normal profiling tools available.(I can add some more time wasters I have encountered upon request.)Good luck and stay safe; leaks are evil!",
                "Most examples here are \"too complex\". They are edge cases. With these examples, the programmer made a mistake (like don't redefining equals/hashcode), or has been bitten by a corner case of the JVM/JAVA (load of class with static...). I think that's not the type of example an interviewer want or even the most common case.But there are really simpler cases for memory leaks. The garbage collector only frees what is no longer referenced. We as Java developers don't care about memory. We allocate it when needed and let it be freed automatically. Fine.But any long-lived application tend to have shared state. It can be anything, statics, singletons... Often non-trivial applications tend to make complex objects graphs. Just forgetting to set a reference to null or more often forgetting to remove one object from a collection is enough to make a memory leak.Of course all sort of listeners (like UI listeners), caches, or any long-lived shared state tend to produce memory leak if not properly handled. What shall be understood is that this is not a Java corner case, or a problem with the garbage collector. It is a design problem. We design that we add a listener to a long-lived object, but we don't remove the listener when no longer needed. We cache objects, but we have no strategy to remove them from the cache.We maybe have a complex graph that store the previous state that is needed by a computation. But the previous state is itself linked to the state before and so on.Like we have to close SQL connections or files. We need to set proper references to null and remove elements from the collection. We shall have proper caching strategies (maximum memory size, number of elements, or timers). All objects that allow a listener to be notified must provide both a addListener and removeListener method. And when these notifiers are no longer used, they must clear their listener list.A memory leak is indeed truly possible and is perfectly predictable. No need for special language features or corner cases. Memory leaks are either an indicator that something is maybe missing or even of design problems.",
                "The answer depends entirely on what the interviewer thought they were asking.Is it possible in practice to make Java leak? Of course it is, and there are plenty of examples in the other answers.But there are multiple meta-questions that may have been being asked?I'm reading your meta-question as \"What's an answer I could have used in this interview situation\". And hence, I'm going to focus on interview skills instead of Java. I believe you're more likely to repeat the situation of not knowing the answer to a question in an interview than you are to be in a place of needing to know how to make Java leak. So, hopefully, this will help.One of the most important skills you can develop for interviewing is learning to actively listen to the questions and working with the interviewer to extract their intent. Not only does this let you answer their question the way they want, but also shows that you have some vital communication skills. And when it comes down to a choice between many equally talented developers, I'll hire the one who listens, thinks, and understands before they respond every time.",
                "The following is a pretty pointless example if you do not understand JDBC. Or at least how JDBC expects a developer to close Connection, Statement, and ResultSet instances before discarding them or losing references to them, instead of relying on implementing the finalize method.The problem with the above is that the Connection object is not closed, and hence the physical Connection will remain open until the garbage collector comes around and sees that it is unreachable. GC will invoke the finalize method, but there are JDBC drivers that do not implement the finalize, at least not in the same way that Connection.close is implemented. The resulting behavior is that while the JVM will reclaim memory due to unreachable objects being collected, resources (including memory) associated with the Connection object might not be reclaimed.As such, Connection's final method does not clean up everything. One might find that the physical Connection to the database server will last several garbage collection cycles until the database server eventually figures out that the Connection is not alive (if it does) and should be closed.Even if the JDBC driver implemented finalize, the compiler can throw exceptions during finalization. The resulting behavior is that any memory associated with the now \"dormant\" object will not be reclaimed by the compiler, as finalize is guaranteed to be invoked only once.The above scenario of encountering exceptions during object finalization is related to another scenario that could lead to a memory leak - object resurrection. Object resurrection is often done intentionally by creating a strong reference to the object from being finalized, from another object. When object resurrection is misused it will lead to a memory leak in combination with other sources of memory leaks.There are plenty more examples that you can conjure up - like",
                "Probably one of the simplest examples of a potential memory leak, and how to avoid it, is the implementation of ArrayList.remove(int):If you were implementing it yourself, would you have thought to clear the array element that is no longer used (elementData[--size] = null)? That reference might keep a huge object alive ...",
                "Any time you keep references around to objects that you no longer need you have a memory leak.  See Handling memory leaks in Java programs for examples of how memory leaks manifest themselves in Java and what you can do about it.",
                "You are able to make memory leak with sun.misc.Unsafe class. In fact this service class is used in different standard classes (for example in java.nio classes). You can't create instances of this class directly, but you may use reflection to get an instance.Code doesn't compile in the Eclipse IDE - compile it using command javac (during compilation you'll get warnings)",
                "I can copy my answer from here:\nEasiest way to cause memory leak in Java\"A memory leak, in computer science (or leakage, in this context), occurs when a computer program consumes memory but is unable to release it back to the operating system.\" (Wikipedia)The easy answer is: You can't. Java does automatic memory management and will free resources that are not needed for you. You can't stop this from happening. It will always be able to release the resources. In programs with manual memory management, this is different. You can get some memory in C using malloc(). To free the memory, you need the pointer that malloc returned and call free() on it. But if you don't have the pointer any more (overwritten, or lifetime exceeded), then you are unfortunately incapable of freeing this memory and thus you have a memory leak.All the other answers so far are in my definition not really memory leaks. They all aim at filling the memory with pointless stuff real fast. But at any time you could still dereference the objects you created and thus freeing the memory --> no leak. acconrad's answer comes pretty close though as I have to admit since his solution is effectively to just \"crash\" the garbage collector by forcing it in an endless loop).The long answer is: You can get a memory leak by writing a library for Java using the JNI, which can have manual memory management and thus have memory leaks. If you call this library, your Java process will leak memory. Or, you can have bugs in the JVM, so that the JVM looses memory. There are probably bugs in the JVM, there may even be some known ones since garbage collection is not that trivial, but then it's still a bug. By design this is not possible. You may be asking for some Java code that is effected by such a bug. Sorry I don't know one and it might well not be a bug any more in the next Java version anyway.",
                "Here's a simple/sinister one via http://wiki.eclipse.org/Performance_Bloopers#String.substring.28.29.Because the substring refers to the internal representation of the original, much longer string, the original stays in memory. Thus, as long as you have a StringLeaker in play, you have the whole original string in memory, too, even though you might think you're just holding on to a single-character string.The way to avoid storing an unwanted reference to the original string is to do something like this:For added badness, you might also .intern() the substring:Doing so will keep both the original long string and the derived substring in memory even after the StringLeaker instance has been discarded.",
                "A common example of this in GUI code is when creating a widget/component and adding a listener to some static/application scoped object and then not removing the listener when the widget is destroyed. Not only do you get a memory leak, but also a performance hit as when whatever you are listening to fires events, all your old listeners are called too.",
                "Take any web application running in any servlet container (Tomcat, Jetty, GlassFish, whatever...). Redeploy the application 10 or 20 times in a row (it may be enough to simply touch the WAR in the server's autodeploy directory.Unless anybody has actually tested this, chances are high that you'll get an OutOfMemoryError after a couple of redeployments, because the application did not take care to clean up after itself. You may even find a bug in your server with this test.The problem is, the lifetime of the container is longer than the lifetime of your application. You have to make sure that all references the container might have to objects or classes of your application can be garbage collected.If there is just one reference surviving the undeployment of your web application, the corresponding classloader and by consequence all classes of your web application cannot be garbage collected.Threads started by your application, ThreadLocal variables, logging appenders are some of the usual suspects to cause classloader leaks.",
                "Maybe by using external native code through JNI?With pure Java, it is almost impossible.But that is about a \"standard\" type of memory leak, when you cannot access the memory anymore, but it is still owned by the application. You can instead keep references to unused objects, or open streams without closing them afterwards.",
                "I have had a nice \"memory leak\" in relation to PermGen and XML parsing once.\nThe XML parser we used (I can't remember which one it was) did a String.intern() on tag names, to make comparison faster.\nOne of our customers had the great idea to store data values not in XML attributes or text, but as tagnames, so we had a document like:In fact, they did not use numbers but longer textual IDs (around 20 characters), which were unique and came in at a rate of 10-15 million a day. That makes 200\u00a0MB of rubbish a day, which is never needed again, and never GCed (since it is in PermGen). We had permgen set to 512\u00a0MB, so it took around two days for the out-of-memory exception (OOME) to arrive...",
                "The interviewer was probably looking for a circular reference like the code below (which incidentally only leak memory in very old JVMs that used reference counting, which isn't the case anymore).  But it's a pretty vague question, so it's a prime opportunity to show off your understanding of JVM memory management.Then you can explain that with reference counting, the above code would leak memory.  But most modern JVMs don't use reference counting any longer. Most use a sweep garbage collector, which will in fact collect this memory.Next, you might explain creating an Object that has an underlying native resource, like this:Then you can explain this is technically a memory leak, but really the leak is caused by native code in the JVM allocating underlying native resources, which weren't freed by your Java code.At the end of the day, with a modern JVM, you need to write some Java code that allocates a native resource outside the normal scope of the JVM's awareness.",
                "What's a memory leak:Typical example:A cache of objects is a good starting point to mess things up.Your cache grows and grows. And pretty soon the entire database gets sucked into memory. A better design uses an LRUMap (Only keeps recently used objects in cache).Sure, you can make things a lot more complicated:What often happens:If this Info object has references to other objects, which again have references to other objects. In a way you could also consider this to be some kind of memory leak, (caused by bad design).",
                "I thought it was interesting that no one used the internal class examples.  If you have an internal class; it inherently maintains a reference to the containing class.  Of course it is not technically a memory leak because Java WILL eventually clean it up; but this can cause classes to hang around longer than anticipated.Now if you call Example1 and get an Example2 discarding Example1, you will inherently still have a link to an Example1 object.I've also heard a rumor that if you have a variable that exists for longer than a specific amount of time; Java assumes that it will always exist and will actually never try to clean it up if cannot be reached in code anymore.  But that is completely unverified.",
                "I recently encountered a memory leak situation caused in a way by log4j.Log4j has this mechanism called Nested Diagnostic Context(NDC)  which is an instrument to distinguish interleaved log output from different sources. The granularity at which NDC works is threads, so it distinguishes log outputs from different threads separately.In order to store thread specific tags, log4j's NDC class uses a Hashtable which is keyed by the Thread object itself (as opposed to say the thread id), and thus till the NDC tag stays in memory all the objects that hang off of the thread object also stay in memory. In our web application we use NDC to tag logoutputs with a request id to distinguish logs from a single request separately. The container that associates the NDC tag with a thread, also removes it while returning the response from a request. The problem occurred when during the course of processing a request, a child thread was spawned, something like the following code:So an NDC context was associated with inline thread that was spawned. The thread object that was the key for this NDC context, is the inline thread which has the hugeList object hanging off of it. Hence even after the thread finished doing what it was doing, the reference to the hugeList was kept alive by the NDC context Hastable, thus causing a memory leak.",
                "Create a static Map and keep adding hard references to it.  Those will never be garbage collected.",
                "Everyone always forgets the native code route.  Here's a simple formula for a leak:Remember, memory allocations in native code come from the JVM heap.",
                "You can create a moving memory leak by creating a new instance of a class in that class's finalize method. Bonus points if the finalizer creates multiple instances. Here's a simple program that leaks the entire heap in sometime between a few seconds and a few minutes depending on your heap size:",
                "I don't think anyone has said this yet: you can resurrect an object by overriding the finalize() method such that finalize() stores a reference of this somewhere. The garbage collector will only be called once on the object so after that the object will never destroyed.",
                "I came across a more subtle kind of resource leak recently.\nWe open resources via class loader's getResourceAsStream and it happened that the input stream handles were not closed.Uhm, you might say, what an idiot.Well, what makes this interesting is: this way, you can leak heap memory of the underlying process, rather than from JVM's heap.All you need is a jar file with a file inside which will be referenced from Java code. The bigger the jar file, the quicker memory gets allocated.You can easily create such a jar with the following class:Just paste into a file named BigJarCreator.java, compile and run it from command line:Et voil\u00e0: you find a jar archive in your current working directory with two files inside.Let's create a second class:This class basically does nothing, but create unreferenced InputStream objects. Those objects will be garbage collected immediately and thus, do not contribute to heap size.\nIt is important for our example to load an existing resource from a jar file, and size does matter here!If you're doubtful, try to compile and start the class above, but make sure to chose a decent heap size (2 MB):You will not encounter an OOM error here, as no references are kept, the application will keep running no matter how large you chose ITERATIONS in the above example.\nThe memory consumption of your process (visible in top (RES/RSS) or process explorer) grows unless the application gets to the wait command. In the setup above, it will allocate around 150 MB in memory.If you want the application to play safe, close the input stream right where it's created:and your process will not exceed 35 MB, independent of the iteration count.Quite simple and surprising.",
                "As a lot of people have suggested, resource leaks are fairly easy to cause - like the JDBC examples. Actual memory leaks are a bit harder - especially if you aren't relying on broken bits of the JVM to do it for you...The ideas of creating objects that have a very large footprint and then not being able to access them aren't real memory leaks either. If nothing can access it then it will be garbage collected, and if something can access it then it's not a leak...One way that used to work though - and I don't know if it still does - is to have a three-deep circular chain. As in Object A has a reference to Object B, Object B has a reference to Object C and Object C has a reference to Object A. The GC was clever enough to know that a two deep chain - as in A <--> B - can safely be collected if A and B aren't accessible by anything else, but couldn't handle the three-way chain...",
                "Another way to create potentially huge memory leaks is to hold references to Map.Entry<K,V> of a TreeMap.It is hard to asses why this applies only to TreeMaps, but by looking at the implementation the reason might be that: a TreeMap.Entry stores references to its siblings, therefore if a TreeMap is ready to be collected, but some other class holds a reference to any of its Map.Entry, then the entire Map will be retained into memory.Real-life scenario:Imagine having a db query that returns a big TreeMap data structure. People usually use TreeMaps as the element insertion order is retained.If the query was called lots of times and, for each query (so, for each Map returned) you save an Entry somewhere, the memory would constantly keep growing.Consider the following wrapper class:Application:After each pseudoQueryDatabase() call, the map instances should be ready for collection, but it won't happen, as at least one Entry is stored somewhere else.Depending on your jvm settings, the application may crash in the early stage due to a OutOfMemoryError.You can see from this visualvm graph how the memory keeps growing.The same does not happen with a hashed data-structure (HashMap).This is the graph when using a HashMap.The solution? Just directly save the key / value (as you probably already do) rather than saving the Map.Entry.I have written a more extensive benchmark here.",
                "Threads are not collected until they terminate. They serve as roots of garbage collection. They are one of the few objects that won't be reclaimed simply by forgetting about them or clearing references to them.Consider: the basic pattern to terminate a worker thread is to set some condition variable seen by the thread. The thread can check the variable periodically and use that as a signal to terminate. If the variable is not declared volatile, then the change to the variable might not be seen by the thread, so it won't know to terminate. Or imagine if some threads want to update a shared object, but deadlock while trying to lock on it.If you only have a handful of threads these bugs will probably be obvious because your program will stop working properly. If you have a thread pool that creates more threads as needed, then the obsolete/stuck threads might not be noticed, and will accumulate indefinitely, causing a memory leak. Threads are likely to use other data in your application, so will also prevent anything they directly reference from ever being collected.As a toy example:Call System.gc() all you like, but the object passed to leakMe will never die.",
                "There are many good examples of memory leaks in Java, and I will mention two of them in this answer.Example 1:Here is a good example of a memory leak from the book Effective Java, Third Edition (item 7: Eliminate obsolete object references):This is the paragraph of the book that describes why this implementation will cause a memory leak:If a stack grows and then shrinks, the objects that were popped off the\nstack will not be garbage collected, even if the program using  the\nstack  has  no  more  references  to  them.  This  is  because  the\nstack  maintains obsolete references to these objects. An obsolete\nreference is simply a reference that will never be dereferenced\nagain. In this case, any references outside of the \u201cactive portion\u201d of\nthe element array are obsolete. The active portion consists of the\nelements whose index is less than sizeHere is the solution of the book to tackle this memory leak:The  fix  for  this  sort  of  problem  is  simple:  null  out\nreferences  once  they become obsolete. In the case of our Stack class,\nthe reference to an item becomes obsolete  as  soon  as  it\u2019s  popped\noff  the  stack. The  corrected  version  of  the  pop method looks like this:But how can we prevent a memory leak from happening? This is a good caveat from the book:Generally  speaking,  whenever  a  class  manages  its  own  memory,\nthe  programmer should be alert for memory leaks. Whenever an element\nis freed, any object references contained in the element should be\nnulled out.Example 2:The observer pattern also can cause a memory leak. You can read about this pattern in the following link: Observer pattern.This is one implementation of the Observer pattern:In this implementation, EventSource, which is Observable in the Observer design pattern, can hold links to Observer objects, but this link is never removed from the observers field in EventSource. So they will never be collected by the garbage collector. One solution to tackle this problem is providing another method to the client for removing the aforementioned observers from the observers field when they don't need those observers anymore:",
                "The interviewer might have been looking for a circular reference solution:This is a classic problem with reference counting garbage collectors.  You would then politely explain that JVMs use a much more sophisticated algorithm that doesn't have this limitation."
            ]
        },
        {
            "tag": "protected",
            "patterns": [
                "What is the difference between public, protected, package-private and private in Java?",
                "public, protected, package-private and private",
                "Protected variables",
                "Private variables",
                "Public variables"
            ],
            "responses": [
                "The official tutorial may be of some use to you.+ : accessible\nblank : not accessible",
                "(Caveat:  I am not a Java programmer, I am a Perl programmer.  Perl has no formal protections which is perhaps why I understand the problem so well :) )Like you'd think, only the class in which it is declared can see it.It can only be seen and used by the package in which it was declared.  This is the default in Java (which some see as a mistake).Package Private + can be seen by subclasses or package members.Everyone can see it.Visible outside the code I control.  (While not Java syntax, it is important for this discussion).C++ defines an additional level called \"friend\" and the less you know about that the better.When should you use what?  The whole idea is encapsulation to hide information.  As much as possible you want to hide the detail of how something is done from your users.  Why?  Because then you can change them later and not break anybody's code.  This lets you optimize, refactor, redesign, and fix bugs without worrying that someone was using that code you just overhauled.So, the rule of thumb is to make things only as visible as they have to be.  Start with private and only add more visibility as needed.  Only make public that which is necessary for the user to know, every detail you make public cramps your ability to redesign the system.If you want users to be able to customize behaviors, rather than making internals public so they can override them, it's often a better idea to shove those guts into an object and make that interface public.  That way they can simply plug in a new object.  For example, if you were writing a CD player and wanted the \"go find info about this CD\" bit customizable, rather than make those methods public you'd put all that functionality into its object and make just your object getter/setter public.  In this way being stingy about exposing your guts encourages good composition and separation of concernsI stick with just \"private\" and \"public\".  Many OO languages just have that.  \"Protected\" can be handy, but it's a cheat.  Once an interface is more than private it's outside of your control and you have to go looking in other people's code to find uses.This is where the idea of \"published\" comes in.  Changing an interface (refactoring it) requires that you find all the code which is using it and change that, too.  If the interface is private, well no problem.  If it's protected you have to go find all your subclasses.  If it's public you have to go find all the code which uses your code.  Sometimes this is possible, for example, if you're working on corporate code that's for internal use only it doesn't matter if an interface is public.  You can grab all the code out of the corporate repository.  But if an interface is \"published\", if there is code using it outside your control, then you're hosed.  You must support that interface or risk breaking code.  Even protected interfaces can be considered published (which is why I don't bother with protected).Many languages find the hierarchical nature of public/protected/private to be too limiting and not in line with reality.  To that end, there is the concept of a trait class, but that's another show.",
                "Here's a better version of the table, that also includes a column for modules.A private member (i) is only accessible within the same class as it is declared.A member with no access modifier (j) is only accessible within classes in the same package.A protected member (k) is accessible within all classes in the same package and within subclasses in other packages.A public member (l) is accessible to all classes (unless it resides in a module that does not export the package it is declared in).Access modifiers is a tool to help you to prevent accidentally breaking encapsulation(*). Ask yourself if you intend the member to be something that's internal to the class, package, class hierarchy or not internal at all, and choose access level accordingly.Examples:(*) What is Encapsulation exactly?",
                "Easy rule. Start with declaring everything private. And then progress towards the public as the needs arise and design warrants it.When exposing members ask yourself if you are exposing representation choices or abstraction choices. The first is something you want to avoid as it will introduce too many dependencies on the actual representation rather than on its observable behavior.As a general rule I try to avoid overriding method implementations by subclassing; it's too easy to screw up the logic. Declare abstract protected methods if you intend for it to be overridden.Also, use the @Override annotation when overriding to keep things from breaking when you refactor.",
                "It's actually a bit more complicated than a simple grid shows. The grid tells you whether an access is allowed, but what exactly constitutes an access? Also, access levels interact with nested classes and inheritance in complex ways.The \"default\" access (specified by the absence of a keyword) is also called package-private. Exception: in an interface, no modifier means public access; modifiers other than public are forbidden. Enum constants are always public.Is an access to a member with this access specifier allowed?Local variables and formal parameters cannot take access specifiers. Since they are inherently inaccessible to the outside according to scoping rules, they are effectively private.For classes in the top scope, only public and package-private are permitted. This design choice is presumably because protected and private would be redundant at the package level (there is no inheritance of packages).All the access specifiers are possible on class members (constructors, methods and static member functions, nested classes).Related: Java Class AccessibilityThe access specifiers can be strictly orderedpublic > protected > package-private > privatemeaning that public provides the most access, private the least. Any reference possible on a private member is also valid for a package-private member; any reference to a package-private member is valid on a protected member, and so on. (Giving access to protected members to other classes in the same package was considered a mistake.)You also have to consider nested scopes, such as inner classes. An example of the complexity is that inner classes have members, which themselves can take access modifiers. So you can have a private inner class with a public member; can the member be accessed? (See below.) The general rule is to look at scope and think recursively to see whether you can access each level.However, this is quite complicated, and for full details, consult the Java Language Specification. (Yes, there have been compiler bugs in the past.)For a taste of how these interact, consider this example. It is possible to \"leak\" private inner classes; this is usually a warning:Compiler output:Some related questions:",
                "As a rule of thumb:As a result, if we divide access right into three rights:then we have this simple table:",
                "In very short",
                "The most misunderstood access modifier in Java is protected. We know that it's similar to the default modifier with one exception in which subclasses can see it. But how? Here is an example which hopefully clarifies the confusion:Assume that we have 2 classes; Father and Son, each in its own package:Let's add a protected method foo() to Father.The method foo() can be called in 4 contexts:Inside a class that is located in the same package where foo() is defined (fatherpackage):Inside a subclass, on the current instance via this or super:On an reference whose type is the same class:On an reference whose type is the parent class and it is inside the package where foo() is defined (fatherpackage) [This can be included inside context no. 1]:The following situations are not valid.On an reference whose type is the parent class and it is outside the package where foo() is defined (fatherpackage):A non-subclass inside a package of a subclass (A subclass inherits the protected members from its parent, and it makes them private to non-subclasses):",
                "Methods, Variables and Constructors that are declared private can only be accessed within the declared class itself.Private access modifier is the most restrictive access level. Class and interfaces cannot be private.NoteVariables that are declared private can be accessed outside the class if public getter methods are present in the class.\nVariables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members' class.The protected access modifier cannot be applied to class and interfaces.Methods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.NoteProtected access gives the subclass a chance to use the helper method or variable, while preventing a nonrelated class from trying to use it.A class, method, constructor, interface etc declared public can be accessed from any other class.Therefore fields, methods, blocks declared inside a public class can be accessed from any class belonging to the Java Universe.However if the public class we are trying to access is in a different package, then the public class still need to be imported.Because of class inheritance, all public methods and variables of a class are inherited by its subclasses.Default access modifier means we do not explicitly declare an access modifier for a class, field, method, etc.A variable or method declared without any access control modifier is available to any other class in the same package. The fields in an interface are implicitly public static final and the methods in an interface are by default public.NoteWe cannot Override the Static fields.if you try to override it does not show any error \nbut it doesnot work what we except.http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html\nhttp://www.tutorialspoint.com/java/java_access_modifiers.htm",
                "The difference can be found in the links already provided but which one to use usually comes down to the \"Principle of Least Knowledge\". Only allow the least visibility that is needed.",
                "Private: Limited access to class onlyDefault (no modifier): Limited access to class and packageProtected: Limited access to class, package and subclasses (both inside and outside package)Public: Accessible to class, package (all), and subclasses... In short, everywhere.",
                "Java access modifiesAccess modifier can be applicable for class, field[About], method. Try to access, subclass or override this.Top level class(first level scope) can be public and default. Nested class[About] can have any of thempackage is not applying for package hierarchy[Swift access modifiers]",
                "Access modifiers are there to restrict access at several levels.Public: It is basically as simple as you can access from any class whether that is in same package or not.To access if you are in same package you can access directly, but if you are in another package then you can create an object of the class.Default: It is accessible in the same package from any of the class of package.To access you can create an object of the class. But you can not access this variable outside of the package.Protected: you can access variables in same package as well as subclass in any other package.\nso basically it is default + Inherited behavior.To access protected field defined in base class you can create object of child class.Private:  it can be access in same class.In non-static methods you can access directly because of this reference (also in constructors)but to access in static methods you need to create object of the class.",
                "Access modifiers in Java.Java access modifiers are used to provide access control in Java.1. Default:Accessible to the classes in the same package only.For example,This access is more restricted than public and protected, but less restricted than private.2. PublicCan be accessed from anywhere. (Global Access)For example,Output:Hello3. PrivateAccessible only inside the same class.If you try to access private members on one class in another will throw compile error. For example,4. ProtectedAccessible only to the classes in the same package and to the subclassesFor example,Output: Hello",
                "Visible to the package. The default. No modifiers are needed.Visible to the class only (private).Visible to the world (public).Visible to the package and all subclasses (protected).Variables and methods can be declared without any modifiers that are called. Default examples:Private access modifier - private:Methods, variables and constructors that are declared private can only be accessed within the declared class itself. The private access modifier is the most restrictive access level. Class and interfaces cannot be private.Variables that are declared private can be accessed outside the class if public getter methods are present in the class.Using the private modifier is the main way that an object encapsulates itself and hides data from the outside world.Examples:Public access modifier - public:A class, method, constructor, interface, etc. declared public can be accessed from any other class. Therefore fields, methods, blocks declared inside a public class can be accessed from any class belonging to the Java universe.However, if the public class we are trying to access is in a different package, then the public class still need to be imported.Because of class inheritance, all public methods and variables of a class are inherited by its subclasses.Example:Protected access modifier - protected:Variables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in another package or any class within the package of the protected members' class.The protected access modifier cannot be applied to class and interfaces. Methods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.Protected access gives the subclass a chance to use the helper method or variable, while preventing a nonrelated class from trying to use it.",
                "public - accessible from anywhere in the application.default - accessible from package.protected - accessible from package and sub-classes in other package.\nas wellprivate - accessible from its class only.",
                "This page writes well about the protected & default access modifier....\nProtected: Protected access modifier is the a little tricky and you can say is a superset of the default access modifier. Protected members are same as the default members as far as the access in the same package is concerned. The difference is that, the protected members are also accessible to the subclasses of the class in which the member is declared which are outside the package in which the parent class is present.But these protected members are \u201caccessible outside the package only through inheritance\u201c. i.e you can access a protected member of a class in its subclass present in some other package directly as if the member is present in the subclass itself. But that protected member will not be accessible in the subclass outside the package by using parent class\u2019s reference. \n....",
                "David's answer provides the meaning of each access modifier. As for when to use each, I'd suggest making public all classes and the methods of each class that are meant for external use (its API), and everything else private.Over time you'll develop a sense for when to make some classes package-private and when to declare certain methods protected for use in subclasses.",
                "This image will make you understand easily about the basic differences between public, private, protected and default access modifiers. The default modifier takes place automatically when you don't declare ant access modifiers in your code.",
                "Public Protected Default and private are access modifiers.They are meant for encapsulation, or hiding and showing contents of the class.Private is not accessible outside the class\nDefault is accessible only in the package.\nProtected in package as well as any class which extends it.\nPublic is open for all.Normally, member variables are defined private, but member methods are public.",
                "Note: This is just a supplement for the accepted answer.This is related to Java Access Modifiers.From Java Access Modifiers:A Java access modifier specifies which classes can access a given\n  class and its fields, constructors and methods. Access modifiers can\n  be specified separately for a class, its constructors, fields and\n  methods. Java access modifiers are also sometimes referred to in daily\n  speech as Java access specifiers, but the correct name is Java access\n  modifiers. Classes, fields, constructors and methods can have one of\n  four different Java access modifiers:From Controlling Access to Members of a Class tutorials:Access level modifiers determine whether other classes can use a\n  particular field or invoke a particular method. There are two levels\n  of access control:A class may be declared with the modifier public, in which case that\n  class is visible to all classes everywhere. If a class has no modifier\n  (the default, also known as package-private), it is visible only\n  within its own packageThe following table shows the access to members permitted by each\n  modifier.The first data column indicates whether the class itself has access to\n  the member defined by the access level. As you can see, a class always\n  has access to its own members. The second column indicates whether\n  classes in the same package as the class (regardless of their\n  parentage) have access to the member. The third column indicates\n  whether subclasses of the class declared outside this package have\n  access to the member. The fourth column indicates whether all classes\n  have access to the member.Access levels affect you in two ways. First, when you use classes that\n  come from another source, such as the classes in the Java platform,\n  access levels determine which members of those classes your own\n  classes can use. Second, when you write a class, you need to decide\n  what access level every member variable and every method in your class\n  should have.",
                "Often times I've realized that remembering the basic concepts of any language can made possible by creating real-world analogies. Here is my analogy for understanding access modifiers in Java:Let's assume that you're a student at a university and you have a friend who's coming to visit you over the weekend. Suppose there exists a big statue of the university's founder in the middle of the campus.When you bring him to the campus, the first thing that you and your friend sees is this statue. This means that anyone who walks in the campus can look at the statue without the university's permission. This makes the statue as PUBLIC.Next, you want to take your friend to your dorm, but for that you need to register him as a visitor. This means that he gets an access pass (which is the same as yours) to get into various buildings on campus. This would make his access card as PROTECTED.Your friend wants to login to the campus WiFi but doesn't have the any credentials to do so. The only way he can get online is if you share your login with him. (Remember, every student who goes to the university also possesses these login credentials). This would make your login credentials as NO MODIFIER.Finally, your friend wants to read your progress report for the semester which is posted on the website. However, every student has their own personal login to access this section of the campus website. This would make these credentials as PRIVATE.Hope this helps!",
                "When you are thinking of access modifiers just think of it in this way (applies to both variables and methods):public --> accessible from every where\nprivate --> accessible only within the same class where it is declaredNow the confusion arises when it comes to default and protecteddefault --> No access modifier keyword is present. This means it is available strictly within the package of the class. Nowhere outside that package it can be accessed.protected --> Slightly less stricter than default and apart from the same package classes it can be accessed by sub classes outside the package it is declared.",
                "It is all about encapsulation (or as Joe Phillips stated, least knowledge).Start with the most restrictive (private) and see if you need less restrictive modifiers later on.We all use method and member modifiers like private, public, ... but one thing too few developers do is use packages to organize code logically.For example:\nYou may put sensitive security methods in a 'security' package.\nThen put a public class which accesses some of the security related code in this package but keep other security classes package private.\nThus other developers will only be able to use the publicly available class from outside of this package (unless they change the modifier).\nThis is not a security feature, but will guide usage.Another thing is that classes which depend a lot on each other may end up in the same package and could eventually be refactored or merged if the dependency is too strong.If on the contrary you set everything as public it will not be clear what should or should not be accessed, which may lead to writing a lot of javadoc (which does not enforce anything via the compiler...).",
                "My two cents :)private:class -> a top level class cannot be private. inner classes can be private which are accessible from same class.instance variable -> accessible only in the class. Cannot access outside the class.package-private:class -> a top level class can be package-private. It can only be accessible from same package. Not from sub package, not from outside package.instance variable -> accessible from same package. Not from sub package, not from outside package.protected:class -> a top level class cannot be protected.instance variable -> Only accessible in same package or subpackage. Can only be access outside the package while extending class.public:class -> accessible from package/subpackage/another packageinstance variable -> accessible from package/subpackage/another packageHere is detailed answerhttps://github.com/junto06/java-4-beginners/blob/master/basics/access-modifier.md",
                "publicIf a class member is declared with public then it can be accessed from anywhereprotectedIf a class member is declared with keyword protected then it can be accessed from same class members, outside class members within the same package and inherited class members. If a class member is protected then it can NOT be accessed from outside package class unless the outside packaged class is inherited i.e. extends the other package superclass. But a protected class member is always available to same package classes it does NOT matter weather the same package class is inherited or NOTdefaultIn Java default is NOT an access modifier keyword. If a class member is declared without any access modifier keyword then in this case it is considered as default member. The default class member is always available to same package class members. But outside package class member can NOT access default class members even if outside classes are subclasses unlike protected membersprivateIf a class member is declared with keyword protected then in this case it is available ONLY to same class members",
                "when talking about access modifiers we can easy to understand, very simple rules include them.Private Access modifier use in: - Only same classDefault Access modifier use in: - Only same class / Same package subclassesProtected Access modifier use in: - same class / Same package subclasses / Same package non - subclasses / Different package subclassesPublic Access modifier use in:- we can use anywhere (same class / Same package subclasses / Same package non - subclasses / Different package subclasses/ Different package non - subclasses)",
                "Access Specifiers in Java:\nThere are 4 access specifiers in java, namely private, package-private (default), protected and public in increasing access order.Private:\nWhen you are developing some class and you want member of this class not to be exposed outside this class then you should declare it as private. private members can be accessed only in class where they are defined i.e. enclosing class. private members can be accessed on 'this' reference and also on other instances of class enclosing these members, but only within the definition of this class.Package-private (default):\nThis access specifier will provide access specified by private access specifier in addition to access described below.When you are developing some package and hence some class (say Class1) within it, you may use default (need not be mentioned explicitly) access specifier, to expose member within class, to other classes within your (same) package. In these other classes (within same package), you can access these default members on instance of Class1. Also you can access these default members within subclasses of Class1, say Class2 (on this reference or on instance of Class1 or on instance of Class2).Basically, within same package you can access default members on instance of class directly or on 'this' reference in subclasses.protected:\nThis access specifier will provide access specified by package-private access specifier in addition to access described below.When you are developing some package and hence some class (say Class1) within it, then you should use protected access specifier for data member within Class1 if you don't want this member to be accessed outside your package (say in package of consumer of your package i.e. client who is using your APIs) in general, but you want to make an exception and allow access to this member only if client writes class say Class2 that extends Class1. So, in general, protected members will be accessible on 'this' reference in derived classes i.e. Class2 and also on explicit instances of Class2.Please note:So bottom line is, protected members can be accessed in other packages, only if some class from this other package, extends class enclosing this protected member and protected member is accessed on 'this' reference or explicit instances of extended class, within definition of extended class.public: This access specifier will provide access specified by protected access specifier in addition to access described below.When you are developing some package and hence some class (say Class1) within it, then you should use public access specifier for data member within Class1 if you want this member to be accessible in other packages on instance of Class1 created in some class of other package. Basically this access specifier should be used when you intent to expose your data member to world without any condition."
            ]
        },
        {
            "tag": "LinkedList",
            "patterns": [
                "When to use LinkedList over ArrayList in Java?",
                "LinkedList",
                "linked",
                "linked lists in Java"
            ],
            "responses": [
                "Summary ArrayList with ArrayDeque are preferable in many more use-cases than LinkedList. If you're not sure\u00a0\u2014 just start with ArrayList.TLDR, in ArrayList accessing an element takes constant time [O(1)] and adding an element takes O(n) time [worst case]. In LinkedList inserting an element takes O(n) time and accessing also takes O(n) time but LinkedList uses more memory than ArrayList.LinkedList and ArrayList are two different implementations of the List interface. LinkedList implements it with a doubly-linked list. ArrayList implements it with a dynamically re-sizing array.As with standard linked list and array operations, the various methods will have different algorithmic runtimes.For LinkedList<E>Note: Many of the operations need n/4 steps on average, constant number of steps in the best case (e.g. index = 0), and n/2 steps in worst case (middle of list)For ArrayList<E>Note: Many of the operations need n/2 steps on average, constant number of steps in the best case (end of list), n steps in the worst case (start of list)LinkedList<E> allows for constant-time insertions or removals using iterators, but only sequential access of elements. In other words, you can walk the list forwards or backwards, but finding a position in the list takes time proportional to the size of the list. Javadoc says \"operations that index into the list will traverse the list from the beginning or the end, whichever is closer\", so those methods are O(n) (n/4 steps) on average, though O(1) for index = 0.ArrayList<E>, on the other hand, allow fast random read access, so you can grab any element in constant time. But adding or removing from anywhere but the end requires shifting all the latter elements over, either to make an opening or fill the gap. Also, if you add more elements than the capacity of the underlying array, a new array (1.5 times the size) is allocated, and the old array is copied to the new one, so adding to an ArrayList is O(n) in the worst case but constant on average.So depending on the operations you intend to do, you should choose the implementations accordingly. Iterating over either kind of List is practically equally cheap. (Iterating over an ArrayList is technically faster, but unless you're doing something really performance-sensitive, you shouldn't worry about this -- they're both constants.)The main benefits of using a LinkedList arise when you re-use existing iterators to insert and remove elements. These operations can then be done in O(1) by changing the list locally only. In an array list, the remainder of the array needs to be moved (i.e. copied). On the other side, seeking in a LinkedList means following the links in O(n) (n/2 steps) for worst case, whereas in an ArrayList the desired position can be computed mathematically and accessed in O(1).Another benefit of using a LinkedList arises when you add or remove from the head of the list, since those operations are O(1), while they are O(n) for ArrayList. Note that ArrayDeque may be a good alternative to LinkedList for adding and removing from the head, but it is not a List.Also, if you have large lists, keep in mind that memory usage is also different. Each element of a LinkedList has more overhead since pointers to the next and previous elements are also stored. ArrayLists don't have this overhead. However, ArrayLists take up as much memory as is allocated for the capacity, regardless of whether elements have actually been added.The default initial capacity of an ArrayList is pretty small (10 from Java 1.4 - 1.8). But since the underlying implementation is an array, the array must be resized if you add a lot of elements. To avoid the high cost of resizing when you know you're going to add a lot of elements, construct the ArrayList with a higher initial capacity.If the data structures perspective is used to understand the two structures, a LinkedList is basically a sequential data structure which contains a head Node. The Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it. So, we can assert it is a recursive data structure (a Node contains another Node which has another Node and so on...). Addition of elements takes linear time in LinkedList as stated above.An ArrayList is a growable array. It is just like a regular array. Under the hood, when an element is added, and the ArrayList is already full to capacity, it creates another array with a size which is greater than previous size. The elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.",
                "Thus far, nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a LinkedList is \"lots more\" than an ArrayList so I did some number crunching to demonstrate exactly how much both lists take up for N null references.Since references are either 32 or 64 bits (even when null) on their relative systems, I have included 4 sets of data for 32 and 64 bit LinkedLists and ArrayLists.Note: The sizes shown for the ArrayList lines are for trimmed lists - In practice, the capacity of the backing array in an ArrayList is generally larger than its current element count.Note 2: (thanks BeeOnRope) As CompressedOops is default now from mid JDK6 and up, the values below for 64-bit machines will basically match their 32-bit counterparts, unless of course you specifically turn it off.The result clearly shows that LinkedList is a whole lot more than ArrayList, especially with a very high element count. If memory is a factor, steer clear of LinkedLists.The formulas I used follow, let me know if I have done anything wrong and I will fix it up. 'b' is either 4 or 8 for 32 or 64 bit systems, and 'n' is the number of elements. Note the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.ArrayList:ArrayList object header + size integer + modCount integer + array reference + (array oject header + b * n) + MOD(array oject, 8) + MOD(ArrayList object, 8) == 8 + 4 + 4 + b + (12 + b * n) + MOD(12 + b * n, 8) + MOD(8 + 4 + 4 + b + (12 + b * n) + MOD(12 + b * n, 8), 8)LinkedList:LinkedList object header + size integer + modCount integer + reference to header + reference to footer + (node object overhead + reference to previous element + reference to next element + reference to element) * n) + MOD(node object, 8) * n + MOD(LinkedList object, 8) == 8 + 4 + 4 + 2 * b + (8 + 3 * b) * n + MOD(8 + 3 * b, 8) * n + MOD(8 + 4 + 4 + 2 * b + (8 + 3 * b) * n + MOD(8 + 3 * b, 8) * n, 8)",
                "ArrayList is what you want. LinkedList is almost always a (performance) bug.Why LinkedList sucks:",
                "Algorithms: Big-Oh Notation (archived)ArrayLists are good for write-once-read-many or appenders, but bad at add/remove from the front or middle.",
                "See 2021 update from author below the original answer.Original answer (2011)As someone who has been doing operational performance engineering on very large scale SOA web services for about a decade, I would prefer the behavior of LinkedList over ArrayList.  While the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage, while under pressure, which is catastrophic behavior.Similarly, you can get better throughput in an app from the default throughput tenured garbage collector, but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.  Even though the CMS collector takes more resources and does not achieve the same raw throughput, it is a much better choice because it has more predictable and smaller latency.ArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.  In my experience at my job I cannot ignore worst-case latency.Update (Aug 27, 2021 -- 10 years later)This answer (my most historically upvoted answer on SO as well) is very likely wrong (for reasons outlined in the comments below).  I'd like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses, etc.  The copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).  This answer is also probably getting worse over time given hardware trends.  The only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized, but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.  And if you found some problem like that, then it really does call for reengineering whatever your solution is (and I don't like to lightly suggest reengineering old code because I myself maintain piles and piles of old code, but that'd be a very good case of where the original design has simply run out of runway and does need to be chucked).  I'll still leave my decades-old poor opinion up there for you to read though.  Simple, logical and pretty wrong.",
                "Yeah, I know, this is an ancient question, but I'll throw in my two cents:LinkedList is almost always the wrong choice, performance-wise.  There are some very specific algorithms where a LinkedList is called for, but those are very, very rare and the algorithm will usually specifically depend on LinkedList's ability to insert and delete elements in the middle of the list relatively quickly, once you've navigated there with a ListIterator.There is one common use case in which LinkedList outperforms ArrayList: that of a queue.  However, if your goal is performance, instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time, and can afford to allocate all the memory up front), or this CircularArrayList implementation.  (Yes, it's from 2001, so you'll need to generify it, but I got comparable performance ratios to what's quoted in the article just now in a recent JVM)",
                "Joshua Bloch, the author of LinkedList:Does anyone actually use LinkedList?  I wrote it, and I never use it.Link: https://twitter.com/joshbloch/status/583813919019573248I'm sorry for the answer not being as informative as the other answers, but I thought it would be the most self-explanatory if not revealing.",
                "It's an efficiency question. LinkedList is fast for adding and deleting elements, but slow to access a specific element. ArrayList is fast for accessing a specific element but can be slow to add to either end, and especially slow to delete in the middle.Array vs ArrayList vs LinkedList vs Vector goes more in depth, as does \nLinked List.",
                "Correct or Incorrect: Please execute test locally and decide for yourself!Edit/Remove is faster in LinkedList than ArrayList.ArrayList, backed by Array, which needs to be double the size, is worse in large volume application.Below is the unit test result for each operation.Timing is given in Nanoseconds.Here's the code:",
                "ArrayList is essentially an array. LinkedList is implemented as a double linked list.The get is pretty clear. O(1) for ArrayList, because ArrayList allow random access by using index. O(n) for LinkedList, because it needs to find the index first. Note: there are different versions of add and remove.LinkedList is faster in add and remove, but slower in get. In brief, LinkedList should be preferred if:=== ArrayList ====== LinkedList ===add(E e)add(int index, E element)Here is a figure from programcreek.com (add and remove are the first type, i.e., add an element at the end of the list and remove the element at the specified position in the list.):",
                "TL;DR due to modern computer architecture, ArrayList will be significantly more efficient for nearly any possible use-case - and therefore LinkedList should be avoided except some very unique and extreme cases.In theory, LinkedList has an O(1) for the add(E element)Also adding an element in the mid of a list should be very efficient.Practice is very different, as LinkedList is a Cache Hostile Data structure. From performance POV - there are very little cases where LinkedList could be better performing than the Cache-friendly ArrayList.Here are results of a benchmark testing inserting elements in random locations. As you can see - the array list if much more efficient, although in theory each insert in the middle of the list will require \"move\" the n later elements of the array (lower values are better):Working on a later generation hardware (bigger, more efficient caches) - the results are even more conclusive:LinkedList takes much more time to accomplish the same job. source Source CodeThere are two main reasons for this:Mainly - that the nodes of the LinkedList are scattered randomly across the memory. RAM (\"Random Access Memory\") isn't really random and blocks of memory need to be fetched to cache. This operation takes time, and when such fetches happen frequently - the memory pages in the cache need to be replaced all the time -> Cache misses -> Cache is not efficient.\nArrayList elements are stored on continuous memory - which is exactly what the modern CPU architecture is optimizing for.Secondary LinkedList required to hold back/forward pointers, which means 3 times the memory consumption per value stored compared to ArrayList.DynamicIntArray, btw, is a custom ArrayList implementation holding Int (primitive type) and not Objects - hence all data is really stored adjacently - hence even more efficient.A key elements to remember is that the cost of fetching memory block, is more significant than the cost accessing a single memory cell. That's why reader 1MB of sequential memory is up to x400 times faster than reading this amount of data from different blocks of memory:Source: Latency Numbers Every Programmer Should KnowJust to make the point even clearer, please check the benchmark of adding elements to the beginning of the list. This is a use-case where, in-theory, the LinkedList should really shine, and ArrayList should present poor or even worse-case results:Note: this is a benchmark of the C++ Std lib, but my previous experience shown the C++ and Java results are very similar. Source CodeCopying a sequential bulk of memory is an operation optimized by the modern CPUs - changing theory and actually making, again, ArrayList/Vector much more efficientCredits: All benchmarks posted here are created by Kjell Hedstr\u00f6m. Even more data can be found on his blog",
                "ArrayList is randomly accessible, while LinkedList is really cheap to expand and remove elements from. For most cases, ArrayList is fine.Unless you've created large lists and measured a bottleneck, you'll probably never need to worry about the difference.",
                "You can use one over the other based on the time complexities of the operations that you'd perform on that particular List.",
                "If your code has add(0) and remove(0), use a LinkedList and it's prettier addFirst() and removeFirst() methods. Otherwise, use ArrayList.And of course, Guava's ImmutableList is your best friend.",
                "Let's compare LinkedList and ArrayList w.r.t. below parameters:ArrayList is the resizable array implementation of list interface , whileLinkedList is the Doubly-linked list implementation of the list interface.ArrayList get(int index) operation runs in constant time i.e O(1)  whileLinkedList get(int index) operation run time is O(n) .The reason behind ArrayList being faster than LinkedList is that ArrayList uses an index based system for its elements as it internally uses an array data structure, on the other hand,LinkedList does not provide index-based access for its elements as it iterates either from the beginning or end (whichever is closer) to retrieve the node at the specified element index.Insertions in LinkedList are generally fast as compare to ArrayList. In LinkedList adding or insertion is O(1) operation .While in ArrayList, if the array is the full i.e worst case,  there is an extra cost of resizing array and copying elements to the new array, which makes runtime of add operation in ArrayList O(n), otherwise it is O(1).Remove operation in LinkedList is generally the same as ArrayList i.e. O(n).In LinkedList, there are two overloaded remove methods. one is remove() without any parameter which removes the head of the list and runs in constant time O(1). The other overloaded remove method in LinkedList is remove(int) or remove(Object) which removes the Object or int passed as a parameter. This method traverses the LinkedList until it found the Object and unlink it from the original list. Hence this method runtime is O(n).While in ArrayList remove(int) method involves copying elements from the old array to new updated array, hence its runtime is O(n).LinkedList can be iterated in reverse direction using descendingIterator() whilethere is no descendingIterator() in ArrayList , so we need to write our own code to iterate over the ArrayList in reverse direction.If the constructor  is not overloaded, then ArrayList creates an empty list of initial capacity 10, whileLinkedList  only constructs the empty list without any initial capacity.Memory overhead in LinkedList is more as compared to ArrayList as a node in LinkedList needs to maintain the addresses of the next and previous node. WhileIn ArrayList  each index only holds the actual object(data).Source",
                "I know this is an old post, but I honestly can't believe nobody mentioned that LinkedList implements Deque.  Just look at the methods in Deque (and Queue); if you want a fair comparison, try running LinkedList against ArrayDeque and do a feature-for-feature comparison.",
                "Here is the Big-O notation in both ArrayList and LinkedList and also CopyOnWrite-ArrayList:ArrayListLinkedListCopyOnWrite-ArrayListBased on these you have to decide what to choose. :)",
                "In addition to the other good arguments above, you should notice ArrayList implements RandomAccess interface, while LinkedList implements Queue.So, somehow they address slightly different problems, with difference of efficiency and behavior (see their list of methods).",
                "It depends upon what operations you will be doing more on the List.ArrayList is faster to access an indexed value. It is much worse when inserting or deleting objects.To find out more, read any article that talks about the difference between arrays and linked lists.",
                "See the Java Tutorials - List Implementations.",
                "An array list is essentially an array with methods to add items etc. (and you should use a generic list instead). It is a collection of items which can be accessed through an indexer  (for example [0]). It implies a progression from one item to the next.A linked list specifies a progression from one item to the next (Item a -> item b).  You can get the same effect with an array list, but a linked list absolutely says what item is supposed to follow the previous one.",
                "An important feature of a linked list (which I didn't read in another answer) is the concatenation of two lists. With an array this is O(n) (+ overhead of some reallocations) with a linked list this is only O(1) or O(2) ;-)Important: For Java its LinkedList this is not true! See Is there a fast concat method for linked list in Java?",
                "ArrayList and LinkedList have their own pros and cons.ArrayList uses contiguous memory address compared to LinkedList which uses pointers toward the next node. So when you want to look up an element in an ArrayList is faster than doing n iterations with LinkedList.On the other hand, insertion and deletion in a LinkedList are much easier because you just have to change the pointers whereas an ArrayList implies the use of shift operation for any insertion or deletion.If you have frequent retrieval operations in your app use an ArrayList. If you have frequent insertion and deletion use a LinkedList.",
                "1) Underlying Data StructureThe first difference between ArrayList and LinkedList comes with the fact that ArrayList is backed by Array while LinkedList is backed by LinkedList. This will lead to further differences in performance.2) LinkedList implements DequeAnother difference between ArrayList and LinkedList is that apart from the List interface, LinkedList also implements Deque interface, which provides first in first out operations for add() and poll() and several other Deque functions. 3) Adding elements in ArrayList Adding element in ArrayList is O(1) operation if it doesn't trigger re-size of Array, in which case it becomes O(log(n)), On the other hand, appending an element in LinkedList is O(1) operation, as it doesn't require any navigation.4) Removing an element from a positionIn order to remove an element from a particular index e.g. by calling remove(index), ArrayList performs a copy operation which makes it close to O(n) while LinkedList needs to traverse to that point which also makes it O(n/2), as it can traverse from either direction based upon proximity.5) Iterating over ArrayList or LinkedListIteration is the O(n) operation for both LinkedList and ArrayList where n is a number of an element.6) Retrieving element from a positionThe get(index) operation is O(1) in ArrayList while its O(n/2) in LinkedList, as it needs to traverse till that entry. Though, in Big O notation O(n/2) is just O(n) because we ignore constants there.7) MemoryLinkedList uses a wrapper object, Entry, which is a static nested class for storing data and two nodes next and previous while ArrayList just stores data in Array.So memory requirement seems less in the case of ArrayList than LinkedList except for the case where Array performs the re-size operation when it copies content from one Array to another.If Array is large enough it may take a lot of memory at that point and trigger Garbage collection, which can slow response time.From all the above differences between ArrayList vs LinkedList, It looks ArrayList is the better choice than LinkedList in almost all cases, except when you do a frequent add() operation than remove(), or get().It's easier to modify a linked list than ArrayList, especially if you are adding or removing elements from start or end because linked list internally keeps references of those positions and they are accessible in O(1) time.In other words, you don't need to traverse through the linked list to reach the position where you want to add elements, in that case, addition becomes O(n) operation. For example, inserting or deleting an element in the middle of a linked list.In my opinion, use ArrayList over LinkedList for most of the practical purpose in Java.",
                "I have read the responses, but there is one scenario where I always use a LinkedList over an ArrayList that I want to share to hear opinions:Every time I had a method that returns a list of data obtained from a DB I always use a LinkedList.My rationale was that because it is impossible to know exactly how many results am I getting, there will be not memory wasted (as in ArrayList with the difference between the capacity and actual number of elements), and there would be no time wasted trying to duplicate the capacity.As far a ArrayList, I agree that at least you should always use the constructor with the initial capacity, to minimize the duplication of the arrays as much as possible.",
                "ArrayList and LinkedList both implements List interface  and their methods and results are almost identical. However there are few differences between them which make one better over another depending on the requirement.1) Search: ArrayList search operation is pretty fast compared to the LinkedList search operation. get(int index) in ArrayList gives the performance of O(1) while LinkedList performance is O(n).Reason: ArrayList maintains index based system for its elements as it uses array data structure implicitly which makes it faster for searching an element in the list. On the other side LinkedList implements doubly linked list which requires the traversal through all the elements for searching an element.2) Deletion: LinkedList remove operation gives O(1) performance while ArrayList gives variable performance: O(n) in worst case (while removing first element) and O(1) in best case (While removing last element).Conclusion: LinkedList element deletion is faster compared to\n  ArrayList.Reason: LinkedList\u2019s each element maintains two pointers (addresses) which points to the both neighbor elements in the list. Hence removal only requires change in the pointer location in the two neighbor nodes (elements) of the node which is going to be removed. While In ArrayList all the elements need to be shifted to fill out the space created by removed element.3) Inserts Performance: LinkedList add method gives O(1) performance while ArrayList gives O(n) in worst case. Reason is same as explained for remove.4) Memory Overhead: ArrayList maintains indexes and element data while LinkedList maintains element data and two pointers for neighbor nodeshence the memory consumption is high in LinkedList comparatively.Hence if there is a requirement of frequent addition and deletion in application then LinkedList is a best choice.so If there are less add and remove operations and more search operations requirement, ArrayList would be your best bet.",
                "Operation get(i) in ArrayList is faster than LinkedList, because:\nArrayList: Resizable-array implementation of the List interface\nLinkedList: Doubly-linked list implementation of the List and Deque interfacesOperations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index.",
                "Both remove() and insert() have a runtime efficiency of O(n) for both ArrayLists and LinkedLists. However, the reason behind the linear processing time comes from two very different reasons:In an ArrayList, you get to the element in O(1), but actually removing or inserting something makes it O(n) because all the following elements need to be changed.In a LinkedList, it takes O(n) to actually get to the desired element, because we have to start at the very beginning until we reach the desired index. Actually removing or inserting is constant, because we only have to change 1 reference for remove() and 2 references for insert().Which of the two is faster for inserting and removing depends on where it happens. If we are closer to the beginning the LinkedList will be faster, because we have to go through relatively few elements. If we are closer to the end an ArrayList will be faster, because we get there in constant time and only have to change the few remaining elements that follow it. When done precisely in the middle the LinkedList will be faster because going through n elements is quicker than moving n values.Bonus: While there is no way of making these two methods O(1) for an ArrayList, there actually is a way to do this in LinkedLists. Let's say we want to go through the entire List removing and inserting elements on our way. Usually, you would start from the very beginning for each element using the LinkedList, we could also \"save\" the current element we're working on with an Iterator. With the help of the Iterator, we get an O(1) efficiency for remove() and insert() when working in a LinkedList. Making it the only performance benefit I'm aware of where a LinkedList is always better than an ArrayList.",
                "One of the tests I saw on here only conducts the test once.  But what I have noticed is that you need to run these tests many times and eventually their times will converge.  Basically the JVM needs to warm up.  For my particular use case I needed to add/remove items to a list that grows to about 500 items.  In my tests LinkedList came out faster, with LinkedList coming in around 50,000 NS and ArrayList coming in at around 90,000 NS... give or take.  See the code below.",
                "ArrayList extends AbstractList and implements the List Interface. ArrayList is dynamic array.It can be said that it was basically created to overcome the drawbacks of arrays\nThe LinkedList class extends AbstractSequentialList and implements List,Deque, and Queue interface.\nPerformance\narraylist.get() is  O(1) whereas linkedlist.get() is O(n) \narraylist.add() is  O(1) and linkedlist.add() is 0(1)\narraylist.contains() is O(n) andlinkedlist.contains() is O(n) \narraylist.next() is O(1) and linkedlist.next() is O(1)\narraylist.remove() is O(n) whereas linkedlist.remove() is O(1)\nIn arraylistiterator.remove() is O(n) whereas In linkedlist iterator.remove()is O(1)"
            ]
        },
        {
            "tag": "convert_to_int",
            "patterns": [
                "How do I convert a String to an int in Java?",
                "String conversion",
                "String to integer"
            ],
            "responses": [
                "If you look at the Java documentation you'll notice the \"catch\" is that this function can throw a NumberFormatException, which you can handle:(This treatment defaults a malformed number to 0, but you can do something else if you like.)Alternatively, you can use an Ints method from the Guava library, which in combination with Java 8's Optional, makes for a powerful and concise way to convert a string into an int:",
                "For example, here are two ways:There is a slight difference between these methods:The same is for all cases: Short.valueOf/parseShort, Long.valueOf/parseLong, etc.",
                "Well, a very important point to consider is that the Integer parser throws NumberFormatException as stated in Javadoc.It is important to handle this exception when trying to get integer values from split arguments or dynamically parsing something.",
                "Do it manually:",
                "An alternate solution is to use Apache Commons' NumberUtils:The Apache utility is nice because if the string is an invalid number format then 0 is always returned. Hence saving you the try catch block.Apache NumberUtils API Version 3.4",
                "You can also use public static Integer decode(String nm) throws NumberFormatException.It also works for base 8 and 16:If you want to get int instead of Integer you can use:Unboxing:intValue():",
                "Currently I'm doing an assignment for college, where I can't use certain expressions, such as the ones above, and by looking at the ASCII table, I managed to do it. It's a far more complex code, but it could help others that are restricted like I was.The first thing to do is to receive the input, in this case, a string of digits; I'll call it String number, and in this case, I'll exemplify it using the number 12, therefore String number = \"12\";Another limitation was the fact that I couldn't use repetitive cycles, therefore, a for cycle (which would have been perfect) can't be used either. This limits us a bit, but then again, that's the goal. Since I only needed two digits (taking the last two digits), a simple charAtsolved it:Having the codes, we just need to look up at the table, and make the necessary adjustments:Now, why double? Well, because of a really \"weird\" step. Currently we have two doubles, 1 and 2, but we need to turn it into 12, there isn't any mathematic operation that we can do.We're dividing the latter (lastdigit) by 10 in the fashion 2/10 = 0.2 (hence why double) like this:This is merely playing with numbers. We were turning the last digit into a decimal. But now, look at what happens:Without getting too into the math, we're simply isolating units the digits of a number. You see, since we only consider 0-9, dividing by a multiple of 10 is like creating a \"box\" where you store it (think back at when your first grade teacher explained you what a unit and a hundred were). So:And there you go. You turned a String of digits (in this case, two digits), into an integer composed of those two digits, considering the following limitations:",
                "Methods to do that:Integer.valueOf produces an Integer object and all other methods a primitive int.The last two methods are from commons-lang3 and a big article about converting here.",
                "Whenever there is the slightest possibility that the given String does not contain an Integer, you have to handle this special case. Sadly, the standard Java methods Integer::parseInt and Integer::valueOf throw a NumberFormatException to signal this special case. Thus, you have to use exceptions for flow control, which is generally considered bad coding style.In my opinion, this special case should be handled by returning an empty Optional<Integer>. Since Java does not offer such a method, I use the following wrapper:Example usage:While this is still using exceptions for flow control internally, the usage code becomes very clean. Also, you can clearly distinguish the case where -1 is parsed as a valid value and the case where an invalid String could not be parsed.",
                "Use Integer.parseInt(yourString).Remember the following things:Integer.parseInt(\"1\");      // okInteger.parseInt(\"-1\");     // okInteger.parseInt(\"+1\");     // okInteger.parseInt(\" 1\");     // Exception (blank space)Integer.parseInt(\"2147483648\"); // Exception (Integer is limited to a maximum value of 2,147,483,647)Integer.parseInt(\"1.1\"); // Exception (. or , or whatever is not allowed)Integer.parseInt(\"\"); // Exception (not 0 or something)There is only one type of exception: NumberFormatException",
                "Converting a string to an int is more complicated than just converting a number. You have think about the following issues:",
                "We can use the parseInt(String str) method of the Integer wrapper class for converting a String value to an integer value.For example:The Integer class also provides the valueOf(String str) method:We can also use toInt(String strValue) of NumberUtils Utility Class for the conversion:",
                "I'm have a solution, but I do not know how effective it is. But it works well, and I think you could improve it. On the other hand, I did a couple of tests with JUnit which step correctly. I attached the function and testing:Testing with JUnit:",
                "You can also begin by removing all non-numerical characters and then parsing the integer:But be warned that this only works for non-negative numbers.",
                "Google Guava has tryParse(String), which returns null if the string couldn't be parsed, for example:",
                "Apart from the previous answers, I would like to add several functions. These are results while you use them:Implementation:",
                "As mentioned, Apache Commons' NumberUtils can do it. It returns 0 if it cannot convert a string to an int.You can also define your own default value:Example:",
                "You can use new Scanner(\"1244\").nextInt(). Or ask if even an int exists: new Scanner(\"1244\").hasNextInt()",
                "You can use this code also, with some precautions.Option #1: Handle the exception explicitly, for example, showing a message dialog and then stop the execution of the current workflow. For example:Option #2: Reset the affected variable if the execution flow can continue in case of an exception. For example, with some modifications in the catch blockUsing a string constant for comparison or any sort of computing is always a good idea, because a constant never returns a null value.",
                "In programming competitions, where you're assured that number will always be a valid integer, then you can write your own method to parse input. This will skip all validation related code (since you don't need any of that) and will be a bit more efficient.For valid positive integer:For both positive and negative integers:If you are expecting a whitespace before or after these numbers,\nthen make sure to do a str = str.trim() before processing further.",
                "For a normal string you can use:For a String builder and String buffer you can use:",
                "Simply you can try this:",
                "Make sure there is no non-numeric data in the string.",
                "Here we go",
                "I am a little bit surprised that nobody mentioned the Integer constructor that takes String as a parameter.So, here it is:Java 8 - Integer(String).Of course, the constructor will return type Integer, and an unboxing operation converts the value to int.Note 1: It's important to mention: This constructor calls the parseInt method.Note 2: It's deprecated: @Deprecated(since=\"9\") - JavaDoc.",
                "Use Integer.parseInt() and put it inside a try...catch block to handle any errors just in case a non-numeric character is entered, for example,",
                "It can be done in seven ways:Ints.tryParse:int result = Ints.tryParse(number);NumberUtils.createInteger:Integer result = NumberUtils.createInteger(number);NumberUtils.toInt:int result = NumberUtils.toInt(number);Integer.valueOf:Integer result = Integer.valueOf(number);Integer.parseInt:int result = Integer.parseInt(number);Integer.decode:int result = Integer.decode(number);Integer.parseUnsignedInt:int result = Integer.parseUnsignedInt(number);",
                "This is a complete program with all conditions positive and negative without using a library",
                "One method is parseInt(String). It returns a primitive int:The second method is valueOf(String), and it returns a new Integer() object:",
                "public static int parseInt(String s)throws NumberFormatExceptionYou can use Integer.parseInt() to convert a String to an int.Convert a String, \"20\", to a primitive int:Output-20If the string does not contain a parsable integer, it will throw NumberFormatException:public static Integer valueOf(String s)throws NumberFormatExceptionYou can use Integer.valueOf(). In this it will return an Integer object.Output-20References\nhttps://docs.oracle.com/en/"
            ]
        },
        {
            "tag": "serialVersionUID",
            "patterns": [
                "What is a serialVersionUID and why should I use it?",
                "serialVersionUID",
                "Serializable"
            ],
            "responses": [
                "The docs for java.io.Serializable are probably about as good an explanation as you'll get:The serialization runtime associates with each serializable class a version number, called a serialVersionUID, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different serialVersionUID than that of the corresponding sender's class, then deserialization will result in an\nInvalidClassException. A serializable class can declare its own serialVersionUID explicitly by declaring a field named serialVersionUID that must be static, final, and of type long:If a serializable class does not explicitly declare a serialVersionUID, then the serialization runtime will calculate a default serialVersionUID value for that class based on various aspects of the class, as described in the Java(TM) Object Serialization Specification. However, it is strongly recommended that all serializable classes explicitly declare serialVersionUID values, since the default serialVersionUID computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected InvalidClassExceptions during deserialization. Therefore, to guarantee a consistent serialVersionUID value across different java compiler implementations, a serializable class must declare an explicit serialVersionUID value. It is also strongly advised that explicit serialVersionUID declarations use the private modifier where possible, since such declarations apply only to the immediately declaring class \u2014 serialVersionUID fields are not useful as inherited members.",
                "If you're serializing just because you have to serialize for the implementation's sake (who cares if you serialize for an HTTPSession, for instance...if it's stored or not, you probably don't care about de-serializing a form object), then you can ignore this.If you're actually using serialization, it only matters if you plan on storing and retrieving objects using serialization directly.  The serialVersionUID represents your class version, and you should increment it if the current version of your class is not backwards compatible with its previous version.Most of the time, you will probably not use serialization directly.  If this is the case, generate a default SerialVersionUID by clicking the quick fix option and don't worry about it.",
                "I can't pass up this opportunity to plug Josh Bloch's book Effective Java (2nd Edition).  Chapter 10 is an indispensible resource on Java serialization.Per Josh, the automatically-generated UID is generated based on a class name, implemented interfaces, and all public and protected members.  Changing any of these in any way will change the serialVersionUID.  So you don't need to mess with them only if you are certain that no more than one version of the class will ever be serialized (either across processes or retrieved from storage at a later time).If you ignore them for now, and find later that you need to change the class in some way but maintain compatibility w/ old version of the class, you can use the JDK tool serialver to generate the serialVersionUID on the old class, and explicitly set that on the new class.  (Depending on your changes you may need to also implement custom serialization by adding writeObject and readObject methods - see Serializable javadoc or aforementioned chapter 10.)",
                "You can tell Eclipse to ignore these serialVersionUID  warnings:Window > Preferences > Java > Compiler > Errors / Warnings > Potential Programming ProblemsIn case you didn't know, there are a lot of other warnings you can enable in this section (or even have some reported as errors), many are very useful:and many more.",
                "serialVersionUID facilitates versioning of serialized data. Its value is stored with the data when serializing. When de-serializing, the same version is checked to see how the serialized data matches the current code.If you want to version your data, you normally start with a serialVersionUID of 0, and bump it with every structural change to your class which alters the serialized data (adding or removing non-transient fields).The built-in de-serialization mechanism (in.defaultReadObject()) will refuse to de-serialize from old versions of the data. But if you want to you can define your own readObject()-function which can read back old data. This custom code can then check the serialVersionUID in order to know which version the data is in and decide how to de-serialize it. This versioning technique is useful if you store serialized data which survives several versions of your code.But storing serialized data for such a long time span is not very common. It is far more common to use the serialization mechanism to temporarily write data to for instance a cache or send it over the network to another program with the same version of the relevant parts of the codebase.In this case you are not interested in maintaining backwards compatibility. You are only concerned with making sure that the code bases which are communicating indeed have the same versions of relevant classes. In order to facilitate such a check, you must maintain the serialVersionUID just like before and not forget to update it when making changes to your classes.If you do forget to update the field, you might end up with two different versions of a class with different structure but with the same serialVersionUID. If this happens, the default mechanism (in.defaultReadObject()) will not detect any difference, and try to de-serialize incompatible data. Now you might end up with a cryptic runtime error or silent failure (null fields). These types of errors might be hard to find.So to help this usecase, the Java platform offers you a choice of not setting the serialVersionUID manually. Instead, a hash of the class structure will be generated at compile-time and used as id. This mechanism will make sure that you never have different class structures with the same id, and so you will not get these hard-to-trace runtime serialization failures mentioned above.But there is a backside to the auto-generated id strategy. Namely that the generated ids for the same class might differ between compilers (as mentioned by Jon Skeet above). So if you communicate serialized data between code compiled with different compilers, it is recommended to maintain the ids manually anyway.And if you are backwards-compatible with your data like in the first use case mentioned, you also probably want to maintain the id yourself. This in order to get readable ids and have greater control over when and how they change.",
                "What is a serialVersionUID and why should I use it?SerialVersionUID is a unique identifier for each class, JVM uses it to compare the versions of the class ensuring that the same class was used during Serialization is loaded during Deserialization.Specifying one gives more control, though JVM does generate one if you don't specify. The value generated can differ between different compilers. Furthermore, sometimes you just want for some reason to forbid deserialization of old serialized objects [backward incompatibility], and in this case you just have to change the serialVersionUID.The javadocs for Serializable say:the default serialVersionUID computation is highly sensitive to class\n  details that may vary depending on compiler implementations, and can\n  thus result in unexpected InvalidClassExceptions during\n  deserialization.Therefore, you must declare serialVersionUID because it give us more control.This article has some good points on the topic.",
                "Original question has asked for 'why is it important' and 'example' where this Serial Version ID would be useful. Well I have found one.Say you create a Car class, instantiate it, and write it out to an object stream. The flattened car object sits in the file system for some time. Meanwhile, if the Car class is modified by adding a new field. Later on, when you try to read (i.e. deserialize) the flattened Car object, you get the java.io.InvalidClassException \u2013 because all serializable classes are automatically given a unique identifier. This exception is thrown when the identifier of the class is not equal to the identifier of the flattened object. If you really think about it, the exception is thrown because of the addition of the new field. You can avoid this exception being thrown by controlling the versioning yourself by declaring an explicit serialVersionUID. There is also a small performance benefit in explicitly declaring your serialVersionUID (because does not have to be calculated). So, it is best practice to add your own serialVersionUID to your Serializable classes as soon as you create them as shown below:",
                "First I need to explain what serialization is.Serialization allows to convert an object to a stream, for sending that object over the network OR Save to file OR save into DB for letter usage.There are some rules for serialization.An object is serializable only if its class or its superclass implements the Serializable interfaceAn object is serializable (itself implements the Serializable interface) even if its superclass is not. However, the first superclass in the hierarchy of the serializable class, that does not implements Serializable interface, MUST have a no-arg constructor. If this is violated, readObject() will produce a java.io.InvalidClassException in runtimeAll primitive types are serializable.Transient fields (with transient modifier) are NOT serialized, (i.e., not saved or restored). A class that implements Serializable must mark transient fields of classes that do not support serialization (e.g., a file stream).Static fields (with static modifier) are not serialized.When Object is serialized, Java Runtime associates the serial version number aka, the serialVersionID.Where we need serialVersionID:During the deserialization to verify that sender and receiver are compatible with respect to serialization. If the receiver loaded the class with a different serialVersionID then deserialization will end with InvalidClassCastException.\nA serializable class can declare its own serialVersionUID explicitly by declaring a field named serialVersionUID that must be static, final, and of type long.Let's try this with an example.Create Serialize ObjectDeserialize the objectNOTE: Now change the serialVersionUID of the Employee class and save:And execute the Reader class. Not to execute the Writer class and you will get the exception.",
                "If you will never need to serialize your objects to byte array and send/store them, then you don't need to worry about it. If you do, then you must consider your serialVersionUID since the deserializer of the object will match it to the version of object its classloader has. Read more about it in the Java Language Specification.",
                "If you get this warning on a class you don't ever think about serializing, and that you didn't declare yourself implements Serializable, it is often because you inherited from a superclass, which implements Serializable. Often then it would be better to delegate to such a object instead of using inheritance.So, instead ofdoand in the relevant methods call myList.foo() instead of this.foo() (or super.foo()). (This does not fit in all cases, but still quite often.)I often see people extending JFrame or such, when they really only need to delegate to this. (This also helps for auto-completing in a IDE, since JFrame has hundreds of methods, which you don't need when you want to call your custom ones on your class.)One case where the warning (or the serialVersionUID) is unavoidable is when you extend from AbstractAction, normally in a anonymous class, only adding the actionPerformed-method. I think there shouldn't be a warning in this case (since you normally can't reliable serialize and deserialize such anonymous classes anyway accross different versions of your class), but I'm not sure how the compiler could recognize this.",
                "To understand the significance of field serialVersionUID, one should understand how Serialization/Deserialization works.When a Serializable class object is serialized Java Runtime associates a serial version no.(called as serialVersionUID) with this serialized object. At the time when you deserialize this serialized object Java Runtime matches the serialVersionUID of serialized object with the serialVersionUID of the class. If both are equal then only it proceeds with the further process of deserialization else throws InvalidClassException.So we conclude that to make Serialization/Deserialization process successful the serialVersionUID of serialized object must be equivalent to the serialVersionUID of the class. In case if programmer specifies the serialVersionUID value explicitly in the program then the same value will be associated with the serialized object and the class, irrespective of the serialization and deserialzation platform(for ex. serialization might be done on platform like windows by using sun or MS JVM and Deserialization might be on different platform Linux using Zing JVM).But in case if serialVersionUID is not specified by programmer then while doing Serialization\\DeSerialization  of any object, Java runtime uses its own algorithm to calculate it. This serialVersionUID calculation algorithm varies from one JRE to another. It is also possible that the environment where the object is serialized is using one JRE (ex: SUN JVM) and the environment where deserialzation happens is using Linux Jvm(zing). In such cases serialVersionUID associated with serialized object will be different than the serialVersionUID of class calculated at deserialzation environment. In turn deserialization will not be successful. So to avoid such situations/issues programmer must always specify serialVersionUID of Serializable class.",
                "As for an example where the missing serialVersionUID might cause a problem:I'm working on this Java EE application that is composed of a Web module that uses an EJB module. The web module calls the EJB module remotely and passes a POJO that implements Serializable as an argument.This POJO's class was packaged inside the EJB jar and inside it's own jar in the WEB-INF/lib of the web module. They're actually the same class, but when I package the EJB module I unpack this POJO's jar to pack it together with the EJB module.The call to the EJB was failing with the Exception below because I hadn't declared its serialVersionUID:",
                "Don't bother, the default calculation is really good and suffice for 99,9999% of the cases. And if you run into problems, you can - as already stated - introduce UID's as the need arrise (which is highly unlikely)",
                "I generally use serialVersionUID in one context:  When I know it will be leaving the context of the Java VM.I would know this when I to use ObjectInputStream and ObjectOutputStream for my application or if I know a library/framework I use will use it.  The serialVersionID ensures different Java VMs of varying versions or vendors will inter-operate correctly or if it is stored and retrieved outside the VM for example HttpSession the session data can remain even during a restart and upgrade of the application server.For all other cases, I usesince most of the time the default serialVersionUID is sufficient.  This includes Exception, HttpServlet.",
                "Field data represents some information stored in the class.\nClass implements the Serializable interface, \nso eclipse automatically offered  to declare the serialVersionUID field. Lets start with value 1 set there.If you don't want that warning to come, use this:",
                "Why use SerialVersionUID inside Serializable class in Java?During serialization, Java runtime creates a version number for a class, so that it can de-serialize it later. This version number is known as SerialVersionUID in Java.SerialVersionUID is used to version serialized data. You can only de-serialize a class if it's SerialVersionUID matches with the serialized instance. When we don't declare SerialVersionUID in our class, Java runtime generates it for us but its not recommended. It's recommended to declare SerialVersionUID as private static final long variable to avoid default mechanism.When you declare a class as Serializable by implementing marker interface java.io.Serializable, Java runtime persist instance of that class into disk by using default Serialization mechanism, provided you have not customized the process using Externalizable interface.see also Why use SerialVersionUID inside Serializable class in Java",
                "SerialVersionUID is used for version control of object. you can specify serialVersionUID in your class file also. Consequence of not specifying serialVersionUID is that when you add or modify any field in class then already serialized class will not be able to recover because serialVersionUID generated for new class and for old serialized object will be different. Java serialization process relies on correct serialVersionUID for recovering state of serialized object and throws java.io.InvalidClassException in case of serialVersionUID mismatchRead more: http://javarevisited.blogspot.com/2011/04/top-10-java-serialization-interview.html#ixzz3VQxnpOPZ",
                "It would be nice if CheckStyle could verify that the serialVersionUID on a class that implements Serializable has a good value, i.e. that it matches what the serial version id  generator would produce.  If you have a project with lots of serializable DTOs, for example, remembering to delete the existing serialVersionUID and regenerate it is a pain, and currently the only way (that I know of) to verify this is to regenerate for each class and compare to the old one.  This is very very painful.",
                "If you want to amend a huge number of classes which had no serialVersionUID set in the first place while maintain the compatibility with the old classes, tools like IntelliJ Idea, Eclipse fall short as they generate random numbers and does not work on a bunch of files in one go. I come up the following bash script(I'm sorry for Windows users, consider buy a Mac or convert to Linux) to make amending serialVersionUID issue with ease:you save the this script, say add_serialVersionUID.sh to you ~/bin. Then you run it in the root directory of your Maven or Gradle project like:This .lst includes the list of java files to add the serialVersionUID in the following format:This script uses the JDK serialVer tool under hood. So make sure your $JAVA_HOME/bin is in the PATH.",
                "This question is very well documented in Effective Java by Joshua Bloch. A very good book and a must read. I will outline some of the reasons below :The serialization runtime comes up with a number called Serial version for each serializable class. This number is called serialVersionUID. Now there is some Math behind this number and it comes out based on the fields/methods that are defined in the class. For the same class the same version is generated every time. This number is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different serialVersionUID than that of the corresponding sender's class, then deserialization will result in an InvalidClassException.If the class is serializable you can also declare your own serialVersionUID explicitly  by declaring a field named \"serialVersionUID\" that must be static, final, and of type long. Most IDE's like Eclipse help you generate that long string.",
                "Each time an object is serialized the object is stamped with a version ID number for the object's class.This ID is called serialVersionUID and it is computed based on information about the class structure. Suppose you made an Employee class and it has version id #333 (assigned by JVM),Now when you will serialize the object of that class (Suppose Employee object), JVM will assign UID to it as #333.Consider a situation - in the future you need to edit or change your class and in that case when you modify it, JVM will assign it a new UID (Suppose #444).\nNow when you try to deserialize the employee object, JVM will compare serialized object's (Employee object) version ID(#333) with that of the class i.e #444(Since it was changed). On comparison JVM will find both version UID are different and hence Deserialization will fail.\nHence if serialVersionID for each class is defined by programmer itself. It will be same even if the class is evolved in future and hence JVM will always find that class is compatible with serialized object even though the class is changed. For more Info you can refer chapter 14 of HEAD FIRST JAVA.",
                "A Simple Explanation:Are you serializing data?Serialization is basically writing class data to a file/stream/etc.  De-serialization is reading that data back to a class.Do you intend to go into production?If you are just testing something with unimportant/fake data, then don't worry about it (unless you are testing serialization directly).Is this the first version?If so, set serialVersionUID=1L.Is this the second, third, etc. prod version?Now you need to worry about serialVersionUID, and should look into it in depth.Basically, if you don't update the version correctly when you update a class you need to write/read, you will get an error when you try to read old data.",
                "To tell the long story short this field is used to check if serialized data can be deserialized correctly. Serialization and deserialization are often made by different copies of program - for example server converts object to string and client converts received string to object. This field tells that both operates with same idea about what this object is. This field helps when:you have many different copies of your program in different places (like 1 server and 100 clients). If you will change your object, alter your version number and forget to update one this clients, it will know that he is not capable of deserializationyou have stored your data in some file and later on you try to open it with updated version of your program with modified object - you will know that this file is not compatible if you keep your version rightWhen is it important?Most obvious - if you add some fields to your object, older versions will not be able to use them because they do not have these fields in their object structure.Less obvious - When you deserialize object, fields that where not present in string will be kept as NULL. If you have removed field from your object, older versions will keep this field as allways-NULL that can lead to misbehavior if older versions rely on data in this field (anyway you have created it for something, not just for fun :-) )Least obvious - Sometimes you change the idea you put in some field's meaning. For example when you are 12 years old you mean \"bicycle\" under \"bike\", but when you are 18 you mean \"motorcycle\" - if your friends will invite you to \"bike ride across city\" and you will be the only one who came on bicycle, you will undestand how important it is to keep same meaning across fields :-)",
                "'serialVersionUID' is a 64 bit number used to uniquely identify a class during deserialization process. When you serialize an object, serialVersionUID of the class also written to the file. Whenever you deserialize this object, java run time extract this serialVersionUID value from the serialized data and compare the same value associate with the class. If both do not match, then 'java.io.InvalidClassException' will be thrown.If a serializable class do not explicitly declare a serialVersionUID, then serialization runtime will calculate  serialVersionUID value for that class based on various aspects of the class like fields, methods etc.,, You can refer this link for demo application.",
                "Firstly to answer your question, when we don't declare SerialVersionUID in our class, Java runtime generates it for us, but that process is sensitive to many class meta data including number of fields, type of fields, access modifier of fields, interface implemented by class etc. Therefore it is recommended to declare it ourselves and Eclipse is warning you about the same.Serialization:\nWe often work with important objects whose state (data in the variables of the object) is so important that we can not risk to lose it due to power/system failures (or) network failures in case of sending the object state to other machine. The solution for this problem is named \"Persistence\" which simply means persisting (holding/saving) the data. Serialization is one of many other ways to achieve persistence (by saving data to disk/memory). When saving the state of the object, it is important to create an identity for the object, to be able to properly read it back (de-serialization). This unique identification is ID is SerialVersionUID."
            ]
        },
        {
            "tag": "ArrayList_Initialization",
            "patterns": [
                "Initialization of an ArrayList in one line",
                "Array list Initialization",
                "Initialization"
            ],
            "responses": [
                "It would be simpler if you were to just declare it as a List - does it have to be an ArrayList?Or if you have only one element:This would mean that places is immutable (trying to change it will cause an UnsupportedOperationException exception to be thrown).To make a mutable list that is a concrete ArrayList you can create an ArrayList from the immutable list:And import the correct package:",
                "Actually, probably the \"best\" way to initialize the ArrayList is the method you wrote, as it does not need to create a new List in any way:The catch is that there is quite a bit of typing required to refer to that list instance.There are alternatives, such as making an anonymous inner class with an instance initializer (also known as an \"double brace initialization\"):However, I'm not too fond of that method because what you end up with is a subclass of ArrayList which has an instance initializer, and that class is created just to create one object -- that just seems like a little bit overkill to me.What would have been nice was if the Collection Literals proposal for Project Coin was accepted (it was slated to be introduced in Java 7, but it's not likely to be part of Java 8 either.):Unfortunately it won't help you here, as it will initialize an immutable List rather than an ArrayList, and furthermore, it's not available yet, if it ever will be.",
                "This will give you an immutable List, so it cannot be changed.\nWhich is what you want in most cases where you're prepopulating it.This will give you a List* backed by an array, so it cannot change length.\nBut you can call List.set(...), so it's still mutable.*\nImplementation detail: It's a private nested class inside java.util.Arrays, named ArrayList,\nwhich is a different class from java.util.ArrayList, even though their simple names are the same.You can make Java 8 Arrays.asList even shorter with a static import:Any modern IDE* will suggest and do this for you.I don't recommend statically importing the List.of method as just of, because it's confusing.*\nFor example, in IntelliJ IDEA you press Alt+Enter and select Static import method...Why does it have to be a List?\nWith Java 8 or later you can use a Stream which is more flexible:You can concatenate Streams:Or you can go from a Stream to a List:But preferably, just use the Stream without collecting it to a List.If you want to both prepopulate an ArrayList and add to it afterwards, useor in Java 8 or earlier:or using Stream:But again, it's better to just use the Stream directly instead of collecting it to a List.*You probably don't need specifically an ArrayList. To quote JEP 269:There is a small set of use cases for initializing a mutable collection instance with a predefined set of values. It's usually preferable to have those predefined values be in an immutable collection, and then to initialize the mutable collection via a copy constructor.(emphasis mine)You said you've declared the list as an ArrayList in your code, but you should only do that if you're using some member of ArrayList that's not in List.Which you are most likely not doing.Usually you should just declare variables by the most general interface that you are going to use (e.g. Iterable, Collection, or List), and initialize them with the specific implementation (e.g. ArrayList, LinkedList or Arrays.asList()).Otherwise you're limiting your code to that specific type, and it'll be harder to change when you want to.For example, if you're passing an ArrayList to a void method(...):Another example would be always declaring variable an InputStream even though it is usually a FileInputStream or a BufferedInputStream, because one day soon you or somebody else will want to use some other kind of InputStream.",
                "If you need a simple list of size 1:If you need a list of several objects:",
                "With Guava you can write:In Guava there are also other useful static constructors. You can read about them here.",
                "With java-9 and above, as suggested in JEP 269: Convenience Factory Methods for Collections, this could be achieved using collection literals now with -A similar approach would apply to Map as well -which is similar to Collection Literals proposal as stated by @coobird. Further clarified in the JEP as well -AlternativesLanguage changes have been considered several times, and rejected:Project Coin Proposal, 29 March 2009Project Coin Proposal, 30 March 2009JEP 186 discussion on lambda-dev, January-March 2014The language\nproposals were set aside in preference to a library-based proposal as\nsummarized in this message.Related: What is the point of overloaded Convenience Factory Methods for Collections in Java 9",
                "Collection literals didn't make it into Java 8, but it is possible to use the Stream API to initialize a list in one rather long line:If you need to ensure that your List is an ArrayList:",
                "You could create a factory method:But it's not much better than your first refactoring.For greater flexibility, it can be generic:",
                "In Java 9 we can easily initialize an ArrayList in a single line:orThis new approach of Java 9 has many advantages over the previous ones:See this post for more details -> What is the difference between List.of and Arrays.asList?",
                "Simply use below code as follows.",
                "About the most compact way to do this is:",
                "Here is another way:",
                "With Eclipse Collections you can write the following:You can also be more specific about the types and whether they are Mutable or Immutable.You can also do the same with Sets and Bags:Note: I am a committer for Eclipse Collections.",
                "(Should be a comment, but too long, so new reply).  As others have mentioned, the Arrays.asList method is fixed size, but that's not the only issue with it.  It also doesn't handle inheritance very well.  For instance, suppose you have the following:The above results in a compiler error, because List<B>(which is what is returned by Arrays.asList) is not a subclass of List<A>, even though you can add Objects of type B to a List<A> object.  To get around this, you need to do something like:This is probably the best way to go about doing this, esp. if you need an unbounded list or need to use inheritance.",
                "You can use the below statements:",
                "Like Tom said:But since you complained of wanting an ArrayList, you should firstly know that ArrayList is a subclass of List and you could simply add this line:Although, that might make you complain of 'performance'.In that case it doesn't make sense to me, why, since your list is predefined it wasn't defined as an array (since the size is known at time of initialisation). And if that's an option for you:In case you don't care of the minor performance differences then you can also copy an array to an ArrayList very simply:Okay, but in future you need a bit more than just the place name, you need a country code too. Assuming this is still a predefined list which will never change during run-time, then it's fitting to use an enum set, which would require re-compilation if the list needed to be changed in the future.would become:Enum's have a static values method that returns an array containing all of the values of the enum in the order they are declared, e.g.:In that case I guess you wouldn't need your ArrayList.P.S. Randyaa demonstrated another nice way using the static utility method Collections.addAll.",
                "Java 9 has the following method to create an immutable list:which is easily adapted to create a mutable list, if required:Similar methods are available for Set and Map.",
                "Yes with the help of Arrays you can initialize array list in one line,",
                "You can use StickyList from Cactoos:",
                "Using  Arrays.asList(\"Buenos Aires\", \"C\u00f3rdoba\", \"La Plata\"); is correct. but Any calls to Arrays.asList() with zero arguments or only one argument could be replaced with either a call to Collections.singletonList() or Collections.emptyList() which will save some memory.Note: the list returned by Collections.singletonList() is immutable, while the list returned Arrays.asList() allows calling the set() method. This may break the code in rare cases.",
                "Try with this code line:",
                "In Java, you can't doAs was pointed out, you'd need to do a double brace initialization:But this may force you into adding an annotation @SuppressWarnings(\"serial\") or generate a serial UUID which is annoying. Also most code formatters will unwrap that into multiple statements/lines.Alternatively you can dobut then you may want to do a @SuppressWarnings(\"unchecked\").Also according to javadoc you should be able to do this:But I'm not able to get it to compile with JDK 1.6.",
                "If you'd need to have a list of one item!Collections is from java.util package.",
                "The best way to do it:Just create a function that can have as many elements as you want and call it to add them in one line.",
                "Here is code by AbacusUtilDeclaration\uff1a I'm the developer of AbacusUtil.",
                "interestingly no one-liner with the other overloaded Stream::collect method is listed",
                "For me Arrays.asList() is the best and convenient one. I always like to initialize that way.\nIf you are a beginner into Java Collections then I would like you to refer ArrayList initialization",
                "Why not make a simple utility function that does this?\"ll\" stands for \"literal list\"."
            ]
        },
        {
            "tag": "private_methods",
            "patterns": [
                "How do I test a class that has private methods, fields or inner classes?",
                "Classes with private methods",
                "Classes with fields methods",
                "Classes with inner methods"
            ],
            "responses": [
                "If you have somewhat of a legacy Java application, and you're not allowed to change the visibility of your methods, the best way to test private methods is to use reflection.Internally we're using helpers to get/set private and private static variables as well as invoke private and private static methods. The following patterns will let you do pretty much anything related to the private methods and fields. Of course, you can't change private static final variables through reflection.And for fields:Notes:",
                "The best way to test a private method is via another public method. If this cannot be done, then one of the following conditions is true:",
                "When I have private methods in a class that are sufficiently complicated that I feel the need to test the private methods directly, that is a code smell: my class is too complicated.My usual approach to addressing such issues is to tease out a new class that contains the interesting bits.  Often, this method and the fields it interacts with, and maybe another method or two can be extracted in to a new class.The new class exposes these methods as 'public', so they're accessible for unit testing.  The new and old classes are now both simpler than the original class, which is great for me (I need to keep things simple, or I get lost!).Note that I'm not suggesting that people create classes without using their brain! The point here is to use the forces of unit testing to help you find good new classes.",
                "I have used reflection to do this for Java in the past, and in my opinion it was a big mistake.Strictly speaking, you should not be writing unit tests that directly test private methods. What you should be testing is the public contract that the class has with other objects; you should never directly test an object's internals. If another developer wants to make a small internal change to the class, which doesn't affect the classes public contract, he/she then has to modify your reflection based test to ensure that it works. If you do this repeatedly throughout a project, unit tests then stop being a useful measurement of code health, and start to become a hindrance to development, and an annoyance to the development team.What I recommend doing instead is using a code coverage tool, such as Cobertura, to ensure that the unit tests you write provide decent coverage of the code in private methods. That way, you indirectly test what the private methods are doing, and maintain a higher level of agility.",
                "From this article: Testing Private Methods with JUnit and SuiteRunner (Bill Venners), you basically have 4 options:",
                "Generally a unit test is intended to exercise the public interface of a class or unit. Therefore, private methods are implementation detail that you would not expect to test explicitly.",
                "Just two examples of where I would want to test a private method:Decryption routines - I would not\nwant to make them visible to anyone to see just for\nthe sake of testing, else anyone can\nuse them to decrypt. But they are\nintrinsic to the code, complicated,\nand need to always work (the obvious exception is reflection which can be used to view even private methods in most cases, when SecurityManager is not configured to prevent this).Creating an SDK for community\nconsumption. Here public takes on a\nwholly different meaning, since this\nis code that the whole world may see\n(not just internal to my application). I put\ncode into private methods if I don't\nwant the SDK users to see it - I\ndon't see this as code smell, merely\nas how SDK programming works. But of\ncourse I still need to test my\nprivate methods, and they are where\nthe functionality of my SDK actually\nlives.I understand the idea of only testing the \"contract\". But I don't see one can advocate actually not testing code\u2014your mileage may vary.So my trade-off involves complicating the JUnit tests with reflection, rather than compromising my security and SDK.",
                "The private methods are called by a public method, so the inputs to your public methods should also test private methods that are called by those public methods. When a public method fails, then that could be a failure in the private method.",
                "In the Spring Framework you can test private methods using this method:For example:",
                "Another approach I have used is to change a private method to package private or protected then complement it with the @VisibleForTesting annotation of the Google Guava library.This will tell anybody using this method to take caution and not access it directly even in a package. Also a test class need not be in same package physically, but in the same package under the test folder.For example, if a method to be tested is in src/main/java/mypackage/MyClass.java then your test call should be placed in src/test/java/mypackage/MyClassTest.java. That way, you got access to the test method in your test class.",
                "To test legacy code with large and quirky classes, it is often very helpful to be able to test the one private (or public) method I'm writing right now.I use the junitx.util.PrivateAccessor-package for Java. It has lots of helpful one-liners for accessing private methods and private fields.",
                "Having tried Cem Catikkas' solution using reflection for Java, I'd have to say his was a more elegant solution than I have described here. However, if you're looking for an alternative to using reflection, and have access to the source you're testing, this will still be an option.There is possible merit in testing private methods of a class, particularly with test-driven development, where you would like to design small tests before you write any code.Creating a test with access to private members and methods can test areas of code which are difficult to target specifically with access only to public methods. If a public method has several steps involved, it can consist of several private methods, which can then be tested individually.Advantages:Disadvantages:However, if continuous testing requires this method, it may be a signal that the private methods should be extracted, which could be tested in the traditional, public way.Here is a convoluted example of how this would work:The inner class would be compiled to ClassToTest$StaticInnerTest.See also: Java Tip 106: Static inner classes for fun and profit",
                "As others have said... don't test private methods directly. Here are a few thoughts:Run the code coverage on the unit tests. If you see that methods are not fully tested add to the tests to get the coverage up. Aim for 100% code coverage, but realize that you probably won't get it.",
                "If using Spring, ReflectionTestUtils provides some handy tools that help out here with minimal effort. For example, to set up a mock on a private member without being forced to add an undesirable public setter:",
                "Private methods are consumed by public ones. Otherwise, they're dead code. That's why you test the public method, asserting the expected results of the public method and thereby, the private methods it consumes.Testing private methods should be tested by debugging before running your unit tests on public methods.They may also be debugged using test-driven development, debugging your unit tests until all your assertions are met.I personally believe it is better to create classes using TDD; creating the public method stubs, then generating unit tests with all the assertions defined in advance, so the expected outcome of the method is determined before you code it. This way, you don't go down the wrong path of making the unit test assertions fit the results. Your class is then robust and meets requirements when all your unit tests pass.",
                "If you're trying to test existing code that you're reluctant or unable to change, reflection is a good choice.If the class's design is still flexible, and you've got a complicated private method that you'd like to test separately, I suggest you pull it out into a separate class and test that class separately. This doesn't have to change the public interface of the original class; it can internally create an instance of the helper class and call the helper method.If you want to test difficult error conditions coming from the helper method, you can go a step further. Extract an interface from the helper class, add a public getter and setter to the original class to inject the helper class (used through its interface), and then inject a mock version of the helper class into the original class to test how the original class responds to exceptions from the helper. This approach is also helpful if you want to test the original class without also testing the helper class.",
                "Testing private methods breaks the encapsulation of your class because every time you change the internal implementation you break client code (in this case, the tests).So don't test private methods.",
                "The answer from JUnit.org FAQ page:But if you must...If you are using JDK 1.3 or higher, you can use reflection to subvert\nthe access control mechanism with the aid of the PrivilegedAccessor.\nFor details on how to use it, read this article.If you are using JDK 1.6 or higher and you annotate your tests with\n@Test, you can use Dp4j to inject reflection in your test methods. For\ndetails on how to use it, see this test script.P.S. I'm the main contributor to Dp4j. Ask me if you need help. :)",
                "If you want to test private methods of a legacy application where you can't change the code, one option for Java is jMockit, which will allow you to create mocks to an object even when they're private to the class.",
                "PowerMockito is made for this.Use a Maven dependency:Then you can do",
                "I tend not to test private methods.  There lies madness.  Personally, I believe you should only test your publicly exposed interfaces (and that includes protected and internal methods).",
                "If you're using JUnit, have a look at junit-addons. It has the ability to ignore the Java security model and access private methods and attributes.",
                "I would suggest you refactoring your code a little bit. When you have to start thinking about using reflection or other kind of stuff, for just testing your code, something is going wrong with your code.You mentioned different types of problems. Let's start with private fields. In case of private fields I would have added a new constructor and injected fields into that. Instead of this:I'd have used this:This won't be a problem even with some legacy code. Old code will be using an empty constructor, and if you ask me, refactored code will look cleaner, and you'll be able to inject necessary values in test without reflection.Now about private methods. In my personal experience when you have to stub a private method for testing, then that method has nothing to do in that class. A common pattern, in that case, would be to wrap it within an interface, like Callable and then you pass in that interface also in the constructor (with that multiple constructor trick):Mostly all that I wrote looks like it's a dependency injection pattern. In my personal experience it's really useful while testing, and I think that this kind of code is cleaner and will be easier to maintain. I'd say the same about nested classes. If a nested class contains heavy logic it would be better if you'd moved it as a package private class and have injected it into a class needing it.There are also several other design patterns which I have used while refactoring and maintaining legacy code, but it all depends on cases of your code to test. Using reflection mostly is not a problem, but when you have an enterprise application which is heavily tested and tests are run before every deployment everything gets really slow (it's just annoying and I don't like that kind of stuff).There is also setter injection, but I wouldn't recommended using it. I'd better stick with a constructor and initialize everything when it's really necessary, leaving the possibility for injecting necessary dependencies.",
                "Here is my generic function to test private fields:",
                "Please see below for an example;The following import statement should be added:Now you can directly pass the object which has the private method, method name to be called, and additional parameters as below.",
                "A private method is only to be accessed within the same class. So there is no way to test a \u201cprivate\u201d method of a target class from any test class. A way out is that you can perform unit testing manually or can change your method from \u201cprivate\u201d to \u201cprotected\u201d.And then a protected method can only be accessed within the same package where the class is defined. So, testing a protected method of a target class means we need to define your test class in the same package as the target class.If all the above does not suits your requirement, use the  reflection way to access the private method.",
                "As many above have suggested, a good way is to test them via your public interfaces.If you do this, it's a good idea to use a code coverage tool (like EMMA) to see if your private methods are in fact being executed from your tests.",
                "Today, I pushed a Java library to help testing private methods and fields. It has been designed with Android in mind, but it can really be used for any Java project.If you got some code with private methods or fields or constructors, you can use BoundBox. It does exactly what you are looking for.\nHere below is an example of a test that accesses two private fields of an Android activity to test it:BoundBox makes it easy to test private/protected fields, methods and constructors. You can even access stuff that is hidden by inheritance. Indeed, BoundBox breaks encapsulation. It will give you access to all that through reflection, but everything is checked at compile time.It is ideal for testing some legacy code. Use it carefully. ;)",
                "First, I'll throw this question out: Why do your private members need isolated testing? Are they that complex, providing such complicated behaviors as to require testing apart from the public surface? It's unit testing, not 'line-of-code' testing. Don't sweat the small stuff.If they are that big, big enough that these private members are each a 'unit' large in complexity\u2014consider refactoring such private members out of this class.If refactoring is inappropriate or infeasible, can you use the strategy pattern to replace access to these private member functions / member classes when under unit test? Under unit test, the strategy would provide added validation, but in release builds it would be simple passthrough.",
                "I want to share a rule I have about testing which particularly is related to this topic:I think that you should never adapt production code in order to\nindulge easer writing of tests.There are a few suggestions in other posts saying you should adapt the original class in order to test a private method - please red this warning first.If we change the accessibility of a method/field to package private or protected, just in order to have it accessible to tests, then we defeat the purpose of existence of private access directive.Why should we have private fields/methods/classes at all when we want to have test-driven development? Should we declare everything as package private, or even public then, so we can test without any effort?\u2014I don't think so.From another point of view: Tests should not burden performance and execution of the production application.If we change production code just for the sake of easier testing, that may burden performance and the execution of the application in some way.If someone starts to change private access to package private, then a developer may eventually come up to other \"ingenious ideas\" about adding even more code to the original class. This would make additional noise to readability and can burden the performance of the application.With changing of a private access to some less restrictive, we are opening the possibility to a developer for misusing the new situation in the future development of the application. Instead of enforcing him/her to develop in the proper way, we are tempting him/her with new possibilities and giving him ability to make wrong choices in the future.Of course there might be a few exceptions to this rule, but with clear understanding, what is the rule and what is the exception? We need to be absolutely sure we know why that kind of exception is introduced."
            ]
        },
        {
            "tag": "slower_printing",
            "patterns": [
                "Why is printing \"B\" dramatically slower than printing \"#\"?",
                "Slow print"
            ],
            "responses": [
                "Pure speculation is that you're using a terminal that attempts to do word-wrapping rather than character-wrapping, and treats B as a word character but # as a non-word character. So when it reaches the end of a line and searches for a place to break the line, it sees a # almost immediately and happily breaks there; whereas with the B, it has to keep searching for longer, and may have more text to wrap (which may be expensive on some terminals, e.g., outputting backspaces, then outputting spaces to overwrite the letters being wrapped).But that's pure speculation.",
                "I performed tests on Eclipse vs Netbeans 8.0.2, both with Java version 1.8;\nI used System.nanoTime() for measurements.I got the same time on both cases - around 1.564 seconds.So, it looks like Netbeans has bad performance on print to console.After more research I realized that the problem is line-wrapping of the max buffer of Netbeans (it's not restricted to System.out.println command), demonstrated by this code:The time results are less then 1 millisecond every iteration except every fifth iteration, when the time result is around 225 millisecond. Something like (in nanoseconds):And so on..",
                "Yes the culprit is definitely word-wrapping. When I tested your two programs, NetBeans IDE 8.2 gave me the following result.Looking at your code closely you have used a line break at the end of first loop. But you didn't use any line break in second loop. So you are going to print a word with 1000 characters in the second loop. That causes a word-wrapping problem. If we use a non-word character \" \" after B, it takes only 5.35 seconds to compile the program. And If we use a line break in the second loop after passing 100 values or 50 values, it takes only 8.56 seconds and 7.05 seconds respectively.Another advice is that to change settings of NetBeans IDE. First of all, go to NetBeans Tools and click Options. After that click Editor and go to Formatting tab. Then select Anywhere in Line Wrap Option. It will take almost 6.24% less time to compile the program."
            ]
        },
        {
            "tag": "JAR",
            "patterns": [
                "How can I create an executable/runnable JAR with dependencies using Maven?",
                "JAR",
                "executable/runnable JAR with dependencies"
            ],
            "responses": [
                "and you run it withCompile goal should be added before assembly:single or otherwise the code on your own project is not included.See more details in comments.Commonly this goal is tied to a build phase to execute automatically. This ensures the JAR is built when executing mvn install or performing a deployment/release.",
                "You can use the dependency-plugin to generate all dependencies in a separate directory before the package phase and then include that in the classpath of the manifest:Alternatively, use ${project.build.directory}/classes/lib as OutputDirectory to integrate all JAR files into the main JAR file, but then you will need to add custom classloading code to load the JAR files.",
                "See executable-jar-with-maven-example (GitHub)Those pros and cons are provided by Stephan.At this point the JAR file is actually executable with external classpath elements.The JAR file is only executable with the sibling ...lib/ directory. We need to make archives to deploy with the directory and its content.Now you have target/${project.build.finalName}.(zip|tar|tar.bz2|tar.gz) which each contains the jar and lib/*.You have target/${project.bulid.finalName}-jar-with-dependencies.jar.You have target/${project.build.finalName}-shaded.jar.You have target/${project.bulid.finalName}-spring-boot.jar.",
                "Taking IAdapter's answer and reformatting it, we have:Next, I would recommend making this a natural part of your build, rather than something to call explicitly.  To make this a integral part of your build, add this plugin to your pom.xml and bind it to the package lifecycle event.  However, a gotcha is that you need to call the assembly:single goal if putting this in your pom.xml, while you would call 'assembly:assembly' if executing it manually from the command line.",
                "Use the maven-shade-plugin to package all dependencies into one \u00fcber-JAR file. It can also be used to build an executable JAR file by specifying the main class. After trying to use maven-assembly and maven-jar, I found that this plugin best suited my needs.I found this plugin particularly useful as it merges the content of specific files instead of overwriting them. This is needed when there are resource files that are have the same name across the JAR files and the plugin tries to package all the resource files.See the example below:",
                "You can use the maven-shade plugin to build an \u00fcber JAR file like below:",
                "I have long used the Maven assembly plugin, but I could not find a solution to the problem with \"already added, skipping\". Now, I'm using another plugin - onejar-maven-plugin. An example is below (mvn package builds the JAR file):You need to add a repository for that plugin:",
                "You can add the following to your pom.xml file:Afterwards you have to switch via the console to the directory, where the pom.xml file is located. Then you have to execute mvn assembly:single and then your executable JAR file with dependencies will be hopefully build. You can check it when switching to the output (target) directory with cd ./target and starting your JAR with a command similar to java -jar mavenproject1-1.0-SNAPSHOT-jar-with-dependencies.jar.I tested this with Apache Maven 3.0.3.",
                "You can use maven-dependency-plugin, but the question was how to create an executable JAR file. To do that requires the following alteration to Matthew Franglen's response (btw, using the dependency plugin takes longer to build when starting from a clean target):",
                "I went through every one of these responses looking to make a fat executable JAR file containing all dependencies and none of them worked right.  The answer is the shade plugin, it\u2019s very easy and straightforward.Be aware that your dependencies need to have a scope of compile or runtime for this to work properly.This example came from mkyong.com",
                "Another option if you really want to repackage the other JARs contents inside your single resultant JAR is the Maven Assembly plugin.  It unpacks and then repacks everything into a directory via <unpack>true</unpack>. Then you'd have a second pass that built it into one massive JAR.Another option is the OneJar plugin.  This performs the above repackaging actions all in one step.",
                "You could combine the maven-shade-plugin and maven-jar-plugin.Example POM configuration for maven-jar-plugin:Finally create the executable JAR file by invoking:",
                "It will work like:Unpacking has to be in the generate-resources phase or it will not be included as resources.",
                "Ken Liu has it right in my opinion. The Maven dependency plugin allows you to expand all the dependencies, which you can then treat as resources. This allows you to include them in the main artifact. The use of the assembly plugin creates a secondary artifact which can be difficult to modify - in my case I wanted to add custom manifest entries. My POM file ended up as:",
                "What is the problem with locating shared assembly files with maven-assembly-plugin-2.2.1?Try using the descriptorId configuration parameter instead of descriptors/descriptor or descriptorRefs/descriptorRef parameters.Neither of them do what you need: look for the file on classpath.\nOf course you need adding the package where the shared assembly resides on the maven-assembly-plugin's classpath (see below).\nIf you're using Maven 2.x (not Maven 3.x), you may need adding this dependency in top-most parent pom.xml in the pluginManagement section.See this for more details.Class: org.apache.maven.plugin.assembly.io.DefaultAssemblyReaderExample:",
                "To resolve this issue, we will use the Maven Assembly plugin that will create the JAR file together with its dependency JAR files into a single executable JAR file. Just add the below plugin configuration in your pom.xml file.After doing this, don\u2019t forget to run the Maven tool with this command:Maven - Creating a JAR file together with its dependency JAR files into a single executable JAR file",
                "It may not be a good idea to embed all the dependencies in the project's JAR file itself.I see the point (ease of deployment / usage), but it depends of the use case of your project (and there may be alternatives (see below)).If you use it fully standalone, why not?But if you use your project in other contexts (like in a web application, or dropped in a folder where other JARs are sitting), you may have JAR duplicates in your classpath (the ones in the folder, the one in the JAR files). Maybe not a bid deal, but I usually avoid this.A good alternative:Like this, with in the end just a manifest and a \"special dynamic classloader main\", you can start your project with:",
                "I compared the tree plugins mentioned in this post. I generated two JAR files and a directory with all the JAR files. I compared the results and definitely the maven-shade-plugin is the best.My challenge was that I have multiple Spring resources that needed to be merged, as well as jax-rs, and JDBC services. They were all merged properly by the shade plugin in comparison with the maven-assembly-plugin. In which case Spring will fail unless you copy them to your own resources folder and merge them manually one time.Both plugins output the correct dependency tree. I had multiple scopes like test, provide, compile, etc. The test and provided were skipped by both plugins. They both produced the same manifest, but I was able to consolidate licenses with the shade plugin using their transformer.\nWith the maven-dependency-plugin of course you don't have those problems, because the JAR files are not extracted. But like some other have pointed out, you need to carry one extra file(s) to work properly.Here is a snip of the pom.xml file:",
                "For anyone looking for options to exclude specific dependencies from the \u00fcber JAR file, this is a solution that worked for me:It's not a configuration of the mvn-assembly-plugin, but a property of the dependency.",
                "Something that has worked for me was:I had an extraordinary case, because my dependency was system one:I have changed the code provided by user189057 with changes:",
                "This is the best way I found:With this configuration, all dependencies will be located in /dependency-jars. My application has no Main class, just context ones, but one of my dependencies do have a Main class (com.myDomain.etc.MainClassName) that starts the JMX server, and receives a start or a stop parameter. So with this I was able to start my application like this:",
                "There are millions of answers already. I wanted to add you don't need <mainClass> if you don't need to add entryPoint to your application. For example, APIs may not have necessarily have a main method.",
                "I wanted to migrate my Spring application (using Apereo Foundation's CAS client) to Spring Boot 1.5. I ran into many problems, like:no main manifest attribute, in target/cas-client-web.jarI tried to make one unique JAR file with all dependencies. After searching on the Internet, I was able to do it with these lines:start-class is my main class:And my Application is:",
                "To create an executable JAR from the command line itself, just run the below command from the project path:",
                "This could also be an option. You will be able to build your JAR file.",
                "I tried the most upvoted answer here and was able to get the JAR file runnable. But the program didn't run correctly. I do not know what the reason was. When I try to run from Eclipse, I get a different result, but when I run the JAR file from command line I get a different result (it crashes with a program-specific runtime error).I had a similar requirement as the OP just that I had too many (Maven) dependencies for my project. Fortunately, the only solution that worked for me was that using Eclipse. It is very simple and very straightforward. This is not a solution for the OP, but it is a solution for someone who has a similar requirement, but with many Maven dependencies,Just right-click on your project folder (in Eclipse) and select ExportThen select Java \u2192 Runnable JARYou will be asked to choose the location of the JAR fileFinally, select the class that has the Main method that you want to run and choose *Package dependencies with the JAR file and click Finish",
                "Add to file pom.xml:AndThat\u2019s it. Next, the mvn package will also create one fat JAR additionally, including all dependency JAR files.",
                "The maven-assembly-plugin worked great for me.I spent hours with the maven-dependency-plugin and couldn't make it work. The main reason was that I had to define the artifact items explicitly in the configuration section which should be included as it is described in the documentation.There is an example there for the cases when you want to use it like: mvn dependency:copy, where there are not included any artifactItems, but it doesn't work.",
                "I tried multiple solutions, but this is the one that worked perfectly in the scenario where we wanted to create a non-executable fat JAR file with all internal dependencies for external systems having no previous relevance. A production scenario was tested.Include this in the pom.xml file:The command to run to build the fat JAR file:",
                "This blog post shows another approach with combining the maven-jar and maven-assembly plugins. With the assembly configuration XML file from the blog post it can also be controlled if dependencies will be expanded or just be collected in a folder and referenced by a classpath entry in the manifest:The ideal solution is to include the jars in a lib folder and the manifest.mf file of the main jar include all the jars in classpath.And exactly that one is described here: Executable JAR file with dependent JAR files using Maven"
            ]
        },
        {
            "tag": "NetworkOnMainThreadException",
            "patterns": [
                "How can I fix 'android.os.NetworkOnMainThreadException'?",
                "NetworkOnMainThreadException"
            ],
            "responses": [
                "NOTE : AsyncTask was deprecated in API level 30.\nAsyncTask | Android DevelopersThis exception is thrown when an application attempts to perform a networking operation on its main thread. Run your code in AsyncTask:How to execute the task:In MainActivity.java file you can add this line within your oncreate() methodDon't forget to add this to AndroidManifest.xml file:",
                "You should almost always run network operations on a thread or as an asynchronous task.But it is possible to remove this restriction and you override the default behavior, if you are willing to accept the consequences.Add:In your class,andAdd this permission in the Android manifest.xml file:Consequences:Your app will (in areas of spotty Internet connection) become unresponsive and lock up, the user perceives slowness and has to do a force kill, and you risk the activity manager killing your app and telling the user that the app has stopped.Android has some good tips on good programming practices to design for responsiveness:\nNetworkOnMainThreadException | Android Developers",
                "I solved this problem using a new Thread.",
                "The accepted answer has some significant downsides. It is not advisable to use AsyncTask for networking unless you really know what you are doing. Some of the down-sides include:If you want to avoid short-term memory leaks, have well-defined execution characteristics across all platforms, and have a base to build really robust network handling, you might want to consider:Downsides:Upsides:You can implement an IntentService to perform downloads on a single background thread quite easily.Step 1: Create an IntentService to perform the download. You can tell it what to download via Intent extras, and pass it a PendingIntent to use to return the result to the Activity:Step 2: Register the service in the manifest:Step 3: Invoke the service from the Activity, passing a PendingResult object which the Service will use to return the result:Step 4: Handle the result in onActivityResult:A GitHub project containing a complete working Android Studio/Gradle project is available here.",
                "You cannot perform network I/O on the UI thread on Honeycomb. Technically, it is possible on earlier versions of Android, but it is a really bad idea as it will cause your app to stop responding, and can result in the OS killing your app for being badly behaved. You'll need to run a background process or use AsyncTask to perform your network transaction on a background thread.There is an article about Painless Threading on the Android developer site which is a good introduction to this, and it will provide you with a much better depth of an answer than can be realistically provided here.",
                "There are two solutions of this problem.Don't use a network call in the main UI thread. Use an async task for that.Write the below code into your MainActivity file after setContentView(R.layout.activity_main);:if (android.os.Build.VERSION.SDK_INT > 9) {\nStrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();\nStrictMode.setThreadPolicy(policy);\n}And the below import statement into your Java file.",
                "Do the network actions on another thread.For example:And add this to file AndroidManifest.xml:",
                "Use Service or AsyncTaskSee also Stack\u00a0Overflow question:android.os.NetworkOnMainThreadException sending an email from Android",
                "You disable the strict mode using following code:This is not recommended: use the AsyncTask interface.Full code for both the methods",
                "Network-based operations cannot be run on the main thread. You need to run all network-based tasks on a child thread or implement AsyncTask.This is how you run a task in a child thread:",
                "Put your code inside:Or:",
                "This happens in Android 3.0 and above. From Android 3.0 and above, they have restricted using network operations (functions that access the Internet) from running in the main thread/UI thread (what spawns from your on create and on resume methods in the activity).This is to encourage using separate threads for network operations. See AsyncTask for more details on how to perform network activities the right way.",
                "Using Android Annotations is an option. It will allow you to simply run any method in a background thread:Note, that although it provides benefits of simplicity and readability, it has its disadvantages.",
                "The error is due to executing long running operations in main thread,You can easily rectify the problem by using AsynTask or Thread. You can checkout this library AsyncHTTPClient for better handling.",
                "You should not do any time-consuming task on the main thread (UI thread), like any network operation, file I/O, or SQLite database operations. So for this kind of operation, you should create a worker thread, but the problem is that you can not directly perform any UI related operation from your worker thread. For that, you have to use Handler and pass the Message.To simplify all these things, Android provides various ways, like AsyncTask, AsyncTaskLoader, CursorLoader or IntentService. So you can use any of these according to your requirements.",
                "The top answer of spektom works perfect.If you are writing the AsyncTask inline and not extending as a class, and on top of this, if there is a need to get a response out of the AsyncTask, one can use the get() method as below.(From his example.)",
                "This is only thrown for applications targeting the Honeycomb SDK or higher. Applications targeting earlier SDK versions are allowed to do networking on their main event loop threads.The error is the SDK warning!",
                "For me it was this:The device I was testing my app on was 4.1.2 which is SDK Version 16!Make the sure the target version is the same as your Android Target Library. If you are unsure what your target library is, right click your Project -> Build Path -> Android, and it should be the one that is ticked.Also, as others have mentioned, include the correct permissions to access the Internet:",
                "Use this in Your Activity",
                "Just to spell out something explicitly:The main thread is basically the UI thread.So saying that you cannot do networking operations in the main thread means you cannot do networking operations in the UI thread, which means you cannot do networking operations in a *runOnUiThread(new Runnable() { ... }* block inside some other thread, either.(I just had a long head-scratching moment trying to figure out why I was getting that error somewhere other than my main thread.  This was why; this thread helped; and hopefully this comment will help someone else.)",
                "This exception occurs due to any heavy task performed on the main thread if that performing task takes too much time.To avoid this, we can handle it using threads or executers",
                "There are many great answers already on this question, but a lot of great libraries have come out since those answers were posted. This is intended as a kind of newbie-guide.I will cover several use cases for performing network operations and a solution or two for each.Typically JSON, but it can be XML or something else.Let's say you are writing an app that lets users track stock prices, interest rates and currency exchange rates. You find an JSON API that looks something like this:This is an excellent choice for an API with multiple endpoints and allows you to declare the REST endpoints instead of having to code them individually as with other libraries like Amazon Ion Java or Volley (website: Retrofit).How do you use it with the finances API?Add these lines to your module level build.gradle file:If your API requires an API key or other header, like a user token, etc. to be sent, Retrofit makes this easy (see this awesome answer to Add Header Parameter in Retrofit for details).Let's say you're building a \"mood weather\" app that looks up the user's GPS location and checks the current temperature in that area and tells them the mood. This type of app doesn't need to declare API endpoints; it just needs to be able to access one API endpoint.This is a great library for this type of access.Please read msysmilu's great answer to How can I fix 'android.os.NetworkOnMainThreadException'?.Volley can also be used for REST APIs, but due to the more complicated setup required, I prefer to use Retrofit from Square as above.Let's say you are building a social networking app and want to load profile pictures of friends.Add this line to your module level build.gradle file:Volley requires more setup than Retrofit. You will need to create a class like this to setup a RequestQueue, an ImageLoader and an ImageCache, but it's not too bad:Add the following to your layout XML file to add an image:Add the following code to the onCreate method (Fragment, Activity) or the constructor (Dialog):Picasso is another excellent library from Square. Please see the website for some great examples.",
                "In simple words,Do not do network work in the UI threadFor example, if you do an HTTP request, that is a network action.Solution:Way:Put all your works insideBut:When you get something from a network response and want to show it on your view (like display response message in TextView), you need to return back to the UI thread.If you don't do it, you will get ViewRootImpl$CalledFromWrongThreadException.How-to",
                "You are able to move a part of your code into another thread to offload the main thread and avoid getting ANR, NetworkOnMainThreadException, IllegalStateException (e.g., cannot access database on the main thread since it may potentially lock the UI for a long period of time).There are some approaches that you should choose depends on the situationJava Thread or Android HandlerThread:Java threads are one-time use only and die after executing its run method.HandlerThread is a handy class for starting a new thread that has a looper.AsyncTask (deprecated in API level 30)AsyncTask is designed to be a helper class around Thread and Handler and does not constitute a generic threading framework. AsyncTasks should ideally be used for short operations (a few seconds at the most.) If you need to keep threads running for long periods of time, it is highly recommended you use the various APIs provided by the java.util.concurrent package such as Executor, ThreadPoolExecutor and FutureTask.Since the main thread monopolizes UI components, it is not possible to access to some View, and that is why Handler comes to the rescue[Executor framework]ThreadPoolExecutor class that implements ExecutorService which gives fine control on the thread pool (E.g., core pool size, max pool size, keep alive time, etc.)ScheduledThreadPoolExecutor - a class that extends ThreadPoolExecutor. It can schedule tasks after a given delay or periodically.FutureTaskFutureTask performs asynchronous processing, however, if the result is not ready yet or processing has not complete, calling get() will be block the threadAsyncTaskLoadersAsyncTaskLoaders as they solve a lot of problems that are inherent to AsyncTaskIntentServiceThis is the de facto choice for long running processing on Android, a good example would be to upload or download large files. The upload and download may continue even if the user exits the app and you certainly do not want to block the user from being able to use the app while these tasks are going on.JobSchedulerEffectively, you have to create a Service and create a job using JobInfo.Builder that specifies your criteria for when to run the service.RxJavaLibrary for composing asynchronous and event-based programs by using observable sequences.Coroutines (Kotlin)The main gist of it is, it makes asynchronous code looks so much like synchronousRead more here, here, here, and here.",
                "If you are using Kotlin, you can use a coroutine:",
                "New Thread and AsyncTask solutions have been explained already.AsyncTask should ideally be used for short operations. Normal Thread is not preferable for Android.Have a look at alternate solution using HandlerThread and HandlerHandlerThreadHandy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.Handler:A Handler allows you to send and process Message and Runnable objects associated with a thread's MessageQueue. Each Handler instance is associated with a single thread and that thread's message queue. When you create a new Handler, it is bound to the thread / message queue of the thread that is creating it -- from that point on, it will deliver messages and runnables to that message queue and execute them as they come out of the message queue.Solution:Create HandlerThreadCall start() on HandlerThreadCreate Handler by getting Looper from HanlerThreadEmbed your Network operation related code in Runnable objectSubmit Runnable task to HandlerSample code snippet, which address  NetworkOnMainThreadExceptionPros of using this approach:",
                "This works. I just made Dr.Luiji's answer a little simpler.",
                "Although above there is a huge solution pool, no one mentioned com.koushikdutta.ion: https://github.com/koush/ionIt's also asynchronous and very simple to use:",
                "The main thread is the UI thread, and you cannot do an operation in the main thread which may block the user interaction. You can solve this in two ways:Force to do the task in the main thread like thisOr create a simple handler and update the main thread if you want.And to stop the thread use:For more information check this out: Painless threading",
                "RxAndroid is another better alternative to this problem and it saves us from hassles of creating threads and then posting results on Android UI thread.We just need to specify threads on which tasks need to be executed and everything is handled internally.By specifiying (Schedulers.io()), RxAndroid will run getFavoriteMusicShows() on a different thread.By using AndroidSchedulers.mainThread() we want to observe this Observable on the UI thread, i.e., we want our onNext() callback to be called on the UI thread."
            ]
        },
        {
            "tag": "finally_block",
            "patterns": [
                "Does a finally block always get executed in Java?",
                "finally_block"
            ],
            "responses": [
                "Yes, finally will be called after the execution of the try or catch code blocks.The only times finally won't be called are:",
                "Example code:Output:",
                "Also, although it's bad practice, if there is a return statement within the finally block, it will trump any other return from the regular block. That is, the following block would return false:Same thing with throwing exceptions from the finally block.",
                "Here's the official words from the Java Language Specification.14.20.2. Execution of try-finally and try-catch-finallyA try statement with a finally block is executed by first executing the try block. Then there is a choice:The specification for return actually makes this explicit:JLS 14.17 The return StatementA return statement with no Expression attempts to transfer control to the invoker of the method or constructor that contains it.A return statement with an Expression attempts to transfer control to the invoker of the method that contains it; the value of the Expression becomes the value of the method invocation.The preceding descriptions say \"attempts to transfer control\" rather than just \"transfers control\" because if there are any try statements within the method or constructor whose try blocks contain the return statement, then any finally clauses of those try statements will be executed, in order, innermost to outermost, before control is transferred to the invoker of the method or constructor. Abrupt completion of a finally clause can disrupt the transfer of control initiated by a return statement.",
                "In addition to the other responses, it is important to point out that 'finally' has the right to override any exception/returned value by the try..catch block. For example, the following code returns 12:Similarly, the following method does not throw an exception:While the following method does throw it:",
                "Here's an elaboration of Kevin's answer. It's important to know that the expression to be returned is evaluated before finally, even if it is returned after.Output:",
                "I tried the above example with slight modification-The above code outputs:finally trumps return.\n  2This is because when return i; is executed i has a value 2. After this the finally block is executed where 12 is assigned to i and then System.out out is executed.After executing the finally block the try block returns 2, rather than returning 12, because this return statement is not executed again.If you will debug this code in Eclipse then you'll get a feeling that after executing System.out of finally block the return statement of try block is executed again. But this is not the case. It simply returns the value 2.",
                "That is the whole idea of a finally block. It lets you make sure you do cleanups that might otherwise be skipped because you return, among other things, of course.Finally gets called regardless of what happens in the try block (unless you call System.exit(int) or the Java Virtual Machine kicks out for some other reason).",
                "A logical way to think about this is:",
                "finally is always executed unless there is abnormal program termination (like calling System.exit(0)..). so, your sysout will get printed",
                "No, not always one exception case is//\nSystem.exit(0);\nbefore the finally block prevents finally to be  executed.",
                "Also a return in finally will throw away any exception.  http://jamesjava.blogspot.com/2006/03/dont-return-in-finally-clause.html",
                "The finally block is always executed unless there is abnormal program termination, either resulting from a JVM crash or from a call to System.exit(0).On top of that, any value returned from within the finally block will override the value returned prior to execution of the finally block, so be careful of checking all exit points when using try finally.",
                "Finally is always run that's the whole point, just because it appears in the code after the return doesn't mean that that's how it's implemented. The Java runtime has the responsibility to run this code when exiting the try block.For example if you have the following:The runtime will generate something like this:If an uncaught exception is thrown the finally block will run and the exception will continue propagating.",
                "The Java Language specification describes how try-catch-finally and try-catch blocks work at 14.20.2\nIn no place it specifies that the finally block is always executed.\nBut for all cases in which the try-catch-finally and try-finally blocks complete it does specify that before completion finally must be executed.The JLS does not guarantee that FIN is executed after CODE.\nThe JLS guarantees that if CODE and NEXT are executed then FIN will always be executed after CODE and before NEXT.Why doesn't the JLS guarantee that the finally block is always executed after the try block? Because it is impossible. It is unlikely but possible that the JVM will be aborted (kill, crash, power off) just after completing the try block but before execution of the finally block. There is nothing the JLS can do to avoid this.Thus, any software which for their proper behaviour depends on finally blocks always being executed after their try blocks complete are bugged.return instructions in the try block are irrelevant to this issue. If execution reaches code after the try-catch-finally it is guaranteed that the finally block will have been executed before, with or without return instructions inside the try block.",
                "Yes it will get called. That's the whole point of having a finally keyword. If jumping out of the try/catch block could just skip the finally block it was the same as putting the System.out.println outside the try/catch.",
                "Because a finally block will always be called unless you call System.exit() (or the thread crashes).",
                "Concisely, in the official Java Documentation (Click here), it is written that -If the JVM exits while the try or catch code is being executed, then\n  the finally block may not execute. Likewise, if the thread executing\n  the try or catch code is interrupted or killed, the finally block may\n  not execute even though the application as a whole continues.",
                "This is because you assigned the value of i as 12, but did not return the value of i to the function. The correct code is as follows:",
                "Answer is simple YES.INPUT:OUTPUT:",
                "finally block is always executed and before returning x's (calculated) value.Output:x value in finally = 3\nx value from foo() = 2",
                "Yes, it will. No matter what happens in your try or catch block unless otherwise System.exit() called or JVM crashed. if there is any return statement in the block(s),finally will be executed prior to that return statement.",
                "Adding to @vibhash's answer as no other answer explains what happens in the case of a mutable object like the one below.Will output",
                "Yes It will.\nOnly case it will not is JVM exits or crashes",
                "Yes, finally block is always execute. Most of developer use this block the closing the database connection, resultset object, statement object and also uses into the java hibernate to rollback the transaction.",
                "finally will execute and that is for sure.finally will not execute in below cases:case 1 :When you are executing System.exit().case 2 :When your JVM / Thread crashes.case 3 :When your execution is stopped in between manually.",
                "I tried this,\nIt is single threaded.The main Thread will be on wait state forever, hence finally will never be called,so console output will not print String: after wait() or finallyAgreed with @Stephen C, the above example is one of the 3rd case mention here:Adding some more such infinite loop possibilities in following code:Case 2: If the JVM crashes firstRef: How do you crash a JVM?Case 6: If finally block is going to be executed by daemon Thread and all other non-daemon Threads exit before finally is called.output: This does not print \"finally\" which implies \"Finally block\" in \"daemon thread\" did not execute",
                "Consider the following program:As of Java 1.8.162, the above code block gives the following output:this means that using finally to free up objects is a good practice like the following code:",
                "That's actually true in any language...finally will always execute before a return statement, no matter where that return is in the method body. If that wasn't the case, the finally block wouldn't have much meaning.",
                "In addition to the point about return in finally replacing a return in the try block, the same is true of an exception.  A finally block that throws an exception will replace a return or exception thrown from within the try block."
            ]
        },
        {
            "tag": "array_check",
            "patterns": [
                "How do I determine whether an array contains a particular value in Java?",
                "value in array"
            ],
            "responses": [
                "Warning: this doesn't work for arrays of primitives (see the comments).To check whether an array of int, double or long contains a value use IntStream, DoubleStream or LongStream respectively.",
                "Reference arrays are bad. For this case we are after a set. Since Java SE 9 we have Set.of.\"Given String s, is there a good way of testing whether VALUES contains s?\"O(1).The right type, immutable, O(1) and concise. Beautiful.*Just to clear the code up to start with. We have (corrected):This is a mutable static which FindBugs will tell you is very naughty. Do not modify statics and do not allow other code to do so also. At an absolute minimum, the field should be private:(Note, you can actually drop the new String[]; bit.)Reference arrays are still bad and we want a set:(Paranoid people, such as myself, may feel more at ease if this was wrapped in Collections.unmodifiableSet - it could then even be made public.)(*To be a little more on brand, the collections API is predictably still missing immutable collection types and the syntax is still far too verbose, for my tastes.)",
                "You can use ArrayUtils.contains from Apache Commons Langpublic static boolean contains(Object[] array, Object objectToFind)Note that this method returns false if the passed array is null.There are also methods available for primitive arrays of all kinds.",
                "Just simply implement it by hand:Improvement:The v != null condition is constant inside the method. It always evaluates to the same Boolean value during the method call. So if the input array is big, it is more efficient to evaluate this condition only once, and we can use a simplified/faster condition inside the for loop based on the result. The improved contains() method:",
                "Four Different Ways to Check If an Array Contains a ValueUsing List:Using Set:Using a simple loop:Using Arrays.binarySearch():The code below is wrong, it is listed here for completeness. binarySearch() can ONLY be used on sorted arrays. You will find the result is weird below. This is the best option when array is sorted.",
                "If the array is not sorted, you will have to iterate over everything and make a call to equals on each.If the array is sorted, you can do a binary search, there's one in the Arrays class.Generally speaking, if you are going to do a lot of membership checks, you may want to store everything in a Set, not in an array.",
                "For what it's worth I ran a test comparing the 3 suggestions for speed. I generated random integers, converted them to a String and added them to an array. I then searched for the highest possible number/string, which would be a worst case scenario for the asList().contains().When using a 10K array size the results were:When using a 100K array the results were:So if the array is created in sorted order the binary search is the fastest, otherwise the asList().contains would be the way to go. If you have many searches, then it may be worthwhile to sort the array so you can use the binary search. It all depends on your application.I would think those are the results most people would expect. Here is the test code:",
                "Instead of using the quick array initialisation syntax too, you could just initialise it as a List straight away in a similar manner using the Arrays.asList method, e.g.:Then you can do (like above):",
                "With Java 8 you can create a stream and check if any entries in the stream matches \"s\":Or as a generic method:",
                "You can use the Arrays class to perform a binary search for the value. If your array is not sorted, you will have to use the sort functions in the same class to sort the array, then search through it.",
                "ObStupidAnswer (but I think there's a lesson in here somewhere):",
                "Actually, if you use HashSet<String> as Tom Hawtin proposed you don't need to worry about sorting, and your speed is the same as with binary search on a presorted array, probably even faster.It all depends on how your code is set up, obviously, but from where I stand, the order would be:On an unsorted array:On a sorted array:So either way, HashSet for the win.",
                "Developers often do:The above code works, but there is no need to convert a list to set first. Converting a list to a set requires extra time. It can as simple as:orThe first one is more readable than the second one.",
                "If you have the google collections library, Tom's answer can be simplified a lot by using ImmutableSet (http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/collect/ImmutableSet.html)This really removes a lot of clutter from the initialization proposed",
                "In Java 8 use Streams.",
                "One possible solution:",
                "Using a simple loop is the most efficient way of doing this.Courtesy to Programcreek",
                "the shortest solution\nthe array VALUES may contain duplicates\nsince Java 9",
                "Use the following (the contains() method is ArrayUtils.in() in this code):ObjectUtils.javaArrayUtils.javaAs you can see in the code above, that there are other utility methods ObjectUtils.equals() and ArrayUtils.indexOf(), that were used at other places as well.",
                "For arrays of limited length use the following (as given by camickr).  This is slow for repeated checks, especially for longer arrays (linear search).For fast performance if you repeatedly check against a larger set of elementsAn array is the wrong structure.  Use a TreeSet and add each element to it.  It sorts elements and has a fast exist() method (binary search).If the elements implement Comparable & you want the TreeSet sorted accordingly:ElementClass.compareTo() method must be compatable with ElementClass.equals(): see Triads not showing up to fight? (Java Set missing an item)Otherwise, use your own Comparator:The payoff: check existence of some element:",
                "If you don't want it to be case sensitive",
                "Try this:",
                "Check this",
                "Arrays.asList() -> then calling the contains() method will always work, but a search algorithm is much better since you don't need to create a lightweight list wrapper around the array, which is what Arrays.asList() does.",
                "Use Array.BinarySearch(array,obj) for finding the given object in array or not.Example:false --not exists",
                "Try using Java 8 predicate test methodHere is a full example of it.http://mytechnologythought.blogspot.com/2019/10/java-8-predicate-test-method-example.htmlhttps://github.com/VipulGulhane1/java8/blob/master/Test.java",
                "Create a boolean initially set to false. Run a loop to check every value in the array and compare to the value you are checking against. If you ever get a match, set boolean to true and stop the looping. Then assert that the boolean is true.",
                "As I'm dealing with low level Java using primitive types byte and byte[], the best so far I got is from bytes-java https://github.com/patrickfav/bytes-java seems a fine piece of work",
                "You can check it by two methodsA) By converting the array into string and then check the required string by .contains methodB) This is a more efficent method",
                "I found this solution ridiculously simple and effective.In my case, it is about a drag and drop simple app, but aplies to anything:HTML:The key here is data-div='[\"drop1\", \"drop6\"]', the array.JAVASCRIPT:The key here is .includes(ev.target.id) which just checks if the specific item is in the array.I found it at https://www.samanthaming.com/tidbits/81-how-to-check-if-array-includes-a-value/Hope it helps."
            ]
        },
        {
            "tag": "constructor",
            "patterns": [
                "How do I call one constructor from another in Java?",
                "constructor",
                "call a constructor"
            ],
            "responses": [
                "Yes, it is possible:To chain to a particular superclass constructor instead of one in the same class, use super instead of this. Note that you can only chain to one constructor, and it has to be the first statement in your constructor body.See also this related question, which is about C# but where the same principles apply.",
                "Using this(args). The preferred pattern is to work from the smallest constructor to the largest.You can also use a more recently advocated approach of valueOf or just \"of\":To call a super class, use super(someValue). The call to super must be the first call in the constructor or you will get a compiler error.",
                "[Note: I just want to add one aspect, which I did not see in the other answers: how to overcome limitations of the requirement that this() has to be on the first line).]In Java another constructor of the same class can be called from a constructor via this(). Note however that this has to be on the first line.That this has to appear on the first line looks like a big limitation, but you can construct the arguments of other constructors via static methods. For example:",
                "When I need to call another constructor from inside the code (not on the first line), I usually use a helper method like this:But most often I try to do it the other way around by calling the more complex constructors from the simpler ones on the first line, to the extent possible. For the above example",
                "Within a constructor, you can use the this keyword to invoke another constructor in the same class. Doing so is called an explicit constructor invocation.Here's another Rectangle class, with a different implementation from the one in the Objects section.This class contains a set of constructors. Each constructor initializes some or all of the rectangle's member variables.",
                "As everybody already have said, you use this(\u2026), which is called an explicit constructor invocation.However, keep in mind that within such an explicit constructor invocation statement you may not refer toAs stated in JLS (\u00a78.8.7.1).",
                "Yes, any number of constructors can be present in a class and they can be called by another constructor using this() [Please do not confuse this() constructor call with this keyword]. this() or this(args) should be the first line in the constructor.Example:This is known as constructor overloading.\nPlease note that for constructor, only overloading concept is applicable and not inheritance or overriding.",
                "Using this keyword we can call one constructor in another constructor within same class.Example :-",
                "Yes it is possible to call one constructor from another. But there is a rule to it. If a call is made from one constructor to another, thenthat new constructor call must be the first statement in the current constructorSo, something like below will not work.Also, in the case of inheritance, when sub-class's object is created, the super class constructor is first called.Thus, in this case also another constructor call is first declared before any other statements.",
                "I will tell you an easy wayThere are two types of constructors:I will explain in one ExampleIn the above example I showed 3 types of callingNote:\nthis must be the first statement in the constructor.",
                "You can a constructor from another constructor of same class by using \"this\" keyword.\nExample -Output -\nstring as arg constructor..\nDefault constructor..\nint as arg constructor..",
                "Calling constructor from another constructorAlso you can call parent constructor by using super() call",
                "There are design patterns that cover the need for complex construction - if it can't be done succinctly, create a factory method or a factory class.With the latest java and the addition of lambdas, it is easy to create a constructor which can accept any initialization code you desire.Call it with...",
                "Pretty simplenow here is some small extra credit:Hope this helps.",
                "Yes it is possible to call one constructor from another with use of this()",
                "You can call another constructor via the this(...) keyword (when you need to call a constructor from the same class) or the super(...) keyword\n(when you need to call a constructor from a superclass).However, such a call must be the first statement of your constructor. To overcome this limitation, use this answer.",
                "The keyword this can be used to call a constructor from a constructor, when writing several constructor for a class, there are times when you'd like to call one constructor from another to avoid duplicate code.Bellow is a link that I explain other topic about constructor and getters() and setters() and I used a class with two constructors. I hope the explanations and examples help you.Setter methods or constructors",
                "Yes, you can call constructors from another constructor. For example:you can also read in details from\nConstructor Chaining in Java",
                "I know there are so many examples of this question but what I found I am putting here to share my Idea. there are two ways to chain constructor. In Same class you can use this keyword. in Inheritance, you need to use super keyword.",
                "It is called Telescoping Constructor anti-pattern or constructor chaining. Yes, you can definitely do. I see many examples above and I want to add by saying that if you know that you need only two or three constructor, it might be ok. But if you need more, please try to use different design pattern like Builder pattern. As for example:You may need more. Builder pattern would be a great solution in this case. Here is an article, it might be helpful\nhttps://medium.com/@modestofiguereo/design-patterns-2-the-builder-pattern-and-the-telescoping-constructor-anti-pattern-60a33de7522e",
                "Originally from an anser by Mirko Klemm, slightly modified to address the question:Just for completeness: There is also the Instance initialization block that gets executed always and before any other constructor is called. It consists simply of a block of statements \"{ ... }\" somewhere in the body of your class definition.  You can even have more than one.  You can't call them, but they're like \"shared constructor\" code if you want to reuse some code across constructors, similar to calling methods.So in your caseThere is also a \"static\" version of this to initialize static members: \"static { ... }\"",
                "I prefer this way:"
            ]
        },
        {
            "tag": "reflection",
            "patterns": [
                "What is reflection and why is it useful?",
                "What is reflection"
            ],
            "responses": [
                "The name reflection is used to describe code which is able to inspect other code in the same system (or itself).For example, say you have an object of an unknown type in Java, and you would like to call a 'doSomething' method on it if one exists. Java's static typing system isn't really designed to support this unless the object conforms to a known interface, but using reflection, your code can look at the object and find out if it has a method called 'doSomething' and then call it if you want to.So, to give you a code example of this in Java (imagine the object in question is foo) :One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to look through your classes for methods tagged with the @Test annotation, and will then call them when running the unit test.There are some good reflection examples to get you started at http://docs.oracle.com/javase/tutorial/reflect/index.htmlAnd finally, yes, the concepts are pretty much similar in other statically typed languages which support reflection (like C#). In dynamically typed languages, the use case described above is less necessary (since the compiler will allow any method to be called on any object, failing at runtime if it does not exist), but the second case of looking for methods which are marked or work in a certain way is still common.Update from a comment:The ability to inspect the code in the system and see object types is\n  not reflection, but rather Type Introspection. Reflection is then the\n  ability to make modifications at runtime by making use of\n  introspection. The distinction is necessary here as some languages\n  support introspection, but do not support reflection. One such example\n  is C++",
                "Reflection is a language's ability to inspect and dynamically call classes, methods, attributes, etc. at runtime.For example, all objects in Java have the method getClass(), which lets you determine the object's class even if you don't know it at compile time (e.g. if you declared it as an Object) - this might seem trivial, but such reflection is not possible in less dynamic languages such as C++. More advanced uses lets you list and call methods, constructors, etc.Reflection is important since it lets you write programs that do not have to \"know\" everything at compile time, making them more dynamic, since they can be tied together at runtime. The code can be written against known interfaces, but the actual classes to be used can be instantiated using reflection from configuration files.Lots of modern frameworks use reflection extensively for this very reason. Most other modern languages use reflection as well, and in scripting languages (such as Python) they are even more tightly integrated, since it feels more natural within the general programming model of those languages.",
                "One of my favorite uses of reflection is the below Java dump method. It takes any object as a parameter and uses the Java reflection API to print out every field name and value.",
                "Uses of ReflectionReflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.Extensibility FeaturesAn application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.\nClass Browsers and Visual Development Environments\nA class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code.\nDebuggers and Test Tools\nDebuggers need to be able to examine private members in classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to ensure a high level of code coverage in a test suite.Drawbacks of ReflectionReflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection.Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations cannot be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts and should be avoided in sections of code which are called frequently in performance-sensitive applications.Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet.Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.source: The Reflection API",
                "Reflection is a key mechanism to allow an application or framework to work with code that might not have even been written yet!Take for example your typical web.xml file. This will contain a list of servlet elements, which contain nested servlet-class elements. The servlet container will process the web.xml file, and create new a new instance of each servlet class through reflection.Another example would be the Java API for XML Parsing (JAXP). Where an XML parser provider is 'plugged-in' via well-known system properties, which are used to construct new instances through reflection.And finally, the most comprehensive example is Spring which uses reflection to create its beans, and for its heavy use of proxies",
                "Not every language supports reflection, but the principles are usually the same in languages that support it.Reflection is the ability to \"reflect\" on the structure of your program. Or more concrete. To look at the objects and classes you have and programmatically get back information on the methods, fields, and interfaces they implement. You can also look at things like annotations.It's useful in a lot of situations. Everywhere you want to be able to dynamically plug in classes into your code. Lots of object relational mappers use reflection to be able to instantiate objects from databases without knowing in advance what objects they're going to use. Plug-in architectures is another place where reflection is useful. Being able to dynamically load code and determine if there are types there that implement the right interface to use as a plugin is important in those situations.",
                "Reflection allows instantiation of new objects, invocation of methods, and get/set operations on class variables dynamically at run time without having prior knowledge of its implementation.In above example the null parameter is the object you want to invoke the method on. If the method is static you supply null. If the method is not static, then while invoking you need to supply a valid MyObject instance instead of null.Reflection also allows you to access private member/methods of a class:.Reflection is a very powerful API but it may slow down the application if used in excess, as it resolves all the types at runtime.",
                "Java Reflection is quite powerful and can be very useful.\nJava Reflection makes it possible to inspect classes, interfaces, fields and methods at runtime, without knowing the names of the classes, methods etc. at compile time.\nIt is also possible to instantiate new objects, invoke methods and get/set field values using reflection.A quick Java Reflection example to show you what using reflection looks like:This example obtains the Class object from the class called MyObject. Using the class object the example gets a list of the methods in that class, iterates the methods and print out their names.Exactly how all this works is explained hereEdit: After almost 1 year I am editing this answer as while reading about reflection I got few more uses of Reflection.When the Spring context processes this < bean > element, it will use Class.forName(String) with the argument \"com.example.Foo\" to instantiate that Class.It will then again use reflection to get the appropriate setter for the < property > element and set its value to the specified value.For Private methods,For private fields,",
                "Simple example for reflection.\nIn a chess game, you do not know what will be moved by the user at run time. reflection can be used to call methods which are already implemented at run time:",
                "Example:Take for example a remote application which gives your application an object which you obtain using their API Methods . Now based on the object you might need to perform some sort of computation .The provider guarantees that object can be of 3 types and we need to perform computation based on what type of object .So we might implement in 3 classes each containing a different logic .Obviously the object  information is available in runtime so you cannot statically code to perform computation hence reflection is used to instantiate the object of the class that you require to perform the computation based on the object received from the provider .",
                "As per my understanding:Reflection allows programmer to access entities in program dynamically. i.e. while coding an application if programmer is unaware about a class or its methods, he can make use of such class dynamically (at run time) by using reflection.It is frequently used in scenarios where a class name changes frequently. If such a situation arises, then it is complicated for the programmer to rewrite the application and change the name of the class again and again.Instead, by using reflection, there is need to worry about a possibly changing class name.",
                "Reflection is an API which is used to examine or modify the behaviour of methods, classes, interfaces at runtime.The java.lang and java.lang.reflect packages provide classes for java reflection.Reflection can be used to get information about \u2013Class The getClass() method is used to get the name of the class to which an object belongs.Constructors The getConstructors() method is used to get the public constructors of the class to which an object belongs.Methods The getMethods() method is used to get the public methods of the class to which an objects belongs.The Reflection API is mainly used in:IDE (Integrated Development Environment) e.g. Eclipse, MyEclipse, NetBeans etc.\nDebugger and Test Tools etc.Advantages of Using Reflection:Extensibility Features: An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.Debugging and testing tools: Debuggers use the property of reflection to examine private members on classes.Drawbacks:Performance Overhead: Reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.Exposure of Internals: Reflective code breaks abstractions and therefore may change behaviour with upgrades of the platform.Ref: Java Reflection javarevisited.blogspot.in",
                "Reflection is a set of functions which allows you to access the runtime information of your program and modify it behavior (with some limitations).It's useful because it allows you to change the runtime behavior depending on the meta information of your program, that is, you can check the return type of a function and change the way you handle the situation.In C# for example you can load an assembly (a .dll) in runtime an examine it, navigating through the classes and taking actions according to what you found. It also let you create an instance of a class on runtime, invoke its method, etc.Where can it be useful? Is not useful every time but for concrete situations. For example you can use it to get the name of the class for logging purposes, to dynamically create handlers for events according to what's specified on a configuration file and so on...",
                "I just want to add some points to all that was listed.With Reflection API you can write a universal toString() method for any object.It could be useful for debugging.Here is some example:",
                "Reflection is to let object to see their appearance. This argument seems nothing to do with reflection. In fact, this is the \"self-identify\" ability.Reflection itself is a word for such languages that lack the capability of self-knowledge and self-sensing as Java and C#. Because they do not have the capability of self-knowledge, when we want to observe how it looks like, we must have another thing to reflect on how it looks like. Excellent dynamic languages such as Ruby and Python can perceive the reflection of their own without the help of other individuals. We can say that the object of Java cannot perceive how it looks like without a mirror, which is an object of the reflection class, but an object in Python can perceive it without a mirror. So that's why we need reflection in Java.",
                "From java documentation pagejava.lang.reflect package provides classes and interfaces for obtaining reflective information about classes and objects. Reflection allows programmatic access to information about the fields, methods and constructors of loaded classes, and the use of reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.AccessibleObject allows suppression of access checks if the necessary ReflectPermission is available.Classes in this package, along with java.lang.Class accommodate applications such as debuggers, interpreters, object inspectors, class browsers, and services such as Object Serialization and JavaBeans that need access to either the public members of a target object (based on its runtime class) or the members declared by a given classIt includes following functionality.Have a look at this documentation link for the methods exposed by Class class.From this article (by Dennis Sosnoski, President, Sosnoski Software Solutions, Inc)  and this article (security-explorations pdf):I can see considerable drawbacks than uses of using ReflectionUser of Reflection:Drawbacks of Reflection:General abuses:Have a look at this SE question regarding abuse of reflection feature:How do I read a private field in Java?Summary:Insecure use of its functions conducted from within a system code can also easily lead to the compromise of a Java security model. So use this feature sparingly",
                "As name itself suggest it reflects what it holds for example class method,etc apart from providing feature to invoke method creating instance dynamically at runtime.It is used by many frameworks and application under the wood to invoke services without actually knowing the code.",
                "Reflection gives you the ability to write more generic code. It allows you to create an object at runtime and call its method at runtime. Hence the program can be made highly parameterized. It also allows introspecting the object and class to detect its variables and method exposed to the outer world.",
                "Reflection has many uses. The one I am more familiar with, is to be able to create code on the fly.IE: dynamic classes, functions, constructors - based on any data\n  (xml/array/sql results/hardcoded/etc..)",
                "I want to answer this question by example. First of all Hibernate project uses Reflection API to generate CRUD statements to bridge the chasm between the running application and the persistence store. When things change in the domain, the Hibernate has to know about them to persist them to the data store and vice versa.Alternatively works Lombok Project. It just injects code at compile time, result in code being inserted into your domain classes. (I think it is OK for getters and setters)Hibernate chose reflection because it has minimal impact on the build process for an application.And from Java 7 we have MethodHandles, which works as Reflection API. In projects, to work with loggers we just copy-paste the next code:Because it is hard to make typo-error in this case.",
                "As I find it best to explain by example and none of the answers seem to do that...A practical example of using reflections would be a Java Language Server written in Java or a PHP Language Server written in PHP, etc. Language Server gives your IDE abilities like autocomplete, jump to definition, context help, hinting types and more. In order to have all tag names (words that can be autocompleted) to show all the possible matches as you type the Language Server has to inspect everything about the class including doc blocks and private members. For that it needs a reflection of said class.A different example would be a unit-test of a private method. One way to do so is to create a reflection and change the method's scope to public in the test's set-up phase. Of course one can argue private methods shouldn't be tested directly but that's not the point.",
                "I am using reflection to create an object based on class name(class name in String) and call the method of that classBut one major problem is that if you Autowired something on that class that will re-initialized to null",
                "IMPORTANTStarting from Java 9 you can no longer use reflection, unless the package-info.java opens the module to reflection access.By default, \"reflection\" access is denied to all packages in the module.See Understanding Java 9 Modules"
            ]
        },
        {
            "tag": "Component",
            "patterns": [
                "What's the difference between @Component, @Repository & @Service annotations in Spring?",
                "@Component, @Repository, @Service"
            ],
            "responses": [
                "From Spring Documentation:The @Repository annotation is a marker for any class that fulfils the\nrole or stereotype of a repository (also known as Data Access Object\nor DAO). Among the uses of this marker is the automatic translation of\nexceptions, as described in Exception Translation.Spring provides further stereotype annotations: @Component, @Service,\nand @Controller. @Component is a generic stereotype for any\nSpring-managed component. @Repository, @Service, and @Controller are\nspecializations of @Component for more specific use cases (in the\npersistence, service, and presentation layers, respectively).\nTherefore, you can annotate your component classes with @Component,\nbut, by annotating them with @Repository, @Service, or @Controller\ninstead, your classes are more properly suited for processing by tools\nor associating with aspects.For example, these stereotype annotations\nmake ideal targets for pointcuts. @Repository, @Service, and\n@Controller can also carry additional semantics in future releases of\nthe Spring Framework. Thus, if you are choosing between using\n@Component or @Service for your service layer, @Service is clearly the\nbetter choice. Similarly, as stated earlier, @Repository is already\nsupported as a marker for automatic exception translation in your\npersistence layer.",
                "As many of the answers already state what these annotations are used for, we'll here focus on some minor differences among them.First the SimilarityFirst point worth highlighting again is that with respect to scan-auto-detection and dependency injection for BeanDefinition all these annotations (viz., @Component, @Service,\n  @Repository, @Controller) are the same. We can use one in place\n  of another and can still get our way around.@ComponentThis is a general-purpose stereotype annotation indicating that the class is a spring component.What\u2019s special about @Component\n<context:component-scan> only scans @Component and does not look for @Controller, @Service and @Repository in general. They are scanned because they themselves are annotated with @Component.Just take a look at @Controller, @Service and @Repository annotation definitions:Thus, it\u2019s not wrong to say that @Controller, @Service and @Repository are special types of @Component annotation. <context:component-scan> picks them up and registers their following classes as beans, just as if they were annotated with @Component.Special type annotations are also scanned, because they themselves are annotated with @Component annotation, which means they are also @Components. If we define our own custom annotation and annotate it with @Component, it will also get scanned with <context:component-scan>@RepositoryThis is to indicate that the class defines a data repository.What\u2019s special about @Repository?In addition to pointing out, that this is an Annotation based Configuration, @Repository\u2019s job is to catch platform specific exceptions and re-throw them as one of Spring\u2019s unified unchecked exception. For this, we\u2019re provided with PersistenceExceptionTranslationPostProcessor, that we are required to add in our Spring\u2019s application context like this:This bean post processor adds an advisor to any bean that\u2019s annotated with @Repository so that any platform-specific exceptions are caught and then re-thrown as one of Spring\u2019s unchecked data access exceptions.@ControllerThe @Controller annotation indicates that a particular class serves the role of a controller. The @Controller annotation acts as a stereotype for the annotated class, indicating its role.What\u2019s special about @Controller?We cannot switch this annotation with any other like @Service or @Repository, even though they look same. \nThe dispatcher scans the classes annotated with @Controller and detects methods annotated with @RequestMapping annotations within them. We can use @RequestMapping on/in only those methods whose classes are annotated with @Controller and it will NOT work with @Component, @Service, @Repository etc...Note: If a class is already registered as a bean through any alternate method, like through @Bean or through @Component, @Service etc... annotations, then @RequestMapping can be picked if the class is also annotated with @RequestMapping annotation. But that's a different scenario.@Service@Service beans hold the business logic and call methods in the repository layer.What\u2019s special about @Service?Apart from the fact that it's used to indicate, that it's holding the business logic, there\u2019s nothing else noticeable in this annotation; but who knows, Spring may add some additional exceptional in future.What else?Similar to above, in the future Spring may add special functionalities for @Service, @Controller and @Repository based on their layering conventions. Hence, it's always a good idea to respect the convention and use it in line with layers.",
                "They are almost the same - all of them mean that the class is a Spring bean. @Service, @Repository and @Controller are specialized @Components. You can choose to perform specific actions with them. For example:Another thing is that you designate the components semantically to different layers.One thing that @Component offers is that you can annotate other annotations with it, and then use them the same way as @Service.For example recently I made:So all classes annotated with @ScheduledJob are spring beans and in addition to that are registered as quartz jobs. You just have to provide code that handles the specific annotation.",
                "@Component is equivalent to@Service, @Controller, @Repository = {@Component + some more special functionality}That mean Service, The Controller and Repository are functionally the same.The three annotations are used to separate \"Layers\" in your application,Now you may ask why separate them: (I assume you know AOP-Aspect Oriented Programming)Let's say you want to Monitors the Activity of the DAO Layer only. You will write an Aspect (A class) class that does some logging before and after every method of your DAO is invoked, you are able to do that using AOP as you have three distinct Layers and are not mixed.So you can do logging of DAO  \"around\", \"before\" or \"after\" the DAO methods. You could do that because you had a DAO in the first place. What you just achieved is Separation of concerns or tasks.Imagine if there were only one annotation @Controller, then this component will have dispatching, business logic and accessing database all mixed, so dirty code!Above mentioned is one very common scenario, there are many more use cases of why to use three annotations.",
                "In Spring @Component, @Service, @Controller, and @Repository are Stereotype annotations which are used for:@Controller: where your request mapping from presentation page done i.e. Presentation layer won't go to any other file it goes directly to @Controller class and checks for requested path in @RequestMapping annotation which written before method calls if necessary.@Service: All business logic is here i.e. Data related calculations and all.This annotation of business layer in which our user not directly call persistence method so it will call this method using this annotation. It will request @Repository as per user request@Repository: This is Persistence layer(Data Access Layer) of application which used to get data from the database. i.e. all the Database related operations are done by the repository.@Component - Annotate your other components (for example REST resource classes) with a component stereotype.Indicates that an annotated class is a \"component\". Such classes are\n  considered as candidates for auto-detection when using\n  annotation-based configuration and classpath scanning.Other class-level annotations may be considered as identifying a\n  component as well, typically a special kind of component: e.g. the\n  @Repository annotation or AspectJ's @Aspect annotation.",
                "Spring 2.5 introduces further stereotype annotations: @Component, @Service and @Controller. @Component serves as a generic stereotype for any Spring-managed component; whereas, @Repository, @Service, and @Controller serve as specializations of @Component for more specific use cases (e.g., in the persistence, service, and presentation layers, respectively). What this means is that you can annotate your component classes with @Component, but by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects. For example, these stereotype annotations make ideal targets for pointcuts. Of course, it is also possible that @Repository, @Service, and @Controller may carry additional semantics in future releases of the Spring Framework. Thus, if you are making a decision between using @Component or @Service for your service layer, @Service is clearly the better choice. Similarly, as stated above, @Repository is already supported as a marker for automatic exception translation in your persistence layer.reference :- Spring Documentation - Classpath scanning, managed components and writing configurations using Java",
                "These are Stereotype annotations, candidate for autoscanningTechnically @Controller, @Service, @Repository are all same. All of them extends @Component.From the Spring source code:Indicates that an annotated class is a \"component\". Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.We can directly use @Component for each and every bean, but for better understanding and maintainability of a large application, we use @Controller, @Service, @Repository.Purpose of each annotation:If we interchange their place(use @Repository in place of @Controller), our application will work fine.The main purpose of using three different @annotations is to provide better Modularity to the Enterprise application.",
                "Use of @Service and @Repository annotations are important from database connection perspective.If you do not use the proper annotations, you may face commit exceptions overridden by rollback transactions. You will see exceptions during stress load test that is related to roll back JDBC transactions.",
                "@Repository @Service and @Controller are serves as specialization of @Component for more specific use on that basis you can replace @Service to @Component but in this case you loose the specialization.",
                "all these annotations are type of stereo type type of annotation,the difference between these three annotations arefor example",
                "Spring provides four different types of auto component scan annotations, they are @Component, @Service, @Repository and @Controller. Technically, there is no difference between them, but every auto component scan annotation should be used for a special purpose and within the defined layer.@Component: It is a basic auto component scan annotation, it indicates annotated class is an auto scan component.@Controller: Annotated class indicates that it is a controller component, and mainly used at the presentation layer.@Service: It indicates annotated class is a Service component in the business layer.@Repository: You need to use this annotation within the persistence layer, this acts like database repository.One should choose a more specialised form of @Component while annotating their class as this annotation may contain specific behavior going forward.",
                "There is no difference between @Component, @Service, @Controller, @Repository.\n@Component is the Generic annotation to represent the component of our MVC. But there will be several components as part of our MVC application like service layer components, persistence layer components and presentation layer components. So to differentiate them Spring people have given the other three annotations also.",
                "@Component: you annotate a class @Component, it tells hibernate that it is a Bean.@Repository: you annotate a class @Repository, it tells hibernate it is a DAO class and treat it as DAO class. Means it makes the unchecked exceptions (thrown from DAO methods) eligible for translation into Spring DataAccessException.@Service: This tells hibernate it is a Service class where you will have @Transactional etc Service layer annotations so hibernate treats it as a Service component.Plus @Service is advance of @Component. Assume the bean class name is CustomerService, since you did not choose XML bean configuration way so you annotated the bean with @Component to indicate it as a Bean. So while getting the bean object CustomerService cust = (CustomerService)context.getBean(\"customerService\"); By default, Spring will lower case the first character of the component \u2013 from \u2018CustomerService\u2019 to \u2018customerService\u2019. And you can retrieve this component with name \u2018customerService\u2019.\nBut if you use @Service annotation for the bean class you can provide a specific bean name byand you can get the bean object by",
                "We can answer this according to java standardReferring to JSR-330, which is now supported by spring, you can only use @Named to define a bean (Somehow @Named=@Component). So according to this standard, there seems that there is no use to define stereotypes (like @Repository, @Service, @Controller) to categories beans.But spring user these different annotations in different for the specific use, for example:",
                "Annotate other components with @Component, for example REST Resource classes.@Component is a generic stereotype for any Spring managed component.@Controller, @Service and @Repository are Specializations of @Component for specific use cases.",
                "Even if we interchange @Component or @Repository or @serviceIt will behave the same , but one aspect is that they wont be able to catch some specific exception related to DAO instead of Repository if we use component or @ service",
                "The answers presented here are partially technically correct, but even though the response list is long and this will be at the bottom I thought it was worth putting an actually correct response in here too, just in case somebody stumbles upon it and learns something valuable from it. It's not that the rest of the answers are completely wrong, it's just that they aren't right. And, to stop the hordes of trolls, yes, I know that technically these annotations are effectively the same thing right now and mostly interchangeable even unto spring 5. Now, for the right answer:These three annotations are completely different things and are not interchangeable. You can tell that because there are three of them rather than just one. They are not intended to be interchangeable, they're just implemented that way out of elegance and convenience.Modern programming is invention, art, technique, and communication, in varying proportions. The communication bit is usually very important because code is usually read much more often than its written. As a programmer you're not only trying to solve the technical problem, you're also trying to communicate your intent to future programmers who read your code. These programmers may share neither your native language nor your social environment, and it is possible that they may be reading your code 50-years in the future (it's not as unlikely as you may think). It's difficult to communicate effectively that far into the future. Therefore, it is vital that we use the clearest, most efficient, correct, and communicative language available to us. We chose our words carefully to have maximum impact and be as clear as possible as to our intent.For example, it is vital that @Repository is used when we're writing a repository, rather than @Component. The latter is a very poor choice of annotation for a repository because it does not indicate that we're looking at a repository. We can assume that a repository is also a spring-bean, but not that a component is a repository. With @Repository we are being clear and specific in our language. We are stating clearly that this is a repository. With @Component we are leaving it to the reader to decide what type of component they are reading, and they will have to read the whole class (and possibly a tree of subclasses and interfaces) to infer meaning. The class could then possibly be misinterpreted by a reader in the distant future as not being a repository, and we would have been partially responsible for this mistake because we, who knew full well that this is a repository, failed to be specific in our language and communicate our intent effectively.I won't go into the other examples, but will state as clearly as I can: these annotations are completely different things and should be used appropriately, as per their intent. @Repository is for storage repositories and no other annotation is correct. @Service is for services and no other annotation is correct. @Controller is for components that are neither repositories nor services, and to use either of these in its place would also be incorrect. It might compile, it might even run and pass your tests, but it would be wrong and I would think less of you (professionally) if you were to do this.There are examples of this throughout spring (and programming in general). You must not use @Controller when writing a REST API, because @RestController is available. You must not use @RequestMapping when @GetMapping is a valid alternative. Etc. Etc. Etc. You must choose the most specific exact and correct language you can to communicate your intent to your readers, otherwise, you are introducing risks into your system, and risk has a cost.Finally, I'd like to bring up a point of order concerning Object-Oriented systems. One of the fundamental rules is that implementations can vary but interfaces shouldn't. Assuming that these annotations are the same thing is a very slippery slope and completely against OO. Although they may be implemented in an interchangeable way now, there is no guarantee that they will be in the future. Further, even within the same team, an engineer may decide to hang some behaviour off one or more of these annotations using aspects, or a platform engineer may choose to replace the implementation of one of these for operational reasons. You just don't know, nor should you -- in OO you rely on the interface, not the implementation.",
                "In Spring 4, latest version:The @Repository annotation is a marker for any class that fulfills the\n  role or stereotype of a repository (also known as Data Access Object\n  or DAO). Among the uses of this marker is the automatic translation of\n  exceptions as described in Section 20.2.2, \u201cException translation\u201d.Spring provides further stereotype annotations: @Component, @Service,\n  and @Controller. @Component is a generic stereotype for any\n  Spring-managed component. @Repository, @Service, and @Controller are\n  specializations of @Component for more specific use cases, for\n  example, in the persistence, service, and presentation layers,\n  respectively. Therefore, you can annotate your component classes with\n  @Component, but by annotating them with @Repository, @Service, or\n  @Controller instead, your classes are more properly suited for\n  processing by tools or associating with aspects. For example, these\n  stereotype annotations make ideal targets for pointcuts. It is also\n  possible that @Repository, @Service, and @Controller may carry\n  additional semantics in future releases of the Spring Framework. Thus,\n  if you are choosing between using @Component or @Service for your\n  service layer, @Service is clearly the better choice. Similarly, as\n  stated above, @Repository is already supported as a marker for\n  automatic exception translation in your persistence layer.",
                "@Component is the top level generic annotation which makes the annotated bean to be scanned and available in the DI container@Repository is specialized annotation and it brings the feature of converting all the unchecked exceptions from the DAO classes@Service is specialized annotation. it do not bring any new feature as of now but it clarifies the intent of the bean@Controller is specialized annotation which makes the bean MVC aware and allows the use of further annotation like @RequestMapping and all suchHere are more details",
                "Good enough answers are here to explain the whats-the-difference-between-component-repository-service-annotations. I would like to share the difference between @Controller & @RestControllerMore Detailed View",
                "A @Service to quote spring documentation,Indicates that an annotated class is a \"Service\", originally defined\n  by Domain-Driven Design (Evans, 2003) as \"an operation offered as an\n  interface that stands alone in the model, with no encapsulated state.\"\n  May also indicate that a class is a \"Business Service Facade\" (in the\n  Core J2EE patterns sense), or something similar. This annotation is a\n  general-purpose stereotype and individual teams may narrow their\n  semantics and use as appropriate.If you look at domain driven design by eric evans,A SERVICE is an operation offered as an interface that stands alone in\n  the model, without encapsulating state, as ENTITIES and VALUE OBJECTS\n  do. SERVICES are a common pattern in technical frameworks, but they\n  can also apply in the domain layer. The name service emphasizes the\n  relationship with other objects. Unlike ENTITIES and VALUE OBJECTS, it\n  is defined purely in terms of what it can do for a client. A SERVICE\n  tends to be named for an activity, rather than an entity\u2014a verb rather\n  than a noun. A SERVICE can still have an abstract, intentional\n  definition; it just has a different flavor than the definition of an\n  object. A SERVICE should still have a defined responsibility, and that\n  responsibility and the interface fulfilling it should be defined as\n  part of the domain model. Operation names should come from the\n  UBIQUITOUS LANGUAGE or be introduced into it. Parameters and results\n  should be domain objects. SERVICES should be used judiciously and not\n  allowed to strip the ENTITIES and VALUE OBJECTS of all their behavior.\n  But when an operation is actually an important domain concept, a\n  SERVICE forms a natural part of a MODEL-DRIVEN DESIGN. Declared in the\n  model as a SERVICE, rather than as a phony object that doesn't\n  actually represent anything, the standalone operation will not mislead\n  anyone.and a Repository as per Eric Evans,A REPOSITORY represents all objects of a certain type as a conceptual\n  set (usually emulated). It acts like a collection, except with more\n  elaborate querying capability. Objects of the appropriate type are\n  added and removed, and the machinery behind the REPOSITORY inserts\n  them or deletes them from the database. This definition gathers a\n  cohesive set of responsibilities for providing access to the roots of\n  AGGREGATES from early life cycle through the end.",
                "Repository and Service are children of Component annotation. So, all of them are Component. Repository and Service just expand it. \nHow exactly?\nService has only ideological difference: we use it for services. Repository has particular exception handler.",
                "Spring supports multiple types annotations such as @Component, @service, @Repository. All theses can be found under the org.springframework.stereotype package and @Bean can be found under org.springframework.context.annotation package.When classes in our application are annotated with any of the above mentioned annotation then during project startup spring scan(using @ComponentScan) each class and inject the instance of the classes to the IOC container. Another thing the @ComponentScan would do is running the methods with @Bean on it and restore the return object to the Ioc Container as a bean.Before we deep dive into ( @Component vs @service vs @Repository ) first it's better to understand the differences between @Bean and @ComponentIn most typical applications, we have distinct layers like data access, presentation, service, business, etc. Additionally, in each layer we have various beans. To detect these beans automatically, Spring uses classpath scanning annotations.Then it registers each bean in the ApplicationContext.Here's a short overview of a few of these annotations:@Component is a class level annotation.We can use @Component across the application to mark the beans as Spring's managed components. Spring will only pick up and register beans with @Component, and doesn't look for @Service and @Repository in general.They are registered in ApplicationContext because they are annotated with @ComponentAs stated, @Component is the parent of all stereotype annotations. When Spring performs a component scan, it only looks for classes marked with @Component annotations.We can use this annotation on all the classes and it won\u2019t cause any difference.We mark beans with @Service to indicate that they're holding the business logic. Besides being used in the service layer, there isn't any other special use for this annotation.The @Service is child of component and used to denote classes from the service layer of the application.@Repository\u2019s job is to catch persistence-specific exceptions and re-throw them as one of Spring\u2019s unified unchecked exceptions.For this, Spring provides PersistenceExceptionTranslationPostProcessor, which we are required to add in our application context (already included if we're using Spring Boot):This bean post processor adds an advisor to any bean that\u2019s annotated with @Repository.Similarly, @Repository is also a child of component annotation and used on the classes that belong to persistence data access layer and serves as a data repository.@Service and @Repository are special cases of @Component. They are technically the same, but we use them for the different purposes.It's always a good idea to choose the annotation based on their layer conventions.",
                "@Component acts as @Bean annotation in configuration class , register bean in spring context. Also it is parent for @Service, @Repository and @Controller annotation.@Service, extends @Component annotation and has only naming difference.@Repository - extends @Component annotation and translate all database exceptions into \nDataAccessException.@Controller - acts as controller in MVC pattern. The dispatcher will scan such annotated classes for mapped methods, detecting @RequestMapping annotations.",
                "Explanation of stereotypes :@Component is a generic stereotype for any Spring-managed component. @Repository, @Service, and @Controller are specializations of @Component for more specific use cases, for example, in the persistence, service, and presentation layers, respectively.Originally answered here.",
                "Difference between @Component, @Repository, @Controller & @Service annotations@Component \u2013 generic and can be used across application. @Service\n  \u2013 annotate classes at service layer level. @Controller \u2013 annotate\n  classes at presentation layers level, mainly used in Spring MVC.\n  @Repository \u2013 annotate classes at persistence layer, which will act as\n  database repository.@Controller = @Component ( Internal Annotation ) + Presentation layer Features \n@Service = @Component ( Internal Annotation ) + Service layer Features\n@Component = Actual Components ( Beans )\n@Repository = @Component ( Internal Annotation ) + Data Layer Features ( use for handling the Domain Beans )",
                "In spring framework provides some special type of annotations,called stereotype annotations.\nThese are following:-above declared annotations are special because when we add <context:component-scan> into xxx-servlet.xml file ,spring will automatically create the object of those classes which are annotated with above annotation during context creation/loading phase.",
                "@Component, @ Repository, @ Service, @Controller:@Component is a generic stereotype for the components managed by Spring @Repository, @Service, and @Controller are @Component specializations for more specific uses:Why use @Repository, @Service, @Controller over @Component?\nWe can mark our component classes with @Component, but if instead we use the alternative that adapts to the expected functionality. Our classes are better suited to the functionality expected in each particular case.A class annotated with @Repository has a better translation and readable error handling with org.springframework.dao.DataAccessException. Ideal for implementing components that access data (DataAccessObject or DAO).An annotated class with @Controller plays a controller role in a Spring Web MVC applicationAn annotated class with @Service plays a role in business logic services, example Facade pattern for DAO Manager (Facade) and transaction handling",
                "In order to simplify this illustration, let us consider technicality by use case, These annotations are used to be injected and as I said literally \"Used to be injected\" , that mean, if you know how to use Dependency Injection \"DI\"  and you should, then you will always look for these annotations, and by annotating the classes with these Stereo Types, you are informing the DI container to scan them to be ready for Injection on other places, this is the practical target.Now lets move to each one; first @Service, If you are building some logic for specific business case you need to separate that in a place which will contain your business logic, this service is normal Class or you can use it as interface if you want , and it is written like thisTo use it in another class, suppose in ControllerAll are the same way when you inject them, @Repository it's an interface which apply the implementation for the Repository Pattern Repository design pattern, generally it's used when you are dealing with some data store or database, and you will find that, it contains multiple ready implementation for you to handle database operations; it can be  CrudRepository, JpaRepository etc.For example:Finally the @Component, this is the generic form for registered beans in Spring, that's spring is always looking for bean marked with @Component to be registered, then both @Service and @Repository are special cases of @Component, however the common use case for component is when you're making something purely technical not for covering direct business case! like formatting dates or handing special request serialization mechanism and so on.",
                "Even if it behaves same but this leverage the application many of software development principals, few examples are:"
            ]
        },
        {
            "tag": "declare_array",
            "patterns": [
                "How do I declare and initialize an array in Java?",
                "How to declare an array?",
                "How to initialize an array?"
            ],
            "responses": [
                "You can either use array declaration or array literal (but only when you declare and affect the variable right away, array literals cannot be used for re-assigning an array).For primitive types:For classes, for example String, it's the same:The third way of initializing is useful when you declare an array first and then initialize it, pass an array as a function argument, or return an array. The explicit type is required.",
                "There are two types of array.Syntax for default values:Or (less preferred)Syntax with values given (variable/field initialization):Or (less preferred)Note: For convenience  int[] num is preferable because it clearly tells that you are talking here about array. Otherwise no difference. Not at all.OrOrOrSo here we are defining columns explicitly.\nAnother Way:Alternatively:Ragged arrays are multidimensional arrays.\nFor explanation see multidimensional array detail at the official java tutorials",
                "is also valid, but I prefer the brackets after the type, because it's easier to see that the variable's type is actually an array.",
                "There are various ways in which you can declare an array in Java:You can find more information in the Sun tutorial site and the JavaDoc.",
                "I find it is helpful if you understand each part:Type[] is the type of the variable called name (\"name\" is called the identifier).  The literal \"Type\" is the base type, and the brackets mean this is the array type of that base. Array types are in turn types of their own, which allows you to make multidimensional arrays like Type[][] (the array type of Type[]). The keyword new says to allocate memory for the new array.  The number between the bracket says how large the new array will be and how much memory to allocate. For instance, if Java knows that the base type Type takes 32 bytes, and you want an array of size 5, it needs to internally allocate 32 * 5 = 160 bytes.You can also create arrays with the values already there, such aswhich not only creates the empty space but fills it with those values. Java can tell that the primitives are integers and that there are 5 of them, so the size of the array can be determined implicitly.",
                "The following shows the declaration of an array, but the array is not initialized:The following shows the declaration as well as initialization of the array:Now, the following also shows the declaration as well as initialization of the array:But this third one shows the property of anonymous array-object creation which is pointed by a reference variable \"myIntArray\", so if we write just \"new int[]{1,2,3};\" then this is how anonymous array-object can be created.If we just write:this is not declaration of array, but the following statement makes the above declaration complete:",
                "Alternatively,That declares an array called arrayName of size 10 (you have elements 0 through 9 to use).",
                "Also, in case you want something more dynamic there is the List interface.  This will not perform as well, but is more flexible:",
                "There are two main ways to make an array:This one, for an empty array:And this one, for an initialized array:You can also make multidimensional arrays, like this:",
                "Take the primitive type int for example. There are several ways to declare and int array:where in all of these, you can use int i[] instead of int[] i.With reflection, you can use (Type[]) Array.newInstance(Type.class, capacity);Note that in method parameters, ... indicates variable arguments. Essentially, any number of parameters is fine. It's easier to explain with code:Inside the method, varargs is treated as a normal int[]. Type... can only be used in method parameters, so int... i = new int[] {} will not compile.Note that when passing an int[] to a method (or any other Type[]), you cannot use the third way. In the statement int[] i = *{a, b, c, d, etc}*, the compiler assumes that the {...} means an int[]. But that is because you are declaring a variable. When passing an array to a method, the declaration must either be new Type[capacity] or new Type[] {...}.Multidimensional arrays are much harder to deal with. Essentially, a 2D array is an array of arrays. int[][] means an array of int[]s. The key is that if an int[][] is declared as int[x][y], the maximum index is i[x-1][y-1]. Essentially, a rectangular int[3][5] is:",
                "Using different IntStream.iterate and IntStream.takeWhile methods:Using the Local Variable Type Inference:",
                "In Java 8 you can use something like this.",
                "If you want to create arrays using reflections then you can do like this:",
                "If by \"array\" you meant using java.util.Arrays, you can do it with:This one is pretty simple and straightforward.",
                "Declaring an array of object references:",
                "Array is a sequential list of itemsIf it's an object, then it's the same conceptIn case of objects, you need to either assign it to null to initialize them using new Type(..), classes like String and Integer are special cases that will be handled as followingIn general you can create arrays that's M dimensionalIt's worthy to note that creating an M dimensional array is expensive in terms of Space. Since when you create an M dimensional array with N on all the dimensions, The total size of the array is bigger than N^M, since each array has a reference, and at the M-dimension there is an (M-1)-dimensional array of references. The total size is as following",
                "Declare and initialize for Java 8 and later. Create a simple integer array:Create a random array for integers between [-50, 50] and for doubles [0, 1E17]:Power-of-two sequence:For String[] you must specify a constructor:Multidimensional arrays:",
                "For creating arrays of class Objects you can use the java.util.ArrayList. to define an array:Assign values to the array:Read from the array:Note:variableName is a reference to the array meaning that manipulating variableName will manipulate arrayNamefor loops:for loop that allows you to edit arrayName (conventional for loop):",
                "Another way to declare and initialize ArrayList:",
                "There are a lot of answers here. I am adding a few tricky ways to create arrays (from an exam point of view it's good to know this)Declare and define an arrayThis will create an array of length 3. As it holds a primitive type, int, all values are set to 0 by default. For example,Using box brackets [] before the variable nameInitialise and provide data to the arrayThis time there isn't any need to mention the size in the box bracket. Even a simple variant of this is:An array of length 0Similar for multi-dimensional arraysUsing box brackets before the variable:It's absolutely fine if you put one box bracket at the end:Some examplesIt's not mandatory that each inner element is of the same size.You have to make sure if you are using the above syntax, that the forward direction you have to specify the values in box brackets. Else it won't compile. Some examples:Another important feature is covariantIMPORTANT: For referenced types, the default value stored in the array is null.",
                "An array has two basic types.Static Array: Fixed size array (its size should be declared at the start and can not be changed later)Dynamic Array: No size limit is considered for this. (Pure dynamic arrays do not exist in Java. Instead, List is most encouraged.)To declare a static array of Integer, string, float, etc., use the below declaration and initialization statements.int[] intArray = new int[10];\nString[] intArray = new int[10];\nfloat[] intArray = new int[10];\n\n// Here you have 10 index starting from 0 to 9To use dynamic features, you have to use List...\nList is pure dynamic Array and there is no need to declare size at beginning.\nBelow is the proper way to declare a list in Java -ArrayList<String> myArray = new ArrayList<String>();\nmyArray.add(\"Value 1: something\");\nmyArray.add(\"Value 2: something more\");",
                "With local variable type inference you only have to specify the type once:Or",
                "An array can contain primitives data types as well as objects of a class depending on the definition of the array. In case of primitives data types, the actual values are stored in contiguous memory locations. In case of objects of a class, the actual objects are stored in the heap segment.One-Dimensional Arrays:The general form of a one-dimensional array declaration isInstantiating an Array in JavaFor example,Ref: Arrays in Java",
                "Example:OrExample:",
                "Sometimes I use this for initializing String arrays:It reduces the quoting clutter at the cost of a more expensive initialization.",
                "Declare Array: int[] arr;Initialize Array: int[] arr = new int[10]; 10 represents the number of elements allowed in the arrayDeclare Multidimensional Array: int[][] arr;Initialize Multidimensional Array: int[][] arr = new int[10][17]; 10 rows and 17 columns and 170 elements because 10 times 17 is 170.Initializing an array means specifying the size of it.",
                "Source from examplehub/java",
                "One another full example with a movies class:",
                "It's very easy to declare and initialize an array.\nFor example, you want to save five integer elements which are 1, 2, 3, 4, and 5 in an array. You can do it in the following way:a)orb)so the basic pattern is for initialization and declaration by method a) is:datatype should be in lower case.So the basic pattern is for initialization and declaration by method a is:If it's a string array:If it's a character array:For float double, the format of array will be same as integer.For example:but when you declare and initialize the array by \"method a\" you will have to enter the values manually or by loop or something.But when you do it by \"method b\" you will not have to enter the values manually."
            ]
        },
        {
            "tag": "print_array",
            "patterns": [
                "What's the simplest way to print a Java array?",
                "Print an array"
            ],
            "responses": [
                "Since Java 5 you can use Arrays.toString(arr) or Arrays.deepToString(arr) for arrays within arrays. Note that the Object[] version calls .toString() on each object in the array. The output is even decorated in the exact way you're asking.Examples:Output:Output:Output:Output:",
                "Always check the standard libraries first.Then try:or if your array contains other arrays as elements:",
                "This is nice to know, however, as for \"always check the standard libraries first\" I'd never have stumbled upon the trick of Arrays.toString( myarray )--since I was concentrating on the type of myarray to see how to do this. I didn't want to have to iterate through the thing: I wanted an easy call to make it come out similar to what I see in the Eclipse debugger and myarray.toString() just wasn't doing it.",
                "In JDK1.8 you can use aggregate operations and a lambda expression:",
                "As a direct answer, the solution provided by several, including @Esko, using the Arrays.toString and Arrays.deepToString methods, is simply the best.Below I try to list some of the other methods suggested, attempting to improve a little, with the most notable addition being the use of the Stream.collect operator, using a joining Collector, to mimic what the String.join is doing.",
                "Starting with Java 8, one could also take advantage of the join() method provided by the String class to print out array elements, without the brackets, and separated by a delimiter of choice (which is the space character for the example shown below):The output will be \"Hey there amigo!\".",
                "We could have used Arrays.toString(array) to print one dimensional array and Arrays.deepToString(array) for multi-dimensional arrays.Now we have got the option of Stream and lambda to print the array.Printing One dimensional Array:The output is:[1, 2, 3, 4, 5]\n  [John, Mary, Bob]\n  1\n  2\n  3\n  4\n  5\n  John\n  Mary\n  BobPrinting Multi-dimensional Array\nJust in case we want to print multi-dimensional array we can use Arrays.deepToString(array) as:Now the point to observe is that the method Arrays.stream(T[]), which in case of int[] returns us Stream<int[]> and then method flatMapToInt() maps each element of stream with the contents of a mapped stream produced by applying the provided mapping function to each element.The output is:[[11, 12], [21, 22], [31, 32, 33]]\n  [[John, Bravo], [Mary, Lee], [Bob, Johnson]]\n  11\n  12\n  21\n  22\n  31\n  32\n  33\n  John\n  Bravo\n  Mary\n  Lee\n  Bob\n  Johnson",
                "If you're using Java 1.4, you can instead do:(This works in 1.5+ too, of course.)",
                "Arrays.deepToString(arr) only prints on one line.To actually get a table to print as a two dimensional table, I had to do this:It seems like the Arrays.deepToString(arr) method should take a separator string, but unfortunately it doesn't.",
                "Different Ways to Print Arrays in Java:Simple WayOutput:\n      [One, Two, Three, Four]Using toString()Output: [One, Two, Three, Four]Printing Array of ArraysOutput: [[Ljava.lang.String;@1ad086a [[Ljava.lang.String;@10385c1,\n  [Ljava.lang.String;@42719c] [[Fifth, Sixth], [Seventh, Eighth]]Resource: Access An Array",
                "Using regular for loop is the simplest way of printing array in my opinion.\nHere you have a sample code based on your intArrayIt gives output as yours\n    1, 2, 3, 4, 5",
                "It should always work whichever JDK version you use:It will work if the Array contains Objects. If the Array contains primitive types, you can use wrapper classes instead storing the primitive directly as..Example:Replace it with:Update :Yes ! this is to be mention that converting an array to an object array OR to use the Object's array is costly and may slow the execution. it happens by the nature of java called autoboxing.So only for printing purpose, It should not be used. we can make a function which takes an array as parameter and prints the desired format as",
                "I came across this post in Vanilla #Java recently. It's not very convenient writing Arrays.toString(arr);, then importing java.util.Arrays; all the time.Please note, this is not a permanent fix by any means. Just a hack that can make debugging simpler.Printing an array directly gives the internal representation and the hashCode. Now, all classes have Object as the parent-type. So, why not hack the Object.toString()? Without modification, the Object class looks like this:What if this is changed to:This modded class may simply be added to the class path by adding the following to the command line: -Xbootclasspath/p:target/classes.Now, with the availability of deepToString(..) since Java 5, the toString(..) can easily be changed to deepToString(..) to add support for arrays that contain other arrays.I found this to be a quite useful hack and it would be great if Java could simply add this. I understand potential issues with having very large arrays since the string representations could be problematic. Maybe pass something like a System.outor a PrintWriter for such eventualities.",
                "In java 8 it is easy. there are two keywordsmethod reference: ::printlnIf you want to print all elements in the array in the same line, then just use print instead of println i.e.Another way without method reference just use:",
                "You could loop through the array,  printing out each item, as you loop. For example:Output:",
                "There Are Following way to print Array",
                "It is very simple way to print array without using any loop in JAVA.-> For, Single or simple array:The Output :-> So, this 2D array can't be printed with Arrays.toString()The Output:\u263b\u2665 Done Keep Code",
                "There's one additional way if your array is of type char[]:prints",
                "A simplified shortcut I've tried is this:It will printNo loops required in this approach and it is best for small arrays only",
                "Using org.apache.commons.lang3.StringUtils.join(*) methods can be an option\nFor example:I used the following dependency",
                "For-each loop can also be used to print elements of array:",
                "To add to all the answers, printing the object as a JSON string is also an option.Using Jackson:Using Gson:",
                "Here a possible printing function:For example, if main is like thisthe output will be { [1] [2] [3] [4] }",
                "This is marked as a duplicate for printing a byte[]. Note: for a byte array there are additional methods which may be appropriate.You can print it as a String if it contains ISO-8859-1 chars.or if it contains a UTF-8 stringor if you want print it as hexadecimal.or if you want print it as base64.or if you want to print an array of signed byte valuesor if you want to print an array of unsigned byte values",
                "if you are running jdk 8.output:",
                "If you are using Java 11Output :",
                "In java 8 :"
            ]
        },
        {
            "tag": "Runnable",
            "patterns": [
                "\"implements Runnable\" vs \"extends Thread\" in Java",
                "What are Runnables",
                "What are threads"
            ],
            "responses": [
                "Yes: implements Runnable is the preferred way to do it, IMO. You're not really specialising the thread's behaviour.  You're just giving it something to run. That means composition is the philosophically \"purer\" way to go.In practical terms, it means you can implement Runnable and extend from another class as well... and you can also implement Runnable via a lambda expression as of Java 8.",
                "tl;dr: implements Runnable is better.  However, the caveat is important.In general, I would recommend using something like Runnable rather than Thread because it allows you to keep your work only loosely coupled with your choice of concurrency.  For example, if you use a Runnable and decide later on that this doesn't in fact require its own Thread, you can just call threadA.run().Caveat: Around here, I strongly discourage the use of raw Threads.  I much prefer the use of Callables and FutureTasks (From the javadoc: \"A cancellable asynchronous computation\").  The integration of timeouts, proper cancelling and the thread pooling of the modern concurrency support are all much more useful to me than piles of raw Threads.Follow-up: There is a FutureTask constructor that allows you to use Runnables (if that's what you are most comfortable with) and still get the benefit of the modern concurrency tools.  To quote the javadoc:If you don't need a particular result, consider using constructions of the form:So, if we replace their runnable with your threadA, we get the following:Another option that allows you to stay closer to Runnables is a ThreadPoolExecutor.  You can use the execute method to pass in a Runnable to execute \"the given task sometime in the future\".If you'd like to try using a thread pool, the code fragment above would become something like the following (using the Executors.newCachedThreadPool() factory method):",
                "Moral of the story:Inherit only if you want to override some behavior.Or rather it should be read as:Inherit less, interface more.",
                "Well so many good Answers, I want to add more on this. This will help to understand Extending v/s Implementing Thread.Extends binds two class files very closely and can cause some pretty hard to deal with code.Both approaches do the same job but there have been some differences.\nThe most common difference isHowever, one significant difference between implementing Runnable and extending Thread is that by extending Thread, each of your threads has a unique object associated with it, whereas implementing Runnable, many threads can share the same object instance.The following example will help you to understand more clearlyOutput of the above program.In the Runnable interface approach, only one instance of a class is being created and it has been shared by different threads. So the value of counter is incremented for each and every thread access.Whereas, Thread class approach, you must have to create separate instance for every thread access. Hence different memory is allocated for every class instances and each has separate counter, the value remains same, which means no increment will happen because none of the object reference is same.When to use Runnable?\nUse Runnable interface when you want to access the same resources from the group of threads. Avoid using Thread class here, because multiple objects creation consumes more memory and it becomes a big performance overhead.A class that implements Runnable is not a thread and just a class. For a Runnable to become a Thread, You need to create an instance of Thread and passing itself in as the target.In most cases, the Runnable interface should be used if you are only planning to override the run() method and no other Thread methods. This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class.When there is a need to extend a superclass, implementing the Runnable interface is more appropriate than using the Thread class. Because we can extend another class while implementing Runnable interface to make a thread.I hope this will help!",
                "One thing that I'm surprised hasn't been mentioned yet is that implementing Runnable makes your class more flexible.If you extend thread then the action you're doing is always going to be in a thread.  However, if you implement Runnable it doesn't have to be.  You can run it in a thread, or pass it to some kind of executor service, or just pass it around as a task within a single threaded application (maybe to be run at a later time, but within the same thread).  The options are a lot more open if you just use Runnable than if you bind yourself to Thread.",
                "If you want to implements or extends any other class then Runnable interface is most preferable, otherwise, if you do not want any other class to extend or implement then Thread class is preferable.The most common difference isWhen you extends Thread class, after that you can\u2019t extend any other class which you required. (As you know, Java does not allow inheriting more than one class).When you implements Runnable, you can save space for your class to extend any other class in the future or now.Java doesn't support multiple inheritances, which means you can only extend one class in Java so once you extended Thread class you lost your chance and cannot extend or inherit another class in Java.In Object-oriented programming, extending a class generally means, adding new functionality, and modifying or improving behaviors. If we are not making any modification on Thread then use Runnable interface instead.Runnable interface represents a Task which can be executed by either plain Thread or Executors or any other means. so logical separation of Task as Runnable than Thread is a good design decision.Separating task as Runnable means we can reuse the task and also has the liberty to execute it from different means. since you can not restart a Thread once it completes. again Runnable vs Thread for task, Runnable is winner.Java designer recognizes this and that's why Executors accept Runnable as Task and they have worker thread which executes those task.Inheriting all Thread methods are additional overhead just for representing a Task which can be done easily with Runnable.Courtesy from javarevisited.blogspot.comThese were some of the notable differences between Thread and Runnable in Java. If you know any other differences on Thread vs Runnable than please share it via comments. I personally use Runnable over Thread for this scenario and recommends to use Runnable or Callable interface based on your requirement.However, the significant difference is.When you extends Thread class, each of your thread creates a unique object and associate with it.\nWhen you implements Runnable, it shares the same object to multiple threads.",
                "Actually, It is not wise to compare Runnable and Thread with each other.This two have a dependency and relationship in multi-threading just like Wheel and Engine relationship of motor vehicle.I would say, there is only one way for multi-threading with two steps. Let me make my point.Runnable:\nWhen implementing interface Runnable it means you are creating something which is run able in a different thread. Now creating something which can run inside a thread (runnable inside a thread), doesn't mean to creating a Thread.\nSo the class MyRunnable is nothing but a ordinary class with a void run method.\nAnd it's objects will be some ordinary objects with only a method run which will execute normally when called.  (unless we pass the object in a thread).Thread:\nclass Thread, I would say A very special class with the capability of starting a new Thread which actually enables multi-threading through its start() method.Why not wise to compare?\nBecause we need both of them for multi-threading.For Multi-threading we need two things:So technically and theoretically  both of them is necessary to start a thread, one will run and one will make it run (Like Wheel and Engine of motor vehicle).That's why you can not start a thread with MyRunnable you need to pass it to a instance of Thread.But it is possible to create and run a thread only using class Thread because Class Thread implements Runnable so we all know Thread also is a Runnable inside.Finally Thread and Runnable are complement to each other for multithreading  not competitor or replacement.",
                "You should implement Runnable, but if you are running on Java 5 or higher, you should not start it with new Thread but use an ExecutorService instead. For details see: How to implement simple threading in Java.",
                "I'm not an expert, but I can think of one reason to implement Runnable instead of extend Thread: Java only supports single inheritance, so you can only extend one class.Edit: This originally said \"Implementing an interface requires less resources.\" as well, but you need to create a new Thread instance either way, so this was wrong.",
                "I would say there is a third way:Maybe this is influenced a bit by my recent heavy usage of Javascript and Actionscript 3, but this way your class doesn't need to implement a pretty vague interface like Runnable.",
                "With the release of Java 8, there is now a third option.Runnable is a functional interface, which means that instances of it can be created with lambda expressions or method references.Your example can be replaced with:or if you want to use an ExecutorService and a method reference:These are not only much shorter than your examples, but also come with many of the advantages stated in other answers of using Runnable over Thread, such as single responsibility and using composition because you're not specializing the thread's behaviour. This way also avoids creating an extra class if all you need is a Runnable as you do in your examples.",
                "Instantiating an interface gives a cleaner separation between your code and the implementation of threads, so I'd prefer to implement Runnable in this case.",
                "Difference between Extending Thread and Implementing Runnable are:",
                "Everyone here seems to think that implementing Runnable is the way to go and I don't really disagree with them but there is also a case for extending Thread in my opinion, in fact you have sort of demonstrated it in your code.If you implement Runnable then the class that implements Runnable has no control over the thread name, it is the calling code that can set the thread name, like so:but if you extend Thread then you get to manage this within the class itself (just like in your example you name the thread 'ThreadB').  In this case you:A) might give it a more useful name for debugging purposesB) are forcing that that name be used for all instances of that class (unless you ignore the fact that it is a thread and do the above with it as if it is a Runnable but we are talking about convention here in any case so can ignore that possibility I feel).You might even for example take a stack trace of its creation and use that as the thread name.  This might seem odd but depending on how your code is structured it can be very useful for debugging purposes.This might seem like a small thing but where you have a very complex application with a lot of threads and all of a sudden things 'have stopped' (either for reasons of deadlock or possibly because of a flaw in a network protocol which would be less obvious - or other endless reasons) then getting a stack dump from Java where all the threads are called 'Thread-1','Thread-2','Thread-3' is not always very useful (it depends on how your threads are structured and whether you can usefully tell which is which just by their stack trace - not always possible if you are using groups of multiple threads all running the same code).Having said that you could of course also do the above in a generic way by creating an extension of the thread class which sets its name to a stack trace of its creation call and then use that with your Runnable implementations instead of the standard java Thread class (see below) but in addition to the stack trace there might be more context specific information that would be useful in the thread name for debugging (a reference to one of many queues or sockets it could processing for example in which case you might prefer to extend Thread specifically for that case so that you can have the compiler force you (or others using your libraries) to pass in certain info (e.g. the queue/socket in question) for use in the name).Here's an example of the generic thread with the calling stack trace as its name:and here's a sample of the output comparing the two names:",
                "Runnable because:Even if you don't need any of this now, you may in the future. Since there is no benefit to overriding Thread, Runnable is a better solution.",
                "Since this is a very popular topic and the good answers are spread all over and dealt with in great depth, I felt it is justifiable to compile the good answers from the others into a more concise form, so newcomers have an easy overview upfront:You usually extend a class to add or modify functionality. So, if you don't want to overwrite any Thread behavior, then use Runnable.In the same light, if you don't need to inherit thread methods, you can do without that overhead by using Runnable.Single inheritance: If you extend Thread you cannot extend from any other class, so if that is what you need to do, you have to use Runnable.It is good design to separate domain logic from technical means, in that sense it is better to have a Runnable task isolating your task from your runner.You can execute the same Runnable object multiple times, a Thread object, however, can only be started once. (Maybe the reason, why Executors do accept Runnables, but not Threads.)If you develop your task as Runnable, you have all flexibility how to use it now and in the future. You can have it run concurrently via Executors but also via Thread. And you still could also use/call it non-concurrently within the same thread just as any other ordinary type/object.This makes it also easier to separate task-logic and concurrency aspects in your unit tests.If you are interested in this question, you might be also interested in the difference between Callable and Runnable.",
                "This is discussed in Oracle's Defining and Starting a Thread tutorial:Which of these idioms should you use? The first idiom, which employs a\n  Runnable object, is more general, because the Runnable object can\n  subclass a class other than Thread. The second idiom is easier to use\n  in simple applications, but is limited by the fact that your task\n  class must be a descendant of Thread. This lesson focuses on the first\n  approach, which separates the Runnable task from the Thread object\n  that executes the task. Not only is this approach more flexible, but\n  it is applicable to the high-level thread management APIs covered\n  later.In other words, implementing Runnable will work in scenarios where your class extends a class other than Thread. Java does not support multiple inheritance. Also, extending Thread will not be possible when using some of the high-level thread management APIs. The only scenario where extending Thread is preferable is in a small application that won't be subject to updates in future. It is almost always better to implement Runnable as it is more flexible as your project grows. A design change won't have a major impact as you can implement many interfaces in java, but only extend one class.",
                "The simplest explanation would be by implementing Runnable we can assign the same object to multiple threads and each Thread shares the same object states and behavior.For example, suppose there are two threads, thread1 puts an integer in an array and thread2 takes integers from the array when the array is filled up. Notice that in order for thread2 to work it needs to know the state of array, whether thread1 has filled it up or not.Implementing Runnable lets you to have this flexibility to share the object whereas extends Thread makes you to create new objects for each threads therefore any update that is done by thread1 is lost to thread2.",
                "If I am not wrong, it's more or less similar toWhat is the difference between an interface and abstract class?extends establishes \"Is A\" relation & interface provides \"Has a\" capability.Prefer implements Runnable :Prefer \"extends Thread\" :Generally you don't need to override Thread behaviour. So implements Runnable is preferred for most of the times.On a different note, using advanced ExecutorService or ThreadPoolExecutorService API provides more flexibility and control.Have a look at this SE Question:ExecutorService vs Casual Thread Spawner",
                "Separating the Thread class from the Runnable implementation also avoids potential synchronization problems between the thread and the run() method. A separate Runnable generally gives greater flexibility in the way that runnable code is referenced and executed.",
                "Runnable is an interface, while Thread is a class which implements this interface. From a design point of view, there should be a clean separation between how a task is defined and between how it is executed. The former is the responsibility of a Runnalbe implementation, and the latter is job of the Thread class. In most of the cases implementing Runnable is the right way to follow.",
                "That's the S of SOLID: Single responsibility.A thread embodies the running context (as in execution context: stack frame, thread id, etc.) of the asynchronous execution of a piece of code. That piece of code ideally should be the same implementation, whether synchronous or asynchronous.If you bundle them together in one implementation, you give the resulting object two unrelated causes of change:If the language you use supports partial classes or multiple inheritance, then you can segregate each cause in its own super class, but it boils down to the same as composing the two objects, since their feature sets don't overlap. That's for the theory.In practice, generally speaking, a programme does not need to carry more complexity than necessary. If you have one thread working on a specific task, without ever changing that task, there is probably no point in making the tasks separate classes, and your code remains simpler.In the context of Java, since the facility is already there, it is probably easier to start directly with stand alone Runnable classes, and pass their instances to Thread (or Executor) instances. Once used to that pattern, it is not harder to use (or even read) than the simple runnable thread case.",
                "One reason you'd want to implement an interface rather than extend a base class is that you are already extending some other class. You can only extend one class, but you can implement any number of interfaces.If you extend Thread, you're basically preventing your logic to be executed by any other thread than 'this'. If you only want some thread to execute your logic, it's better to just implement Runnable.",
                "if you use runnable you can save the space to extend to any of your other class.",
                "Can we re-visit the basic reason we wanted our class to behave as a Thread?\nThere is no reason at all, we just wanted to execute a task, most likely in an asynchronous mode, which precisely means that the execution of the task must branch from our main thread and the main thread if finishes early, may or may not wait for the branched path(task).If this is the whole purpose, then where do I see the need of a specialized Thread. This can be accomplished by picking up a RAW Thread from the System's Thread Pool and assigning it our task (may be an instance of our class) and that is it.So let us obey the OOPs concept and write a class of the type we need. There are many ways to do things, doing it in the right way matters.We need a task, so write a task definition which can be run on a Thread. So use Runnable.Always remember implements is specially used to impart a behaviour and extends is used to impart a feature/property.We do not want the thread's property, instead we want our class to behave as a task which can be run.",
                "Yes,\nIf you call ThreadA call , then  not need to call the start method and run method is call after call the ThreadA class only.\nBut If use the ThreadB call then need to necessary the start thread for call run method.\nIf you have any more help, reply me.",
                "I find it is most useful to use Runnable for all the reasons mentioned, but sometimes I like to extend Thread so I can create my own thread stopping method and call it directly on the thread I have created.",
                "Java does not support multiple inheritence so if you extends Thread class then no other class will be extended.For Example: If you create an applet then it must extends Applet class so here the only way to create thread is by implementing Runnable interface",
                "Difference between Thread and runnable\n.If  we are creating Thread using Thread class then Number of thread equal to number of object we created  .\nIf we are creating thread  by implementing the runnable interface then we can use single object for creating multiple thread.So single object is shared by multiple Thread.So it will take less memorySo depending upon the requirement if our data is not senstive. So It can be shared between multiple Thread we can used Runnable interface.",
                "Adding my two cents here -\nAlways whenever possible use implements Runnable . Below are two caveats on why you should not use \nextends ThreadsIdeally you should never extend the Thread class; the Thread class should be made final.\nAt least its methods like thread.getId(). \nSee this discussion for a bug related to extending Threads.Those who like to solve puzzles can see another side effect of extending Thread. The below code \nwill print unreachable code when nobody is notifying them.Please see  http://pastebin.com/BjKNNs2G."
            ]
        },
        {
            "tag": "enum",
            "patterns": [
                "How to get an enum value from a string value in Java",
                "enum values"
            ],
            "responses": [
                "Yes, Blah.valueOf(\"A\") will give you Blah.A.Note that the name must be an exact match, including case: Blah.valueOf(\"a\") and Blah.valueOf(\"A \") both throw an IllegalArgumentException.The static methods valueOf() and values() are created at compile time and do not appear in source code. They do appear in Javadoc, though; for example, Dialog.ModalityType shows both methods.",
                "Another solution if the text is not the same as the enumeration value:",
                "Use the pattern from Joshua Bloch, Effective Java:(simplified for brevity)Also see:Oracle Java Example using Enum and Map of instancesExecution order of of static blocks in an Enum typeHow can I lookup a Java enum from its String value",
                "Here's a nifty utility I use:Then in my enum class I usually have this to save some typing:If your enums are not all caps, just change the Enum.valueOf line.It is too bad I can't use T.class for Enum.valueOf as T is erased.",
                "You should also be careful with your case. Let me explain: doing Blah.valueOf(\"A\") works, but Blah.valueOf(\"a\") will not work. Then again Blah.valueOf(\"a\".toUpperCase(Locale.ENGLISH)) would work.On Android you should use Locale.US, as sulai points out.",
                "In Java 8 or later, using Streams:",
                "Here's a method that can do it for any Enum, and is case insensitive.",
                "Using Blah.valueOf(string) is best, but you can use Enum.valueOf(Blah.class, string) as well.",
                "My two cents here: using Java\u00a08 Streams and checking an exact string:I renamed the function to fromString() since naming it using that convention, you'll obtain some benefits from Java language itself; for example:",
                "If you don't want to write your own utility, use Google's guava library:Unlike the built-in Java function, it let's you check if A is present in Blah and doesn't throw an exception.",
                "You may need to this:This will return you the Value by a Stringified Enum Name. For example, if you provide \"PERSON\" in the fromEnumName it'll return you the Value of Enum, i.e., \"Person\".",
                "Another way of doing this is by using the implicit static method name() of Enum. name will return the exact string used to create that enum which can be used to check against the provided string:Testing:Inspiration: 10 Examples of Enum in Java",
                "In Java 8 the static Map pattern is even easier and is my preferred method. If you want to use the Enum with Jackson you can override toString and use that instead of name, then annotate with @JsonValue",
                "Here is a solution using Guava libraries. Method getPlanet() is case insensitive, so getPlanet (\"MerCUrY\") will return Planet.MERCURY.",
                "Enum is very useful. I have been using Enum a lot to add a description for some fields in different languages, as the following example:And then you can retrieve the description dynamically based in the language code passed to the getDescription(String lang) method, for example:",
                "To add to the previous answers, and address some of the discussions around nulls and NPE I'm using Guava Optionals to handle absent/invalid cases.  This works great for URI and parameter parsing.For those not aware, here's some more information on avoiding null with Optional.",
                "Apache's commons-lang library has a static function org.apache.commons.lang3.EnumUtils.getEnum which will map a String to your Enum type. Same answer essentially as Geoffrey Zheng's, but there isn't any need to roll your own when it's out there in the wild already.",
                "An O(1) method inspired from Thrift-generated code which uses a hashmap.",
                "java.lang.Enum defines several useful methods, which is available to all enumeration types in Java:In this code snippet, the valueOf() method returns an Enum constant, Gender.MALE, and calling name on that returns \"MALE\".",
                "Use:",
                "Adding on to Michael Myers' answer, with a helpful utility...valueOf() throws two different Exceptions in cases where it doesn't like its input.If your requirements are such that you don't have any guarantee that your String will definitely match an enum value, for example if the String data comes from a database and could contain old version of the enum, then you'll need to handle these often...So here's a reusable method I wrote which allows us to define a default Enum to be returned if the String we pass doesn't match.Use it like this:",
                "Enum valueOf()An enum class automatically gets a static valueOf() method in the class when compiled. The valueOf() method can be used to obtain an instance of the enum class for a given String value.For example:",
                "As a switch-version has not been mentioned yet I introduce it (reusing OP's enum):Since this don't give any additional value to the valueOf(String name) method, it only makes sense to define an additional method if we want have a different behavior. If we don't want to raise an IllegalArgumentException we can change the implementation to:By providing a default value we keep the contract of Enum.valueOf(String name) without throwing an IllegalArgumentException  in that manner that in no case null is returned. Therefore we throw a NullPointerException if the name is null and in case of default if defaultValue is null. That's how valueOfOrDefault works.This approach adopts the design of the Map-Interface which provides a method Map.getOrDefault(Object key, V defaultValue) as of Java 8.",
                "I was looking for an answer to find the \"blah\" name and not its value (not the text). Based on Manu's answer, I find this code useful:}",
                "Another utility capturing in reverse way. Using a value which identify that Enum, not from its name.Example:EnumUtil.from(Foo.class, \"drei\") returns Foo.THREE, because it will use getValue to match \"drei\", which is unique public, not final and not static method in Foo.\nIn case Foo has more than on public, not final and not static method, for example, getTranslate which returns \"drei\", the other method can be used: EnumUtil.from(Foo.class, \"drei\", \"getTranslate\").",
                "A combination of answers and comments for Java 8 using Streams.\nIt creates a static Map for lookup with the opportunity of a default value, to prevent null checks.",
                "I like to use this sort of process to parse commands as strings into enumerations.  I normally have one of the enumerations as \"unknown\" so it helps to have that returned when the others are not found (even on a case insensitive basis) rather than null (that meaning there is no value).  Hence I use this approach.",
                "Create an extension and then call valueOf<MyEnum>(\"value\"). If the type is invalid, you'll get null and have to handle itAlternatively, you can set a default value, calling valueOf<MyEnum>(\"value\", MyEnum.FALLBACK), and avoiding a null response. You can extend your specific enum to have the default be automaticOr if you want both, make the second:"
            ]
        },
        {
            "tag": "JavaBean",
            "patterns": [
                "What is a JavaBean exactly?",
                "JavaBean"
            ],
            "responses": [
                "A JavaBean is just a standard. It is a regular Java class, except it follows certain conventions:That's it. It's just a convention.  Lots of libraries depend on it though.With respect to Serializable, from the API documentation:Serializability of a class is enabled by the class implementing the\njava.io.Serializable interface. Classes that do not implement this\ninterface will not have any of their state serialized or deserialized.\nAll subtypes of a serializable class are themselves serializable. The\nserialization interface has no methods or fields and serves only to\nidentify the semantics of being serializable.In other words, serializable objects can be written to streams, and hence files, object databases, anything really.Also, there is no syntactic difference between a JavaBean and another class -- a class is a JavaBean if it follows the standards.There is a term for it, because the standard allows libraries to programmatically do things with class instances you define in a predefined way. For example, if a library wants to stream any object you pass into it, it knows it can because your object is serializable (assuming the library requires your objects be proper JavaBeans).",
                "There's a term for it to make it sound special.  The reality is nowhere near so mysterious.Basically, a \"Bean\":As for Serializable:  That is nothing but a \"marker interface\" (an interface that doesn't declare any functions) that tells Java that the implementing class consents to (and implies that it is capable of) \"serialization\" -- a process that converts an instance into a stream of bytes.  Those bytes can be stored in files, sent over a network connection, etc., and have enough information to allow a JVM (at least, one that knows about the object's type) to reconstruct the object later -- possibly in a different instance of the application, or even on a whole other machine!Of course, in order to do that, the class has to abide by certain limitations.  Chief among them is that all instance fields must be either primitive types (int, bool, etc.), instances of some class that is also serializable, or marked as transient so that Java won't try to include them.  (This of course means that transient fields will not survive the trip over a stream.  A class that has transient fields should be prepared to reinitialize them if necessary.)A class that can not abide by those limitations should not implement Serializable (and, IIRC, the Java compiler won't even let it do so.)",
                "JavaBeans are Java classes which adhere to an extremely simple coding convention.\nAll you have to do is to",
                "Properties of JavaBeansA JavaBean is a Java object that satisfies certain programming conventions:The JavaBean class must implement either Serializable or\nExternalizableThe JavaBean class must have a no-arg constructorAll JavaBean properties must have public setter and getter methodsAll JavaBean instance variables should be privateExample of JavaBeans",
                "Explanation with an example.1. import java.io.SerializableAs for the Serialization, see the documentation.2. private fieldsFields should be private for prevent outer classes to easily modify those fields.\nInstead of directly accesing to those fields, usuagly getter/setter methods are used.3. ConstructorA public constructor without any argument.4. getter/setterGetter and setter methods for accessing and modifying private fields.",
                "Java Beans are used for a less code and more work approach...Java Beans are used throughout Java EE as a universal contract for runtime discovery and access. For example, JavaServer Pages (JSP) uses Java Beans as data transfer objects between pages or between servlets and JSPs. Java EE's JavaBeans Activation Framework uses Java Beans for integrating support for MIME data types into Java EE. The Java EE Management API uses JavaBeans as the foundation for the instrumentation of resources to be managed in a Java EE environment.About Serialization:In object serialization an object can be represented as a sequence of bytes that includes the object's data as well as information about the object's type and the types of data stored in the object.After a serialized object has been written into a file, it can be read from the file and deserialized that is, the type information and bytes that represent the object and its data can be used to recreate the object in memory.",
                "You will find serialization useful when deploying your project across multiple servers since beans will be persisted and transferred across them.",
                "Just a little background/update on the bean concept.  Many other answers actually have the what but not so much why of them.They were invented early on in Java as part of building GUIs.  They followed patterns that were easy for tools to pull apart letting them create a properties panel so you could edit the attributes of the Bean.  In general, the Bean properties represented a control on the screen (Think x,y,width,height,text,..)You can also think of it as a strongly typed data structure.Over time these became useful for lots of tools that used the same type of access (For example, Hibernate to persist data structures to the database)As the tools evolved, they moved more towards annotations and away from pulling apart the setter/getter names.  Now most systems don't require beans, they can take any plain old Java object with annotated properties to tell them how to manipulate them.Now I see beans as annotated property balls--they are really only useful for the annotations they carry.Beans themselves are not a healthy pattern.  They destroy encapsulation by their nature since they expose all their properties to external manipulation and as they are used there is a tendency (by no means a requirement) to create code to manipulate the bean externally instead of creating code inside the bean (violates \"don't ask an object for its values, ask an object to do something for you\").  Using annotated POJOs with minimal getters and no setters is much more OO restoring encapsulation and with the possibility of immutability.By the way, as all this stuff was happening someone extended the concept to something called Enterprise Java Beans.  These are... different.  and they are complicated enough that many people felt they didn't understand the entire Bean concept and stopped using the term.  This is, I think, why you generally hear beans referred to as POJOs (since every Java object is a POJO this is technically OK, but when you hear someone say POJO they are most often thinking about something that follows the bean pattern)",
                "JavaBeans is a standard, and its basic syntax requirements have been clearly explained by the other answers.However, IMO, it is more than a simple syntax standard. The real meaning or intended usage of JavaBeans is, together with various tool supports around the standard, to facilitate code reuse and component-based software engineering, i.e. enable developers to build applications by assembling existing components (classes) and without having to write any code (or only have to write a little glue code). Unfortunately this technology is way under-estimated and under-utilized by the industry, which can be told from the answers in this thread.If you read Oracle's tutorial on JavaBeans, you can get a better understanding in that.",
                "For a Java class to be usable as a Java bean, its method names need to be as per the JavaBeans guidelines (also called design patterns) for properties, methods, and events. The class needs to be a public class to be accessible to any beanbox tool or container. The container must be able to instantiate it; with the class as public, the container should be able to do so even if no explicit, public, zero-args constructor is provided. (A Java public class with no explicit constructor has a default public zero-args constructor.) So, minimally, a Java public class, even with a property as the sole member (of course, accompanying public getter and setter required) or a public method as the sole member, is a Java bean. The property can either be a read-only property (it has a getter method but no setter) or write-only property (has a setter method only). A Java public class with a public event listener registration method as the sole member is also a Java bean. The JavaBeans specification doesn\u2019t require that if such a Java class has an explicit public constructor, it should be a zero-args one. If one could provide a file (with an extension, say,  .ser) containing a serialized instance, a beanbox tool may be able to  use that file to instantiate a prototype bean. Otherwise, the class would need a constructor, either explicit or default, that is public as well as zero-args.Once the bean is instantiated, the JavaBeans API ( java.beans.*) can introspect it and call methods on it.  If no class implementing the interface BeanInfo or extending a BeanInfo implementation,such as the SimpleBeanInfo class, is available, the introspection involves using reflection (implicit introspection)  to study the methods supported by a target bean and then applying simple design patterns(the guidelines) to deduce from those methods what properties, events, and public methods are supported. If a class implementing the interface BeanInfo (for a bean Foo, it must be named FooBeanInfo) is available, the API bypasses implicit introspection and uses public methods (getPropertyDescriptor(), getMethodDescriptors(), getEventSetDescriptors() ) of this class to get the information. If a class extending SimpleBeanInfo is available, depending on which of the SimpleBeanInfo public methods (getPropertyDescriptor(), getMethodDescriptors(), getEventSetDescriptors() )  are overridden, it will use those overridden methods(s) to get information; for a method that is not overridden, it\u2019ll  default to the corresponding implicit introspection. A bean needs to be instantiated anyway, even if no implicit introspection is carried out on it. Thus, the requirement  of a public zero-args constructor. But, of course, the Serializable or Externalizable interface isn\u2019t necessary for it to be recognized. However, the JavaBeans specification says, \u2018We\u2019d also like it to be \u201ctrivial\u201d for the common case of a tiny Bean that simply wants to have its internal state saved and doesn\u2019t want to think about it.\u2019 So, all beans must implement Serializable or Externalizable interface.Overall, the JavaBeans specification isn\u2019t hard and fast about what constitutes a bean. \"Writing JavaBeans components is surprisingly easy. You don't need a special tool and you don't have to implement any interfaces. Writing beans is simply a matter of following certain coding conventions. All you have to do is make your class look like a bean \u2014 tools that use beans will be able to recognize and use your bean.\" Trivially, even the following class is a Java bean,public class Trivial implements java.io.Serializable {}The description so far is the Java SE version (JavaBeans). The beans, as described below, are the Java EE versions. These versions have been built on the underlying ideas as explained above. In particular, one main idea they consider is what if a bean constructor does have some parameters. These parameters could be either simple types, class/interface types or both. There should be a way to let the container know values that it can substitute for the parameters when instantiating the bean. The way to do so is that the programmer can configure (specify values) by say annotations or XML configuration files or a mix of both.Spring BeansSpring beans run in a Spring IoC container. The programmer can configure via XML configuration files, annotations or a mix of both.In Spring, if a bean constructor has simple-type or class/interface type parameters, values can be assigned as strings (as the <value> attribute of a constructor argument element in the former case and as an <idref> element of a constructor argument in the latter case) in a type-safe manner. Making references to other Spring beans (called collaborators; via the <ref> element in a constructor argument element) is basically dependency injection and is also typesafe.  Obviously, a dependency (collaborator bean) might have a constructor with injected parameters; those injected dependency(ies) might have a constructor with parameters and so on. This scenario should ultimately terminate at injected dependency(ies) that are prototype beans that the container can instantiate by constructing.JSF Managed BeansJSF managed beans run in a web container. They can be configured either with the @ManagedBean annotation or  with an application configuration resource file managed-bean.xml. The JSF spec supports injection via resource injection (not typesafe) only. This injection is not fit for injection on constructors. In any case, the spec requires that a JSF managed bean must have a public zero-argument constructor. Further it says, \u201cAs of version 2.3 of this specification, use of the managed bean facility as specified in this section is strongly\ndiscouraged. A better and more cohesively integrated solution for solving the same problem is to use Contexts and Dependency Injection (CDI), as specified in JSR-365.\" In other words, CDI managed beans should be used, which do offer typesafe dependency injection on constructors akin to Spring beans.  The CDI specification adopts the Managed Beans specification, which applies to all containers of the JEE platform, not just the web tier. Thus, the web container needs to implement the CDI specification.Managed BeansHere is an extract from the Managed Bean specification\n\u201c Managed Beans are container-managed objects with minimal requirements,\notherwise known under the acronym \u201cPOJOs\u201d (Plain Old Java Objects)\u2026they can be seen as a Java EE platform-enhanced version of the JavaBeans component model found on the Java SE platform\u2026It won\u2019t be missed by the reader that Managed Beans have a precursor in the homonymous facility found in the JavaServer Faces (JSF) technology\u2026Managed Beans as defined in this specification represent a generalization of those found in JSF; in particular, Managed Beans can be used anywhere in a Java EE application, not just in web modules. For example, in the basic component model, Managed Beans must provide a no-argument constructor, but a specification that builds on Managed Beans, such as CDI (JSR-299), can relax that requirement and allow Managed Beans to provide constructors with more complex signatures, as long as they follow some well-defined rules...A Managed Bean must not be: a final class, an abstract class, or a non-static inner class. A Managed Bean may not be serializable unlike a regular JavaBean component.\u201d\nThus, the specification for Managed Beans, otherwise known as POJOs or POJO beans, allows extension as in CDI.CDI BeansThe CDI specification re-defines managed beans as:\nWhen running in Java EE, a top-level Java class is a managed bean if it meets the requirements:\u2022 It is not an inner class.\n\u2022 It is a non-abstract class, or is annotated @Decorator.\n\u2022 It does not implement javax.enterprise.inject.spi.Extension.\n\u2022 It is not annotated @Vetoed or in a package annotated @Vetoed.\n\u2022 It has an appropriate constructor, either: the class has a constructor with    no parameters, or the class declares a constructor annotated @Inject.All Java classes that meet these conditions are managed beans and thus no special declaration is\nrequired to define a managed bean. Orif it is defined to be a managed bean by any\nother Java EE specification and if\u2022 It is not annotated with an EJB component-defining annotation or declared as an EJB bean class\nin ejb-jar.xml.Bean constructors can have simple-type parameters since simple-types can be injected with the @Inject annotation.EJBsEJBs run in an EJB container. The EJB specification says: \u201cA session bean component is a Managed Bean.\" \u201cThe class must have a public constructor that takes no arguments,\u201d it says for both session bean and message-driven bean.  Furthermore, it says, \u201cThe session bean class is not required to implement the SessionBean interface or the Serializable interface.\u201d For the same reason as JSF beans, that EJB3 dependency injection is basically resource injection, JSF beans do not support constructors with arguments, that is, via dependency injection.  However, if the EJB container implements CDI, \u201c Optionally: The class may have an additional constructor annotated with the Inject annotation, \u201c it says for both session bean and message-driven bean because, \u201cAn EJB packaged into a CDI bean archive and not annotated with javax.enterprise.inject.Vetoed annotation, is considered a CDI-enabled bean.\u201d",
                "As per the Wikipedia:The class must have a public default constructor (with no arguments). This allows easy instantiation within editing and activation frameworks.The class properties must be accessible using get, set, is (can be used for boolean properties instead of get), and other methods (so-called accessor methods and mutator methods) according to a standard naming convention. This allows easy automated inspection and updating of bean state within frameworks, many of which include custom editors for various types of properties. Setters can have one or more than one argument.The class should be serializable. (This allows applications and frameworks to reliably save, store, and restore the bean's state in a manner independent of the VM and of the platform.)For more information follow this link.",
                "Regarding the second part of your question, serialization is a persistence mechanism used to store objects as a sequence of signed bytes. Put less formally, it stores the state of an object so you can retrieve it later, by deserialization.",
                "A Java Bean is a Java class (conceptual) that should follow the following conventions:It is a reusable software component. It can encapsulate many objects into one object so that same object can be accessed from multiples places and is a step towards easy maintenance of code.",
                "They are serializable, have a zero-argument constructor, and allow access to properties using getter and setter methods. The name \"Bean\" was given to encompass this standard, which aims to create reusable software components for Java. According to Wikipedia.The objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application. According to Spring IoC.",
                "It was repeated 6 or 7 times above that there is a no-argument constructor requirement for JavaBeans.This is WRONG, there is no such requirement, especially in the context of Java Spring.There is also no mention of that requirement in  version (1.01) of the specification that describes the JavaBeanns APIs (https://download.oracle.com/otndocs/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/). Even more - this specification mentions 'null constructor' only 2 times in the following contexts:\n\"Each customizer should have a null constructor.\"\n\"Each PropertyEditor should have a null constructor.\"So, it does not seem like the authors of the spec don't know or are not willing to use the term \"null constructor\", still no mention of it for the JavaBeans proper.",
                "A Java Bean is any Java class that satisfies the following three criteria:Good to note the serialVersionUID field is important for maintaining object state.The below code qualifies as a bean:",
                "If you are familiar with C/Golang, you never heard C bean or Go bean because they have struct keyword, that developers can easily define structure types without writing complicated OOP keywords.It's Java's mistake that lack of struct types, and developers find this bad shortage.Then Java Bean is invented as just another boring rule to make class pretending struct, peace your editor or compiler won't be crying or yelling about your unsafe access to class members.",
                "To understand JavaBean you need to notice the following:JavaBean is conceptual stuff and can not represent a class of specific thingsJavaBean is a development tool can be visualized in the operation of reusable software componentsJavaBean is based on the Sun JavaBeans specification and can be reusable components. Its biggest feature is the re-usability.",
                "POJO (plain old Java object): POJOs are ordinary Java objects, with no restriction other than those forced by the Java Language.Serialization: It is used to save state of an object and send it across a network. It converts the state of an object into a byte stream. We can recreate a Java object from the byte stream by process called deserialization.Make your class implement java.io.Serializable interface. And use writeObject() method of ObjectOutputStream class to achive Serialization.JavaBean class: It is a special POJO which have some restriction (or convention).Many frameworks - like Spring - use JavaBean objects.",
                "If you want to understand Java-Beans, you first have to understand software-components.Software componentsA software-component is a part of an application that runs a specific operation. A software component can also be part of a service.A component is:Java Beans (Enterprise Beans)Java Beans are more of a concept to manage big systems. Thats why they need standarization.Source",
                "In practice, Beans are just objects which are handy to use. Serializing them means to be able easily to persist them (store in a form that is easily recovered).Typical uses of Beans in real world:So in fact, Beans are just a convention / standard to expect something from a Java object that it would behave (serialization) and give some ways to change it (setters for properties) in a certain way.How to use them, is just your invention, but most common cases I enlisted above.",
                "A Java Bean is a component or the basic building block in the JavaBeans architecture. The JavaBeans architecture is a component architecture that benefits from reusability and interoperability of a component-based approach.A valid component architecture should allow programs to be assembled from\nsoftware building blocks (Beans in this case), perhaps provided by different vendors and also make it possible for an architect / developer to select a component (Bean), understand its capabilities, and incorporate it into an application.Since classes/objects are the basic building blocks of an OOP language like Java, they are the natural contenders for being the Bean in the JavaBeans architecture.The process of converting a plain Java class to a Java bean is actually nothing more than making it a reusable and interoperable component. This would translate into a Java class having abilities like:In order for a Java class to be termed a Java bean it is not necessary that they need to possess all the above abilities. Instead, it implies to implement a subset of the above relevant to the context (e.g., a bean in a certain framework may not need customizers, some other bean may not need bound and constrained properties, etc.)Almost all leading frameworks and libraries in Java adhere to the JavaBeans architecture implicitly, in order to reap the above benefits.",
                "Spring @Bean annotation indicates that a method produces a bean to be managed by the Spring container.More reference: https://www.concretepage.com/spring-5/spring-bean-annotation"
            ]
        },
        {
            "tag": "JUnit",
            "patterns": [
                "How do you assert that a certain exception is thrown in JUnit tests?",
                "JUnit tests"
            ],
            "responses": [
                "It depends on the JUnit version and what assert libraries you use.The original answer for JUnit <= 4.12 was:Though answer has more options for JUnit <= 4.12.Reference:",
                "Edit: Now that JUnit 5 and JUnit 4.13 have been released, the best option would be to use Assertions.assertThrows()  (for JUnit 5) and Assert.assertThrows() (for JUnit 4.13+). See my other answer for details.If you haven't migrated to JUnit 5, but can use JUnit 4.7, you can use the ExpectedException Rule:This is much better than @Test(expected=IndexOutOfBoundsException.class) because the test will fail if IndexOutOfBoundsException is thrown before foo.doStuff()See this article for details.",
                "Be careful using expected exception, because it only asserts that the method threw that exception, not a particular line of code in the test.I tend to use this for testing parameter validation, because such methods are usually very simple, but more complex tests might better be served with:Apply judgement.",
                "As answered before, there are many ways of dealing with exceptions in JUnit. But with Java 8 there is another one: using Lambda Expressions. With Lambda Expressions we can achieve a syntax like this:assertThrown accepts a functional interface, whose instances can be created with lambda expressions, method references, or constructor references. assertThrown accepting that interface will expect and be ready to handle an exception.This is relatively simple yet powerful technique.Have a look at this blog post describing this technique: http://blog.codeleak.pl/2014/07/junit-testing-exception-with-java-8-and-lambda-expressions.htmlThe source code can be found here: https://github.com/kolorobot/unit-testing-demo/tree/master/src/test/java/com/github/kolorobot/exceptions/java8Disclosure: I am the author of the blog and the project.",
                "in junit, there are four ways to test exception.for junit5.x, you can use assertThrows as followingfor junit4.x, use the optional 'expected' attribute of Test annonationfor junit4.x, use the ExpectedException ruleyou also can use the classic try/catch way widely used under junit 3 frameworksofor more info, you can read this document and junit5 user guide for details.",
                "tl;drpost-JDK8 : Use AssertJ or custom lambdas to assert exceptional behaviour.pre-JDK8 : I will recommend the old good try-catch block. (Don't forget to add a fail() assertion before the catch block)Regardless of Junit 4 or JUnit 5.the long storyIt is possible to write yourself a do it yourself try-catch block or use the JUnit tools (@Test(expected = ...) or the @Rule ExpectedException JUnit rule feature).But these ways are not so elegant and don't mix well readability wise with other tools. Moreover, JUnit tooling does have some pitfalls.The try-catch block you have to write the block around the tested behavior and write the assertion in the catch block, that may be fine but many find that this style interrupts the reading flow of a test. Also, you need to write an Assert.fail at the end of the try block. Otherwise, the test may miss one side of the assertions; PMD, findbugs or Sonar will spot such issues.The @Test(expected = ...) feature is interesting as you can write less code and then writing this test is supposedly less prone to coding errors. But this approach is lacking in some areas.Also as the expectation is placed around in the method, depending on how the tested code is written then the wrong part of the test code can throw the exception, leading to false-positive test and I'm not sure that PMD, findbugs or Sonar will give hints on such code.The ExpectedException rule is also an attempt to fix the previous caveats, but it feels a bit awkward to use as it uses an expectation style, EasyMock users know very well this style. It might be convenient for some, but if you follow Behaviour Driven Development (BDD) or Arrange Act Assert (AAA) principles the ExpectedException rule won't fit in those writing style. Aside from that it may suffer from the same issue as the @Test way, depending on where you place the expectation.Even the expected exception is placed before the test statement, it breaks your reading flow if the tests follow BDD or AAA.Also, see this comment issue on JUnit of the author of ExpectedException. JUnit 4.13-beta-2 even deprecates this mechanism:Pull request #1519: Deprecate ExpectedExceptionThe method Assert.assertThrows provides a nicer way for verifying exceptions. In addition, the use of ExpectedException is error-prone when used with other rules like TestWatcher because the order of rules is important in that case.So these above options have all their load of caveats, and clearly not immune to coder errors.There's a project I became aware of after creating this answer that looks promising, it's catch-exception.As the description of the project says, it let a coder write in a fluent line of code catching the exception and offer this exception for the latter assertion. And you can use any assertion library like Hamcrest or AssertJ.A rapid example taken from the home page :As you can see the code is really straightforward, you catch the exception on a specific line, the then API is an alias that will use AssertJ APIs (similar to using assertThat(ex).hasNoCause()...). At some point the project relied on FEST-Assert the ancestor of AssertJ. EDIT: It seems the project is brewing a Java 8 Lambdas support.Currently, this library has two shortcomings :At the time of this writing, it is noteworthy to say this library is based on Mockito 1.x as it creates a mock of the tested object behind the scene. As Mockito is still not updated this library cannot work with final classes or final methods. And even if it was based on Mockito 2 in the current version, this would require to declare a global mock maker (inline-mock-maker), something that may not what you want, as this mock maker has different drawbacks that the regular mock maker.It requires yet another test dependency.These issues won't apply once the library supports lambdas. However, the functionality will be duplicated by the AssertJ toolset.Taking all into account if you don't want to use the catch-exception tool, I will recommend the old good way of the try-catch block, at least up to the JDK7. And for JDK 8 users you might prefer to use AssertJ as it offers may more than just asserting exceptions.With the JDK8, lambdas enter the test scene, and they have proved to be an interesting way to assert exceptional behaviour. AssertJ has been updated to provide a nice fluent API to assert exceptional behaviour.And a sample test with AssertJ :With a near-complete rewrite of JUnit 5, assertions have been improved a bit, they may prove interesting as an out of the box way to assert properly exception. But really the assertion API is still a bit poor, there's nothing outside assertThrows.As you noticed assertEquals is still returning void, and as such doesn't allow chaining assertions like AssertJ.Also if you remember name clash with Matcher or Assert, be prepared to meet the same clash with Assertions.I'd like to conclude that today (2017-03-03) AssertJ's ease of use, discoverable API, the rapid pace of development and as a de facto test dependency is the best solution with JDK8 regardless of the test framework (JUnit or not), prior JDKs should instead rely on try-catch blocks even if they feel clunky.This answer has been copied from another question that don't have the same visibility, I am the same author.",
                "Now that JUnit 5 and JUnit 4.13 have been released, the best option would be to use Assertions.assertThrows()  (for JUnit 5) and Assert.assertThrows() (for JUnit 4.13). See\nthe JUnit 5 User Guide.Here is an example that  verifies an exception is thrown, and uses Truth to  make assertions on the exception message:The advantages over the approaches in the other answers are:",
                "Update: JUnit5 has an improvement for exceptions testing: assertThrows.The following example is from: Junit 5 User GuideOriginal answer using JUnit 4.There are several ways to test that an exception is thrown. I have also discussed the below options in my post How to write great unit tests with JUnitSet the expected parameter @Test(expected = FileNotFoundException.class).Using try catchTesting with ExpectedException Rule.You could read more about exceptions testing in JUnit4 wiki for Exception testing and bad.robot - Expecting Exceptions JUnit Rule.",
                "How about this: catch a very general exception, make sure it makes it out of the catch block, then assert that the class of the exception is what you expect it to be.  This assert will fail if a) the exception is of the wrong type (eg. if you got a Null Pointer instead) and b) the exception wasn't ever thrown.",
                "Using an AssertJ assertion, which can be used alongside JUnit:It's better than @Test(expected=IndexOutOfBoundsException.class) because it guarantees the expected line in the test threw the exception and lets you check more details about the exception, such as message, easier:Maven/Gradle instructions here.",
                "To solve the same problem I did set up a small project: \nhttp://code.google.com/p/catch-exception/Using this little helper you would writeThis is less verbose than the ExpectedException rule of JUnit 4.7.\nIn comparison to the solution provided by skaffman, you can specify in which line of code you expect the exception. I hope this helps.",
                "You can also do this:",
                "IMHO, the best way to check for exceptions in JUnit is the try/catch/fail/assert pattern:The assertTrue might be a bit strong for some people, so assertThat(e.getMessage(), containsString(\"the message\"); might be preferable.",
                "More Infos about JUnit 5 on http://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions",
                "The most flexible and elegant answer for Junit 4 I found in the Mkyong blog. It has the flexibility of the try/catch using the @Rule annotation. I like this approach because you can read specific attributes of a customized exception.",
                "I tried many of the methods here, but they were either complicated or didn't quite meet my requirements.  In fact, one can write a helper method quite simply:Use it like this:Zero dependencies: no need for mockito, no need powermock; and works just fine with final classes.",
                "JUnit has built-in support for this, with an \"expected\" attribute.",
                "If you would like a solution which:Here is a utility function that I wrote:(taken from my blog)Use it as follows:",
                "In my case I always get RuntimeException from db, but messages differ. And exception need to be handled respectively. Here is how I tested it:",
                "Just make a Matcher that can be turned off and on, like this:To use it:add public ExpectedException exception = ExpectedException.none();,\nthen:",
                "In JUnit 4 or later you can test the exceptions as followsthis provides a lot of features which can be used to improve our JUnit tests.  If you see the below example I am testing 3 things on the exception.",
                "We can use an assertion fail after the method that must return an exception:",
                "Additionally to what NamShubWriter has said, make sure that:Do not do this:Finally, this blog post clearly illustrates how to assert that a certain exception is thrown.",
                "Junit4 solution with Java8 is to use this function:Usage is then:Note that the only limitation is to use a final object reference in lambda expression.\nThis solution allows to continue test assertions instead of expecting thowable at method level using @Test(expected = IndexOutOfBoundsException.class) solution.",
                "I recomend library assertj-core to handle exception in junit testIn java 8, like this:",
                "JUnit framework has assertThrows() method:",
                "Take for example, you want to write Junit for below mentioned code fragmentThe above code is to test for some unknown exception that may occur and the below one is to assert some exception with custom message.",
                "With Java 8 you can create a method taking a code to check and expected exception as parameters:and then inside your test:Benefits:",
                "Here is another way to check method thrown correct exception or not."
            ]
        },
        {
            "tag": "URLConnection",
            "patterns": [
                "How to use java.net.URLConnection to fire and handle HTTP requests",
                "URLConnection",
                "HTTP requests"
            ],
            "responses": [
                "First a disclaimer beforehand: the posted code snippets are all basic examples. You'll need to handle trivial IOExceptions and RuntimeExceptions like NullPointerException, ArrayIndexOutOfBoundsException and consorts yourself.In case you're developing for Android instead of Java, note also that since introduction of API level 28, cleartext HTTP requests are disabled by default. You are encouraged to use HttpsURLConnection, but if it is really necessary, cleartext can be enabled in the Application Manifest.We first need to know at least the URL and the charset. The parameters are optional and depend on the functional requirements.The query parameters must be in name=value format and be concatenated by &. You would normally also URL-encode the query parameters with the specified charset using URLEncoder#encode().The String#format() is just for convenience. I prefer it when I would need the String concatenation operator + more than twice.It's a trivial task. It's the default request method.Any query string should be concatenated to the URL using ?. The Accept-Charset header may hint the server what encoding the parameters are in. If you don't send any query string, then you can leave the Accept-Charset header away. If you don't need to set any headers, then you can even use the URL#openStream() shortcut method.Either way, if the other side is an HttpServlet, then its doGet() method will be called and the parameters will be available by HttpServletRequest#getParameter().For testing purposes, you can print the response body to standard output as below:Setting the URLConnection#setDoOutput() to true implicitly sets the request method to POST. The standard HTTP POST as web forms do is of type application/x-www-form-urlencoded wherein the query string is written to the request body.Note: whenever you'd like to submit a HTML form programmatically, don't forget to take the name=value pairs of any <input type=\"hidden\"> elements into the query string and of course also the name=value pair of the <input type=\"submit\"> element which you'd like to \"press\" programmatically (because that's usually been used in the server side to distinguish if a button was pressed and if so, which one).You can also cast the obtained URLConnection to HttpURLConnection and use its HttpURLConnection#setRequestMethod() instead. But if you're trying to use the connection for output you still need to set URLConnection#setDoOutput() to true.Either way, if the other side is an HttpServlet, then its doPost() method will be called and the parameters will be available by HttpServletRequest#getParameter().You can fire the HTTP request explicitly with URLConnection#connect(), but the request will automatically be fired on demand when you want to get any information about the HTTP response, such as the response body using URLConnection#getInputStream() and so on. The above examples does exactly that, so the connect() call is in fact superfluous.You need an HttpURLConnection here. Cast it first if necessary.HTTP response headers:HTTP response encoding:When the Content-Type contains a charset parameter, then the response body is likely text based and we'd like to process the response body with the server-side specified character encoding then.The server side session is usually backed by a cookie. Some web forms require that you're logged in and/or are tracked by a session. You can use the CookieHandler API to maintain cookies. You need to prepare a CookieManager with a CookiePolicy of ACCEPT_ALL before sending all HTTP requests.Note that this is known to not always work properly in all circumstances. If it fails for you, then best is to manually gather and set the cookie headers. You basically need to grab all Set-Cookie headers from the response of the login or the first GET request and then pass this through the subsequent requests.The split(\";\", 2)[0] is there to get rid of cookie attributes which are irrelevant for the server side like expires, path, etc. Alternatively, you could also use cookie.substring(0, cookie.indexOf(';')) instead of split().The HttpURLConnection will by default buffer the entire request body before actually sending it, regardless of whether you've set a fixed content length yourself using connection.setRequestProperty(\"Content-Length\", contentLength);. This may cause OutOfMemoryExceptions whenever you concurrently send large POST requests (e.g. uploading files). To avoid this, you would like to set the HttpURLConnection#setFixedLengthStreamingMode().But if the content length is really not known beforehand, then you can make use of chunked streaming mode by setting the HttpURLConnection#setChunkedStreamingMode() accordingly. This will set the HTTP Transfer-Encoding header to chunked which will force the request body being sent in chunks. The below example will send the body in chunks of 1\u00a0KB.It can happen that a request returns an unexpected response, while it works fine with a real web browser. The server side is probably blocking requests based on the User-Agent request header. The URLConnection will by default set it to Java/1.6.0_19 where the last part is obviously the JRE version. You can override this as follows:Use the User-Agent string from a recent browser.If the HTTP response code is 4nn (Client Error) or 5nn (Server Error), then you may want to read the HttpURLConnection#getErrorStream() to see if the server has sent any useful error information.If the HTTP response code is -1, then something went wrong with connection and response handling. The HttpURLConnection implementation is in older JREs somewhat buggy with keeping connections alive. You may want to turn it off by setting the http.keepAlive system property to false. You can do this programmatically in the beginning of your application by:You'd normally use multipart/form-data encoding for mixed POST content (binary and character data). The encoding is in more detail described in RFC2388.If the other side is an HttpServlet, then its doPost() method will be called and the parts will be available by HttpServletRequest#getPart() (note, thus not getParameter() and so on!). The getPart() method is however relatively new, it's introduced in Servlet 3.0 (Glassfish 3, Tomcat 7, etc.). Prior to Servlet 3.0, your best choice is using Apache Commons FileUpload to parse a multipart/form-data request. Also see this answer for examples of both the FileUpload and the Servelt 3.0 approaches.In case you're developing for Android instead of Java, be careful: the workaround below may save your day if you don't have correct certificates deployed during development. But you should not use it for production. These days (April 2021) Google will not allow your app be distributed on Play Store if they detect insecure hostname verifier, see https://support.google.com/faqs/answer/7188426.Sometimes you need to connect an HTTPS URL, perhaps because you're writing a web scraper. In that case, you may likely face a javax.net.ssl.SSLException: Not trusted server certificate on some HTTPS sites who doesn't keep their SSL certificates up to date, or a java.security.cert.CertificateException: No subject alternative DNS name matching [hostname] found or javax.net.ssl.SSLProtocolException: handshake alert: unrecognized_name on some misconfigured HTTPS sites.The following one-time-run static initializer in your web scraper class should make HttpsURLConnection more lenient as to those HTTPS sites and thus not throw those exceptions anymore.The Apache HttpComponents HttpClient is much more convenient in this all :)If all you want is parsing and extracting data from HTML, then better use a HTML parser like Jsoup.",
                "When working with HTTP it's almost always more useful to refer to HttpURLConnection rather than the base class URLConnection (since URLConnection is an abstract class when you ask for URLConnection.openConnection() on a HTTP URL that's what you'll get back anyway).Then you can instead of relying on URLConnection#setDoOutput(true) to implicitly set the request method to POST instead do httpURLConnection.setRequestMethod(\"POST\") which some might find more natural (and which also allows you to specify other request methods such as PUT, DELETE, ...).It also provides useful HTTP constants so you can do:",
                "Inspired by this and other questions on Stack\u00a0Overflow, I've created a minimal open source basic-http-client that embodies most of the techniques found here.google-http-java-client is also a great open source resource.",
                "I suggest you take a look at the code on kevinsawicki/http-request, its basically a wrapper on top of HttpUrlConnection it provides a much simpler API in case you just want to make the requests right now or you can take a look at the sources (it's not too big) to take a look at how connections are handled.Example: Make a GET request with content type application/json and some query parameters:",
                "The new HTTP Client shipped with Java 9 but as part of an\n  Incubator module named jdk.incubator.httpclient. Incubator modules are\n  a means of putting non-final APIs in the hands of developers while the\n  APIs progress towards either finalization or removal in a future\n  release.In Java 9, you can send a GET request like:Then you can examine the returned HttpResponse:Since this new HTTP Client is in java.httpclient jdk.incubator.httpclient module, you should declare this dependency in your module-info.java file:",
                "There are two options you can go with HTTP URL Hits : GET / POSTGET Request:POST request:",
                "I was also very inspired by this response.I am often on projects where I need to do some HTTP, and I may not want to bring in a lot of third-party dependencies (which bring in others and so on and so on, etc.)I started to write my own utilities based on some of this conversation (not any where done):Then there are just a bunch or static methods.Then post...Well, you get the idea....Here are the tests:You can find the rest here:https://github.com/RichardHightower/boonMy goal is to provide the common things one would want to do in a bit more easier way then....",
                "Initially I was misled by this article which favours HttpClient.Later I have realized that HttpURLConnection is going to stay from this article.As per the Google blog:Apache HTTP client has fewer bugs on Eclair and Froyo. It is the best choice for these releases. For Gingerbread , HttpURLConnection is the best choice. Its simple API and small size makes it great fit for Android.Transparent compression and response caching reduce network use, improve speed and save battery. New applications should use HttpURLConnection; it is where we will be spending our energy going forward.After reading this article and some other stack over flow questions, I am convinced that HttpURLConnection is going to stay for longer durations.Some of the SE questions favouring HttpURLConnections:On Android, make a POST request with URL Encoded Form data without using UrlEncodedFormEntityHttpPost works in Java project, but not on Android",
                "There is also OkHttp, which is an HTTP client that\u2019s efficient by default:First create an instance of OkHttpClient:Then, prepare your GET request:finally, use OkHttpClient to send prepared Request:For more details, you can consult the OkHttp's documentation",
                "If you are using HTTP GET, please remove this line:",
                "You can also use JdkRequest from jcabi-http (I'm a developer), which does all this work for you, decorating HttpURLConnection, firing HTTP requests and parsing responses, for example:Check this blog post for more info: http://www.yegor256.com/2014/04/11/jcabi-http-intro.html",
                "If you are using Java 11 (except on Android), instead of the legacy HttpUrlConnection class, you can use Java 11 new HTTP Client API.The same request executed asynchronously:For sending form data as multipart (multipart/form-data) or url-encoded (application/x-www-form-urlencoded) format, see this solution.See this article for examples and more information about HTTP Client API.For Java standard library HTTP server, see this post."
            ]
        },
        {
            "tag": "equals()",
            "patterns": [
                "Comparing Java enum members: == or equals()?",
                "What is equals()",
                "Enum members"
            ],
            "responses": [
                "Both are technically correct. If you look at the source code for .equals(), it simply defers to ==.I use ==, however, as that will be null safe.",
                "Yes: enums have tight instance controls that allows you to use == to compare instances. Here's the guarantee provided by the language specification (emphasis by me):An enum type has no instances other than those defined by its enum constants.It is a compile-time error to attempt to explicitly instantiate an enum type. The final clone method in Enum ensures that enum constants can never be cloned, and the special treatment by the serialization mechanism ensures that duplicate instances are never created as a result of deserialization. Reflective instantiation of enum types is prohibited. Together, these four things ensure that no instances of an enum type exist beyond those defined by the enum constants.Because there is only one instance of each enum constant, it is permissible to use the == operator in place of the equals method when comparing two object references if it is known that at least one of them refers to an enum constant. (The equals method in Enum is a final method that merely invokes super.equals on its argument and returns the result, thus performing an identity comparison.)This guarantee is strong enough that Josh Bloch recommends, that if you insist on using the singleton pattern, the best way to implement it is to use a single-element enum (see: Effective Java 2nd Edition, Item 3: Enforce the singleton property with a private constructor or an enum type; also Thread safety in Singleton)As a reminder, it needs to be said that generally, == is NOT a viable alternative to equals. When it is, however (such as with enum), there are two important differences to consider:Bloch specifically mentions that immutable classes that have proper control over their instances can guarantee to their clients that == is usable. enum is specifically mentioned to exemplify.Item 1: Consider static factory methods instead of constructors[...] it allows an immutable class to make the guarantee that no two equal instances exist: a.equals(b) if and only if a==b. If a class makes this guarantee, then its clients can use the == operator instead of the equals(Object) method, which may result in improved performance. Enum types provide this guarantee.To summarize, the arguments for using == on enum are:",
                "Using == to compare two enum values works, because there is only one object for each enum constant.On a side note, there is actually no need to use == to write null-safe code, if you write your equals() like this:This is a best practice known as Compare Constants From The Left that you definitely should follow.",
                "As others have said, both == and .equals() work in most cases. The compile time certainty that you're not comparing completely different types of Objects that others have pointed out is valid and beneficial, however the particular kind of bug of comparing objects of two different compile time types would also be found by FindBugs (and probably by Eclipse/IntelliJ compile time inspections), so the Java compiler finding it doesn't add that much extra safety.However:I actually think that the Java language should have defined == on Objects to call .equals() on the left hand value, and introduce a separate operator for object identity, but that's not how Java was defined.In summary, I still think the arguments are in favor of using .equals() for enum types.",
                "I prefer to use == instead of equals:Other reason, in addition to the others already discussed here, is you could introduce a bug without realizing it. Suppose you have this enums which is exactly the same but in separated pacakges (it's not common, but it could happen):First enum:Second enum:Then suppose you use the equals like next in item.category which is first.pckg.Category but you import the second enum (second.pckg.Category) instead the first without realizing it:So you will get allways false due is a different enum although you expect true because item.getCategory() is JAZZ. And it could be be a bit difficult to see.So, if you instead use the operator == you will have a compilation error:operator == cannot be applied to \"second.pckg.Category\", \"first.pckg.Category\"",
                "Another option is the Objects.equals utility method.equals operator == instead of .equals()Which operator is the one I should be using?A third option is the static equals method found on the Objects utility class added to Java 7 and later.Here\u2019s an example using the Month enum.I find a couple benefits to this method:What is the logic used by Objects.equals?See for yourself, from the Java 10 source code of OpenJDK:",
                "Here is a crude timing test to compare the two:Comment out the IFs one at a time. Here are the two compares from above in disassembled byte-code:The first (equals) performs a virtual call and tests the return boolean from the stack. The second (==) compares the object addresses directly from the stack. In the first case there is more activity.I ran this test several times with both IFs one at a time. The \"==\" is ever so slightly faster.",
                "One of the Sonar rules is Enum values should be compared with \"==\". The reasons are as follows:Testing equality of an enum value with equals() is perfectly valid because an enum is an Object and every Java developer knows == should not be used to compare the content of an Object. At the same time, using == on enums:provides the same expected comparison (content) as equals()is more null-safe than equals()provides compile-time (static) checking rather than runtime checkingFor these reasons, use of == should be preferred to equals().Last but not least, the == on enums is arguably more readable (less verbose) than equals().",
                "In case of enum both are correct and right!!",
                "Using anything other than == to compare enum constants is nonsense. It's like comparing class objects with equals \u2013 don't do it!However, there was a nasty bug (BugId 6277781) in Sun JDK 6u10 and earlier that might be interesting for historical reasons. This bug prevented proper use of == on deserialized enums, although this is arguably somewhat of a corner case.",
                "Enums are classes that return one instance (like singletons) for each enumeration constant declared by public static final field (immutable) so that == operator could be used to check their equality rather than using equals() method",
                "The reason enums work easily with == is because each defined instance is also a singleton. So identity comparison using == will always work.But using == because it works with enums means all your code is tightly coupled with usage of that enum.For example: Enums can implement an interface. Suppose you are currently using an enum which implements Interface1. If later on, someone changes it or introduces a new class Impl1 as an implementation of same interface. Then, if you start using instances of Impl1, you'll have a lot of code to change and test because of previous usage of ==.Hence, it's best to follow what is deemed a good practice unless there is any justifiable gain.",
                "Just one thing to add to all the other excellent answers. When you use a simple lambda I do prefer equals over ==, because you can use method referencing.Consider following lambdas:The later can be converted to:",
                "I want to complement polygenelubricants answer:I personally prefer equals(). But it lake the type compatibility check. Which I think is an important limitation.To have type compatibility check at compilation time, declare and use a custom function in your enum.With this, you got all the advantage of both solution: NPE protection, easy to read code and type compatibility check at compilation time.I also recommend to add an UNDEFINED value for enum.",
                "In short, both have pros and cons.On one hand, it has advantages to use ==, as described in the other answers.On the other hand, if you for any reason replace the enums with a different approach (normal class instances), having used == bites you. (BTDT.)"
            ]
        },
        {
            "tag": "default_parameters",
            "patterns": [
                "Does Java support default parameter values?",
                "Default parameters"
            ],
            "responses": [
                "No, the structure you found is how Java handles it, (that is, with overloading instead of default parameters).For constructors, See Effective Java: Programming Language Guide's Item 1 tip (Consider static factory methods instead of constructors)If the overloading is getting complicated. For other methods, renaming some cases or using a parameter object can help.This is when you have enough complexity that differentiating is difficult. A definite case is where you have to differentiate using the order of parameters, not just number and type.",
                "No, but you can use the Builder Pattern, as described in this Stack Overflow answer.As described in the linked answer, the Builder Pattern lets you write code likein which some fields can have default values or otherwise be optional.",
                "There are several ways to simulate default parameters in Java:Method overloading.One of the limitations of this approach is that it doesn't work if you have two optional parameters of the same type and any of them can be omitted.Varargs.a) All optional parameters are of the same type:b) Types of optional parameters may be different:The main drawback of this approach is that if optional parameters are of different types you lose static type checking. Furthermore, if each parameter has different meaning you need some way to distinguish them.Nulls. To address the limitations of the previous approaches you can allow null values and then analyse each parameter in a method body:Now all arguments values must be provided, but the default ones may be null.Optional class. This approach is similar to nulls, but uses Java 8 Optional class for parameters that have a default value:Optional makes a method contract explicit for a caller, however, one may find such signature too verbose.Builder pattern. The builder pattern is used for constructors and is implemented by introducing a separate Builder class:Maps. When the number of parameters is too large and for most of them default values are usually used, you can pass method arguments as a map of their names/values:Please note that you can combine any of these approaches to achieve a desirable result.",
                "Sadly, no.",
                "Unfortunately, yes.could be written in Java 1.5 as:But whether or not you should depend on how you feel about the compiler generating afor each call.For multiple defaultable parameters:could be written in Java 1.5 as:This matches C++ syntax, which only allows defaulted parameters at the end of the parameter list.Beyond syntax, there is a difference where this has run time type checking for passed defaultable parameters and C++ type checks them during compile.",
                "No, but you can very easily emulate them. What in C++ was:In Java, it will be an overloaded function:Earlier was mentioned, that default parameters caused ambiguous cases in function overloading. That is simply not true, we can see in the case of the C++: yes, maybe it can create ambiguous cases, but these problem can be easily handled. It simply wasn't developed in Java, probably because the creators wanted a much simpler language as C++ was - if they had right, is another question. But most of us don't think he uses Java because of its simplicity.",
                "You can do this is in Scala, which runs on the JVM and is compatible with Java programs.\nhttp://www.scala-lang.org/i.e.",
                "Instead of using:You could utilize java's Optional functionality by having a single method:The main difference is that you have to use wrapper classes instead of primitive Java types to allow null input.Boolean instead of boolean, Integer instead of int and so on.",
                "No, but the simplest way to implement this is:or instead of the ternary operator, you can use if:",
                "I might be stating the obvious here but why not simply implement the \"default\" parameter yourself?for the default, you would either useand if you wouldn't like to use the default, you would use",
                "It is not supported in java as in other language for ex. Kotlin.",
                "As Scala was mentioned, Kotlin is also worth mentioning. In Kotlin function parameters can have default values as well and they can even refer to other parameters:Like Scala, Kotlin runs on the JVM and can be easily integrated into existing Java projects.",
                "No. In general Java doesn't have much (any) syntactic sugar, since they tried to make a simple language.",
                "No.You can achieve the same behavior by passing an Object which has smart defaults. But again it depends what your case is at hand.",
                "If you really want to, you can check it manually by using null:However i heavily recommend using something else, like overloading or a static factory. Maybe you can get away with this, but it can lead to unexcspected behavior. For example you could have an error in your code, so that your boolean never gets a value. In this case you would not get a NullPointerException. Instead it will look like it was set to false, which can be very confusing to debug.",
                "It is not supported but there are several options like using parameter object pattern with some syntax sugar:In this sample we construct ParameterObject with default values and override them in class instance initialization section { param1 = 10; param2 = \"bar\";}",
                "You may use Java Method Invocation Builder to automatically generate the builder with default values.Just add @GenerateMethodInvocationBuilder to the class, or interface, and the @Default to parameters in methods where you want default values. A builder will be generated at compile time, using the default values that you specified with your annotations.And then you can invoke the methods.Or set any of the default values to something else.",
                "Try this solution:",
                "constructor like for method",
                "A similar approach to https://stackoverflow.com/a/13864910/2323964 that works in Java 8 is to use an interface with default getters. This will be more whitespace verbose, but is mockable, and it's great for when you have a bunch of instances where you actually want to draw attention to the parameters.",
                "I've now spent quite some time to figure out how to use this with methods that return values, and I haven't seen any examples so far, I thought it might be useful to add this here:",
                "This is how I did it ... it's not as convenient perhaps as having an 'optional argument' against your defined parameter, but it gets the job done:Notice I can invoke the same method name with either just a string or I can invoke it with a string and a boolean value. In this case, setting wipeClean to true will replace all of the text in my TextArea with the provided string. Setting wipeClean to false or leaving it out all together simply appends the provided text to the TextArea.Also notice I am not repeating code in the two methods, I am merely adding the functionality of being able to reset the TextArea by creating a new method with the same name only with the added boolean.I actually think this is a little cleaner than if Java provided an 'optional argument' for our parameters since we would need to then code for default values etc. In this example, I don't need to worry about any of that. Yes, I have added yet another method to my class, but it's easier to read in the long run in my humble opinion.",
                "NO, But we have alternative in the form of function overloading.called when no parameter passedcalled when \"a\" parameter was passedcalled when parameter b passed",
                "There are half a dozen or better issues such as this, eventually, you arrive at the static factory pattern ... see the crypto API for that. Sort difficult to explain, but think of it this way: If you have a constructor, default or otherwise, the only way to propagate state beyond the curly braces is either to have a Boolean isValid; ( along with the null as default value v failed constructor ) or throw an exception which is never informative when getting it back from field users.Code Correct be damned, I write thousand line constructors and do what I need. I find using isValid at object construction - in other words, two-line constructors - but for some reason, I am migrating to the static factory pattern. I just seem you can do a lot if you in a method call, there are still sync() issues but defaults can be 'substituted' better ( safer )I think what we need to do here is address the issue of null as default value vis-a-vis something String one=new String(\"\"); as a member variable, then doing a check for null before assigning string passed to the constructor.Very remarkable the amount of raw, stratospheric computer science done in Java.C++ and so on has vendor libs, yes. Java can outrun them on large scale servers due to it's a massive toolbox. Study static initializer blocks, stay with us.",
                "One idea is to use String... argsOutputfrom https://www.tutorialspoint.com/Does-Java-support-default-parameter-values-for-a-method",
                "You can use the following-",
                "The Straight answer is no.These answers are pretty old and mainly discuss the alternatives we can have even if java doesn't have a straight way of the default method parameter.we can deal with this scenario easily with functional Programming in java.we can utilize the method currying of java functional programming and I think it can be best utilized for such scenarios where we need to have default parameters.we may need a default parameter in the following situations...\nExample:\nCreate a method that works on Two different objects and returns the computationif we want to have a method to get multiply by 2, we will have to Override the method like belowAbove, 2 is a default value for b, but it's going to be fixed. what if we want to have multiplied by three, now we cannot overload this further and it does feel odd to have multiple methods like this.This is when we can utilize the method currying technique.method Currying is the way of converting multi-parameter functions into multiple functions each accepting a single parameter.Steps to create a Curried methodWrite a function that accepts a single parameter and returns another\nfunction, like below.Let's Simplify and understand the above method.The Above method accepts only One integer Argument and returns another function with one parameter a as the default value and b as a variable. In case you are confused and start thinking how the method can use a variable from the caller function and don\u2019t know about closures \u2026\"A closure is a function that refers to a free variable in its lexical context.\"\nSo here, in this case, closure is the returned function when operated on variable multiply and it has a free variable a that has the lexical context of the caller function.Return the multiply method or fix the default value for one of the parameters.And so on \u2026Pass the second variable to the returned function to get the result.You can find my original post here ... https://www.linkedin.com/pulse/can-we-have-default-method-parameter-java-rajat-singh/?trackingId=yW84I1fzT6WGStrNPAWn4w%3D%3D",
                "Yes = use Kotlin! )))It is a Joke;"
            ]
        },
        {
            "tag": "static_nested",
            "patterns": [
                "Java inner class and static nested class",
                "Static nested classes",
                "Inner classes"
            ],
            "responses": [
                "From the Java Tutorial:Nested classes are divided into two categories: static and non-static. Nested classes that are declared static are simply called static nested classes. Non-static nested classes are called inner classes.Static nested classes are accessed using the enclosing class name:For example, to create an object for the static nested class, use this syntax:Objects that are instances of an inner class exist within an instance of the outer class. Consider the following classes:An instance of InnerClass can exist only within an instance of OuterClass and has direct access to the methods and fields of its enclosing instance.To instantiate an inner class, you must first instantiate the outer class. Then, create the inner object within the outer object with this syntax:see: Java Tutorial - Nested ClassesFor completeness note that there is also such a thing as an inner class without an enclosing instance:Here, new A() { ... } is an inner class defined in a static context and does not have an enclosing instance.",
                "The Java tutorial says:Terminology: Nested classes are\n  divided into two categories: static\n  and non-static. Nested classes that\n  are declared static are simply called\n  static nested classes. Non-static\n  nested classes are called inner\n  classes.In common parlance, the terms \"nested\" and \"inner\" are used interchangeably by most programmers, but I'll use the correct term \"nested class\" which covers both inner and static.Classes can be nested ad infinitum, e.g. class A can contain class B which contains class C which contains class D, etc. However, more than one level of class nesting is rare, as it is generally bad design.There are three reasons you might create a nested class:There are four kinds of nested class in Java. In brief, they are:Let me elaborate in more details.Static classes are the easiest kind to understand because they have nothing to do with instances of the containing class.A static class is a class declared as a static member of another class. Just like other static members, such a class is really just a hanger on that uses the containing class as its namespace, e.g. the class Goat declared as a static member of class Rhino in the package pizza is known by the name pizza.Rhino.Goat.Frankly, static classes are a pretty worthless feature because classes are already divided into namespaces by packages. The only real conceivable reason to create a static class is that such a class has access to its containing class's private static members, but I find this to be a pretty lame justification for the static class feature to exist.An inner class is a class declared as a non-static member of another class:Like with a static class, the inner class is known as qualified by its containing class name, pizza.Rhino.Goat, but inside the containing class, it can be known by its simple name. However, every instance of an inner class is tied to a particular instance of its containing class: above, the Goat created in jerry, is implicitly tied to the Rhino instance this in jerry. Otherwise, we make the associated Rhino instance explicit when we instantiate Goat:(Notice you refer to the inner type as just Goat in the weird new syntax: Java infers the containing type from the rhino part. And, yes new rhino.Goat() would have made more sense to me too.)So what does this gain us? Well, the inner class instance has access to the instance members of the containing class instance. These enclosing instance members are referred to inside the inner class via just their simple names, not via this (this in the inner class refers to the inner class instance, not the associated containing class instance):In the inner class, you can refer to this of the containing class as Rhino.this, and you can use this to refer to its members, e.g. Rhino.this.barry.A local inner class is a class declared in the body of a method. Such a class is only known within its containing method, so it can only be instantiated and have its members accessed within its containing method. The gain is that a local inner class instance is tied to and can access the final local variables of its containing method. When the instance uses a final local of its containing method, the variable retains the value it held at the time of the instance's creation, even if the variable has gone out of scope (this is effectively Java's crude, limited version of closures).Because a local inner class is neither the member of a class or package, it is not declared with an access level. (Be clear, however, that its own members have access levels like in a normal class.)If a local inner class is declared in an instance method, an instantiation of the inner class is tied to the instance held by the containing method's this at the time of the instance's creation, and so the containing class's instance members are accessible like in an instance inner class. A local inner class is instantiated simply via its name, e.g. local inner class Cat is instantiated as new Cat(), not new this.Cat() as you might expect.An anonymous inner class is a syntactically convenient way of writing a local inner class. Most commonly, a local inner class is instantiated at most just once each time its containing method is run. It would be nice, then, if we could combine the local inner class definition and its single instantiation into one convenient syntax form, and it would also be nice if we didn't have to think up a name for the class (the fewer unhelpful names your code contains, the better). An anonymous inner class allows both these things:This is an expression returning a new instance of an unnamed class which extends ParentClassName. You cannot supply your own constructor; rather, one is implicitly supplied which simply calls the super constructor, so the arguments supplied must fit the super constructor. (If the parent contains multiple constructors, the \u201csimplest\u201d one is called, \u201csimplest\u201d as determined by a rather complex set of rules not worth bothering to learn in detail--just pay attention to what NetBeans or Eclipse tell you.)Alternatively, you can specify an interface to implement:Such a declaration creates a new instance of an unnamed class which extends Object and implements InterfaceName. Again, you cannot supply your own constructor; in this case, Java implicitly supplies a no-arg, do-nothing constructor (so there will never be constructor arguments in this case).Even though you can't give an anonymous inner class a constructor, you can still do any setup you want using an initializer block (a {} block placed outside any method).Be clear that an anonymous inner class is simply a less flexible way of creating a local inner class with one instance. If you want a local inner class which implements multiple interfaces or which implements interfaces while extending some class other than Object or which specifies its own constructor, you're stuck creating a regular named local inner class.",
                "I don't think the real difference became clear in the above answers.First to get the terms right:Martin's answer is right so far. However, the actual question is: What is the purpose of declaring a nested class static or not?You use static nested classes if you just want to keep your classes together if they belong topically together or if the nested class is exclusively used in the enclosing class. There is no semantic difference between a static nested class and every other class.Non-static nested classes are a different beast. Similar to anonymous inner classes, such nested classes are actually closures. That means they capture their surrounding scope and their enclosing instance and make that accessible. Perhaps an example will clarify that. See this stub of a Container:In this case you want to have a reference from a child item to the parent container. Using a non-static nested class, this works without some work. You can access the enclosing instance of Container with the syntax Container.this.More hardcore explanations following:If you look at the Java bytecodes the compiler generates for an (non-static) nested class it might become even clearer:As you can see the compiler creates a hidden field Container this$0. This is set in the constructor which has an additional parameter of type Container to specify the enclosing instance. You can't see this parameter in the source but the compiler implicitly generates it for a nested class.Martin's examplewould so be compiled to a call of something like (in bytecodes)For the sake of completeness:An anonymous class is a perfect example of a non-static nested class which just has no name associated with it and can't be referenced later.",
                "I think that none of the above answers explain to you the real difference between a nested class and a static nested class in term of application design :A nested class could be nonstatic or static and in each case is a class defined within another class. A nested class should exist only to serve is enclosing class, if a nested class is useful by other classes (not only the enclosing), should be declared as a top level class.Nonstatic Nested class : is implicitly associated with the enclosing instance of the containing class, this means that it is possible to invoke methods and access variables of the enclosing instance. One common use of a nonstatic nested class is to define an Adapter class.Static Nested Class : can't access enclosing class instance and invoke methods on it, so should be used when the nested class doesn't require access to an instance of the enclosing class . A common use of static nested class is to implement a components of the outer object.So the main difference between the two from a design standpoint is : nonstatic nested class can access instance of the container class, while static can't.",
                "Here is key differences and similarities between Java inner class and static nested class.Hope it helps!Associated with instance of enclosing class so to instantiate it first needs an instance of outer class (note new keyword place):Cannot define any static members itselfCannot access outer class instance methods or fieldsNot associated with any instance of enclosing class So to instantiate it:According to Oracle documentation there're several reasons (full documentation):It is a way of logically grouping classes that are only used in one place: If a class is useful to only one other class, then it is logical to embed it in that class and keep the two together. Nesting such \"helper classes\" makes their package more streamlined.It increases encapsulation: Consider two top-level classes, A and B, where B needs access to members of A that would otherwise be declared private. By hiding class B within class A, A's members can be declared private and B can access them. In addition, B itself can be hidden from the outside world.It can lead to more readable and maintainable code: Nesting small classes within top-level classes places the code closer to where it is used.",
                "In simple terms we need nested classes primarily because Java does not provide closures.Nested Classes are classes defined inside the body of another enclosing class. They are of two types - static and non-static.They are treated as members of the enclosing class, hence you can specify any of the four access specifiers - private, package, protected, public. We don't have this luxury with top-level classes, which can only be declared public or package-private.Inner classes aka Non-stack classes have access to other members of the top class, even if they are declared private while Static nested classes do not have access to other members of the top class.Inner1 is our static inner class and Inner2 is our inner class which is not static. The key difference between them, you can't create an Inner2 instance without an Outer where as you can create an Inner1 object independently.When would you use Inner class?Think of a situation where Class A and Class B are related, Class B needs to access Class A members, and Class B is related only to Class A. Inner classes comes into the picture.For creating an instance of inner class, you need to create an instance of your outer class.orWhen would you use static Inner class?You would define a static inner class when you know that it does not have any relationship with the instance of the enclosing class/top class. If your inner class doesn't use methods or fields of the outer class, it's just a waste of space, so make it static.For example, to create an object for the static nested class, use this syntax:The advantage of a static nested class is that it doesn't need an object of the containing class/top class to work. This can help you to reduce the number of objects your application creates at runtime.",
                "I think, the convention that is generally followed is this:However, few other points to remembers are:Top level classes and static nested class are semantically same except that in case of static nested class it can make static reference to private static fields/methods of its Outer [parent] class and vice versa.Inner classes have access to instance variables of the enclosing instance of the Outer [parent] class. However, not all inner classes have enclosing instances, for example inner classes in static contexts, like an anonymous class used in a static initializer block, do not.Anonymous class by default extends the parent class or implements the parent interface and there is no further clause to extend any other class or implement any more interfaces. So,I feel that the bigger question that remains open which one to use and when? Well that mostly depends on what scenario you are dealing with but reading the reply given by @jrudolph may help you making some decision.",
                "Nested class: class inside classTypes:Difference:Non-static nested class [Inner class]In non-static nested class object of inner class exist within object of outer class. So that data member of outer class is accessible to inner class. So to create object of inner class we must create object of outer class first.Static nested classIn static nested class object of inner class don't need object of outer class, because the word \"static\" indicate no need to create object.If you want to access x, then write the following inside method",
                "The instance of the inner class is created when instance of the outer class is created. Therefore the members and methods of the inner class have access to the members and methods of the instance (object) of the outer class. When the instance of the outer class goes out of scope, also the inner class instances cease to exist.The static nested class doesn't have a concrete instance. It's just loaded when it's used for the first time (just like the static methods). It's a completely independent entity, whose methods and variables doesn't have any access to the instances of the outer class.The static nested classes are not coupled with the outer object, they are faster, and they don't take heap/stack memory, because its not necessary to create instance of such class. Therefore the rule of thumb is to try to define static nested class, with as limited scope as possible (private >= class >= protected >= public), and then convert it to inner class (by removing \"static\" identifier) and loosen the scope, if it's really necessary.",
                "There is a subtlety about the use of nested static classes that might be useful in certain situations.Whereas static attributes get instantiated before the class gets instantiated via its constructor,\nstatic attributes inside of nested static classes don't seem to get instantiated until after the\nclass's constructor gets invoked, or at least not until after the attributes are first referenced,\neven if they are marked as 'final'.Consider this example:Even though 'nested' and 'innerItem' are both declared as 'static final'. the setting\nof nested.innerItem doesn't take place until after the class is instantiated (or at least\nnot until after the nested static item is first referenced), as you can see for yourself\nby commenting and uncommenting the lines that I refer to, above. The same does not hold\ntrue for 'outerItem'.At least this is what I'm seeing in Java 6.0.",
                "The terms are used interchangeably.  If you want to be really pedantic about it, then you could define \"nested class\" to refer to a static inner class, one which has no enclosing instance.  In code, you might have something like this:That's not really a widely accepted definition though.",
                "In the case of creating instance, the instance of non \nstatic inner class is created with the reference of\nobject of outer class in which it is defined. This\nmeans it have inclosing instance.\nBut the instance of static inner class\nis created with the reference of Outer class, not with\nthe reference of object of outer class. This means it\nhave not inclosing instance.For example:",
                "I don't think there is much to add here, most of the answers perfectly explain the differences between static nested class and Inner classes. However, consider the following issue when using nested classes vs inner classes. \nAs mention in a couple of answers inner classes can not be instantiated without and instance of their enclosing class which mean that they HOLD a pointer to the instance of their enclosing class which can lead to memory overflow or stack overflow exception due to the fact the GC will not be able to garbage collect the enclosing classes even if they are not used any more. To make this clear check the following code out:If you remove the comment on // inner = null; The program will out put \n\"I am destroyed !\", but keeping this commented it will not.\nThe reason is that white inner instance is still referenced GC cannot collect it and because it references (has a pointer to) the outer instance it is not collected too. Having enough of these objects in your project and can run out of memory.\nCompared to static inner classes which does not hold a point to inner class instance because it is not instance related but class related. \nThe above program can print \"I am destroyed !\" if you make Inner class static and instantiated with Outer.Inner i = new Outer.Inner();",
                "Nested class is a very general term: every class which is not top level is a nested class.\nAn inner class is a non-static nested class.\nJoseph Darcy wrote a very nice explanation about Nested, Inner, Member, and Top-Level Classes.",
                "Targeting learner, who are novice to Java and/or Nested ClassesNested classes can be either:\n 1. Static Nested classes.\n 2. Non Static Nested classes. (also known as Inner classes) =>Please remember this1.Inner classes\nExample:Inner classes are subsets of nested classes:Specialty of Inner class:2.Static Nested Classes:\nExample:Case 1:Instantiating a static nested class from a non-enclosing classCase 2:Instantiating a static nested class from an enclosing classSpecialty of Static classes:Conclusion:\nQuestion: What is the main difference between a inner class and a static nested class in Java?\nAnswer: just go through specifics of each class mentioned above.",
                "Ummm\u2026 An inner class is a nested class\u2026 Do you mean anonymous class and inner class?Edit: If you actually meant inner v.s. anonymous: an inner class is just a class defined within a class, such as:\u2026whereas an anonymous class is an extension of a class defined anonymously, so no actual \"class\" is defined, as in:Further edit:Wikipedia claims there is a difference in Java, but I've been working with Java for eight years, and it's the first time I heard such a distinction \u2013 not to mention there are no references there to back up the claim\u2026 Bottom line, an inner class is a class defined within a class (static or not), and nested is just another term to mean the same thing.There is a subtle difference between static and non-static nested classes\u2026 Basically, non-static inner classes have implicit access to instance fields and methods of the enclosing class (thus they cannot be constructed in a static context, it will be a compiler error). On the other hand, static nested classes don't have implicit access to instance fields and methods and can be constructed in a static context.",
                "I think that none of the above answers give the real example to you the difference between a nested class and a static nested class in term of application design. And the main difference between static nested class and inner class is the ability to access the outer class instance field.Let us take a look at the two following examples.Static nest class: An good example of using static nested classes is builder pattern (https://dzone.com/articles/design-patterns-the-builder-pattern).For BankAccount we use a static nested class, mainly becauseStatic nest class instance could be created before the outer class.In the builder pattern, the builder is a helper class which is used to create the BankAccount.Inner class: A common use of inner classes is to define an event handler.\nhttps://docs.oracle.com/javase/tutorial/uiswing/events/generalrules.htmlFor MyClass, we use the inner class, mainly because:Inner class MyAdapter need to access the outer class member.In the example, MyAdapter is only associated with MyClass. No other classes are related to MyAdapter. so it is better to organize them together without using a name convention",
                "Inner class and nested static class in Java both are classes declared inside another class, known as top level class in Java. In Java terminology, If you declare a nested class static, it will called nested static class in Java while non static nested class are simply referred as Inner Class.What is Inner Class in Java?Any class which is not a top level or declared inside another class is known as nested class and out of those nested classes, class which are declared non static are known as Inner class in Java. there are three kinds of Inner class in Java:1) Local inner class    - is declared inside a code block or method.\n2) Anonymous inner class - is a class which doesn't have name to reference and initialized at same place where it gets created.\n3) Member inner class - is declared as non static member of outer class.What is nested static class in Java?Nested static class is another class which is declared inside a class as member and made static. Nested static class is also declared as member of outer class and can be make private, public or protected like any other member. One of the main benefit of nested static class over inner class is that instance of nested static class is not attached to any enclosing instance of Outer class. You also don't need any instance of Outer class to create instance of nested static class in Java.1) It can access static data members of outer class including private.\n2) Static nested class cannot access non-static (instance) data member or method.Ref: Inner class and nested Static Class in Java with Example",
                "A diagramThe main difference between static nested and non-static nested classes is that static nested does not have an access to non-static outer class members",
                "I think people here should notice to Poster that : Static Nest Class just only the first inner class.\nFor example:So, summarize, static class doesn't depend which class its contains. So, they cannot in normal class. (because normal class need an instance).",
                "When we declare static member class inside a class, it is known as top level nested class or a static nested class. It can be demonstrated as below :When we declare non-static member class inside a class it is known as inner class. Inner class can be demonstrated as below :",
                "The following is an example of static nested class and inner class:OuterClass.javaOuterClassTest:",
                "The Java programming language allows you to define a class within another class. Such a class is called a nested class and is illustrated here:Nested classes are divided into two categories: static and non-static. Nested classes that are declared static are called static nested classes. Non-static nested classes are called inner classes.\nOne thing that we should keep in mind is Non-static nested classes (inner classes) have access to other members of the enclosing class, even if they are declared private. Static nested classes only have access to other members of the enclosing class if those are static. It can not access non static members of the outer class.\nAs with class methods and variables, a static nested class is associated with its outer class. \nFor example, to create an object for the static nested class, use this syntax:To instantiate an inner class, you must first instantiate the outer class. Then, create the inner object within the outer object with this syntax:Why we use nested classesSource: The Java\u2122 Tutorials - Nested Classes",
                "First of all There is no such class called Static class.The Static modifier use with inner class (called as Nested Class) says that it is a static member of Outer Class which means we can access it as with other static members and without having any instance of Outer class. (Which is benefit of static originally.)Difference between using Nested class and regular Inner class is:First We can to instantiate Outerclass then we Can access Inner.But if Class is Nested then syntax is:Which uses the static Syntax as normal implementation of static keyword.",
                "Another use case for nested classes, in addition to those that already have been mentioned, is when the nested class has methods that should only be accessible from the outer class. This is possible because the outer class has access to the private constructors, fields and methods of the nested class.In the example below, the Bank can issue a Bank.CreditCard, which has a private constructor, and can change a credit card's limit according to the current bank policy using the private setLimit(...) instance method of Bank.CreditCard. (A direct field access to the instance variable limit would also work in this case). From any other class only the public methods of Bank.CreditCard are accessible.",
                "Static nested classes access PRIVATE class-level static variables of the class they are defined in. That can be huge from an architectural standpoint (i.e. Service Locator pattern employing nested static helper classes in Services), and may help OP see why they exist along with inner classes.",
                "The difference is that a nested class declaration that is also static can be instantiated outside of the enclosing class.When you have a nested class declaration that is not static, also known as an inner class, Java won't let you instantiate it except via the enclosing class. The object created out of the inner class is linked to the object created from the outer class, so the inner class can reference the fields of the outer.But if it's static, then the link does not exist, the outer fields cannot be accessed (except via an ordinary reference like any other object) and you can therefore instantiate the nested class by itself.",
                "I have illustrated various possible correct and error scenario which can occur in java code."
            ]
        },
        {
            "tag": "nested_loops",
            "patterns": [
                "How do I break out of nested loops in Java?",
                "Nested loops in Java"
            ],
            "responses": [
                "Like other answerers, I'd definitely prefer to put the loops in a different method, at which point you can just return to stop iterating completely. This answer just shows how the requirements in the question can be met.You can use break with a label for the outer loop. For example:This prints:",
                "Technically the correct answer is to label the outer loop. In practice if you want to exit at any point inside an inner loop then you would be better off externalizing the code into a method (a static method if needs be) and then call it.That would pay off for readability.The code would become something like that:Matching the example for the accepted answer:",
                "You can use a named block around the loops:",
                "I never use labels. It seems like a bad practice to get into. Here's what I would do:",
                "You can use labels:",
                "Use a function:",
                "You can use a temporary variable:Depending on your function, you can also exit/return from the inner loop:",
                "If you don't like breaks and gotos, you can use a \"traditional\" for loop instead the for-in, with an extra abort condition:",
                "Using 'break' keyword alone is not the appropriate way when you need to exit from more than one loops.\nYou can exit from immediate loop\nNo matter with how many loops your statement is surrounded with.\nYou can use 'break' with a label!\nHere I've used the label \"abc\"\nYou can write your code as following, within any function in JavaThis code shows how to exit from the most outer loopAlso you can use break statement to exit from any loop in a nested loop.The following code shows an example of exiting from the innermost loop.\nIn other works,after executing the following code, you are at the outside of the loop of 'k' variables and still inside the loop of 'j' and 'i' variables.",
                "I needed to do a similar thing, but I chose not to use the enhanced for loop to do it.",
                "I prefer to add an explicit \"exit\" to the loop tests.  It makes it clear to \nany casual reader that the loop may terminate early.",
                "Java 8 Stream solution:",
                "Labeled break concept is used to break out nested loops in java, by using labeled break you can break nesting of loops at any position. \nExample 1:suppose there are 3 loops and you want to terminate the loop3:\nExample 2:",
                "Usually in such cases, it is coming in scope of more meaningful logic, let's say some searching or manipulating over some of the iterated 'for'-objects in question, so I usually use the functional approach:Major cons:The pros:So it is just handling the case via a different approach.Basically a question to the author of this question: what do you consider of this approach?",
                "You can break from all loops without using any label: and flags.It's just tricky solution.Here condition1 is the condition which is used to break from loop K and J.\nAnd condition2 is the condition which is used to break from loop K , J and I.For example:",
                "Use Labels.Refer to this article",
                "Demo",
                "Best and Easy Method..",
                "It's fairly easy to use label, You can break the outer loop from inner loop using the label, Consider the example below,Another approach is to use the breaking variable/flag to keep track of required break. consider the following example.However, I prefer using the first approach.",
                "If it is inside some function why don't you just return it:",
                "Rather unusual approach but in terms of code length (not performance) this is the easiest thing you could do:",
                "Another one solution, mentioned without example (it actually works in prod code).Of course BreakLoopException should be internal, private and accelerated with no-stack-trace:",
                "Demo for break, continue, and label:Java keywords break and continue have a default value. It's the \"nearest loop\", and today, after a few years of using Java, I just got it!It's seem used rare, but useful.",
                "for (int j = 0; j < 5; j++) //inner loop should be replaced with \n    for (int j = 0; j < 5 && !exitloops; j++).Here, in this case complete nested loops should be exit if condition is True . But if we use  exitloops only to the upper loopThen inner loop will continues, because there is no extra flag that notify this inner loop to exit.Example : if i = 3 and j=2 then condition is false.  But in next iteration of inner loop j=3  then condition (i*j) become 9 which is true but inner loop will be continue till j become 5.So, it must use exitloops to the inner loops too.",
                "Like @1800 INFORMATION suggestion, use the condition that breaks the inner loop as a condition on the outer loop:",
                "Java does not have a goto feature like there is in C++. But still, goto is a reserved keyword in Java. They might implement it in the future. For your question, the answer is that there is something called label in Java to which you can apply a continue and break statement. Find the code below:",
                "If it's a new implementation, you can try rewriting the logic as if-else_if-else statements.Otherwise you can try setting a flag when that special condition has occured and check for that flag in each of your loop-conditions.HERE! So, while a simple break will not work, it can be made to work using continue.If you are simply porting the logic from one programming language to Java and just want to get the thing working you can try using labels.",
                "You just use label for breaking inner loops",
                "You can do the following:set a local variable to falseset that variable true in the first loop, when you want to breakthen you can check in the outer loop, that whether the condition is set then break from the outer loop as well."
            ]
        },
        {
            "tag": "alpha_numeric",
            "patterns": [
                "How to generate a random alpha-numeric string",
                "Generate random alpha-numeric"
            ],
            "responses": [
                "To generate a random string, concatenate characters drawn randomly from the set of acceptable symbols until the string reaches the desired length.Here's some fairly simple and very flexible code for generating random identifiers. Read the information that follows for important application notes.Create an insecure generator for 8-character identifiers:Create a secure generator for session identifiers:Create a generator with easy-to-read codes for printing. The strings are longer than full alphanumeric strings to compensate for using fewer symbols:Generating session identifiers that are likely to be unique is not good enough, or you could just use a simple counter. Attackers hijack sessions when predictable identifiers are used.There is tension between length and security. Shorter identifiers are easier to guess, because there are fewer possibilities. But longer identifiers consume more storage and bandwidth. A larger set of symbols helps, but might cause encoding problems if identifiers are included in URLs or re-entered by hand.The underlying source of randomness, or entropy, for session identifiers should come from a random number generator designed for cryptography. However, initializing these generators can sometimes be computationally expensive or slow, so effort should be made to re-use them when possible.Not every application requires security. Random assignment can be an efficient way for multiple entities to generate identifiers in a shared space without any coordination or partitioning. Coordination can be slow, especially in a clustered or distributed environment, and splitting up a space causes problems when entities end up with shares that are too small or too big.Identifiers generated without taking measures to make them unpredictable should be protected by other means if an attacker might be able to view and manipulate them, as happens in most web applications. There should be a separate authorization system that protects objects whose identifier can be guessed by an attacker without access permission.Care must be also be taken to use identifiers that are long enough to make collisions unlikely given the anticipated total number of identifiers. This is referred to as \"the birthday paradox.\" The probability of a collision, p, is approximately n2/(2qx), where n is the number of identifiers actually generated, q is the number of distinct symbols in the alphabet, and x is the length of the identifiers. This should be a very small number, like 2\u201150 or less.Working this out shows that the chance of collision among 500k 15-character identifiers is about 2\u201152, which is probably less likely than undetected errors from cosmic rays, etc.According to their specification, UUIDs are not designed to be unpredictable, and should not be used as session identifiers.UUIDs in their standard format take a lot of space: 36 characters for only 122 bits of entropy. (Not all bits of a \"random\" UUID are selected randomly.) A randomly chosen alphanumeric string packs more entropy in just 21 characters.UUIDs are not flexible; they have a standardized structure and layout. This is their chief virtue as well as their main weakness. When collaborating with an outside party, the standardization offered by UUIDs may be helpful. For purely internal use, they can be inefficient.",
                "Java supplies a way of doing this directly. If you don't want the dashes, they are easy to strip out. Just use uuid.replace(\"-\", \"\")",
                "If you're happy to use Apache classes, you could use org.apache.commons.text.RandomStringGenerator (Apache Commons Text).Example:Since Apache Commons Lang 3.6, RandomStringUtils is deprecated.",
                "You can use an Apache Commons library for this, RandomStringUtils:",
                "In one line:Source: Java - generating a random string",
                "This is easily achievable without any external libraries.First you need a cryptographic PRNG. Java has SecureRandom for that and typically uses the best entropy source on the machine (e.g. /dev/random). Read more here.Note: SecureRandom is the slowest, but most secure way in Java of generating random bytes. I do however recommend not considering performance here since it usually has no real impact on your application unless you have to generate millions of tokens per second.Next you have to decide \"how unique\" your token needs to be. The whole and only point of considering entropy is to make sure that the system can resist brute force attacks: the space of possible values must be so large that any attacker could only try a negligible proportion of the values in non-ludicrous time1.Unique identifiers such as random UUID have 122 bit of entropy (i.e., 2^122 = 5.3x10^36) - the chance of collision is \"*(...) for there to be a one in a billion chance of duplication, 103 trillion version 4 UUIDs must be generated2\". We will choose 128 bits since it fits exactly into 16 bytes and is seen as highly sufficient for being unique for basically every, but the most extreme, use cases and you don't have to think about duplicates. Here is a simple comparison table of entropy including simple analysis of the birthday problem.For simple requirements, 8 or 12 byte length might suffice, but with 16 bytes you are on the \"safe side\".And that's basically it. The last thing is to think about encoding so it can be represented as a printable text (read, a String).Typical encodings include:Base64 every character encodes 6 bit, creating a 33% overhead. Fortunately there are standard implementations in Java 8+ and Android. With older Java you can use any of the numerous third-party libraries. If you want your tokens to be URL safe use the URL-safe version of RFC4648 (which usually is supported by most implementations). Example encoding 16 bytes with padding: XfJhfv3C0P6ag7y9VQxSbw==Base32 every character encodes 5 bit, creating a 40% overhead. This will use A-Z and 2-7, making it reasonably space efficient while being case-insensitive alpha-numeric. There isn't any standard implementation in the JDK. Example encoding 16 bytes without padding: WUPIL5DQTZGMF4D3NX5L7LNFOYBase16 (hexadecimal) every character encodes four bit, requiring two characters per byte (i.e., 16 bytes create a string of length 32). Therefore hexadecimal is less space efficient than Base32, but it is safe to use in most cases (URL) since it only uses 0-9 and A to F. Example encoding 16 bytes: 4fa3dd0f57cb3bf331441ed285b27735. See a Stack\u00a0Overflow discussion about converting to hexadecimal here.Additional encodings like Base85 and the exotic Base122 exist with better/worse space efficiency. You can create your own encoding (which basically most answers in this thread do), but I would advise against it, if you don't have very specific requirements. See more encoding schemes in the Wikipedia article.Don'tIf you want a ready-to-use CLI tool you may use dice:If you already have an id you can use (e.g., a synthetic long in your entity), but don't want to publish the internal value, you can use this library to encrypt it and obfuscate it: https://github.com/patrickfav/id-mask",
                "Using Dollar should be as simple as:It outputs something like this:",
                "Here it is in Java:Here's a sample run:",
                "A short and easy solution, but it uses only lowercase and numerics:The size is about 12 digits to base 36 and can't be improved further, that way. Of course you can append multiple instances.",
                "Surprising, no one here has suggested it, but:Easy.The benefit of this is UUIDs are nice, long, and guaranteed to be almost impossible to collide.Wikipedia has a good explanation of it:\" ...only after generating 1 billion UUIDs every second for the next 100 years, the probability of creating just one duplicate would be about 50%.\"The first four bits are the version type and two for the variant, so you get 122 bits of random. So if you want to, you can truncate from the end to reduce the size of the UUID. It's not recommended, but you still have loads of randomness, enough for your 500k records easy.",
                "An alternative in Java 8 is:",
                "This just adds the password into the string and... yeah, it works well. Check it out... It is very simple; I wrote it.",
                "Using UUIDs is insecure, because parts of the UUID aren't random at all. The procedure of erickson is very neat, but it does not create strings of the same length. The following snippet should be sufficient:Why choose length*5? Let's assume the simple case of a random string of length 1, so one random character. To get a random character containing all digits 0-9 and characters a-z, we would need a random number between 0 and 35 to get one of each character.BigInteger provides a constructor to generate a random number, uniformly distributed over the range 0 to (2^numBits - 1). Unfortunately 35 is not a number which can be received by 2^numBits - 1.So we have two options: Either go with 2^5-1=31 or 2^6-1=63. If we would choose 2^6 we would get a lot of \"unnecessary\" / \"longer\" numbers. Therefore 2^5 is the better option, even if we lose four characters (w-z). To now generate a string of a certain length, we can simply use a 2^(length*numBits)-1 number. The last problem, if we want a string with a certain length, random could generate a small number, so the length is not met, so we have to pad the string to its required length prepending zeros.",
                "I found this solution that generates a random hex encoded string.  The provided unit test seems to hold up to my primary use case.  Although, it is slightly more complex than some of the other answers provided.",
                "Change String characters as per as your requirements.String is immutable. Here StringBuilder.append is more efficient than string concatenation.",
                "I don't really like any of these answers regarding a \"simple\" solution :SI would go for a simple ;), pure Java, one liner (entropy is based on random string length and the given character set):Or (a bit more readable old way)But on the other hand you could also go with UUID which has a pretty good entropy:",
                "I'm using a library from Apache Commons to generate an alphanumeric string:It's fast and simple!",
                "You mention \"simple\", but just in case anyone else is looking for something that meets more stringent security requirements, you might want to take a look at jpwgen.  jpwgen is modeled after pwgen in Unix, and is very configurable.",
                "Here is the one-liner by AbacusUtil:Random doesn't mean it must be unique. To get unique strings, use:",
                "You can use the following code, if your password mandatory contains numbers and alphabetic special characters:",
                "You can use the UUID class with its getLeastSignificantBits() message to get 64 bit of random data, and then convert it to a radix 36 number (i.e. a string consisting of 0-9,A-Z):This yields a string up to 13 characters long. We use Math.abs() to make sure there isn't a minus sign sneaking in.",
                "Here it is a Scala solution:",
                "Using an Apache Commons library, it can be done in one line:Documentation",
                "I think this is the smallest solution here, or nearly one of the smallest:The code works just fine. If you are using this method, I recommend you to use more than 10 characters. A collision happens at 5 characters / 30362 iterations. This took 9 seconds."
            ]
        },
        {
            "tag": "string_split",
            "patterns": [
                "How do I split a string in Java?",
                "Split a string"
            ],
            "responses": [
                "Use the appropriately named method String#split().Note that split's argument is assumed to be a regular expression, so remember to escape special characters if necessary.there are 12 characters with special meanings: the backslash \\, the caret ^, the dollar sign $, the period or dot ., the vertical bar or pipe symbol |, the question mark ?, the asterisk or star *, the plus sign +, the opening parenthesis (, the closing parenthesis ), and the opening square bracket [, the opening curly brace {, These special characters are often called \"metacharacters\".For instance, to split on a period/dot . (which means \"any character\" in regex), use either backslash \\ to escape the individual special character like so split(\"\\\\.\"), or use character class [] to represent literal character(s) like so split(\"[.]\"), or use Pattern#quote() to escape the entire string like so split(Pattern.quote(\".\")).To test beforehand if the string contains certain character(s), just use String#contains().Note, this does not take a regular expression. For that, use String#matches() instead.If you'd like to retain the split character in the resulting parts, then make use of positive lookaround. In case you want to have the split character to end up in left hand side, use positive lookbehind by prefixing ?<= group on the pattern.In case you want to have the split character to end up in right hand side, use positive lookahead by prefixing ?= group on the pattern.If you'd like to limit the number of resulting parts, then you can supply the desired number as 2nd argument of split() method.",
                "An alternative to processing the string directly would be to use a regular expression with capturing groups. This has the advantage that it makes it straightforward to imply more sophisticated constraints on the input. For example, the following splits the string into two parts, and ensures that both consist only of digits:As the pattern is fixed in this instance, it can be compiled in advance and stored as a static member (initialised at class load time in the example). The regular expression is:The parentheses denote the capturing groups; the string that matched that part of the regexp can be accessed by the Match.group() method, as shown. The \\d matches and single decimal digit, and the + means \"match one or more of the previous expression). The - has no special meaning, so just matches that character in the input. Note that you need to double-escape the backslashes when writing this as a Java string. Some other examples:",
                "Use:This will split your string into two parts. The first element in the array will be the part containing the stuff before the -, and the second element in the array will contain the part of your string after the -.If the array length is not 2, then the string was not in the format: string-string.Check out the split() method in the String class.",
                "This:should do the thing you want. The string class has many method to operate with a string.",
                "With Java 8:",
                "Use org.apache.commons.lang.StringUtils' split method which can split strings based on the character or string you want to split.Method signature:In your case, you want to split a string when there is a \"-\".You can simply do as follows:Output:Assume that if - does not exists in your string, it returns the given string, and you will not get any exception.",
                "The requirements left room for interpretation. I recommend writing a method,which encapsulate this function. Of course you can use String.split(..) as mentioned in the other answers for the implementation.You should write some unit-tests for input strings and the desired results and behaviour.Good test candidates should include:With defining the according test results, you can specify the behaviour.For example, if \"-333\" should return in [,333] or if it is an error.\nCan \"333-333-33\" be separated in [333,333-33] or [333-333,33] or is it an error? And so on.",
                "To summarize: there are at least five ways to split a string in Java:String.split():Pattern.compile(regexp).splitAsStream(input):StringTokenizer (legacy class):Google Guava Splitter:Apache Commons StringUtils:So you can choose the best option for you depending on what you need, e.g. return type (array, list, or iterable).Here is a big overview of these methods and the most common examples (how to split by dot, slash, question mark, etc.)",
                "You can try like this also",
                "Assuming, thatThe easiest way is to use StringUtils#split(java.lang.String, char). That's more convenient than the one provided by Java out of the box if you don't need regular expressions. Like its manual says, it works like this:I would recommend using commong-lang, since usually it contains a lot of stuff that's usable. However, if you don't need it for anything else than doing a split, then implementing yourself or escaping the regex is a better option.",
                "For simple use cases String.split() should do the job. If you use guava, there is also a Splitter class which allows chaining of different string operations and supports CharMatcher:",
                "The fastest way, which also consumes the least resource could be:",
                "String Split with multiple characters using RegexOutput:But do not expect the same output across all JDK versions. I have seen one bug which exists in some JDK versions where the first null string has been ignored. This bug is not present in the latest JDK version, but it exists in some versions between JDK 1.7 late versions and 1.8 early versions.",
                "There are only two methods you really need to consider.Use String.split for a one-character delimiter or you don't care about performanceIf performance is not an issue, or if the delimiter is a single character that is not a regular expression special character (i.e., not one of .$|()[{^?*+\\) then you can use String.split.The split method has an optimization to avoid using a regular expression if the delimeter is a single character and not in the above list. Otherwise, it has to compile a regular expression, and this is not ideal.Use Pattern.split and precompile the pattern if using a complex delimiter and you care about performance.If performance is an issue, and your delimiter is not one of the above, you should pre-compile a regular expression pattern which you can then reuse.This last option still creates a new Matcher object. You can also cache this object and reset it for each input for maximum performance, but that is somewhat more complicated and not thread-safe.",
                "You can split a string by a line break by using the following statement:You can split a string by a hyphen/character by using the following statement:",
                "Please don't use StringTokenizer class as it is a legacy class that is retained for compatibility reasons, and its use is discouraged in new code. And we can make use of the split method as suggested by others as well.And as expected it will print:In this answer I also want to point out one change that has taken place for split method in Java 8. The String#split() method makes use of Pattern.split, and now it will remove empty strings at the start of the result array. Notice this change in documentation for Java 8:When there is a positive-width match at the beginning of the input\n  sequence then an empty leading substring is included at the beginning\n  of the resulting array. A zero-width match at the beginning however\n  never produces such empty leading substring.It means for the following example:we will get three strings: [0, 0, 4] and not four as was the case in Java 7 and before. Also check this similar question.",
                "One way to do this is to run through the String in a for-each loop and use the required split character.Output:",
                "You can use Split():Else, you can use StringTokenizer:",
                "Here are two ways two achieve it.WAY 1: As you have to split two numbers by a special character you can use regexWAY 2: Using the string split method",
                "You can simply use StringTokenizer to split a string in two or more parts whether there are any type of delimiters:",
                "Check out the split() method in the String class on javadoc.https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#split(java.lang.String)Here many examples for split string but I little code optimized.",
                "I just wanted to write an algorithm instead of using Java built-in functions:",
                "You can use the method split:",
                "To split a string, uses String.split(regex). Review the following examples:OutputNote:This split (regex) takes a regex as an argument. Remember to escape the regex special characters, like period/dot.",
                "Output:",
                "As mentioned by everyone, split() is the best option which may be used in your case. An alternative method can be using substring()."
            ]
        },
        {
            "tag": "random_strings",
            "patterns": [
                "Why does this code using random strings print \"hello world\"?",
                "Why random strings"
            ],
            "responses": [
                "The other answers explain why, but here is how.Given an instance of Random:The first 6 numbers that r.nextInt(27) generates are:and the first 6 numbers that r.nextInt(27) generates given Random r = new Random(-147909649) are:Then just add those numbers to the integer representation of the character ` (which is 96):",
                "When an instance of java.util.Random is constructed with a specific seed parameter (in this case -229985452 or -147909649), it follows the random number generation algorithm beginning with that seed value.Every Random constructed with the same seed will generate the same pattern of numbers every time.",
                "I'll just leave it here. Whoever has a lot of (CPU) time to spare, feel free to experiment :) Also, if you have mastered some fork-join-fu to make this thing burn all CPU cores (just threads are boring, right?), please share your code. I would greatly appreciate it.Output:",
                "Everyone here did a great job of explaining how the code works and showing how you can construct your own examples, but here's an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.The 26 different lower-case letters form our alphabet \u03a3. To allow generating words of different lengths, we further add a terminator symbol \u22a5 to yield an extended alphabet \u03a3' := \u03a3 \u222a {\u22a5}.Let \u03b1 be a symbol and X a uniformly distributed random variable over \u03a3'. The probability of obtaining that symbol, P(X = \u03b1), and its information content, I(\u03b1), are given by:P(X = \u03b1) = 1/|\u03a3'| = 1/27I(\u03b1) = -log\u2082[P(X = \u03b1)] = -log\u2082(1/27) = log\u2082(27)For a word \u03c9 \u2208 \u03a3* and its \u22a5-terminated counterpart \u03c9' := \u03c9 \u00b7 \u22a5 \u2208 (\u03a3')*, we haveI(\u03c9) := I(\u03c9') = |\u03c9'| * log\u2082(27) = (|\u03c9| + 1) * log\u2082(27)Since the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed, we can expect most words of length up to\u03bb = floor[32/log\u2082(27)] - 1 = 5to be generated by at least one seed. Even if we were to search for a 6-character word, we would still be successful about 41.06% of the time. Not too shabby.For 7 letters we're looking at closer to 1.52%, but I hadn't realized that before giving it a try:See the output: http://ideone.com/JRGb3l",
                "I wrote a quick program to find these seeds:I have it running in the background now, but it's already found enough words for a classic pangram:(Demo on ideone.)Ps. -727295876, -128911, -1611659, -235516779.",
                "I was intrigued by this, I ran this random  word generator on a dictionary word list.\nRange: Integer.MIN_VALUE to Integer.MAX_VALUEI got 15131 hits.Prints",
                "Most random number generators are, in fact, \"pseudo random.\" They are Linear Congruential Generators, or LCGs (http://en.wikipedia.org/wiki/Linear_congruential_generator)LCGs are quite predictable given a fixed seed. Basically, use a seed that gives you your first letter, then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG. Continue until you've generated each and every letter.",
                "As multi-threading is very easy with Java, here is a variant that searches for a seed using all cores available: http://ideone.com/ROhmTA",
                "Random always return the same sequence. It's used for shuffling arrays and other operations as permutations.To get different sequences, it's necessary initialize the sequence in some position, called \"seed\".The randomSting get the random number in the i position (seed = -229985452) of the \"random\" sequence. Then uses the ASCII code for the next 27 character in the sequence after the seed position until this value are equal to 0. This return the \"hello\". The same operation is done for \"world\".I think that the code did not work for any other words. The guy that programmed that knows the random sequence very well.It's very great geek code!",
                "The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.",
                "Derived from Denis Tulskiy's answer, this method generates the seed.",
                "From the Java docs, this is an intentional feature when specifying a seed value for the Random class.If two instances of Random are created with the same seed, and the\n  same sequence of method calls is made for each, they will generate and\n  return identical sequences of numbers. In order to guarantee this\n  property, particular algorithms are specified for the class Random.\n  Java implementations must use all the algorithms shown here for the\n  class Random, for the sake of absolute portability of Java code.http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Random.htmlOdd though, you would think there are implicit security issues in having predictable 'random' numbers.",
                "It is about \"seed\". Same seeds give the same result.",
                "Here is a minor improvement for Denis Tulskiy answer. It cuts the time by half",
                "It's all about the input seed. Same seed give the same results all\n  the time. Even you re-run  your program again and again it's the same output.Output"
            ]
        },
        {
            "tag": "Map<Key, Value>",
            "patterns": [
                "Sort a Map<Key, Value> by values",
                "What are Map<Key, Value>",
                "Map<Key, Value>"
            ],
            "responses": [
                "Here's a generic-friendly version:",
                "Java 8 offers a new answer: convert the entries into a stream, and use the comparator combinators from Map.Entry:This will let you consume the entries sorted in ascending order of value.  If you want descending value, simply reverse the comparator:If the values are not comparable, you can pass an explicit comparator:You can then proceed to use other stream operations to consume the data. For example, if you want the top 10 in a new map:The LinkedHashMap seen above iterates entries in the order in which they were inserted.Or print to System.out:",
                "This code can break in multiple ways. If you intend to use the code provided, be sure to read the comments as well to be aware of the implications. For example, values can no longer be retrieved by their key. (get always returns null.)It seems much easier than all of the foregoing. Use a TreeMap as follows:Output:",
                "Three 1-line answers...I would use Google Collections Guava to do this - if your values are Comparable then you can useWhich will create a function (object) for the map [that takes any of the keys as input, returning the respective value], and then apply natural (comparable) ordering to them [the values].If they're not comparable, then you'll need to do something along the lines ofThese may be applied to a TreeMap (as Ordering extends Comparator), or a LinkedHashMap after some sortingNB: If you are going to use a TreeMap, remember that if a comparison == 0, then the item is already in the list (which will happen if you have multiple values that compare the same).  To alleviate this, you could add your key to the comparator like so (presuming that your keys and values are Comparable):= Apply natural ordering to the value mapped by the key, and compound that with the natural ordering of the keyNote that this will still not work if your keys compare to 0, but this should be sufficient for most comparable items (as hashCode, equals and compareTo are often in sync...)See Ordering.onResultOf() and Functions.forMap().So now that we've got a comparator that does what we want, we need to get a result from it.Now this will most likely work work, but:Point 1 is a bit of a deal-breaker for me; google collections is incredibly lazy (which is good: you can do pretty much every operation in an instant; the real work is done when you start using the result), and this requires copying a whole map!Don't worry though; if you were obsessed enough with having a \"live\" map sorted in this manner, you could solve not one but both(!) of the above issues with something crazy like the following:Note: This has changed significantly in June 2012 - the previous code could never work: an internal HashMap is required to lookup the values without creating an infinite loop between the TreeMap.get() -> compare() and compare() -> get()When we put, we ensure that the hash map has the value for the comparator, and then put to the TreeSet for sorting. But before that we check the hash map to see that the key is not actually a duplicate. Also, the comparator that we create will also include the key so that duplicate values don't delete the non-duplicate keys (due to == comparison).\nThese 2 items are vital for ensuring the map contract is kept; if you think you don't want that, then you're almost at the point of reversing the map entirely (to Map<V,K>).The constructor would need to be called as",
                "From http://www.programmersheaven.com/download/49349/download.aspx",
                "With Java 8, you can use the streams api to do it in a significantly less verbose way:",
                "Sorting the keys requires the Comparator to look up each value for each comparison. A more scalable solution would use the entrySet directly, since then the value would be immediately available for each comparison (although I haven't backed this up by numbers).Here's a generic version of such a thing:There are ways to lessen memory rotation for the above solution. The first ArrayList created could for instance be re-used as a return value; this would require suppression of some generics warnings, but it might be worth it for re-usable library code. Also,  the Comparator does not have to be re-allocated at every invocation.Here's a more efficient albeit less appealing version:Finally, if you need to continously access the sorted information (rather than just sorting it once in a while), you can use an additional multi map. Let me know if you need more details...",
                "The commons-collections library contains a solution called TreeBidiMap. Or, you could have a look at the Google Collections API. It has TreeMultimap which you could use.And if you don't want to use these framework... they come with source code.",
                "I've looked at the given answers, but a lot of them are more complicated than needed or remove map elements when several keys have same value.Here is a solution that I think fits better:Note that the map is sorted from the highest value to the lowest.",
                "Given MapSort the map based on the value in ascending orderSort the map based on value in descending orderOutput:{software=50, technology=70, USA=100, jobs=200, opportunity=200}{jobs=200, opportunity=200, USA=100, technology=70, software=50}",
                "To accomplish this with the new features in Java 8:The entries are ordered by their values using the given comparator. Alternatively, if your values are mutually comparable, no explicit comparator is needed:The returned list is a snapshot of the given map at the time this method is called, so neither will reflect subsequent changes to the other. For a live iterable view of the map:The returned iterable creates a fresh snapshot of the given map each time it's iterated, so barring concurrent modification, it will always reflect the current state of the map.",
                "Create customized comparator and use it while creating new TreeMap object.Use the below code in your main funcOutput:",
                "While I agree that the constant need to sort a map is probably a smell, I think the following code is the easiest way to do it without using a different data structure.}And here is an embarrassingly incomplete unit test:}The result is a sorted list of Map.Entry objects, from which you can obtain the keys and values.",
                "Use a generic comparator such as:",
                "The answer voted for the most does not work when you have 2 items that equals.\nthe TreeMap leaves equal values out.the exmaple:\nunsorted mapresultsSo leaves out E!!For me it worked fine to adjust the comparator, if it equals do not return 0 but -1.in the example:class ValueComparator implements Comparator {Map base;\n      public ValueComparator(Map base) {\n          this.base = base;\n      }public int compare(Object a, Object b) {}\n    }now it returns:unsorted map:results:as a response to Aliens (2011 nov. 22):\nI Am using this solution for a map of Integer Id's and names, but the idea is the same, so might be the code above is not correct (I will write it in a test and give you the correct code), this is the code for a Map sorting, based on the solution above:and this is the test class (I just tested it, and this works for the Integer, String Map:here is the code for the Comparator of a Map:and this is the testcase for this:of cource you can make this a lot more generic, but I just needed it for 1 case (the Map)",
                "Instead of using Collections.sort as some do I'd suggest using Arrays.sort. Actually what Collections.sort does is something like this:It just calls toArray on the list and then uses Arrays.sort. This way all the map entries will be copied three times: once from the map to the temporary list (be it a LinkedList or ArrayList), then to the temporary array and finally to the new map.My solution ommits this one step as it does not create unnecessary LinkedList. Here is the code, generic-friendly and performance-optimal:",
                "This is a variation of Anthony's answer, which doesn't work if there are duplicate values:Note that it's rather up in the air how to handle nulls.One important advantage of this approach is that it actually returns a Map, unlike some of the other solutions offered here.",
                "Best ApproachOutput",
                "Late Entry.With the advent of Java-8, we can use streams for data manipulation in a very easy/succinct way. You can use streams to sort the map entries by value and create a LinkedHashMap which preserves insertion-order iteration.Eg:For reverse ordering, replace:with",
                "Major problem. If you use the first answer (Google takes you here), change the comparator to add an equal clause, otherwise you cannot get values from the sorted_map by keys:",
                "There are a lot of answers for this question already, but none provided me what I was looking for, a map implementation that returns keys and entries sorted by the associated value, and maintains this property as keys and values are modified in the map. Two other questions ask for this specifically.I cooked up a generic friendly example that solves this use case. This implementation does not honor all of the contracts of the Map interface, such as reflecting value changes and removals in the sets return from keySet() and entrySet() in the original object. I felt such a solution would be too large to include in a Stack Overflow answer. If I manage to create a more complete implementation, perhaps I will post it to Github and then to it link in an updated version of this answer.",
                "Simple way to sort any map in Java 8 and aboveif you are using Java 7 and below",
                "Depending on the context, using java.util.LinkedHashMap<T> which rememebers the order in which items are placed into the map.  Otherwise, if you need to sort values based on their natural ordering, I would recommend maintaining a separate List which can be sorted via Collections.sort().",
                "Afaik the most cleaner way is utilizing collections to sort map on value:",
                "Since TreeMap<> does not work for values that can be equal, I used this:You might want to put list in a LinkedHashMap, but if you're only going to iterate over it right away, that's superfluous...",
                "This is just too complicated. Maps were not supposed to do such job as sorting them by Value. The easiest way is to create your own Class so it fits your requirement.In example lower you are supposed to add TreeMap a comparator at place where * is. But by java API it gives comparator only keys, not values. All of examples stated here is based on 2 Maps. One Hash and one new Tree. Which is odd.The example:So change the map into a set this way:You will create class Results,and the Comparator class:This way you can easily add more dependencies.And as the last point I'll add simple iterator:",
                "This could be achieved very easily with java 8",
                "Based on @devinmoore code, a map sorting methods using generics and supporting both ascending and descending ordering.",
                "Here is an OO solution (i.e., doesn't use static methods):Hereby donated to the public domain.",
                "Some simple changes in order to have a sorted map with pairs that have duplicate values. In the compare method (class ValueComparator) when values are equal do not return 0 but return the result of comparing the 2 keys. Keys are distinct in a map so you succeed to keep duplicate values (which are sorted by keys by the way). So the above example could be modified like this:"
            ]
        },
        {
            "tag": "getters",
            "patterns": [
                "Why use getters and setters/accessors?",
                "getters",
                "setters",
                "accessors"
            ],
            "responses": [
                "There are actually many good reasons to consider using accessors rather than directly exposing fields of a class - beyond just the argument of encapsulation and making future changes easier.Here are the some of the reasons I am aware of:",
                "Because 2 weeks (months, years) from now when you realize that your setter needs to do more than just set the value, you'll also realize that the property has been used directly in 238 other classes :-)",
                "A public field is not worse than a getter/setter pair that does nothing except returning the field and assigning to it. First, it's clear that (in most languages) there is no functional difference. Any difference must be in other factors, like maintainability or readability.An oft-mentioned advantage of getter/setter pairs, isn't. There's this claim that you can change the implementation and your clients don't have to be recompiled. Supposedly, setters let you add functionality like validation later on and your clients don't even need to know about it. However, adding validation to a setter is a change to its preconditions, a violation of the previous contract, which was, quite simply, \"you can put anything in here, and you can get that same thing later from the getter\".So, now that you broke the contract, changing every file in the codebase is something you should want to do, not avoid. If you avoid it you're making the assumption that all the code assumed the contract for those methods was different.If that should not have been the contract, then the interface was allowing clients to put the object in invalid states. That's the exact opposite of encapsulation If that field could not really be set to anything from the start, why wasn't the validation there from the start?This same argument applies to other supposed advantages of these pass-through getter/setter pairs: if you later decide to change the value being set, you're breaking the contract. If you override the default functionality in a derived class, in a way beyond a few harmless modifications (like logging or other non-observable behaviour), you're breaking the contract of the base class. That is a violation of the Liskov Substitutability Principle, which is seen as one of the tenets of OO.If a class has these dumb getters and setters for every field, then it is a class that has no invariants whatsoever, no contract. Is that really object-oriented design? If all the class has is those getters and setters, it's just a dumb data holder, and dumb data holders should look like dumb data holders:Adding pass-through getter/setter pairs to such a class adds no value. Other classes should provide meaningful operations, not just operations that fields already provide. That's how you can define and maintain useful invariants.Client: \"What can I do with an object of this class?\"\nDesigner: \"You can read and write several variables.\"\nClient: \"Oh... cool, I guess?\"There are reasons to use getters and setters, but if those reasons don't exist, making getter/setter pairs in the name of false encapsulation gods is not a good thing. Valid reasons to make getters or setters include the things often mentioned as the potential changes you can make later, like validation or different internal representations. Or maybe the value should be readable by clients but not writable (for example, reading the size of a dictionary), so a simple getter is a nice choice. But those reasons should be there when you make the choice, and not just as a potential thing you may want later. This is an instance of YAGNI (You Ain't Gonna Need It).",
                "Lots of people talk about the advantages of getters and setters but I want to play devil's advocate. Right now I'm debugging a very large program where the programmers decided to make everything getters and setters. That might seem nice, but its a reverse-engineering nightmare.Say you're looking through hundreds of lines of code and you come across this:It's a beautifully simply piece of code until you realize its a setter. Now, you follow that setter and find that it also sets person.firstName, person.lastName, person.isHuman, person.hasReallyCommonFirstName, and calls person.update(), which sends a query out to the database, etc. Oh, that's where your memory leak was occurring.Understanding a local piece of code at first glance is an important property of good readability that getters and setters tend to break. That is why I try to avoid them when I can, and minimize what they do when I use them.",
                "In a pure object-oriented world getters and setters is a terrible anti-pattern. Read this article: Getters/Setters. Evil. Period. In a nutshell, they encourage programmers to think about objects as of data structures, and this type of thinking is pure procedural (like in COBOL or C). In an object-oriented language there are no data structures, but only objects that expose behavior (not attributes/properties!)You may find more about them in Section 3.5 of Elegant Objects (my book about object-oriented programming).",
                "There are many reasons. My favorite one is when you need to change the behavior or regulate what you can set on a variable. For instance, lets say you had a setSpeed(int speed) method. But you want that you can only set a maximum speed of 100. You would do something like:Now what if EVERYWHERE in your code you were using the public field and then you realized you need the above requirement? Have fun hunting down every usage of the public field instead of just modifying your setter.My 2 cents :)",
                "One advantage of accessors and mutators is that you can perform validation.For example, if foo was public, I could easily set it to null and then someone else could try to call a method on the object. But it's not there anymore! With a setFoo method, I could ensure that foo was never set to null.Accessors and mutators also allow for encapsulation - if you aren't supposed to see the value once its set (perhaps it's set in the constructor and then used by methods, but never supposed to be changed), it will never been seen by anyone. But if you can allow other classes to see or change it, you can provide the proper accessor and/or mutator.",
                "Thanks, that really clarified my thinking. Now here is (almost) 10 (almost) good reasons NOT to use getters and setters:The last three I'm just leaving (N/A or D/C)...",
                "Depends on your language.  You've tagged this \"object-oriented\" rather than \"Java\", so I'd like to point out that ChssPly76's answer is language-dependent.  In Python, for instance, there is no reason to use getters and setters.  If you need to change the behavior, you can use a property, which wraps a getter and setter around basic attribute access.  Something like this:",
                "Well i just want to add that even if sometimes they are necessary for the encapsulation and security of your variables/objects, if we want to code a real Object Oriented Program, then we need to STOP OVERUSING THE ACCESSORS, cause sometimes we depend a lot on them when is not really necessary and that makes almost the same as if we put the variables public.",
                "EDIT: I answered this question because there are a bunch of people learning programming asking this, and most of the answers are very technically competent, but they're not as easy to understand if you're a newbie. We were all newbies, so I thought I'd try my hand at a more newbie friendly answer.The two main ones are polymorphism, and validation. Even if it's just a stupid data structure.Let's say we have this simple class:A very simple class that holds how much liquid is in it, and what its capacity is (in milliliters).What happens when I do:Well, you wouldn't expect that to work, right?\nYou want there to be some kind of sanity check. And worse, what if I never specified the maximum capacity? Oh dear, we have a problem.But there's another problem too. What if bottles were just one type of container? What if we had several containers, all with capacities and amounts of liquid filled? If we could just make an interface, we could let the rest of our program accept that interface, and bottles, jerrycans and all sorts of stuff would just work interchangably. Wouldn't that be better? Since interfaces demand methods, this is also a good thing.We'd end up with something like:Great! And now we just change Bottle to this:I'll leave the definition of the BottleOverflowException as an exercise to the reader.Now notice how much more robust this is. We can deal with any type of container in our code now by accepting LiquidContainer instead of Bottle. And how these bottles deal with this sort of stuff can all differ. You can have bottles that write their state to disk when it changes, or bottles that save on SQL databases or GNU knows what else.And all these can have different ways to handle various whoopsies. The Bottle just checks and if it's overflowing it throws a RuntimeException. But that might be the wrong thing to do. \n(There is a useful discussion to be had about error handling, but I'm keeping it very simple here on purpose. People in comments will likely point out the flaws of this simplistic approach. ;) )And yes, it seems like we go from a very simple idea to getting much better answers quickly.Please note also that you can't change the capacity of a bottle. It's now set in stone. You could do this with an int by declaring it final. But if this was a list, you could empty it, add new things to it, and so on. You can't limit the access to touching the innards.There's also the third thing that not everyone has addressed: getters and setters use method calls. That means that they look like normal methods everywhere else does. Instead of having weird specific syntax for DTOs and stuff, you have the same thing everywhere.",
                "I know it's a bit late, but I think there are some people who are interested in performance.I've done a little performance test. I wrote a class \"NumberHolder\" which, well, holds an Integer. You can either read that Integer by using the getter method\nanInstance.getNumber() or by directly accessing the number by using anInstance.number. My programm reads the number 1,000,000,000 times, via both ways. That process is repeated five times and the time is printed. I've got the following result:(Time 1 is the direct way, Time 2 is the getter)You see, the getter is (almost) always a bit faster. Then I tried with different numbers of cycles. Instead of 1 million, I used 10 million and 0.1 million.\nThe results:10 million cycles:With 10 million cycles, the times are almost the same.\nHere are 100 thousand (0.1 million) cycles:Also with different amounts of cycles, the getter is a little bit faster than the regular way. I hope this helped you.",
                "Getter and setter methods are public interfaces to access private class members.The encapsulation mantra is to make fields private and methods public.Getter Methods: We can get access to private variables.Setter Methods: We can modify private fields.Even though the getter and setter methods do not add new functionality, we can change our mind come back later to make that methodAnywhere a value can be used, a method that returns that value can be added. Instead of:useSuppose we need to store the details of this Person. This Person has the fields name, age and sex. Doing this involves creating methods for name, age and sex. Now if we need create another person, it becomes necessary to create the methods for name, age, sex all over again.Instead of doing this, we can create a bean class(Person) with getter and setter methods.  So tomorrow we can just create objects of this Bean class(Person class) whenever we need to add a new person (see the figure). Thus we are reusing the fields and methods of bean class, which is much better.",
                "I spent quite a while thinking this over for the Java case, and I believe the real reasons are:In other words, the only way you can specify a field in an interface is by providing a method for writing a new value and a method for reading the current value.Those methods are the infamous getter and setter....",
                "Don't use getters setters unless needed for your current delivery I.e. Don't think too much about what would happen in the future, if any thing to be changed its a change request in most of the production applications, systems.Think simple, easy, add complexity when needed.I would not take advantage of ignorance of business owners of deep technical know how just because I think it's correct or I like the approach.I have massive system written without getters setters only with access modifiers and some methods to validate n perform biz logic. If you absolutely needed the. Use anything.",
                "It can be useful for lazy-loading.  Say the object in question is stored in a database, and you don't want to go get it unless you need it.  If the object is retrieved by a getter, then the internal object can be null until somebody asks for it, then you can go get it on the first call to the getter.I had a base page class in a project that was handed to me that was loading some data from a couple different web service calls, but the data in those web service calls wasn't always used in all child pages.  Web services, for all of the benefits, pioneer new definitions of \"slow\", so you don't want to make a web service call if you don't have to.I moved from public fields to getters, and now the getters check the cache, and if it's not there call the web service.  So with a little wrapping, a lot of web service calls were prevented.So the getter saves me from trying to figure out, on each child page, what I will need.  If I need it, I call the getter, and it goes to find it for me if I don't already have it.",
                "One aspect I missed in the answers so far, the access specification:",
                "In languages which don't support \"properties\" (C++, Java) or require recompilation of clients when changing fields to properties (C#), using get/set methods is easier to modify. For example, adding validation logic to a setFoo method will not require changing the public interface of a class.In languages which support \"real\" properties (Python, Ruby, maybe Smalltalk?) there is no point to get/set methods.",
                "One of the basic principals of OO design: Encapsulation!It gives you many benefits, one of which being that you can change the implementation of the getter/setter behind the scenes but any consumer of that value will continue to work as long as the data type remains the same.",
                "You should use getters and setters when:So this is very rarely a general OO question; it's a language-specific question, with different answers for different languages (and different use cases).From an OO theory point of view, getters and setters are useless. The interface of your class is what it does, not what its state is. (If not, you've written the wrong class.) In very simple cases, where what a class does is just, e.g., represent a point in rectangular coordinates,* the attributes are part of the interface; getters and setters just cloud that. But in anything but very simple cases, neither the attributes nor getters and setters are part of the interface.Put another way: If you believe that consumers of your class shouldn't even know that you have a spam attribute, much less be able to change it willy-nilly, then giving them a set_spam method is the last thing you want to do.* Even for that simple class, you may not necessarily want to allow setting the x and y values. If this is really a class, shouldn't it have methods like translate, rotate, etc.? If it's only a class because your language doesn't have records/structs/named tuples, then this isn't really a question of OO\u2026But nobody is ever doing general OO design. They're doing design, and implementation, in a specific language. And in some languages, getters and setters are far from useless.If your language doesn't have properties, then the only way to represent something that's conceptually an attribute, but is actually computed, or validated, etc., is through getters and setters.Even if your language does have properties, there may be cases where they're insufficient or inappropriate. For example, if you want to allow subclasses to control the semantics of an attribute, in languages without dynamic access, a subclass can't substitute a computed property for an attribute.As for the \"what if I want to change my implementation later?\" question (which is repeated multiple times in different wording in both the OP's question and the accepted answer): If it really is a pure implementation change, and you started with an attribute, you can change it to a property without affecting the interface. Unless, of course, your language doesn't support that. So this is really just the same case again.Also, it's important to follow the idioms of the language (or framework) you're using. If you write beautiful Ruby-style code in C#, any experienced C# developer other than you is going to have trouble reading it, and that's bad. Some languages have stronger cultures around their conventions than others.\u2014and it may not be a coincidence that Java and Python, which are on opposite ends of the spectrum for how idiomatic getters are, happen to have two of the strongest cultures.Beyond human readers, there will be libraries and tools that expect you to follow the conventions, and make your life harder if you don't. Hooking Interface Builder widgets to anything but ObjC properties, or using certain Java mocking libraries without getters, is just making your life more difficult. If the tools are important to you, don't fight them.",
                "From a object orientation design standpoint both alternatives can be damaging to the maintenance of the code by weakening the encapsulation of the classes. For a discussion you can look into this excellent article: http://typicalprogrammer.com/?p=23",
                "Code evolves.  private is great for when you need data member protection.  Eventually all classes should be sort of \"miniprograms\" that have a well-defined interface that you can't just screw with the internals of.That said, software development isn't about setting down that final version of the class as if you're pressing some cast iron statue on the first try.  While you're working with it, code is more like clay.  It evolves as you develop it and learn more about the problem domain you are solving.  During development classes may interact with each other than they should (dependency you plan to factor out), merge together, or split apart.  So I think the debate boils down to people not wanting to religiously writeSo you have:Instead ofNot only is getVar() visually noisy, it gives this illusion that gettingVar() is somehow a more complex process than it really is.  How you (as the class writer) regard the sanctity of var is particularly confusing to a user of your class if it has a passthru setter -- then it looks like you're putting up these gates to \"protect\" something you insist is valuable, (the sanctity of var) but yet even you concede var's protection isn't worth much by the ability for anyone to just come in and set var to whatever value they want, without you even peeking at what they are doing.So I program as follows (assuming an \"agile\" type approach -- ie when I write code not knowing exactly what it will be doing/don't have time or experience to plan an elaborate waterfall style interface set):1) Start with all public members for basic objects with data and behavior.  This is why in all my C++ \"example\" code you'll notice me using struct instead of class everywhere.2) When an object's internal behavior for a data member becomes complex enough, (for example, it likes to keep an internal std::list in some kind of order), accessor type functions are written.  Because I'm programming by myself, I don't always set the member private right away, but somewhere down the evolution of the class the member will be \"promoted\" to either protected or private.3) Classes that are fully fleshed out and have strict rules about their internals (ie they know exactly what they are doing, and you are not to \"fuck\" (technical term) with its internals) are given the class designation, default private members, and only a select few members are allowed to be public.I find this approach allows me to avoid sitting there and religiously writing getter/setters when a lot of data members get migrated out, shifted around, etc. during the early stages of a class's evolution.",
                "There is a good reason to consider using accessors is there is no property inheritance. See next example:Output:",
                "Getters and setters are used to implement two of the fundamental aspects of Object Oriented Programming which are:Suppose we have an Employee class:Here the implementation details of Full Name is hidden from the user and is not accessible directly to the user, unlike a public attribute.",
                "If you don't require any validations and not even need to maintain state i.e. one property depends on another so we need to maintain the state when one is change. You can keep it simple by making field public and not using getter and setters.I think OOPs complicates things as the program grows it becomes nightmare for developer to scale.A simple example; we generate c++ headers from xml. The header contains simple field which does not require any validations. But still as in OOPS accessor  are fashion we generates them  as following.which is very verbose and is not required. a simpleis enough and readable.\nFunctional programming don't have the concept of data hiding they even don't require it as they do not mutate the data.",
                "There is a difference between DataStructure and Object.Datastructure should expose its innards and not behavior.An Object should not expose its innards but it should expose its behavior, which is also known as the Law of DemeterMostly DTOs are considered more of a datastructure and not Object. They should only expose their data and not behavior. Having Setter/Getter in DataStructure will expose behavior instead of data inside it. This further increases the chance of violation of Law of Demeter.Uncle Bob in his book Clean code explained the Law of Demeter.There is a well-known heuristic called the Law of Demeter that says a\nmodule should not know about the innards of the objects it\nmanipulates. As we saw in the last section, objects hide their data\nand expose operations. This means that an object should not expose its\ninternal structure through accessors because to do so is to expose,\nrather than to hide, its internal structure.More precisely, the Law of Demeter says that a method f of a class C\nshould only call the methods of these:The method should not invoke methods on objects that are returned by any of the allowed functions.\nIn other words, talk to friends, not to strangers.So according this, example of LoD violation is:Here, the function should call the method of its immediate friend which is ctxt here, It should not call the method of its immediate friend's friend. but this rule doesn't apply to data structure. so here if ctxt, option, scratchDir are  datastructure then why to wrap their internal data with some behavior and doing a violation of LoD.Instead, we can do something like this.This fulfills our needs and doesn't even violate LoD.Inspired by Clean Code by Robert C. Martin(Uncle Bob)",
                "Additionally, this is to \"future-proof\" your class. In particular, changing from a field to a property is an ABI break, so if you do later decide that you need more logic than just \"set/get the field\", then you need to break ABI, which of course creates problems for anything else already compiled against your class.",
                "One other use (in languages that support properties) is that setters and getters can imply that an operation is non-trivial.  Typically, you want to avoid doing anything that's computationally expensive in a property.",
                "One relatively modern advantage of getters/setters is that is makes it easier to browse code in tagged (indexed) code editors. E.g. If you want to see who sets a member, you can open the call hierarchy of the setter.On the other hand, if the member is public, the tools don't make it possible to filter read/write access to the member. So you have to trudge though all uses of the member.",
                "Getters and setters coming from data hiding. Data Hiding means We\n  are hiding data from outsiders or outside person/thing cannot access\n  our data.This is a useful feature in OOP.As a example:If you create a public variable, you can access that variable and change value in anywhere(any class). But if you create as private that variable cannot see/access in any class except declared class.public and private are access modifiers.So how can we access that variable outside:This is the place getters and setters coming from. You can declare variable as private then you can implement getter and setter for that variable.Example(Java):Advantage:When anyone want to access or change/set value to balance variable, he/she must have permision.You can set value in constructor also but when later on when you want\nto update/change value, you have to implement setter method."
            ]
        },
        {
            "tag": "load_main",
            "patterns": [
                "What does \"Could not find or load main class\" mean?",
                "How to load main class"
            ],
            "responses": [
                "First of all, you need to understand the correct way to launch a program using the java (or javaw) command.The normal syntax1 is this:where <option> is a command line option (starting with a \"-\" character), <class-name> is a fully qualified Java class name, and <arg> is an arbitrary command line argument that gets passed to your application.1 - There are some other syntaxes which are described near the end of this answer.The fully qualified name (FQN) for the class is conventionally written as you would in Java source code; e.g.However some versions of the java command allow you to use slashes instead of periods; e.g.which (confusingly) looks like a file pathname, but isn't one.  Note that the term fully qualified name is standard Java terminology ... not something I just made up to confuse you :-)Here is an example of what a java command should look like:The above is going to cause the java command to do the following:When you get the message \"Could not find or load main class ...\", that means that the first step has failed.  The java command was not able to find the class.  And indeed, the \"...\" in the message will be the fully qualified class name that java is looking for.So why might it be unable to find the class?The first likely cause is that you may have provided the wrong class name.  (Or ... the right class name, but in the wrong form.)   Considering the example above, here are a variety of wrong ways to specify the class name:Example #1 - a simple class name:When the class is declared in a package such as com.acme.example, then you must use the full classname including the package name in the java command; e.g.Example #2 - a filename or pathname rather than a class name:Example #3 - a class name with the casing incorrect:Example #4 - a typoExample #5 - a source filename (except for Java 11 or later; see below)Example #6 - you forgot the class name entirelyThe second likely cause is that the class name is correct, but that the java command cannot find the class.  To understand this, you need to understand the concept of the \"classpath\".  This is explained well by the Oracle documentation:So ... if you have specified the class name correctly, the next thing to check is that you have specified the classpath correctly:When you put a directory on the classpath, it notionally corresponds to the root of the qualified name space.  Classes are located in the directory structure beneath that root, by mapping the fully qualified name to a pathname.  So for example, if \"/usr/local/acme/classes\" is on the class path, then when the JVM looks for a class called com.acme.example.Foon, it will look for a \".class\" file with this pathname:If you had put \"/usr/local/acme/classes/com/acme/example\" on the classpath, then the JVM wouldn't be able to find the class.If your classes FQN is com.acme.example.Foon, then the JVM is going to look for \"Foon.class\" in the directory \"com/acme/example\":If your directory structure doesn't match the package naming as per the pattern above, the JVM won't find your class.If you attempt rename a class by moving it, that will fail as well ... but the exception stacktrace will be different.  It is liable to say something like this:because the FQN in the class file doesn't match what the class loader is expecting to find.To give a concrete example, supposing that:then:Notes:The classpath needs to include all of the other (non-system) classes that your application depends on.  (The system classes are located automatically, and you rarely need to concern yourself with this.)  For the main class to load correctly, the JVM needs to find:(Note: the JLS and JVM specifications allow some scope for a JVM to load classes \"lazily\", and this can affect when a classloader exception is thrown.)It occasionally happens that someone puts a source code file into the\nthe wrong folder in their source code tree, or they leave out the package declaration.  If you do this in an IDE, the IDE's compiler will tell you about this immediately.  Similarly if you use a decent Java build tool, the tool will run javac in a way that will detect the problem.  However, if you build your Java code by hand, you can do it in such a way that the compiler doesn't notice the problem, and the resulting \".class\" file is not in the place that you expect it to be.There lots of things to check, and it is easy to miss something.  Try adding the -Xdiag option to the java command line (as the first thing after java).  It will output various things about class loading, and this may offer you clues as to what the real problem is.Also, consider possible problems caused by copying and pasting invisible or non-ASCII characters from websites, documents and so on.  And consider \"homoglyphs\", where two letters or symbols look the same ... but aren't.You may run into this problem if you have invalid or incorrect signatures in META-INF/*.SF. You can try opening up the .jar in your favorite ZIP editor, and removing files from META-INF until all you have is your MANIFEST.MF.  However this is NOT RECOMMENDED in general.  (The invalid signature may be the result of someone having injected malware into the original signed JAR file.  If you erase the invalid signature, you are in infecting your application with the malware!)  The recommended approach is to get hold of JAR files with valid signatures, or rebuild them from the (authentic) original source code.Finally, you can apparently run into this problem if there is a syntax error in the MANIFEST.MF file (see https://stackoverflow.com/a/67145190/139985).There are three alternative syntaxes for the launching Java programs using the java command.The syntax used for launching an \"executable\" JAR file is as follows:e.g.The name of the entry-point class (i.e. com.acme.example.ListUser) and the classpath are specified in the MANIFEST of the JAR file.The syntax for launching an application from a module (Java 9 and later) is as follows:The name of the entrypoint class is either defined by the <module> itself, or is given by the optional <mainclass>.From Java 11 onwards, you can use the java command to compile and run a single source code file using the following syntax:where <sourcefile> is (typically) a file with the suffix \".java\".For more details, please refer to the official documentation for the java command for the Java release that you are using.A typical Java IDE has support for running Java applications in the IDE JVM itself or in a child JVM.  These are generally immune from this particular exception, because the IDE uses its own mechanisms to construct the runtime classpath, identify the main class and create the java command line.However it is still possible for this exception to occur, if you do things behind the back of the IDE.  For example, if you have previously set up an Application Launcher for your Java app in Eclipse, and you then moved the JAR file containing the \"main\" class to a different place in the file system without telling Eclipse, Eclipse would unwittingly launch the JVM with an incorrect classpath.In short, if you get this problem in an IDE, check for things like stale IDE state, broken project references or broken launcher configurations.It is also possible for an IDE to simply get confused.  IDE's are hugely complicated pieces of software comprising many interacting parts.  Many of these parts adopt various caching strategies in order to make the IDE as a whole responsive.  These can sometimes go wrong, and one possible symptom is problems when launching applications.  If you suspect this could be happening, it is worth trying other things like restarting your IDE, rebuilding the project and so on.",
                "If your source code name is HelloWorld.java, your compiled code will be HelloWorld.class.You will get that error if you call it using:Instead, use this:",
                "If your classes are in packages then you have to cd to the root directory of your project and run using the fully qualified name of the class (packageName.MainClassName).Example:My classes are in here:The fully qualified name of my main class is:So I cd back to the root project directory:Then issue the java command:This answer is for rescuing newbie Java programmers from the frustration caused by a common mistake. I recommend you read the accepted answer for more in depth knowledge about the Java classpath.",
                "If you have a package keyword in your source code (the main class is defined in a package), you should run it over the hierarchical directory, using the full name of the class (packageName.MainClassName).Assume there is a source code file (Main.java):For running this code, you should place Main.Class in the package like directory:C:\\Users\\workspace\\testapp\\com\\test\\Main.JavaThen change the current directory of the terminal to the root directory of the project:And finally, run the code:If you don't have any package on your source code name maybe you are wrong with the wrong command. Assume that your Java file name is Main.java, after compile:your compiled code will be Main.classYou will get that error if you call it using:Instead, use this:",
                "When the same code works on one PC, but it shows the error in another, the best solution I have ever found is compiling like the following:",
                "Specifying the classpath on the command line helped me. For example:Create a new folder, C:\\tempCreate file Temp.java in C:\\temp, with the following class in it:Open a command line in folder C:\\temp, and write the following command to compile the Temp class:Run the compiled Java class, adding the -classpath option to let JRE know where to find the class:",
                "According to the error message (\"Could not find or load main class\"), there are two categories of problems:The Main class could not be found when there is a typo or wrong syntax in the fully qualified class name or it does not exist in the provided classpath.The Main class could not be loaded when the class cannot be initiated. Typically the main class extends another class and that class does not exist in the provided classpath.For example:If camel-spring is not included, this error will be reported.",
                "Use this command:Example: If your classname is Hello.class created from Hello.java then use the below command:If your file Hello.java is inside package com.demo then use the below commandWith JDK 8 many times it happens that the class file is present in the same folder, but the java command expects classpath and for this reason we add -cp . to take the current folder as reference for classpath.",
                "I had such an error in this case:It works with ; for Windows and : for Unix:",
                "Try -Xdiag.Steve C's answer covers the possible cases nicely, but sometimes to determine whether the class could not be found or loaded might not be that easy. Use java -Xdiag (since JDK\u00a07). This prints out a nice stacktrace which provides a hint to what the message Could not find or load main class message means.For instance, it can point you to other classes used by the main class that could not be found and prevented the main class to be loaded.",
                "Sometimes what might be causing the issue has nothing to do with the main class, and I had to find this out the hard way. It was a referenced library that I moved, and it gave me the:Could not find or load main class xxx LinuxI just deleted that reference, added it again, and it worked fine again.",
                "I had same problem and finally found my mistake :)\nI used this command for compiling and it worked correctly:But this command did not work for me (I could not find or load the main class, qrcode):Finally I just added the ':' character at end of the classpath and the problem was solved:",
                "In this instance you have:Could not find or load main class ?classpathIt's because you are using \"-classpath\", but the dash is not the same dash used by java on the command prompt. I had this issue copying and pasting from Notepad to cmd.",
                "If you use Maven to build the JAR file, please make sure to specify the main class in the pom.xml file:",
                "In my case, the error appeared because I had supplied the source file name instead of the class name.We need to supply the class name containing the main method to the interpreter.",
                "This might help you if your case is specifically like mine:  as a beginner I also ran into this problem when I tried to run a Java program.I compiled it like this:And I tried to run also with the same extension:When I removed the .java and rewrote the command like java HelloWorld, the program ran perfectly. :)",
                "All answers here are directed towards Windows users it seems. For Mac, the classpath separator is :, not ;. As an error setting the classpath using ; is not thrown then this can be a difficult to discover if coming from Windows to Mac.Here is corresponding Mac command:Where in this example the package is com.test and a lib folder is also to be included on classpath.",
                "Class file location:         C:\\test\\com\\companyFile Name:                   Main.classFully qualified class name:  com.company.MainCommand line command:Note here that class path does not include \\com\\company.",
                "I thought that I was somehow setting my classpath incorrectly, but the problem was that I typed:instead of:I thought the meaning of fully qualified meant to include the full path name instead of the full package name.",
                "On Windows put .; at the CLASSPATH value in the beginning.The . (dot) means \"look in the current directory\". This is a permanent solution.Also you can set it \"one time\" with set CLASSPATH=%CLASSPATH%;.. This will last as long as your cmd window is open.",
                "When running the java with the -cp option as advertised in Windows PowerShell you may get an error that looks something like:In order to for PowerShell to accept the command, the arguments of the -cp option must be contained in quotes as in:Forming the command this way should allow Java process the classpath arguments correctly.",
                "This is a specific case:Windows (tested with Windows 7) doesn't accept special characters (like \u00e1) in class and package names. Linux does, though.I found this out when I built a .jar in NetBeans and tried to run it in command line. It ran in NetBeans, but not on the  command line.",
                "What fixed the problem in my case was:Right click on the project/class you want to run, and then Run As \u2192 Run Configurations. Then you should either fix your existing configuration or add a new one in the following way:Open the Classpath tab, click on the Advanced... button, and then add bin folder of your project.",
                "First set the path using this command;Then you need to load the program. Type \"cd (folder name)\" in the stored drive and compile it. For Example, if my program stored on the D drive, type \"D:\" press enter and type \" cd (folder name)\".",
                "In Java, when you sometimes run the JVM from the command line using the Java interpreter executable and are trying to start a program from a class file with public static void main (PSVM), you might run into the below error even though the classpath parameter to the JVM is accurate and the class file is present on the classpath:Error: main class not found or loadedThis happens if the class file with PSVM could not be loaded. One possible reason for that is that the class may be implementing an interface or extending another class that is not on the classpath. Normally if a class is not on the classpath, the error thrown indicates as such. But, if the class in use is extended or implemented, Java is unable to load the class itself.Reference: https://www.computingnotes.net/java/error-main-class-not-found-or-loaded/",
                "You really need to do this from the src folder. There you type the following command line:Let's say your class is called CommandLine.class, and the code looks like this:Then you should cd to the src folder and the command you need to run would look like this:And the output on the command line would be:",
                "All right, there are many answers already, but no one mentioned the case where file permissions can be the culprit.When running, a user may not have access to the JAR  file or one of the directories of the path. For example, consider:Jar file in  /dir1/dir2/dir3/myjar.jarUser1 who owns the JAR file may do:But it still doesn't work:This is because the running user (User2) does not have access to dir1, dir2, or javalibs or dir3. It may drive someone nuts when User1 can see the files, and can access to them, but the error still happens for User2.",
                "I also faced similar errors while testing a Java MongoDB JDBC connection. I think it's good to summarize my final solution in short so that in the future anybody can directly look into the two commands and are good to proceed further.Assume you are in the directory where your Java file and external dependencies (JAR files) exist.Compile:Run:",
                "I was unable to solve this problem with the solutions stated here (although the answer stated has, no doubt, cleared my concepts). I faced this problem two times and each time I have tried different solutions (in the Eclipse IDE).",
                "Sometimes, in some online compilers that you might have tried you will get this error if you don't write public class [Classname] but just class [Classname]."
            ]
        },
        {
            "tag": "java_code",
            "patterns": [
                "How can I avoid Java code in JSP files, using JSP 2?",
                "How to avoid Java code"
            ],
            "responses": [
                "The use of scriptlets (those <% %> things) in JSP is indeed highly discouraged since the birth of taglibs (like JSTL) and EL (Expression Language, those ${} things) way back in 2001.The major disadvantages of scriptlets are:Sun Oracle itself also recommends in the JSP coding conventions to avoid use of scriptlets whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help reduce the need for JSP scriptlets in your pages. Pages that use JSTL are, in general, easier to read and maintain....Where possible, avoid JSP scriptlets whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets)....In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, JSP scriptlets should not be used for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called \"value objects\") returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.How to replace scriptlets entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:If you want to invoke the same Java code on every request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a filter and write code accordingly in doFilter() method. E.g.:When mapped on an appropriate <url-pattern> covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.If you want to invoke some Java code to process a GET request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a servlet and write code accordingly in doGet() method. E.g.:This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an <error-page> in web.xml.If you want to invoke some Java code to process a POST request, such as gathering data from a submitted HTML form and doing some business stuff with it (conversion, validation, saving in DB, etcetera), then implement a servlet and write code accordingly in doPost() method. E.g.:This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using ${message} in EL), or just taking to the desired target page in case of success.If you want to invoke some Java code to control the execution plan and/or the destination of the request and the response, then implement a servlet according to the MVC's Front Controller Pattern. E.g.:Or just adopt an MVC framework like JSF, Spring MVC, Wicket, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.If you want to invoke some Java code to control the flow inside a JSP page, then you need to grab an (existing) flow control taglib like JSTL core. E.g. displaying List<Product> in a table:With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (\"Where the heck does this closing brace belong to?\"). An easy aid is to configure your web application to throw an exception whenever scriptlets are still been used by adding the following piece to web.xml:In Facelets, the successor of JSP, which is part of the Java EE provided MVC framework JSF, it is already not possible to use scriptlets. This way you're automatically forced to do things \"the right way\".If you want to invoke some Java code to access and display \"backend\" data inside a JSP page, then you need to use EL (Expression Language), those ${} things. E.g. redisplaying submitted input values:The ${param.foo} displays the outcome of request.getParameter(\"foo\").If you want to invoke some utility Java code directly in the JSP page (typically public static methods), then you need to define them as EL functions. There's a standard functions taglib in JSTL, but you can also easily create functions yourself. Here's an example how JSTL fn:escapeXml is useful to prevent XSS attacks.Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in every web application you develop. The problem of scriptlets is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.",
                "As a Safeguard: Disable Scriptlets For GoodAs another question is discussing, you can and always should disable scriptlets in your web.xml web application descriptor.I would always do that in order to prevent any developer adding scriptlets, especially in bigger companies where you will lose overview sooner or later. The web.xml settings look like this:",
                "JSTL offers tags for conditionals, loops, sets, gets, etc. For example:JSTL works with request attributes - they are most often set in the request by a Servlet, which forwards to the JSP.",
                "You can use JSTL tags together with EL expressions to avoid intermixing Java and HTML code:",
                "There are also component-based frameworks, such as Wicket, that generate a lot of the HTML for you.The tags that end up in the HTML are extremely basic and there is virtually no logic that gets mixed in. The result is almost empty-like HTML pages with typical HTML elements. The downside is that there are a lot of components in the Wicket API to learn and some things can be difficult to achieve under those constraints.",
                "In the MVC architectural pattern, JSPs represent the view layer. Embedding Java code in JSPs is considered a bad practice.You can use JSTL, freeMarker, and velocity with JSP as a \"template engine\".The data provider to those tags depends on frameworks that you are dealing with. Struts 2 and WebWork as an implementation for the MVC pattern uses OGNL \"very interesting technique to expose Beans properties to JSP\".",
                "Experience has shown that JSP's have some shortcomings, one of them being hard to avoid mixing markup with actual code.If you can, then consider using a specialized technology for what you need to do.  In Java EE 6 there is JSF 2.0, which provides a lot of nice features including gluing Java beans together with JSF pages through the #{bean.method(argument)} approach.",
                "If you simply want to avoid the drawbacks of Java coding in JSP you can do so even with scriplets. Just follow some discipline to have minimal Java in JSP and almost no calculation and logic in the JSP page.",
                "Learn to customize and write your own tags using JSTLNote that EL is EviL (runtime exceptions and refactoring).Wicket may be evil too (performance and toilsome for small applications or simple view tier).This must be added to the web application's web.xmlCreate file java2s.tld in the /WEB-INF/Compile the following code into WEB-INF\\classes\\com\\java2sStart the server and load the bodyContent.jsp file in the browser:",
                "Wicket is also an alternative which completely separates Java from HTML, so a designer and programmer can work together and on different sets of code with little understanding of each other.Look at Wicket.",
                "You raised a good question and although you got good answers, I would suggest that you get rid of JSP. It is outdated technology which eventually will die. Use a modern approach, like template engines. You will have very clear separation of business and presentation layers, and certainly no Java code in templates, so you can generate templates directly from web presentation editing software, in most cases leveraging WYSIWYG.And certainly stay away of filters and pre and post processing, otherwise you may deal with support/debugging difficulties since you always do not know where the variable gets the value.",
                "In order to avoid Java code in JSP files, Java now provides tag libraries, like JSTL.Also, Java has come up with JSF into which you can write all programming structures in the form of tags.",
                "No matter how much you try to avoid, when you work with other developers, some of them will still prefer scriptlet and then insert the evil code into the project. Therefore, setting up the project at the first sign is very important if you really want to reduce the scriptlet code. There are several techniques to get over this (including several frameworks that other mentioned). However, if you prefer the pure JSP way, then use the JSTL tag file. The nice thing about this is you can also set up master pages for your project, so the other pages can inherit the master pagesCreate a master page called base.tag under your WEB-INF/tags with the following contentOn this mater page, I created a fragment called \"title\", so that in the child page, I could insert more codes into this place of the master page. Also, the tag <jsp:doBody/> will be replaced by the content of the child pageCreate child page (child.jsp) in your WebContent folder:<t:base> is used to specify the master page you want to use (which is base.tag at this moment). All the content inside the tag <jsp:body> here will replace the <jsp:doBody/> on your master page. Your child page can also include any tag lib and you can use it normally like the other mentioned. However, if you use any scriptlet code here (<%= request.getParameter(\"name\") %> ...) and try to run this page, you will get a JasperException because  Scripting elements ( &lt;%!, &lt;jsp:declaration, &lt;%=, &lt;jsp:expression, &lt;%, &lt;jsp:scriptlet ) are disallowed here. Therefore, there is no way other people can include the evil code into the jsp fileCalling this page from your controller:You can easily call the child.jsp file from your controller. This also works nice with the struts framework",
                "Use JSTL tag libraries in JSP. That will work perfectly.",
                "Just use the JSTL tag and EL expression.",
                "If somebody is really against programming in more languages than one, I suggest GWT. Theoretically, you can avoid all the JavaScript and HTML elements, because Google Toolkit transforms all the client and shared code to JavaScript. You won't have problem with them, so you have a webservice without coding in any other languages. You can even use some default CSS from somewhere as it is given by extensions (smartGWT or Vaadin). You don't need to learn dozens of annotations.Of course, if you want, you can hack yourself into the depths of the code and inject JavaScript and enrich your HTML page, but really you can avoid it if you want, and the result will be good as it was written in any other frameworks. I it's say worth a try, and the basic GWT is well-documented.And of course many fellow programmers hereby described or recommended several other solutions. GWT is for people who really don't want to deal with the web part or to minimize it.",
                "Using scriptlets in JSPs is not a good practice.Instead, you can use:Please refer to:",
                "A neat idea from the Python world is Template attribute languages; TAL was introduced by Zope (therefore a.k.a. \"Zope Page Templates\", ZPT) and is a standard, with implementations in PHP, XSLT and Java as well (I have used the Python/Zope and PHP incarnations). In this class of templating languages, one of the above examples could look like this:The code looks like ordinary HTML (or XHTML) plus some special attributes in an XML namespace; it can be viewed with a browser and safely be tweaked by a designer.There is support for macros and for internationalisation and localisation as well:If translations of the content are available, they are used.I don't know very much about the Java implementation, though.",
                "Sure, replace <%! counter++; %> by an event producer-consumer architecture, where the business layer is notified about the need to increment the counter, it reacts accordingly, and notifies the presenters so that they update the views. A number of database transactions are involved, since in future we will need to know the new and old value of the counter, who has incremented it and with what purpose in mind. Obviously serialization is involved, since the layers are entirely decoupled. You will be able to increment your counter over RMI, IIOP, SOAP. But only HTML is required, which you don't implement, since it is such a mundane case. Your new goal is to reach 250 increments a second on your new shiny E7, 64GB RAM server.I have more than 20 years in programming, most of the projects fail before the sextet: Reusability Replaceability OO-ability Debuggability Testability Maintainability is even needed. Other projects, run by people who only cared about functionality, were extremely successful.  Also, stiff object structure, implemented too early in the project, makes the code unable to be adapted to the drastic changes in the specifications (aka agile).So I consider as procrastination the activity of defining \"layers\" or redundant data structures either early in the project or when not specifically required.",
                "Technically, JSP are all converted to Servlets during runtime.JSP was initially created for the purpose of the decoupling the business logic and the design logic, following the MVC pattern. So JSP is technically all Java code during runtime.But to answer the question, tag libraries are usually used for applying logic (removing Java code) to JSP pages.",
                "How can I avoid Java code in JSP files?You can use tab library tags like JSTL in addition to Expression Language (EL). But EL does not work well with JSP. So it's is probably better to drop JSP completely and use Facelets.Facelets is the first non JSP page declaration language designed for JSF (Java Server Faces) which provided a simpler and more powerful programming model to JSF developers as compare to JSP. It resolves different issues occurs in JSP for web applications development.Source",
                "If we use the following things in a Java web application, Java code can be eliminated from the foreground of the JSP file.Use the MVC architecture for a web applicationUse JSP Tagsa. Standard Tagsb. Custom Tags",
                "Using Scriptlets is a very old way and not recommended. If you want directly output something in your JSP pages, just use Expression Language (EL)  along with JSTL.There are also other options, such as using a templating engine such as Velocity, Freemarker, Thymeleaf, etc. But using plain JSP with EL and JSTL serves my purpose most of the time and it also seems the simplest for a beginner.Also, take note that it is not a best practice to do business logic in the view layer. You should perform your business logic in the service layer,\nand pass the output result to your views through a controller.",
                "Use a Backbone.js or AngularJS-like JavaScript framework for UI design\nand fetch the data using a REST API. This will remove the Java dependency from the UI completely.",
                "Nothing of that is used anymore, my friend. My advice is to decouple the view (CSS, HTML, JavaScript, etc.) from the server.In my case, I do my systems handling the view with Angular and any data needed is brought from the server using REST services.Believe me, this will change the way you design.",
                "JSP 2.0 has a feature called \"Tag Files\", and you can write tags without external Java code and tld. You need to create a .tag file and put it in WEB-INF\\tags. You can even create a directory structure to package your tags.For example:Use it likeAlso, you can read the tag body easily:Use it:The samples are very simple, but you can do lots of complicated tasks here. Please consider you can use other tags (for example: JSTL which has controlling tags like if/forEcah/chosen text manipulation like format/contains/uppercase or even SQL tags select/update), pass all kind parameters, for example Hashmap, access session, request, ... in your tag file too.Tag File are so easy developed as you did not need to restart the server when changing them, like JSP files. This makes them easy for development.Even if you use a framework like Struts 2, which have lots of good tags, you may find that having your own tags can reduce your code a lot. You can pass your tag parameters to struts and this way customize your framework tag.You can use tags not only to avoid Java, but also minimize your HTML codes. I myself try to review HTML code and build tags a lot as soon as I see code duplicates start in my pages.(Even if you end up using Java in your JSP code, which I hope not, you can encapsulate that code in a tag.)",
                "The good thing about this approach is that your code is also HTML like\n  code!",
                "A lot of the answers here go the \"use a framework\" route. There's zero wrong with that. However I don't think it really answers your question, because frameworks may or may not use JSPs, nor are they designed in any way with removing java use in JSPs as a primary goal. \nThe only good answer to your question \"how do I avoid using Java in a JSP\" is: you can't.  That's what JSPs are for - using Java to render HTML with dynamic data/logic.\nThe follow up question might be, how much java should I use in my JSPs. Before we answer that question, you should also ponder, \"do I need to use JSPs to build web content using Java?\" The answer to that last one is, no. There are many alternatives to JSPs for developing web facing applications using Java. Struts for example does not force you to use JSPs - don't get me wrong, you can use them and many implementations do, but you don't absolutely have to. Struts doesn't even force you to use any HTML. A JSP doesn't either, but let's be honest, a JSP producing no HTML is kinda weird. Servlets, famously, allow you to serve any kind of content you like over HTTP dynamically. They are the primary tech behind pretty much everything java web - JSPs are just HTML templates for servlets, really. \nSo the answer to how much java you should put in a JSP is, \"as little as possible\". I of course have java in my JSPs, but it consists exclusively of tag library definitions, session and client variables, and beans encapsulating server side objects. The <%%> tags in my HTML are almost exclusively property calls or variable expressions. Rare exceptions include ultra-specific calculations pertaining to a single page and unlikely to ever be reused; bugfixes stemming from page-specific issues only applying to one page; last minute concatenations and arithmetic stemming from unusual requirements limited in scope to a single page; and other similar cases. In a code set of 1.5 million lines, 3000 JSPs and 5000 classes, there are maybe 100 instances of such unique snippets. It would have been quite possible to make these changes in classes or tag library definitions, but it would have been inordinately complex due to the specificity of each case, taken longer to write and debug, and taken more time as a result to get to my users. It's a judgement call. But make no mistake, you cannot write JSPs of any meaning with \"no java\" nor would you want to. The capability is there for a reason.",
                "As many answers says, use JSTL or create your own custom tags. Here is a good explanation about creating custom tags.",
                "By using JSTL tags together with EL expressions, you can avoid this. Put the following things in your JSP page:"
            ]
        },
        {
            "tag": "java_string",
            "patterns": [
                "How do I create a Java string from the contents of a file?",
                "How to create a java string"
            ],
            "responses": [
                "Java 11 added the readString() method to read small files as a String, preserving line terminators:For versions between Java 7 and 11, here's a compact, robust idiom, wrapped up in a utility method:Java 7 added a convenience method to read a file as lines of text, represented as a List<String>. This approach is \"lossy\" because the line separators are stripped from the end of each line.Java 8 added the Files.lines() method to produce a Stream<String>. Again, this method is lossy because line separators are stripped. If an IOException is encountered while reading the file, it is wrapped in an UncheckedIOException, since Stream doesn't accept lambdas that throw checked exceptions.This Stream does need a close() call; this is poorly documented on the API, and I suspect many people don't even notice Stream has a close() method. Be sure to use an ARM-block as shown.If you are working with a source other than a file, you can use the lines() method in BufferedReader instead.If your file is small enough relative to your available memory, reading the entire file at once might work fine. However, if your file is too large, reading one line at a time, processing it, and then discarding it before moving on to the next could be a better approach. Stream processing in this way can eliminate the total file size as a factor in your memory requirement.One thing that is missing from the sample in the original post is the character encoding. This encoding generally can't be determined from the file itself, and requires meta-data such as an HTTP header to convey this important information.The StandardCharsets class defines some constants for the encodings required of all Java runtimes:The platform default is available from the Charset class itself:There are some special cases where the platform default is what you want, but they are rare. You should be able justify your choice, because the platform default is not portable. One example where it might be correct is when reading standard input or writing standard output.Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the \"edited\" link on this answer.",
                "If you're willing to use an external library, check out Apache Commons IO (200KB JAR). It contains an org.apache.commons.io.FileUtils.readFileToString() method that allows you to read an entire File into a String with one line of code.Example:",
                "A very lean solution based on Scanner:Or, if you want to set the charset:Or, with a try-with-resources block, which will call scanner.close() for you:Remember that the Scanner constructor can throw an IOException. And don't forget to import java.io and java.util.Source: Pat Niemeyer's blog",
                "Java 7Java 11",
                "If you're looking for an alternative that doesn't involve a third-party library (e.g. Commons I/O), you can use the Scanner class:",
                "Guava has a method similar to the one from Commons IOUtils that Willi aus Rohr mentioned:EDIT by PiggyPiglet\nFiles#toString is deprecated, and due for removal Octobor 2019. Instead use\nFiles.asCharSource(new File(path), StandardCharsets.UTF_8).read();EDIT by Oscar ReyesThis is the (simplified) underlying code on the cited library:Edit (by Jonik): The above doesn't match the source code of recent Guava versions. For the current source, see the classes Files, CharStreams, ByteSource and CharSource in com.google.common.io package.",
                ".......",
                "If you need a string processing (parallel processing) Java 8 has the great Stream API.More examples are available in JDK samples sample/lambda/BulkDataOperations that can be downloaded from Oracle Java SE 8 download pageAnother one liner example",
                "That code will normalize line breaks, which may or may not be what you really want to do.Here's an alternative which doesn't do that, and which is (IMO) simpler to understand than the NIO code (although it still uses java.nio.charset.Charset):",
                "Gathered all the possible ways to read the File as String from Disk or Network.Guava: Google using classes Resources, FilesAPACHE - COMMONS IO using classes IOUtils, FileUtilsJava 8 BufferReader using Stream APIScanner Class with regex \\A. which matches the beginning of input.Java 7 (java.nio.file.Files.readAllBytes)BufferedReader using InputStreamReader.Example with main method to access the above methods.@see",
                "If it's a text file why not use apache commons-io?It has the following methodIf you want the lines as a list use",
                "Since JDK 11:",
                "To read a File as binary and convert at the end",
                "With Java 7, this is my preferred option to read a UTF-8 file:Since Java 7, the JDK has the new java.nio.file API, which provides many shortcuts, so 3rd party libraries are not always required for simple file operations.Since people are still upvoting this answer, here is a better solution that got introduced in Java 11:",
                "Java attempts to be extremely general and flexible in all it does. As a result, something which is relatively simple in a scripting language (your code would be replaced with \"open(file).read()\" in python) is a lot more complicated. There doesn't seem to be any shorter way of doing it, except using an external library (like Willi aus Rohr mentioned). Your options:Your best bet is probably the 2nd one, as it has the least dependencies.",
                "no external libraries usedYou can create a new String object from the file content (Using classes from java.nio.file package):",
                "There is a variation on the same theme that uses a for loop, instead of a while loop, to limit the scope of the line variable.  Whether it's \"better\" is a matter of personal taste.",
                "If you do not have access to the Files class, you can use a native solution.",
                "A flexible solution using IOUtils from Apache commons-io in combination with StringWriter:It works with any reader or input stream (not just with files), for example when reading from a URL.",
                "Be aware when using fileInputStream.available() the returned integer does not have to represent the actual file size, but rather the guessed amount of bytes the system should be able to read from the stream without blocking IO. A safe and simple way could look like thisIt should be considered that this approach is not suitable for multi-byte character encodings like UTF-8.",
                "This one uses the method RandomAccessFile.readFully, it seems to be available from JDK 1.0 !",
                "You can try Scanner and File class, a few lines solution",
                "Based on @erickson`s answer, you can use:",
                "User java.nio.Files to read all lines of file.",
                "I cannot comment other entries yet, so I'll just leave it here.One of best answers here (https://stackoverflow.com/a/326448/1521167):still has one flaw. It always puts new line char in the end of string, which may cause some weirds bugs. My suggestion is to change it to:",
                "After Ctrl+F'ing after Scanner, I think that the Scanner solution should be listed too. In the easiest to read fashion it goes like this:If you use Java 7 or newer (and you really should) consider using try-with-resources to make the code easier to read. No more dot-close stuff littering everything. But that's mostly a stylistic choice methinks.I'm posting this mostly for completionism, since if you need to do this a lot, there should be things in java.nio.file.Files that should do the job better.My suggestion would be to use Files#readAllBytes(Path) to grab all the bytes, and feed it to new String(byte[] Charset) to get a String out of it that you can trust. Charsets will be mean to you during your lifetime, so beware of this stuff now.Others have given code and stuff, and I don't want to steal their glory. ;)",
                "Using this library, it is one line:",
                "Also if your file happens to be inside a jar, you can also use this:The path should start with /  for instance if your jar isThen you want to invoke it like this:",
                "In one line (Java 8), assuming you have a Reader:"
            ]
        },
        {
            "tag": "StringBuilder",
            "patterns": [
                "Difference between StringBuilder and StringBuffer",
                "StringBuilder",
                "StringBuffer"
            ],
            "responses": [
                "StringBuffer is synchronized, StringBuilder is not.",
                "StringBuilder is faster than StringBuffer because it's not synchronized.Here's a simple benchmark test:A test run gives the numbers of 2241 ms for StringBuffer vs 753 ms for StringBuilder.",
                "Basically, StringBuffer methods are synchronized while StringBuilder are not.The operations are \"almost\" the same, but using synchronized methods in a single thread is overkill.That's pretty much about it.Quote from StringBuilder API:This class [StringBuilder] provides an API compatible with StringBuffer, but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for StringBuffer in places where the string buffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to StringBuffer as it will be faster under most implementations.So it was made to substitute it.The same happened with Vector and ArrayList.",
                "But needed to get the clear difference with the help of an example?StringBuffer or StringBuilderSimply use StringBuilder unless you really are trying to share a buffer between threads. StringBuilder is the unsynchronized (less overhead = more efficient) younger brother of the original synchronized StringBuffer class.StringBuffer came first.  Sun was concerned with correctness under all conditions, so they made it synchronized to make it thread-safe just in case.StringBuilder came later.  Most of the uses of StringBuffer were single-thread and unnecessarily paying the cost of the synchronization.Since StringBuilder is a drop-in replacement for StringBuffer without the synchronization, there would not be differences between any examples.If you are trying to share between threads, you can use StringBuffer, but consider whether higher-level synchronization is necessary, e.g. perhaps instead of using StringBuffer, should you synchronize the methods that use the StringBuilder.",
                "First lets see the similarities:\nBoth StringBuilder and StringBuffer are mutable. That means you can change the content of them, with in the same location.Differences:\nStringBuffer is mutable and synchronized as well. Where as StringBuilder is mutable but not synchronized by default.Meaning of synchronized (synchronization):\nWhen some thing is synchronized, then multiple threads can access, and modify it with out any problem or side effect.\nStringBuffer is synchronized, so you can use it with multiple threads with out any problem.Which one to use when?\nStringBuilder : When you need a string, which can be modifiable, and only one thread is accessing and modifying it.\nStringBuffer : When you need a string, which can be modifiable, and multiple threads are accessing and modifying it.Note : Don't use StringBuffer unnecessarily, i.e., don't use it if only one thread is modifying and accessing it because it has lot of locking and unlocking code for synchronization which will unnecessarily take up CPU time. Don't use locks unless it is required.",
                "In single threads, StringBuffer is not significantly slower than StringBuilder, thanks to JVM optimisations. And in multithreading, you can't use safely a StringBuilder.Here is my test (not a benchmark, just a test) :Results :\nstrings: 319740\nBuffers : 23\nBuilder : 7 !So Builders are faster than Buffers, and WAY faster than strings concatenation.\nNow let's use an Executor for multiple threads :Now StringBuffers take 157 ms for 100000 appends. It's not the same test, but compared to the previous 37 ms, you can safely assume that StringBuffers appends are slower with multithreading use. The reason is that the JIT/hotspot/compiler/something makes optimizations when it detects that there is no need for checking locks.But with StringBuilder, you have java.lang.ArrayIndexOutOfBoundsException, because a concurrent thread tries to add something where it should not.Conclusion is that you don't have to chase StringBuffers. And where you have threads, think about what they are doing, before trying to gain a few nanoseconds.",
                "StringBuilder was introduced in Java 1.5 so it won't work with earlier JVMs.From the Javadocs:StringBuilder class provides an API compatible with StringBuffer, but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for StringBuffer in places where the string buffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to StringBuffer as it will be faster under most implementations.",
                "Pretty Good QuestionHere are the differences, i have noticed :StringBuffer :-StringBuilder:-Common thing :-Both have same methods with same signatures. Both are mutable.",
                "StringBufferStringBuilder",
                "StringBufferStringBuffer is mutable means one can change the value of the object . The object created through StringBuffer is stored in the heap .  StringBuffer  has the same methods as the StringBuilder , but each method in StringBuffer is synchronized that is StringBuffer is thread safe .because of this it does not allow  two threads to simultaneously access the same method . Each method can be accessed by one thread at a time .But being thread safe has disadvantages too as the performance of the StringBuffer hits due to thread safe property . Thus  StringBuilder is faster than the StringBuffer when calling the same methods of each class.StringBuffer value can be changed , it means it can be assigned to the new value . Nowadays its a most common interview question ,the differences between the above classes .\nString Buffer can be converted to the string by using\ntoString() method.StringBuilderStringBuilder  is same as the StringBuffer , that is it stores the object in heap and it can also be modified . The main difference between the StringBuffer and StringBuilder is that StringBuilder is also not thread safe. \nStringBuilder is fast as it is not thread safe .Resource: String Vs StringBuffer Vs StringBuilder",
                "StringBuilder is not thread safe. String Buffer is. More info here.EDIT: As for performance , after hotspot kicks in , StringBuilder is the winner. However , for small iterations , the performance difference is negligible.",
                "StringBuilder and StringBuffer are almost the same. The difference is that StringBuffer is synchronized and StringBuilder is not. Although, StringBuilder is faster than StringBuffer, the difference in performance is very little. StringBuilder is a SUN's replacement of StringBuffer. It just avoids synchronization from all the public methods. Rather than that, their functionality is the same.Example of good usage:If your text is going to change and is used by multiple threads, then it is better to use StringBuffer. If your text is going to change but is used by a single thread, then use StringBuilder.",
                "String is an immutable.StringBuffer is a mutable and synchronized.StringBuilder is also mutable but its not synchronized.",
                "The javadoc explains the difference:This class provides an API compatible with StringBuffer, but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for StringBuffer in places where the string buffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to StringBuffer as it will be faster under most implementations.",
                "Difference between StringBuffer and StringBuilder Source:",
                "StringBuilder (introduced in Java 5) is identical to StringBuffer, except its methods are not synchronized.  This means it has better performance than the latter, but the drawback is that it is not thread-safe.Read tutorial for more details.",
                "A simple program illustrating the difference between StringBuffer and StringBuilder:",
                "Better use StringBuilder since it is not synchronized and offers therefore better performance. StringBuilder is a drop-in replacement of the older StringBuffer.",
                "StringBuffer is used to store character strings that will be changed (String objects cannot be changed). It automatically expands as needed. Related classes: String, CharSequence.StringBuilder was added in Java 5. It is identical in all respects to StringBuffer except that it is not synchronized, which means that if multiple threads are accessing it at the same time, there could be trouble. For single-threaded programs, the most common case, avoiding the overhead of synchronization makes the StringBuilder very slightly faster.",
                "StringBuffer is synchronized, but StringBuilder is not. As a result, StringBuilder is faster than StringBuffer.",
                "StringBuffer\nis mutable. It can change in terms of length and content. StringBuffers are thread-safe, meaning that they have synchronized methods to control access so that only one thread can access a StringBuffer object's synchronized code at a time. Thus, StringBuffer objects are generally safe to use in a multi-threaded environment where multiple threads may be trying to access the same StringBuffer object at the same time.StringBuilder\nThe StringBuilder class is very similar to StringBuffer, except that its access is not synchronized so that it is not thread-safe. By not being synchronized, the performance of StringBuilder can be better than StringBuffer. Thus, if you are working in a single-threaded environment, using StringBuilder instead of StringBuffer may result in increased performance. This is also true of other situations such as a StringBuilder local variable (ie, a variable within a method) where only one thread will be accessing a StringBuilder object.",
                "StringBuffer:StringBuilder",
                "String-Builder :String-BufferIt is recommended to use StringBuilder whenever possible because it is faster than StringBuffer. However, if the thread safety is necessary, the best option is StringBuffer objects.",
                "A String is an immutable object which means the value cannot be changed whereas StringBuffer is mutable.The StringBuffer is Synchronized hence thread-safe whereas StringBuilder is not and suitable for only single-threaded instances.",
                "Since StringBuffer is synchronized, it needs some extra effort, hence based on perforamance, its a bit slow than StringBuilder.",
                "There are no basic differences between StringBuilder and StringBuffer, only a few differences exist between them. In StringBuffer the methods are synchronized. This means that at a time only one thread can operate on them. If there is more than one thread then the second thread will have to wait for the first one to finish and the third one will have to wait for the first and second one to finish and so on. This makes the process very slow and hence the performance in the case of StringBuffer is low.On the other hand, StringBuilder is not synchronized. This means that at a time multiple threads can operate on the same StringBuilder object at the same time. This makes the process very fast and hence performance of StringBuilder is high.",
                "The major difference is StringBuffer is syncronized but StringBuilder is not.If you need to use more than one thread , then StringBuffer is recommended.But, as per the execution speed StringBuilder is faster than StringBuffer , because its not syncronized .",
                "Check the internals of synchronized append method of StringBuffer and non-synchronized append method of StringBuilder.StringBuffer:StringBuilder:Since append is synchronized, StringBuffer has performance overhead compared to StrinbBuilder in multi-threading scenario. As long as you are not sharing buffer among multiple threads, use StringBuilder, which is fast due to absence of synchronized in append methods.",
                "Here is the performance testing result for String vs StringBuffer vs StringBuilder. Finally, StringBuilder won the Test. See below for test code and result.Code:Execute Me on ideoneResult:100000 iteration for adding a single text10000 iteration for adding a single text"
            ]
        },
        {
            "tag": "UnsupportedClassVersionError",
            "patterns": [
                "How to fix java.lang.UnsupportedClassVersionError: Unsupported major.minor version",
                "UnsupportedClassVersionError",
                "error"
            ],
            "responses": [
                "The version number shown describes the version of the JRE the class file is compatible with.The reported major numbers are:(Source: Wikipedia)To fix the actual problem you should try to either run the Java code with a newer version of Java JRE or specify the target parameter to the Java compiler to instruct the compiler to create code compatible with earlier Java versions.For example, in order to generate class files compatible with Java 1.4, use the following command line:With newer versions of the Java compiler you are likely to get a warning about the bootstrap class path not being set. More information about this error is available in a blog post New javac warning for setting an older source without bootclasspath.",
                "java.lang.UnsupportedClassVersionError happens because of a higher JDK during compile time and lower JDK during runtime.",
                "In Eclipse, I just went to menu command Window -> Preferences -> Java -> Compiler and then set \"Compiler compliance level\" to 1.6.",
                "Don't worry, I got it solved.It is actually simple - you need to install BOTH JRE / JDK with the same version.JRE 6 -> JDK 6JRE 7 -> JDK 7And so on.",
                "This error means you're trying to load a Java \"class\" file that was compiled with a newer version of Java than you have installed.For example, your .class file could have been compiled for JDK 7, and you're trying to run it with JDK 6.So the solution is to either:Recompile the class if you have the source, using your local Java compiler (if you have one).javac FileName.javaFor developers, this can happen if another developer checks in a .class file, and they've got a newer version of java than you have!",
                "You are trying to run your program with a Java version that does not support the version in which the code was compiled. So basically you must have compiled your code with a higher version and trying to run it using a lower version.As you are gettingand version 51.0 corresponds to J2SE 7 you have most probably compiled your code in Java 7 and trying to run it using a lower version. Check what java -version displays. It should be the Java 7 version. If not make appropriate changes in the PATH/JAVA_HOME. Or you can compile with the same version you are trying to run the code. If the configurations are confusing you can always give absolute path /home/user/jdk1.7.0_11/bin/javac and /home/user/jdk1.7.0_11/bin/java.",
                "I had a similar situation on Mac, and the following process worked for me:In the terminal, typeThen add this line in the file, and savewhere version is the one on your computer, such as 1.7.0_25.Exit the editor, then type the following command make it become effectiveThen type java -version to check the resultWhat is .profile file?.profile file is a hidden file. It is an optional file which tells the system which commands to run when the user whose profile file it is logs in. For example, if my username is bruno and there is a .profile file in /Users/bruno/, all of its contents will be executed during the log-in procedure.Source: http://computers.tutsplus.com/tutorials/speed-up-your-terminal-workflow-with-command-aliases-and-profile--mac-30515",
                "In Eclipse's menu Window -> Preferences -> Java -> Compiler check also \"Configure Project Specific Settings\".If you stil have the error with same Java version: try to delete build folder of your project manually. Then restart Eclipse.",
                "You can have some JAR library compiled in Java 7, and you have only Java 6 as Java Runtime. It  could happen with some new libraries.",
                "The most common issue is misconfiguration of your JAVA_HOME variable which should point to the right Java Development Kit library, if you've multiple installed.To find where SDK Java folder is located, run the following commands:To check which java (openjdk) you've installed, check via:or:To change it, use:Prefix with sudo if required.to select the alternative java version.Or check which are available for install:Prefix with sudo if required.Then you can install, for example:Prefix with sudo if required.Install/upgrade appropriate package via:The java-1.7.0-openjdk package contains just the Java Runtime Environment. If you want to develop Java programs then install the java-1.7.0-openjdk-devel package.There is an OpenJDK 7 package in the FreeBSD Ports collection called openjdk7 which probably needs to be reconfigured.See: OpenJDK wiki page.Just install appropriate  Java SE Development Kit library from the Oracle site or installIf you're experiencing this issue with Jenkins, see:However selecting the right version of Java (newer) with update-alternatives should work.",
                "I got the same problem with a project written in 1.7 and tried to execute in 1.6.My solution in Eclipse:Right click on your Project Properties -> Java Build Path -> LibrariesSelect your JRE System Library and click Edit on the right, and choose the target JRE.Now go to Java Compiler on the left, and change the Compiler compliance level to your target.That worked for me.",
                "I have faced the same problem when I was working with an Ant script to build my application.I use Eclipse for my application development, and I changed the compiler version in build properties of the project. But that didn't work for me. Then I found out that I can provide the compiler version in the Ant script.I modified the Ant script at the section where it compile Java files.This worked for me to resolve the unsupported major minor issue.",
                "When I installed JDK 1.7, the problem got solved.",
                "Based on this...In Eclipse, right click on project in package explorer:Build Path -> Configure Build PathUnder:Java Build Path -> Libraries -> Add Library -> JRE System Library -> Installed JREs -> Search.Add the required JRE by selecting the library in the list available after the search is complete.",
                "As answered elsewhere by several people, the Java program is being run on an older version of Java than the one it was compiled it for. It needs to be \"crosscompiled\" for backward compatibility. To put it another way, there is a mismatch between source and target Java versions.Changing options in Eclipse menus don't answer the original poster, who said he/she is not using Eclipse. On OpenJDK javac version 1.7, you can crosscompile for 1.6 if you use parameters -source and -target, plus provide the rt.jar -file of the target version (that is, the older one) at compile time. If you actually install the 1.6 JRE, you can point to its installation (for example, /usr/lib/jvm/java-6-openjdk-i386/jre/lib/rt.jar on Ubuntu, /usr/jdk/jdk1.6.0_60/jre/lib/rt.jar on SunOS apparently. Sorry, I don't know where it is on a Windows system). Like so:It looks like you can just download rt.jar from the Internet, and point to it. This is not too elegant though:",
                "If you use Maven, set your Java compile level. Open a command line and write java -version for your compile level:If you use IntelliJ IDEA, select project \u2192 File \u2192 Settings \u2192 Build Execution Deployment \u2192 Compiler \u2192 Java Compiler. Then change byte code as 1.7 like this image:",
                "If you're facing this issue while using Maven, you can compile your code using the plug-in Maven Compiler.UPDATE: set source and target to 1.8, if you are using JDK 8.",
                "I had the same error message when running Ant from Eclipse, but the other solutions mentioned here didn't solve my problem. The funny thing was that running Ant from the Windows command line was running fine, so it had to be a configuration issue within Eclipse.It turned out that under Eclipse you can specify the environment that Ant should be running with and this was set as a JRE instead of a JDK.",
                "You have used a higher version of the JDK to compile and trying to run from a lower version of JDK/JRE.To check this, see the version information:They will be different and javac will have a higher version number.To get around this, run using java from the JDK version or if you have a newer JRE/JDK that will work as well.which javac will tell you the location, for example, /usr/bin/javac. Just run directly using /usr/bin/java <program>.OR you can set the environment variable as a permanent solution.",
                "How do I fix it?This error means that the JRE that is being used to execute your class code does not recognise the version of Java used. Usually because the version of Java that generated your class file (i.e. compiled it) is newer.To fix it, you can eithera) Compile your Java sources with the same, or older, version of the Java compiler as will be used to run it. i.e. install the appropriate JDK.b) Compile your Java sources with the newer version of the Java compiler but in compatibility mode. i.e. use the -target parameter.c) Run your compiled classes in a JRE that is the same, or newer, version as the JDK used to compile the classes.You can check the versions you are currently using with\njavac -version for the compiler, and java -version for the runtime.Should I install the JDK, and setup my PATH variable to the JDK\n  instead of JRE?For compilation, certainly, install and configure the specific JDK that you want.For runtime, you can use the one that comes with the JDK or a standalone JRE, but regardless, make sure that you have installed the right versions and that you have configured your PATH such that there are no surprises.What is the difference between the PATH variable in JRE or JDK?The PATH environment variable tells the command shell where to look for the command you type. When you type java, the command shell interpreter will look through all the locations specified in the PATH variable, from left to right, to find the appropriate java runtime executable to run. If you have multiple versions of Java installed - i.e. you have the java executable in multiple locations specified in the PATH variable, then the first one encountered when going from left to right will be the one that is executed.The compiler command is javac and only comes with the JDK. The runtime command is java and comes with the JDK and is in the JRE.It is likely that you have one version (51.0 = Java 7) of javac installed, and you also have the same version of java installed, but that another previous version of java is appearing earlier in the PATH and so is being invoked instead of the one you expect.",
                "Had this problem when I reverted to Java 6 and tried to run classes previously compiled with Java 7. What worked for me was Preferences > java > compiler --> set compliance level to 1.6 and crucially \"configure project settings\"..",
                "Today, this error message appeared in our Tomcat 7 on Ubuntu 12.04.2 LTS (Precise Pangolin):/var/log/tomcat7/localhost.2014-04-08.log: \n  Apr 8, 2014 9:00:55 AM org.apache.catalina.core.StandardContext filterStart \n  SEVERE: Exception starting filter struts2 \n  java.lang.UnsupportedClassVersionError: controller/ReqAccept : Unsupported major.minor version 51.0 (unable to load class controller.ReqAccept)The Struts application is compiled with Java 7.It turned out, someone uses \"service tomcat [stop/start]\" to restart Tomcat 7,$ ps -ef | grep java\n  tomcat7  31783 1 32 20:13 ? 00:00:03 /usr/lib/jvm/default-java/bin/java...\n  $ /usr/lib/jvm/default-java/bin/java -version\n  java version \"1.6.0_27\"Which causes the \"Unsupported major.minor version 51.0\" error.When we used \"/etc/init.d/tomcat7 [stop/start]\" to restart Tomcat 7, the problem was solved.$ ps -ef | grep java\n  tomcat7  31886 1 80 20:24 ? 00:00:10 /usr/local/java/jdk1.7.0_15/bin/java\n  $ /usr/local/java/jdk1.7.0_15/bin/java -version\n  java version \"1.7.0_15\"",
                "I solved it. I ran:The error is misleading, Unsupported major.minor version 51.0. This gives the impression that version 51 (Java 7) is not supported. And we should use Java 6.The error should have been:The current Java version, 50, is unsupported. Use Java version 7 (51:0 and greater) instead.`",
                "Your Java file is compiled with a different version (higher compiler version) than the version (lower runtime version) you are trying to run it with.It is basic understanding that classes compiled with lower versions are expected to run in the later higher versions. But the opposite (compiled with higher compiler version and trying to run it with lower runtime version) is quite not possible sometimes.Hence you are shown this error, when trying to execute your program. Unsupported major.minor version x.xQ: I have created an application in Java 7, but when my users try to\n  run it they get an Unsupported major.minor version 51.0 error. What\n  does this mean and what can I do about it?A: If you compile an application using javac in Java 7, the resulting classfiles will have the 51.0 version number. Versions of\n  Java prior to 7 do not recognize this number, so your users will have\n  to upgrade to Java 7 prior to running your application. If you are not\n  using any Java 7 APIs you can try to compile your application using\n  javac -target 1.6 to create a 1.6-compatible classfile. If your\n  application is deployed using webstart you can specify the minimum\n  version required. For more information, see the docs on Java Web Start\n  and JNLP here. This issue will go away once we trigger autoupdate to\n  Java 7 for end-users currently having Java 6 on their desktops. The\n  timeline for this is not yet determined, we want to give developers\n  time to work out any issues between their code and JDK 7 first.(Source: oracle.com.)",
                "Oh Mac OS X I was able to solve this problem by setting the JAVA_HOME variable:",
                "First let's get some basics right...JRE is a component in NetBeans/Eclipse/standalone that is going to provide you with libraries, JVM, Java plugins & Java web start. Note that it does not provide compliers or debuggers.JDK is the superset of JRE along with compliers and debuggers.So when you have your default library as a JRE instead of JDK, you are going to have a nice time importing stuff, but it won't compile.Instead, set your path to JDK (I use NetBeans, and I set them using netbeans.conf in netbeans/etc/netbeans.conf and change the path).",
                "In my case the problem was in the server runtime configuration:Check the JRE is the version you need:The project was in version 1.7 and the server JRE was set as 1.6, after changing to the proper java version it's launched fine.",
                "I had the problem whereby I was having to run a Maven compilation on my project from the command line in order to run my unit tests; if I made a change to the test class and let Eclipse automatically recompile it, then I got the \"Unsupported major.minor version 51.0\" error.I do have both JDK6 and JDK7 installed, but all my JRE settings were pointing at 1.6, both in the pom and from the project properties page in Eclipse. No amount of Maven Update Project and/or refreshing solved this.Finally I tried closing the project and re-opening it, and this seemed to fix it! HTH",
                "You have compiled your Java class with JDK 7 and you are trying to run same class on JDK 6 ."
            ]
        },
        {
            "tag": "for_each",
            "patterns": [
                "How does the Java 'for each' loop work?",
                "What is for each",
                "How does for each work",
                "for each loop"
            ],
            "responses": [
                "Note that if you need to use i.remove(); in your loop, or access the actual iterator in some way, you cannot use the for ( : ) idiom, since the actual iterator is merely inferred.As was noted by Denis Bueno, this code works for any object that implements the Iterable interface.Also, if the right-hand side of the for (:) idiom is an array rather than an Iterable object, the internal code uses an int index counter and checks against array.length instead. See the Java Language Specification.",
                "The construct for each is also valid for arrays. e.g.which is essentially equivalent ofSo, overall summary: \n[nsayer] The following is the longer form of what is happening:Note that if you need to use\n  i.remove(); in your loop, or access\n  the actual iterator in some way, you\n  cannot use the for( : ) idiom, since\n  the actual Iterator is merely\n  inferred.[Denis Bueno]It's implied by nsayer's answer, but\n  it's worth noting that the OP's for(..)\n  syntax will work when \"someList\" is\n  anything that implements\n  java.lang.Iterable -- it doesn't have\n  to be a list, or some collection from\n  java.util. Even your own types,\n  therefore, can be used with this\n  syntax.",
                "The for-each loop, added in Java 5 (also called the \"enhanced for loop\"), is equivalent to using a java.util.Iterator--it's syntactic sugar for the same thing. Therefore, when reading each element, one by one and in order, a for-each should always be chosen over an iterator, as it is more convenient and concise.There are situations where you must use an Iterator directly. For example, attempting to delete an element while using a for-each can (will?) result in a ConcurrentModificationException.The only practical difference between for-loop and for-each is that, in the case of indexable objects, you do not have access to the index. An example when the basic for-loop is required:Although you could manually create a separate index int-variable with for-each,...it is not recommended, since variable-scope is not ideal, and the basic for loop is simply the standard and expected format for this use case.When accessing collections, a for-each is significantly faster than the basic for loop's array access. When accessing arrays, however--at least with primitive and wrapper-arrays--access via indexes is dramatically faster.Indexes are 23-40 percent faster than iterators when accessing int or Integer arrays. Here is the output from the testing class at the bottom of this post, which sums the numbers in a 100-element primitive-int array (A is iterator, B is index):I also ran this for an Integer array, and indexes are still the clear winner, but only between 18 and 25 percent faster.For a List of Integers, however, iterators are the clear winner. Just change the int-array in the test-class to:And make the necessary changes to the test-function (int[] to List<Integer>, length to size(), etc.):In one test they're almost equivalent, but with collections, iterator wins.*This post is based on two answers I wrote on Stack Overflow:Uses and syntax for for-each loop in JavaShould I use an Iterator or a forloop to iterate?Some more information: Which is more efficient, a for-each loop, or an iterator?I created this compare-the-time-it-takes-to-do-any-two-things class after reading this question on Stack Overflow:",
                "Here is an answer which does not assume knowledge of Java Iterators. It is less precise, but it is useful for education.While programming we often write code that looks like the following:The foreach syntax allows this common pattern to be written in a more natural and less syntactically noisy way.Additionally this syntax is valid for objects such as Lists or Sets which do not support array indexing, but which do implement the Java Iterable interface.",
                "The for-each loop in Java uses the underlying iterator mechanism. So it's identical to the following:",
                "As defined in JLS, a for-each loop can have two forms:If the type of expression is a subtype of Iterable then translation is as:If the expression necessarily has an array type T[] then:Java 8 has introduced streams which perform generally better with a decent size dataset. We can use them as:",
                "It's implied by nsayer's answer, but it's worth noting that the OP's for(..) syntax will work when \"someList\" is anything that implements java.lang.Iterable -- it doesn't have to be a list, or some collection from java.util. Even your own types, therefore, can be used with this syntax.",
                "A foreach loop syntax is:Example:Output:WARNING: You can access array elements with the foreach loop, but you can NOT initialize them. Use the original for loop for that.WARNING: You must match the type of the array with the other object.If you want to edit elements, use the original for loop like this:Now if we dump s to the console, we get:",
                "The Java \"for-each\" loop construct will allow iteration over two types of objects:The Iterable<T> interface has only one method: Iterator<T> iterator().  This works on objects of type Collection<T> because the Collection<T> interface extends Iterable<T>.",
                "In Java 8 features you can use this:",
                "The concept of a foreach loop as mentioned in Wikipedia is highlighted below:Unlike other for loop constructs, however, foreach loops usually\n  maintain no explicit counter: they essentially say \"do this to\n  everything in this set\", rather than \"do this x times\". This avoids\n  potential off-by-one errors and makes code simpler to read.So the concept of a foreach loop describes that the loop does not use any explicit counter which means that there is no need of using indexes to traverse in the list thus it saves user from off-by-one error. To describe the general concept of this off-by-one error, let us take an example of a loop to traverse in a list using indexes.But suppose if the list starts with index 1 then this loop is going to throw an exception as it will found no element at index 0 and this error is called an off-by-one error. So to avoid this off-by-one error the concept of a foreach loop is used. There may be other advantages too, but this is what I think is the main concept and advantage of using a foreach loop.",
                "In Java 8, they introduced forEach. Using it List, Maps can be looped.Loop a List using for eachorLoop a Map using for eachor",
                "Here's an equivalent expression.",
                "Using older Java versions, including Java\u00a07, you can use a foreach loop as follows.The following is the very latest way of using a for each loop in Java\u00a08 (loop a List with forEach + lambda expression or method reference).For more information, refer to \"Java 8 forEach examples\".",
                "Also note that using the \"foreach\" method in the original question does have some limitations, such as not being able to remove items from the list during the iteration.The new for-loop is easier to read and removes the need for a separate iterator, but is only really usable in read-only iteration passes.",
                "An alternative to forEach in order to avoid your \"for each\":Variant 1 (plain):Variant 2 (parallel execution (faster)):",
                "It adds beauty to your code by removing all the basic looping clutter. It gives a clean look to your code, justified below.Normal for loop:Using for-each:for-each is a construct over a collection that implements Iterator. Remember that, your collection should implement Iterator; otherwise you can't use it with for-each.The following line is read as \"for each TimerTask t in list.\"There is less chance for errors in case of for-each. You don't have to worry about initializing the iterator or initializing the loop counter and terminating it (where there is scope for errors).",
                "Prior to Java 8, you need to use the following:However, with the introduction of Streams in Java 8 you can do same thing in much less syntax. For example, for your someList you can do:You can find more about streams here.",
                "As many of other answers correctly state, the for each loop is just syntactic sugar over the same old for loop and the compiler translates it to the same old for loop.javac (OpenJDK) has a switch, -XD-printflat, which generates a Java file with all the syntactic sugar removed. The complete command looks like this:To answer this question, I created a file and wrote two versions of for each, one with array and another with a list. My Java file looked like this:When I compiled this file with above switch, I got the following output.You can see that along with the other syntactic sugar (Autoboxing), for each loops got changed to simple loops.",
                "It would look something like this. Very crufty.There is a good writeup on for each in the Sun documentation.",
                "The Java for each loop (aka enhanced for loop) is a simplified version of a for loop. The advantage is that there is less code to write and less variables to manage. The downside is that you have no control over the step value and no access to the loop index inside the loop body.They are best used when the step value is a simple increment of 1 and when you only need access to the current loop element. For example, if you need to loop over every element in an array or Collection without peeking ahead or behind the current element.There is no loop initialization, no boolean condition and the step value is implicit and is a simple increment. This is why they are considered so much simpler than regular for loops.Enhanced for loops follow this order of execution:1) loop body2) repeat from step 1 until entire array or collection has been traversedExample \u2013 Integer ArrayThe currentValue variable holds the current value being looped over in the intArray array. Notice there\u2019s no explicit step value \u2013 it\u2019s always an increment by 1.The colon can be thought of to mean \u201cin\u201d. So the enhanced for loop declaration states: loop over intArray and store the current array int value in the currentValue variable.Output:Example \u2013 String ArrayWe can use the for-each loop to iterate over an array of strings. The loop declaration states: loop over myStrings String array and store the current String value in the currentString variable.Output:Example \u2013 ListThe enhanced for loop can also be used to iterate over a java.util.List as follows:The loop declaration states: loop over myList List of Strings and store the current List value in the currentItem variable.Output:Example \u2013 SetThe enhanced for loop can also be used to iterate over a java.util.Set as follows:The loop declaration states: loop over mySet Set of Strings and store the current Set value in the currentItem variable. Notice that since this is a Set, duplicate String values are not stored.Output:Source: Loops in Java \u2013 Ultimate Guide",
                "As so many good answers said, an object must implement the Iterable interface if it wants to use a for-each loop.I'll post a simple example and try to explain in a different way how a for-each loop works.The for-each loop example:Then, if we use javap to decompile this class, we will get this bytecode sample:As we can see from the last line of the sample, the compiler will automatically convert the use of for-each keyword to the use of an Iterator at compile time. That may explain why object, which doesn't implement the Iterable interface, will throw an Exception when it tries to use the for-each loop.",
                "The Java for-each idiom can only be applied to arrays or objects of type *Iterable. This idiom is implicit as it truly backed by an Iterator. The Iterator is programmed by the programmer and often uses an integer index or a node (depending on the data structure) to keep track of its position. On paper it is slower than a regular for-loop, a least for \"linear\" structures like arrays and Lists but it provides greater abstraction.",
                "This looks crazy but hey it worksThis works. Magic",
                "I think this will work:",
                "The code would be:",
                "Using forEach:Response:PS: You need a Array (int[] numbers), and import java.util.Arrays;"
            ]
        },
        {
            "tag": "remove_array",
            "patterns": [
                "How can I remove a specific item from an array?",
                "Remove item in array",
                "Remove an item in an array"
            ],
            "responses": [
                "Find the index of the array element you want to remove using indexOf, and then remove that index with splice.The splice() method changes the contents of an array by removing\nexisting elements and/or adding new elements.const array = [2, 5, 9];\n\nconsole.log(array);\n\nconst index = array.indexOf(5);\nif (index > -1) { // only splice array when item is found\n  array.splice(index, 1); // 2nd parameter means remove one item only\n}\n\n// array = [2, 9]\nconsole.log(array);The second parameter of splice is the number of elements to remove. Note that splice modifies the array in place and returns a new array containing the elements that have been removed.For the reason of completeness, here are functions. The first function removes only a single occurrence (i.e. removing the first match of 5 from [2,5,9,1,5,8,5]), while the second function removes all occurrences:function removeItemOnce(arr, value) {\n  var index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n  }\n  return arr;\n}\n\nfunction removeItemAll(arr, value) {\n  var i = 0;\n  while (i < arr.length) {\n    if (arr[i] === value) {\n      arr.splice(i, 1);\n    } else {\n      ++i;\n    }\n  }\n  return arr;\n}\n// Usage\nconsole.log(removeItemOnce([2,5,9,1,5,8,5], 5))\nconsole.log(removeItemAll([2,5,9,1,5,8,5], 5))In TypeScript, these functions can stay type-safe with a type parameter:",
                "Edited on 2016 OctoberIn this code example I use array.filter(...) function to remove unwanted items from an array. This function doesn't change the original array and creates a new one. If your browser doesn't support this function (e.g. Internet Explorer before version 9, or Firefox before version 1.5), consider polyfilling with core-js.IMPORTANT ECMAScript 6 () => {} arrow function syntax is not supported in Internet Explorer at all, Chrome before version 45, Firefox before version 22, and Safari before version 10. To use ECMAScript 6 syntax in old browsers you can use BabelJS.An additional advantage of this method is that you can remove multiple itemsIMPORTANT array.includes(...) function is not supported in Internet Explorer at all, Chrome before version 47, Firefox before version 43, Safari before version 9, and Edge before version 14 but you can polyfill with core-js.If the \"This-Binding Syntax\" proposal is ever accepted, you'll be able to do this:Try it yourself in BabelJS :)Reference",
                "I don't know how you are expecting array.remove(int) to behave. There are three possibilities I can think of that you might want.To remove an element of an array at an index i:If you want to remove every element with value number from the array:If you just want to make the element at index i no longer exist, but you don't want the indexes of the other elements to change:",
                "It depends on whether you want to keep an empty spot or not.If you do want an empty slot:If you don't want an empty slot:And if you need the value of that item, you can just store the returned array's element:If you want to remove at either end of the array, you can use array.pop() for the last one or array.shift() for the first one (both return the value of the item as well).If you don't know the index of the item, you can use array.indexOf(item) to get it (in a if() to get one item or in a while() to get all of them). array.indexOf(item) returns either the index or -1 if not found.",
                "A friend was having issues in Internet\u00a0Explorer\u00a08 and showed me what he did. I told him it was wrong, and he told me he got the answer here. The current top answer will not work in all browsers (Internet\u00a0Explorer\u00a08 for example), and it will only remove the first occurrence of the item.It loops through the array backwards (since indices and length will change as items are removed) and removes the item if it's found. It works in all browsers.",
                "There are two major approachessplice(): anArray.splice(index, 1);delete: delete anArray[index];Be careful when you use the delete for an array. It is good for deleting attributes of objects, but not so good for arrays. It is better to use splice for arrays.Keep in mind that when you use delete for an array you could get wrong results for anArray.length. In other words, delete would remove the element, but it wouldn't update the value of the length property.You can also expect to have holes in index numbers after using delete, e.g. you could end up with having indexes 1, 3, 4, 8, 9, and 11 and length as it was before using delete. In that case, all indexed for loops would crash, since indexes are no longer sequential.If you are forced to use delete for some reason, then you should use for each loops when you need to loop through arrays. As the matter of fact, always avoid using indexed for loops, if possible. That way the code would be more robust and less prone to problems with indexes.",
                "Array.prototype.removeByValue = function (val) {\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] === val) {\n      this.splice(i, 1);\n      i--;\n    }\n  }\n  return this;\n}\n\nvar fruits = ['apple', 'banana', 'carrot', 'orange'];\nfruits.removeByValue('banana');\n\nconsole.log(fruits);\n// -> ['apple', 'carrot', 'orange']",
                "There isn't any need to use indexOf or splice. However, it performs better if you only want to remove one occurrence of an element.Find and move (move):Use indexOf and splice (indexof):Use only splice (splice):Run-times on Node.js for an array with 1000 elements (averaged over 10,000 runs):indexof is approximately 10 times slower than move. Even if improved by removing the call to indexOf in splice, it performs much worse than move.",
                "This provides a predicate instead of a value.NOTE: it will update the given array, and return the affected rows.",
                "You can do it easily with the filter method:function remove(arrOriginal, elementToRemove){\n    return arrOriginal.filter(function(el){return el !== elementToRemove});\n}\nconsole.log(remove([1, 2, 1, 0, 3, 1, 4], 1));This removes all elements from the array and also works faster than a combination of slice and indexOf.",
                "John Resig posted a good implementation:If you don\u2019t want to extend a global object, you can do something like the following, instead:But the main reason I am posting this is to warn users against the alternative implementation suggested in the comments on that page (Dec 14, 2007):It seems to work well at first, but through a painful process I discovered it fails when trying to remove the second to last element in an array. For example, if you have a 10-element array and you try to remove the 9th element with this:You end up with an 8-element array. I don't know why, but I confirmed John's original implementation doesn't have this problem.",
                "You can use ES6. For example to delete the value '3' in this case:Output :",
                "Underscore.js can be used to solve issues with multiple browsers. It uses in-build browser methods if present. If they are absent like in the case of older Internet\u00a0Explorer versions it uses its own custom methods.A simple example to remove elements from array (from the website):",
                "Using filter is an elegant way to achieve this requirement.\nfilter will not mutate the original array.const num = 3;\nlet arr = [1, 2, 3, 4];\nconst arr2 = arr.filter(x => x !== num);\nconsole.log(arr); // [1, 2, 3, 4]\nconsole.log(arr2); // [1, 2, 4]You can use filter and then assign the result to the original array if you want to achieve a mutation removal behaviour.const num = 3;\nlet arr = [1, 2, 3, 4];\narr = arr.filter(x => x !== num);\nconsole.log(arr); // [1, 2, 4]By the way, filter will remove all of the occurrences matched in the condition (not just the first occurrence) like you can see in the following exampleconst num = 3;\nlet arr = [1, 2, 3, 3, 3, 4];\narr = arr.filter(x => x !== num);\nconsole.log(arr); // [1, 2, 4]In case, you just want to remove the first occurrence, you can use the splice methodconst num = 3;\nlet arr = [1, 2, 3, 3, 3, 4];\narr.splice(arr.indexOf(num), 1);\nconsole.log(arr); // [1, 2, 3, 3, 4]",
                "Here are a few ways to remove an item from an array using JavaScript.All the method described do not mutate the original array, and instead create a new one.Suppose you have an array, and you want to remove an item in position i.One method is to use slice():const items = ['a', 'b', 'c', 'd', 'e', 'f']\nconst i = 3\nconst filteredItems = items.slice(0, i).concat(items.slice(i+1, items.length))\n\nconsole.log(filteredItems)slice() creates a new array with the indexes it receives. We simply create a new array, from start to the index we want to remove, and concatenate another array from the first position following the one we removed to the end of the array.In this case, one good option is to use filter(), which offers a more declarative approach:const items = ['a', 'b', 'c', 'd', 'e', 'f']\nconst valueToRemove = 'c'\nconst filteredItems = items.filter(item => item !== valueToRemove)\n\nconsole.log(filteredItems)This uses the ES6 arrow functions. You can use the traditional functions to support older browsers:const items = ['a', 'b', 'c', 'd', 'e', 'f']\nconst valueToRemove = 'c'\nconst filteredItems = items.filter(function(item) {\n  return item !== valueToRemove\n})\n\nconsole.log(filteredItems)or you can use Babel and transpile the ES6 code back to ES5 to make it more digestible to old browsers, yet write modern JavaScript in your code.What if instead of a single item, you want to remove many items?Let's find the simplest solution.You can just create a function and remove items in series:const items = ['a', 'b', 'c', 'd', 'e', 'f']\n\nconst removeItem = (items, i) =>\n  items.slice(0, i-1).concat(items.slice(i, items.length))\n\nlet filteredItems = removeItem(items, 3)\nfilteredItems = removeItem(filteredItems, 5)\n//[\"a\", \"b\", \"c\", \"d\"]\n\nconsole.log(filteredItems)You can search for inclusion inside the callback function:const items = ['a', 'b', 'c', 'd', 'e', 'f']\nconst valuesToRemove = ['c', 'd']\nconst filteredItems = items.filter(item => !valuesToRemove.includes(item))\n//\u00a0[\"a\", \"b\", \"e\", \"f\"]\n\nconsole.log(filteredItems)splice() (not to be confused with slice()) mutates the original array, and should be avoided.(originally posted on my site https://flaviocopes.com/how-to-remove-item-from-array/)",
                "If you want a new array with the deleted positions removed, you can always delete the specific element and filter out the array. It might need an extension of the array object for browsers that don't implement the filter method, but in the long term it's easier since all you do is this:It should display [1, 2, 3, 4, 6].",
                "Check out this code. It works in every major browser.remove_item = function(arr, value) {\n var b = '';\n for (b in arr) {\n  if (arr[b] === value) {\n   arr.splice(b, 1);\n   break;\n  }\n }\n return arr;\n};\n\nvar array = [1,3,5,6,5,9,5,3,55]\nvar res = remove_item(array,5);\nconsole.log(res)",
                "Removing a particular element/string from an array can be done in a one-liner:where:theArray: the array you want to remove something particular fromstringToRemoveFromArray: the string you want to be removed and 1 is the number of elements you want to remove.NOTE: If \"stringToRemoveFromArray\" is not located in the array, this will remove the last element of the array.It's always good practice to check if the element exists in your array first, before removing it.Depending if you have newer or older version of Ecmascript running on your client's computers:ORWhere '3' is the value you want to be removed from the array.\nThe array would then become : ['1','2','4','5','6']",
                "This post summarizes common approaches to element removal from an array as of ECMAScript 2019 (ES10).| In-place: Yes | \n| Removes duplicates: Yes(loop), No(indexOf) | \n| By value / index: By index |If you know the value you want to remove from an array you can use the splice method. First, you must identify the index of the target item. You then use the index as the start element and remove just one element.| In-place: No | \n| Removes duplicates: Yes | \n| By value / index: By value |The specific element can be filtered out from the array, by providing a filtering function. Such function is then called for every element in the array.| In-place: Yes/No (Depends on implementation) | \n| Removes duplicates: Yes/No (Depends on implementation) | \n| By value / index: By index / By value (Depends on implementation) |The prototype of Array can be extended with additional methods. Such methods will be then available to use on created arrays.Note: Extending prototypes of objects from the standard library of JavaScript (like Array) is considered by some as an antipattern.| In-place: Yes | \n| Removes duplicates: No | \n| By value / index: By index |Using the delete operator does not affect the length property. Nor does it affect the indexes of subsequent elements. The array becomes sparse, which is a fancy way of saying the deleted item is not removed but becomes undefined.The delete operator is designed to remove properties from JavaScript objects, which arrays are objects.| In-place: No | \n| Removes duplicates: Yes | \n| By value / index: By value |ES10 introduced Object.fromEntries, which can be used to create the desired Array from any Array-like object and filter unwanted elements during the process.| In-place: Yes | \n| Removes duplicates: No | \n| By value / index: N/A |JavaScript Array elements can be removed from the end of an array by setting the length property to a value less than the current value. Any element whose index is greater than or equal to the new length will be removed.| In-place: Yes | \n| Removes duplicates: No | \n| By value / index: N/A |The pop method removes the last element of the array, returns that element, and updates the length property. The pop method modifies the array on which it is invoked, This means unlike using delete the last element is removed completely and the array length reduced.| In-place: Yes | \n| Removes duplicates: No | \n| By value / index: N/A |The .shift() method works much like the pop method except it removes the first element of a JavaScript array instead of the last. When the element is removed the remaining elements are shifted down.| In-place: Yes | \n| Removes duplicates: N/A | \n| By value / index: N/A |The fastest technique is to set an array variable to an empty array.Alternatively technique from 2.1.1 can be used by setting length to 0.",
                "You can use lodash _.pull (mutate array), _.pullAt (mutate array) or _.without (does't mutate array),",
                "ES6 & without mutation:  (October 2016)const removeByIndex = (list, index) =>\r\n      [\r\n        ...list.slice(0, index),\r\n        ...list.slice(index + 1)\r\n      ];\r\n         \r\noutput = removeByIndex([33,22,11,44],1) //=> [33,11,44]\r\n      \r\nconsole.log(output)",
                "Today (2019-12-09) I conduct performance tests on macOS v10.13.6 (High Sierra) for chosen solutions. I show delete (A), but I do not use it in comparison with other methods, because it left empty space in the array.The conclusionsIn tests, I remove the middle element from the array in different ways. The A, C solutions are in-place. The B, D, E, F, G, H solutions are immutable.Results for an array with 10 elementsIn Chrome the array.splice (C) is the fastest in-place solution. The array.filter (D) is the fastest immutable solution. The slowest is array.slice (F). You can perform the test on your machine here.Results for an array with 1.000.000 elementsIn Chrome the array.splice (C) is the fastest in-place solution (the delete (C) is similar fast - but it left an empty slot in the array (so it does not perform a 'full remove')). The array.slice-splice (H) is the fastest immutable solution. The slowest is array.filter (D and E). You can perform the test on your machine here.var a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar log = (letter,array) => console.log(letter, array.join `,`);\n\nfunction A(array) {\n  var index = array.indexOf(5);\n  delete array[index];\n  log('A', array);\n}\n\nfunction B(array) {\n  var index = array.indexOf(5);\n  var arr = Array.from(array);\n  arr.splice(index, 1)\n  log('B', arr);\n}\n\nfunction C(array) {\n  var index = array.indexOf(5);\n  array.splice(index, 1);\n  log('C', array);\n}\n\nfunction D(array) {\n  var arr = array.filter(item => item !== 5)\n  log('D', arr);\n}\n\nfunction E(array) {\n  var index = array.indexOf(5);\n  var arr = array.filter((item, i) => i !== index)\n  log('E', arr);\n}\n\nfunction F(array) {\n  var index = array.indexOf(5);\n  var arr = array.slice(0, index).concat(array.slice(index + 1))\n  log('F', arr);\n}\n\nfunction G(array) {\n  var index = array.indexOf(5);\n  var arr = [...array.slice(0, index), ...array.slice(index + 1)]\n  log('G', arr);\n}\n\nfunction H(array) {\n  var index = array.indexOf(5);\n  var arr = array.slice(0);\n  arr.splice(index, 1);\n  log('H', arr);\n}\n\nA([...a]);\nB([...a]);\nC([...a]);\nD([...a]);\nE([...a]);\nF([...a]);\nG([...a]);\nH([...a]);\nThis snippet only presents code used in performance tests - it does not perform tests itself.Comparison for browsers: Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0",
                "OK, for example you have the array below:And we want to delete number 4. You can simply use the below code:If you are reusing this function, you write a reusable function which will be attached to the native array function like below:But how about if you have the below array instead with a few [5]s in the array?We need a loop to check them all, but an easier and more efficient way is using built-in JavaScript functions, so we write a function which use a filter like below instead:Also there are third-party libraries which do help you to do this, like Lodash or Underscore. For more information, look at lodash _.pull, _.pullAt or _.without.",
                "I'm pretty new to JavaScript and needed this functionality. I merely wrote this:Then when I want to use it:Output - As expected.\n[\"item1\", \"item1\"]You may have different needs than I, so you can easily modify it to suit them. I hope this helps someone.",
                "I want to answer based on ECMAScript\u00a06. Assume you have an array like below:If you want to delete at a special index like 2, write the below code:But if you want to delete a special item like 3 and you don't know its index, do like below:Hint: please use an arrow function for filter callback unless you will get an empty array.",
                "If you have complex objects in the array you can use filters? \nIn situations where $.inArray or array.splice is not as easy to use. Especially if the objects are perhaps shallow in the array.E.g. if you have an object with an Id field and you want the object removed from an array:",
                "Update: This method is recommended only if you cannot use ECMAScript 2015 (formerly known as ES6). If you can use it, other answers here provide much neater implementations.This gist here will solve your problem, and also deletes all occurrences of the argument instead of just 1 (or a specified value).Usage:",
                "You should never mutate your array as this is against the functional programming pattern. You can create a new array without referencing the one you want to change data of using the ECMAScript\u00a06 method filter;Suppose you want to remove 5 from the array, you can simply do it like this:This will give you a new array without the value you wanted to remove. So the result will be:For further understanding you can read the MDN documentation on Array.filter.",
                "A more modern, ECMAScript 2015 (formerly known as Harmony or ES 6) approach. Given:Then:Yielding:You can use Babel and a polyfill service to ensure this is well supported across browsers.",
                "You can do a backward loop to make sure not to screw up the indexes, if there are multiple instances of the element.var myElement = \"chocolate\";\nvar myArray = ['chocolate', 'poptart', 'poptart', 'poptart', 'chocolate', 'poptart', 'poptart', 'chocolate'];\n\n/* Important code */\nfor (var i = myArray.length - 1; i >= 0; i--) {\n  if (myArray[i] == myElement) myArray.splice(i, 1);\n}\nconsole.log(myArray);"
            ]
        },
        {
            "tag": "jQuery",
            "patterns": [
                "How do I check if an element is hidden in jQuery?",
                "jQuery hidden element",
                "hidden element in jQuery",
                "Check for hidden element"
            ],
            "responses": [
                "Since the question refers to a single element, this code might be more suitable:It is the same as twernt's suggestion, but applied to a single element; and it matches the algorithm recommended in the jQuery FAQ.We use jQuery's is() to check the selected element with another element, selector or any jQuery object. This method traverses along the DOM elements to find a match, which satisfies the passed parameter. It will return true if there is a match, otherwise return false.",
                "You can use the hidden selector:And the visible selector:",
                "The above method does not consider the visibility of the parent. To consider the parent as well, you should use .is(\":hidden\") or .is(\":visible\").For example,The above method will consider div2 visible while :visible not. But the above might be useful in many cases, especially when you need to find if there is any error divs visible in the hidden parent because in such conditions :visible will not work.",
                "None of these answers address what I understand to be the question, which is what I was searching for, \"How do I handle items that have visibility: hidden?\". Neither :visible nor :hidden will handle this, as they are both looking for display per the documentation.  As far as I could determine, there is no selector to handle CSS visibility.  Here is how I resolved it (standard jQuery selectors, there may be a more condensed syntax):",
                "From How do I determine the state of a toggled element?You can determine whether an element is collapsed or not by using the :visible and :hidden selectors.If you're simply acting on an element based on its visibility, you can just include :visible or :hidden in the selector expression. For example:",
                "Often when checking if something is visible or not, you are going to go right ahead immediately and do something else with it. jQuery chaining makes this easy.So if you have a selector and you want to perform some action on it only if is visible or hidden, you can use filter(\":visible\") or filter(\":hidden\") followed by chaining it with the action you want to take.So instead of an if statement, like this:Or more efficient, but even uglier:You can do it all in one line:",
                "The :visible selector according to the jQuery documentation:Elements with visibility: hidden or opacity: 0 are considered to be visible, since they still consume space in the layout.This is useful in some cases and useless in others, because if you want to check if the element is visible (display != none), ignoring the parents visibility, you will find that doing .css(\"display\") == 'none' is not only faster, but will also return the visibility check correctly.If you want to check visibility instead of display, you should use: .css(\"visibility\") == \"hidden\".Also take into consideration the additional jQuery notes:Because :visible is a jQuery extension and not part of the CSS specification, queries using :visible cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :visible to select elements, first select the elements using a pure CSS selector, then use .filter(\":visible\").Also, if you are concerned about performance, you should check Now you see me\u2026 show/hide performance (2010-05-04). And use other methods to show and hide elements.",
                "How element visibility and jQuery works;An element could be hidden with display:none, visibility:hidden or opacity:0. The difference between those methods:opacity:0 hides the element as \"visibility:hidden\", and it still takes up space in the layout; the only difference is that opacity lets one to make an element partly transparent;Useful jQuery toggle methods:",
                "This works for me, and I am using show() and hide() to make my div hidden/visible:",
                "You can also do this using plain JavaScript:Notes:Works everywhereWorks for nested elementsWorks for CSS and inline stylesDoesn't require a framework",
                "I would use CSS class .hide { display: none!important; }.For hiding/showing, I call .addClass(\"hide\")/.removeClass(\"hide\"). For checking visibility, I use .hasClass(\"hide\").It's a simple and clear way to check/hide/show elements, if you don't plan to use .toggle() or .animate() methods.",
                "Demo Link$('#clickme').click(function() {\n  $('#book').toggle('slow', function() {\n    // Animation complete.\n    alert($('#book').is(\":visible\")); //<--- TRUE if Visible False if Hidden\n  });\n});\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"https://upload.wikimedia.org/wikipedia/commons/8/87/Google_Chrome_icon_%282011%29.png\" alt=\"\" width=\"300\"/>Source (from my blog):Blogger Plug n Play - jQuery Tools and Widgets: How to See if Element is hidden or Visible Using jQuery",
                "ebdiv should be set to style=\"display:none;\". It works for both show and hide:",
                "One can simply use the hidden or visible attribute, like:Or you can simplify the same with is as follows.",
                "Another answer you should put into consideration is if you are hiding an element, you should use jQuery, but instead of actually hiding it, you remove the whole element, but you copy its HTML content and the tag itself into a jQuery variable, and then all you need to do is test if there is such a tag on the screen, using the normal if (!$('#thetagname').length).",
                "When testing an element against :hidden selector in jQuery it should be considered that an absolute positioned element may be recognized as hidden although their child elements are visible.This seems somewhat counter-intuitive in the first place \u2013 though having a closer look at the jQuery documentation gives the relevant information:Elements can be considered hidden for several reasons: [...] Their width and height are explicitly set to 0. [...]So this actually makes sense in regards to the box-model and the computed style for the element. Even if width and height are not set explicitly to 0 they may be set implicitly.Have a look at the following example:console.log($('.foo').is(':hidden')); // true\r\nconsole.log($('.bar').is(':hidden')); // false\n.foo {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 10px;\r\n  background: #ff0000;\r\n}\r\n\r\n.bar {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 10px;\r\n  width: 20px;\r\n  height: 20px;\r\n  background: #0000ff;\r\n}\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n<div class=\"foo\">\r\n  <div class=\"bar\"></div>\r\n</div>Update for jQuery 3.x:With jQuery 3 the described behavior will change! Elements will be considered visible if they have any layout boxes, including those of zero width and/or height.JSFiddle with jQuery 3.0.0-alpha1:http://jsfiddle.net/pM2q3/7/The same JavaScript code will then have this output:",
                "$(document).ready(function() {\n  if ($(\"#checkme:hidden\").length) {\n    console.log('Hidden');\n  }\n});\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<div id=\"checkme\" class=\"product\" style=\"display:none\">\n  <span class=\"itemlist\"><!-- Shows Results for Fish --></span> Category:Fish\n  <br>Product: Salmon Atlantic\n  <br>Specie: Salmo salar\n  <br>Form: Steaks\n</div>",
                "To check if it is not visible I use !:Or the following is also the sam, saving the jQuery selector in a variable to have better performance when you need it multiple times:",
                "Using classes designated for \"hiding\" elements is easy and also one of the most efficient methods. Toggling a class 'hidden' with a Display style of 'none' will perform faster than editing that style directly. I explained some of this pretty thoroughly in Stack Overflow question Turning two elements visible/hidden in the same div.Here is a truly enlightening video of a Google Tech Talk by Google front-end engineer Nicholas Zakas:",
                "After all, none of examples suits me, so I wrote my own.Tests (no support of Internet\u00a0Explorer filter:alpha):a) Check if the document is not hiddenb) Check if an element has zero width / height / opacity or display:none / visibility:hidden in inline stylesc) Check if the center (also because it is faster than testing every pixel / corner) of element is not hidden by other element (and all ancestors, example: overflow:hidden / scroll / one element over another) or screen edgesd) Check if an element has zero width / height / opacity or display:none / visibility:hidden in computed styles (among all ancestors)Tested onAndroid 4.4 (Native browser/Chrome/Firefox), Firefox (Windows/Mac), Chrome (Windows/Mac), Opera (Windows Presto/Mac WebKit), Internet\u00a0Explorer (Internet\u00a0Explorer 5-11 document modes + Internet\u00a0Explorer 8 on a virtual machine), and Safari (Windows/Mac/iOS).How to use:",
                "Example of using the visible check for adblocker is activated:$(document).ready(function(){\r\n  if(!$(\"#ablockercheck\").is(\":visible\"))\r\n    $(\"#ablockermsg\").text(\"Please disable adblocker.\").show();\r\n});\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n<div class=\"ad-placement\" id=\"ablockercheck\"></div>\r\n<div id=\"ablockermsg\" style=\"display: none\"></div>\"ablockercheck\" is a ID which adblocker blocks. So checking it if it is visible you are able to detect if adblocker is turned On.",
                "You need to check both... Display as well as visibility:If we check for $(this).is(\":visible\"), jQuery checks for both the things automatically.",
                "$(document).ready(function() {\n   var visible = $('#tElement').is(':visible');\n\n   if(visible) {\n      alert(\"visible\");\n                    // Code\n   }\n   else\n   {\n      alert(\"hidden\");\n   }\n});\n<script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script>\n\n<input type=\"text\" id=\"tElement\" style=\"display:block;\">Firstname</input>",
                "Simply check visibility by checking for a boolean value, like:I used this code for each function. Otherwise you can use is(':visible') for checking the visibility of an element.",
                "Because Elements with visibility: hidden or opacity: 0 are considered visible, since they still consume space in the layout (as described for jQuery :visible Selector) - we can check if element is really visible in this way:",
                "But what if the element's CSS is like the following?So this answer to Stack Overflow question How to check if an element is off-screen should also be considered.",
                "A function can be created in order to check for visibility/display attributes in order to gauge whether the element is shown in the UI or not.Working Fiddle",
                "Also here's a ternary conditional expression to check the state of the element and then to toggle it:"
            ]
        },
        {
            "tag": "strict",
            "patterns": [
                "What does \"use strict\" do in JavaScript, and what is the reasoning behind it?",
                "What does strict mean?",
                "use strict"
            ],
            "responses": [
                "Inside native ECMAScript modules (with import and export statements) and ES6 classes, strict mode is always enabled and cannot be disabled.This article about Javascript Strict Mode might interest you: John Resig - ECMAScript 5 Strict Mode, JSON, and MoreTo quote some interesting parts:Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions.And:Strict mode helps out in a couple ways:Also note you can apply \"strict mode\" to the whole file... Or you can use it only for a specific function (still quoting from John Resig's article):Which might be helpful if you have to mix old and new code ;-)So, I suppose it's a bit like the \"use strict\" you can use in Perl (hence the name?): it helps you make fewer errors, by detecting more things that could lead to breakages.Strict mode is now supported by all major browsers.",
                "It's a new feature of ECMAScript 5. John Resig wrote up a nice summary of it.It's just a string you put in your JavaScript files (either at the top of your file or inside of a function) that looks like this:Putting it in your code now shouldn't cause any problems with current browsers as it's just a string. It may cause problems with your code in the future if your code violates the pragma.  For instance, if you currently have foo = \"bar\" without defining foo first, your code will start failing...which is a good thing in my opinion.",
                "The statement \"use strict\";  instructs the browser to use the Strict mode, which is a reduced and safer feature set of JavaScript.Disallows global variables. (Catches missing var declarations and typos in variable names)Silent failing assignments will throw error in strict mode (assigning NaN = 5;)Attempts to delete undeletable properties will throw (delete Object.prototype)Requires all property names in an object literal to be unique (var x = {x1: \"1\", x1: \"2\"})Function parameter names must be unique (function sum (x, x) {...})Forbids octal syntax (var x = 023; some devs assume wrongly that a preceding zero does nothing to change the number.)Forbids the with keywordeval in strict mode does not introduce new variablesForbids deleting plain names (delete x;)Forbids binding or assignment of the names eval and arguments in any formStrict mode does not alias properties of the arguments object with the formal parameters. (e.g. in function sum (a,b) { return arguments[0] + b;} This works because arguments[0] is bound to a and so on. ) (See examples section below to understand the difference)arguments.callee is not supported[Ref: Strict mode, Mozilla Developer Network]Examples:",
                "If people are worried about using use strict it might be worth checking out this article:ECMAScript 5 'Strict mode' support in browsers. What does this mean?\nNovoGeek.com - Krishna's weblogIt talks about browser support, but more importantly how to deal with it safely:",
                "A word of caution, all you hard-charging programmers:  applying \"use strict\" to existing code can be hazardous!  This thing is not some feel-good, happy-face sticker that you can slap on the code to make it 'better'.  With the \"use strict\" pragma, the browser will suddenly THROW exceptions in random places that it never threw before just because at that spot you are doing something that default/loose JavaScript happily allows but strict JavaScript abhors!  You may have strictness violations hiding in seldom used calls in your code that will only throw an exception when they do eventually get run - say, in the production environment that your paying customers use!If you are going to take the plunge, it is a good idea to apply \"use strict\" alongside comprehensive unit tests and a strictly configured JSHint build task that will give you some confidence that there is no dark corner of your module that will blow up horribly just because you've turned on Strict Mode.  Or, hey, here's another option:  just don't add \"use strict\" to any of your legacy code, it's probably safer that way, honestly.  DEFINITELY DO NOT add \"use strict\" to any modules you do not own or maintain, like third party modules.I think even though it is a deadly caged animal, \"use strict\" can be good stuff, but you have to do it right.  The best time to go strict is when your project is greenfield and you are starting from scratch. Configure JSHint/JSLint with all the warnings and options cranked up as tight as your team can stomach, get a good build/test/assert system du jour rigged like Grunt+Karma+Chai, and only THEN start marking all your new modules as \"use strict\".  Be prepared to cure lots of niggly errors and warnings.  Make sure everyone understands the gravity by configuring the build to FAIL if JSHint/JSLint produces any violations.My project was not a greenfield project when I adopted \"use strict\".  As a result, my IDE is full of red marks because I don't have \"use strict\" on half my modules, and JSHint complains about that.  It's a reminder to me about what refactoring I should do in the future.  My goal is to be red mark free due to all of my missing \"use strict\" statements, but that is years away now.",
                "The JavaScript strict mode is a feature in ECMAScript 5. You can enable the strict mode by declaring this in the top of your script/function.When a JavaScript engine sees this directive, it will start to interpret the code in a special mode. In this mode, errors are thrown up when certain coding practices that could end up being potential bugs are detected (which is the reasoning behind the strict mode).Consider this example:In their obsession to line up the numeric literals, the developer has inadvertently initialized variable b with an octal literal. Non-strict mode will interpret this as a numeric literal with value 24 (in base 10). However, strict mode will throw an error.For a non-exhaustive list of specialties in strict mode, see this answer.In my new JavaScript application: Absolutely! Strict mode can be used as a whistleblower when you are doing something stupid with your code.In my existing JavaScript code: Probably not! If your existing JavaScript code has statements that are prohibited in strict-mode, the application will simply break. If you want strict mode, you should be prepared to debug and correct your existing code. This is why using 'use strict'; does not suddenly make your code better.Insert a 'use strict'; statement on top of your script:Note that everything in the file myscript.js will be interpreted in strict mode.Or, insert a 'use strict'; statement on top of your function body:Everything in the lexical scope of function doSomething will be interpreted in strict mode. The word lexical scope is important here. For example, if your strict code calls a function of a library that is not strict, only your code is executed in strict mode, and not the called function. See this answer for a better explanation.I found a nice article describing several things that are prohibited in strict mode (note that this is not an exhaustive list):Historically, JavaScript has been confused about how functions\nare scoped. Sometimes they seem to be statically scoped, but some\nfeatures make them behave like they are dynamically scoped. This is\nconfusing, making programs difficult to read and understand.\nMisunderstanding causes bugs. It also is a problem for performance.\nStatic scoping would permit variable binding to happen at compile\ntime, but the requirement for dynamic scope means the binding must be\ndeferred to runtime, which comes with a significant performance\npenalty.Strict mode requires that all variable binding be done statically.\nThat means that the features that previously required dynamic binding\nmust be eliminated or modified. Specifically, the with statement is\neliminated, and the eval function\u2019s ability to tamper with the\nenvironment of its caller is severely restricted.One of the benefits of strict code is that tools like YUI Compressor\ncan do a better job when processing it.JavaScript has implied global variables. If\nyou do not explicitly declare a variable, a global variable is\nimplicitly declared for you. This makes programming easier for\nbeginners because they can neglect some of their basic housekeeping\nchores. But it makes the management of larger programs much more\ndifficult and it significantly degrades reliability. So in strict\nmode, implied global variables are no longer created. You should\nexplicitly declare all of your variables.There are a number of situations that could cause this\nto be bound to the global object. For example, if you forget to\nprovide the new prefix when calling a constructor function, the\nconstructor's this will be bound unexpectedly to the global object, so\ninstead of initializing a new object, it will instead be silently\ntampering with global variables. In these situations, strict mode will\ninstead bind this to undefined, which will cause the constructor to\nthrow an exception instead, allowing the error to be detected much\nsooner.JavaScript has always had read-only properties, but you\ncould not create them yourself until ES5\u2019s Object.createProperty\nfunction exposed that capability. If you attempted to assign a value\nto a read-only property, it would fail silently. The assignment would\nnot change the property\u2019s value, but your program would proceed as\nthough it had. This is an integrity hazard that can cause programs to\ngo into an inconsistent state. In strict mode, attempting to change a\nread-only property will throw an exception.The octal (or base 8) representation of numbers was extremely\nuseful when doing machine-level programming on machines whose word\nsizes were a multiple of 3. You needed octal when working with the CDC\n6600 mainframe, which had a word size of 60 bits. If you could read\noctal, you could look at a word as 20 digits. Two digits represented\nthe op code, and one digit identified one of 8 registers. During the\nslow transition from machine codes to high level languages, it was\nthought to be useful to provide octal forms in programming languages.In C, an extremely unfortunate representation of octalness was\nselected: Leading zero. So in C, 0100 means 64, not 100, and 08 is an\nerror, not 8. Even more unfortunately, this anachronism has been\ncopied into nearly all modern languages, including JavaScript, where\nit is only used to create errors. It has no other purpose. So in\nstrict mode, octal forms are no longer allowed.The arguments pseudo array becomes a little bit more\narray-like in ES5. In strict mode, it loses its callee and caller\nproperties. This makes it possible to pass your arguments to untrusted\ncode without giving up a lot of confidential context. Also, the\narguments property of functions is eliminated.In strict mode, duplicate keys in a function literal will produce a\nsyntax error. A function can\u2019t have two parameters with the same name.\nA function can\u2019t have a variable with the same name as one of its\nparameters. A function can\u2019t delete its own variables. An attempt to\ndelete a non-configurable property now throws an exception. Primitive\nvalues are not implicitly wrapped.ECMAScript 5 adds a list of reserved words. If you use them as variables or arguments, strict mode will throw an error. The reserved words are:implements, interface, let, package, private, protected, public, static, and yield",
                "I strongly recommend every developer to start using strict mode now. There are enough browsers supporting it that strict mode will legitimately help save us from errors we didn\u2019t even know were in your code.Apparently, at the initial stage there will be errors we have never encountered before. To get the full benefit, we need to do proper testing after switching to strict mode to make sure we have caught everything. Definitely we don\u2019t just throw use strict in our code and assume there are no errors. So the churn is that it\u2019s time to start using this incredibly useful language feature to write better code.For example,JSLint is a debugger written by Douglas Crockford. Simply paste in your script, and it\u2019ll quickly scan for any noticeable issues and errors in your code.",
                "I would like to offer a somewhat more founded answer complementing the other answers. I was hoping to edit the most popular answer, but failed. I tried to make it as comprehensive and complete as I could.You can refer to the MDN documentation for more information.\"use strict\" a directive introduced in ECMAScript 5.Directives are similar to statements, yet different.The use strict directive indicates that the following code (in a script or a function) is strict code.\nThe code in the highest level of a script (code that is not in a function) is considered strict code when the script contains a use strict directive.\nThe content of a function is considered strict code when the function itself is defined in a strict code or when the function contains a use strict directive.\nCode that is passed to an eval() method is considered strict code when eval() was called from a strict code or contains the use strict directive itself.The strict mode of ECMAScript 5 is a restricted subset of the JavaScript language, which eliminates relevant deficits of the language and features more stringent error checking and higher security. The following lists the differences between strict mode and normal mode (of which the first three are particularly important):Also when a function is invoked with call() or apply in strict mode, then this is exactly the value of the first argument of the call()or apply() invocation. (In normal mode null and undefined are replaced by the global Object and values, which are not objects, are cast into objects.)In strict mode you will get a TypeError, when you try to assign to readonly properties or to define new properties for a non extensible object. (In normal mode both simply fail without error message.)In strict mode, when passing code to eval(), you cannot declare or define variables or functions in the scope of the caller (as you can do it in normal mode). Instead, a new scope is created for eval() and the variables and functions are within that scope. That scope is destroyed after eval() finishes execution.In strict mode the arguments-object of a function contains a static copy of the values, which are passed to that function. In normal mode the arguments-object has a somewhat \"magical\" behaviour: The elements of the array and the named function parameters reference both the same value.In strict mode you will get a SyntaxError when the delete operator is followed by a non qualified identifier (a variable, function or function parameter). In normal mode the delete expression would do nothing and is evaluated to false.In strict mode you will get a TypeError when you try to delete a non configurable property. (In normal mode the attempt simply fails and the delete expression is evaluated to false).In strict mode it is considered a syntactical error when you try to define several properties with the same name for an object literal. (In normal mode there is no error.)In strict mode it is considered a syntactical error when a function declaration has multiple parameters with the same name. (In normal mode there is no error.)In strict mode octal literals are not allowed (these are literals that start with 0. (In normal mode some implementations do allow octal literals.)In strict mode the identifiers eval and arguments are treated like keywords. You cannot change their value, cannot assign a value to them, and you cannot use them as names for variables, functions, function parameters or identifiers of a catch block.In strict mode are more restrictions on the possibilities to examine the call stack. arguments.caller and arguments.callee cause a TypeError in a function in strict mode. Furthermore, some caller- and arguments properties of functions in strict mode cause a TypeError when you try to read them.",
                "My two cents:One of the goals of strict mode is to allow for faster debugging of issues. It helps the developers by throwing exception when certain wrong things occur that can cause silent & strange behaviour of your webpage. The moment we use  use strict, the code will throw out errors which helps developer to fix it in advance.Few important things which I have learned after using  use strict :Prevents Global Variable Declaration:\"use strict\";\nvar tree1Data = { name: 'Banana Tree',age: 100,leafCount: 100000};\n\nfunction Tree(typeOfTree) {\n    var age;\n    var leafCount;\n\n    age = typeOfTree.age;\n    leafCount = typeOfTree.leafCount;\n    nameoftree = typeOfTree.name;\n};\n\nvar tree1 = new Tree(tree1Data);\nconsole.log(window);Now,this code creates nameoftree in global scope which could be accessed using window.nameoftree. When we implement use strict the code would throw error.Uncaught ReferenceError: nameoftree is not definedEliminates with statement :with statements can't be minified using tools like uglify-js. They're also deprecated and removed from future JavaScript versions.Sample:\"use strict\";\nvar tree1Data = {\n    name: 'Banana Tree',\n    age: 100,\n    leafCount: 100000\n};\n\nfunction Tree(typeOfTree) {\n    var age;\n    var leafCount;\n\n    age = typeOfTree.age;\n    leafCount = typeOfTree.leafCount;\n   // nameoftree = typeOfTree.name;\n\n    for (var i = 0; i < 2; ++i) {\n       // let(leafCount = i) { /*do something*/ }\n    }\n    for (var i = 0; i < 2; ++i) {\n        with(leafCount = i) { /*do something*/ }\n    }\n};\n\nvar tree1 = new Tree(tree1Data);\nconsole.log(window);Prevents Duplicates :When we have duplicate property, it throws an exceptionUncaught SyntaxError: Duplicate data property in object literal not\nallowed in strict mode\"use strict\";\nvar tree1Data = {\n    name: 'Banana Tree',\n    age: 100,\n    leafCount: 100000,\n    name:'Banana Tree'\n};There are few more but I need to gain more knowledge on that.",
                "If you use a browser released in the last year or so then it most likely supports JavaScript Strict mode. Only older browsers around before ECMAScript 5 became the current standard don't support it.The quotes around the command make sure that the code will still work in older browsers as well (although the things that generate a syntax error in strict mode will generally just cause the script to malfunction in some hard to detect way in those older browsers).",
                "When adding \"use strict\";, the following cases will throw a SyntaxError before the script is executing:Paving the way for future ECMAScript versions, using one of the newly reserved keywords (in prevision for ECMAScript 6): implements, interface, let, package, private, protected, public, static, and yield.Declaring function in blocksOctal syntaxthis point to the global object.Declaring twice the same name for a property name in an object literalThis is no longer the case in ECMAScript 6 (bug 1041128).Declaring two function arguments with the same name functionSetting a value to an undeclared variableUsing delete on a variable name delete myVariable;Using eval or arguments as variable or function argument nameSources:Transitioning to strict mode on MDNStrict mode on MDNJavaScript\u2019s Strict Mode and Why You Should Use It on Colin J. Ihrig's blog (archived version)",
                "Strict mode makes several changes to normal JavaScript semantics:eliminates some JavaScript silent errors by changing them\nto throw errors.fixes mistakes that make it difficult for JavaScript\nengines to perform optimizations.prohibits some syntax likely to be defined in future\nversions of ECMAScript.for more information vistit Strict Mode- Javascript",
                "\"Use Strict\"; is an insurance that programmer will not use the loose or the bad properties of JavaScript. It is a guide, just like a ruler will help you make straight lines. \"Use Strict\" will help you do \"Straight coding\".Those that prefer not to use rulers to do their lines straight usually end up in those pages asking for others to debug their code.Believe me. The overhead is negligible compared to poorly designed code. Doug Crockford, who has been a senior JavaScript developer for several years, has a very interesting post here. Personally, I like to return to his site all the time to make sure I don't forget my good practice.Modern JavaScript practice should always evoke the \"Use Strict\"; pragma. The only reason that the ECMA Group has made the \"Strict\" mode optional is to permit less experienced coders access to JavaScript and give then time to adapt to the new and safer coding practices.",
                "Including use strict in the beginning of your all sensitive JavaScript files from this point is a small way to be a better JavaScript programmer and avoid random variables becoming global and things change silently.",
                "Quoting from w3schools:The \"use strict\" directive is new in JavaScript 1.8.5 (ECMAScript\n  version 5).It is not a statement, but a literal expression, ignored by earlier\n  versions of JavaScript.The purpose of \"use strict\" is to indicate that the code should be\n  executed in \"strict mode\".With strict mode, you can not, for example, use undeclared variables.Strict mode makes it easier to write \"secure\" JavaScript.Strict mode changes previously accepted \"bad syntax\" into real errors.As an example, in normal JavaScript, mistyping a variable name creates\n  a new global variable. In strict mode, this will throw an error,\n  making it impossible to accidentally create a global variable.In normal JavaScript, a developer will not receive any error feedback\n  assigning values to non-writable properties.In strict mode, any assignment to a non-writable property, a\n  getter-only property, a non-existing property, a non-existing\n  variable, or a non-existing object, will throw an error.Please refer to http://www.w3schools.com/js/js_strict.asp to know more",
                "\"use strict\" makes JavaScript code to run in strict mode, which basically means everything needs to be defined before use. The main reason for using strict mode is to avoid accidental global uses of undefined methods.Also in strict mode, things run faster, some warnings or silent warnings throw fatal errors, it's better to always use it to make a neater code.\"use strict\" is widely needed to be used in ECMA5, in ECMA6 it's part of JavaScript by default, so it doesn't need to be added if you're using ES6.Look at these statements and examples from MDN:The \"use strict\" Directive The \"use strict\" directive is new in\n  JavaScript 1.8.5 (ECMAScript version 5). It is not a statement, but a\n  literal expression, ignored by earlier versions of JavaScript. The\n  purpose of \"use strict\" is to indicate that the code should be\n  executed in \"strict mode\". With strict mode, you can not, for example,\n  use undeclared variables.Examples of using \"use strict\":\n  Strict mode for functions: Likewise, to invoke strict mode for a\n  function, put the exact statement \"use strict\"; (or 'use strict';) in\n  the function's body before any other statements.1) strict mode in functions2) whole-script strict mode3) Assignment to a non-writable globalYou can read more on MDN.",
                "There's a good talk by some people who were on the ECMAScript committee: Changes to JavaScript, Part 1: ECMAScript 5\" about how incremental use of the \"use strict\" switch allows JavaScript implementers to clean up a lot of the dangerous features of JavaScript without suddenly breaking every website in the world.Of course it also talks about just what a lot of those misfeatures are (were) and how ECMAScript 5 fixes them.",
                "Small examples to compare:Non-strict mode:for (i of [1,2,3]) console.log(i)\r\n    \r\n// output:\r\n// 1\r\n// 2\r\n// 3Strict mode:'use strict';\r\nfor (i of [1,2,3]) console.log(i)\r\n\r\n// output:\r\n// Uncaught ReferenceError: i is not definedNon-strict mode:String.prototype.test = function () {\r\n  console.log(typeof this === 'string');\r\n};\r\n\r\n'a'.test();\r\n\r\n// output\r\n// falseString.prototype.test = function () {\r\n  'use strict';\r\n  \r\n  console.log(typeof this === 'string');\r\n};\r\n\r\n'a'.test();\r\n\r\n// output\r\n// true",
                "Note that use strict was introduced in EcmaScript 5 and was kept since then.Below are the conditions to trigger strict mode in ES6 and ES7:",
                "The main reasons why developers should use \"use strict\" are:Prevents accidental declaration of global variables.Using \"use strict()\" will make sure that variables are declared with var before use. \nEg:The string \"arguments\" cannot be used as a variable:Will restrict uses of keywords as variables. Trying to use them will throw errors.In short will make your code less error prone and in turn will make you write good code.To read more about it you can refer here.",
                "use strict is a way to make your code safer, because you can't use dangerous features that can work not as you expect. And, as was written before, it makes code more strict.",
                "JavaScript \u201cstrict\u201d mode was introduced in ECMAScript 5.Writing \"use strict\"; at the very top of your JS file turns on strict\nsyntax checking. It does the following tasks for us:shows an error if you try to assign to an undeclared variablestops you from overwriting key JS system librariesforbids some unsafe or error-prone language featuresuse strict also works inside of individual functions. It is always a better practice to include use strict in your code.Browser compatibility issue: \nThe \"use\" directives are meant to be backwards-compatible. Browsers that do not support them will just see a string literal that isn't referenced further. So, they will pass over it and move on.",
                "\"use strict\"; is the ECMA effort to make JavaScript a little bit more robust. It brings in JS an attempt to make it at least a little \"strict\" (other languages implement strict rules since the 90s). It actually \"forces\" JavaScript developers to follow some sort of coding best practices.\nStill, JavaScript is very fragile. There is no such thing as typed variables, typed methods, etc.\nI strongly recommend JavaScript developers to learn a more robust language such as Java or ActionScript3, and implement the same best practices in your JavaScript code, it will work better and be easier to debug.",
                "Normally, JavaScript does not follow strict rules, hence increasing chances of errors. After using \"use strict\", the JavaScript code should follow strict set of rules as in other programming languages such as use of terminators, declaration before initialization, etc.If \"use strict\" is used, the code should be written by following a strict set of rules, hence decreasing the chances of errors and ambiguities.",
                "Use Strict is used to show common and repeated errors so that it is handled differently , and changes the way java script runs , such changes are :Prevents accidental globalsNo duplicatesEliminates withEliminates this coercionSafer eval()Errors for immutablesyou can also read this article for the details",
                "\"use strict\"; Defines that JavaScript code should be executed in\n   \"strict mode\".All modern browsers support \"use strict\" except Internet Explorer 9 and lower.DisadvantageIf a developer used a library that was in strict mode, but the developer was used to working in normal mode, they might call some actions on the library that wouldn\u2019t work as expected.Worse, since the developer is in normal mode, they don\u2019t have the advantages of extra errors being thrown, so the error might fail silently.Also, as listed above, strict mode stops you from doing certain things.People generally think that you shouldn\u2019t use those things in the first place, but some developers don\u2019t like the constraint and want to use all the features of the language.For basic example and for reference go through :https://www.tutorialsteacher.com/javascript/javascript-strict",
                "JavaScript was designed and implemented hastily because of the browser wars and bad management. As a result many poor design decisions, un-intuitive syntax and confusing semantics found their way into the language. Strict mode aims to amend some of these mistakes.But fixing these mistakes without creating alternative interpretation breaks backward compatibility. So, \"use strict\" directive creates that alternative interpretation of the code while communicating it to the programmer.For example, this keywords refers to the object in a method definition, like this or self in other languages.this has no purpose outside the method context but all JavaScript functions have this keyword whether they are methods or not:Here this resolves to the global object which does not make sense and serves no purpose because global object is already available in the scope.In strict mode this in a global function resolves to undefined, which is what we expect.Some mistakes can not be fixed even in strict mode because syntax should be valid for older browsers since they ignore \"strict mode\" directive. This is by design.",
                "Strict mode can prevent memory leaks.Please check the function below written in non-strict mode:In this function, we are using a variable called name inside the function. Internally, the compiler will first check if there is any variable declared with that particular name in that particular function scope. Since the compiler understood that there is no such variable, it will check in the outer scope. In our case, it is the global scope. Again, the compiler understood that there is also no variable declared in the global space with that name, so it creates such a variable for us in the global space. Conceptually, this variable will be created in the global scope and will be available in the entire application.Another scenario is that, say, the variable is declared in a child function. In that case, the compiler checks the validity of that variable in the outer scope, i.e., the parent function. Only then it will check in the global space and create a variable for us there.\nThat means additional checks need to be done. This will affect the performance of the application.Now let's write the same function in strict mode.We will get the following error.Here, the compiler throws the reference error. In strict mode, the compiler does not allow us to use the variable without declaring it. So memory leaks can be prevented. In addition, we can write more optimized code.",
                "Strict mode eliminates errors that would be ignored in non-strict mode, thus making javascript \u201cmore secured\u201d.Is it considered among best practices?Yes, It's considered part of the best practices while working with javascript to include Strict mode. This is done by adding the below line of code in your JS file.'use strict';in your code.What does it mean to user agents?Indicating that code should be interpreted in strict mode specifies to user agents like browsers that they should treat code literally as written, and throw an error if the code doesn't make sense.For example: Consider in your .js file you have the following code:Scenario 1: [NO STRICT MODE]Scenario 2: [NO STRICT MODE]So why does the variable name is being printed in both cases?Without strict mode turned on, user agents often go through a series of modifications to problematic code in an attempt to get it to make sense. On the surface, this can seem like a fine thing, and indeed, working outside of strict mode makes it possible for people to get their feet wet with JavaScript code without having all the details quite nailed down. However, as a developer, I don't want to leave a bug in my code, because I know it could come back and bite me later on, and I also just want to write good code. And that's where strict mode helps out.Scenario 3: [STRICT MODE]Additional tip: To maintain code quality using strict mode, you don't need to write this over and again especially if you have multiple .js file. You can enforce this rule globally in eslint rules as follows:Filename: .eslintrc.jsOkay, so what is prevented in strict mode?Using a variable without declaring it will throw an error in strict mode. This is to prevent unintentionally creating global variables throughout your application. The example with printing Chicago covers this in particular.Deleting a variable or a function or an argument is a no-no in strict mode.Duplicating a parameter name is not allowed in strict mode.Reserved words in the Javascript language are not allowed in strict mode. The words are implements interface, let, packages, private, protected, public. static, and yieldFor a more comprehensive list check out the MDN documentation here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode",
                "strict mode enables strict features in the v8 engine. Short example of some features:You can enable it globally by writing:Per function you just include in function:es6 features are enabled (this is browser dependent), for node v4+ this is important.Performance, in some cases, is better.There are more features as well, check here for more!"
            ]
        },
        {
            "tag": "redirect",
            "patterns": [
                "How do I redirect to another webpage?",
                "Redirect to a page",
                "jQuery to redirect",
                "Redirect"
            ],
            "responses": [
                "jQuery is not necessary, and window.location.replace(...) will best simulate an HTTP redirect.window.location.replace(...) is better than using window.location.href, because replace() does not keep the originating page in the session history, meaning the user won't get stuck in a never-ending back-button fiasco.If you want to simulate someone clicking on a link, use\n location.hrefIf you want to simulate an HTTP redirect, use location.replaceFor example:",
                "WARNING: This answer has merely been provided as a possible solution; it is obviously not the best solution, as it requires jQuery. Instead, prefer the pure JavaScript solution.",
                "If you are here because you are losing HTTP_REFERER when redirecting, keep reading:(Otherwise ignore this last part)The following section is for those using HTTP_REFERER as one of many security measures (although it isn't a great protective measure). If you're using Internet\u00a0Explorer\u00a08 or lower, these variables get lost when using any form of JavaScript page redirection (location.href,  etc.).Below we are going to implement an alternative for IE8 & lower so that we don't lose HTTP_REFERER. Otherwise, you can almost always simply use window.location.href.Testing against HTTP_REFERER (URL pasting, session, etc.) can help tell whether a request is legitimate.\n(Note: there are also ways to work-around / spoof these referrers, as noted by droop's link in the comments)Simple cross-browser testing solution (fallback to window.location.href for Internet\u00a0Explorer\u00a09+ and all other browsers)Usage: redirect('anotherpage.aspx');",
                "There are lots of ways of doing this.",
                "This works for every browser:",
                "It would help if you were a little more descriptive in what you are trying to do.  If you are trying to generate paged data, there are some options in how you do this.  You can generate separate links for each page that you want to be able to get directly to.Note that the current page in the example is handled differently in the code and with CSS.If you want the paged data to be changed via AJAX, this is where jQuery would come in.  What you would do is add a click handler to each of the anchor tags corresponding to a different page.  This click handler would invoke some jQuery code that goes and fetches the next page via AJAX and updates the table with the new data.  The example below assumes that you have a web service that returns the new page data.",
                "I also think that location.replace(URL) is the best way, but if you want to notify the search engines about your redirection (they don't analyze JavaScript code to see the redirection) you should add the rel=\"canonical\" meta tag to your website.Adding a noscript section with a HTML refresh meta tag in it, is also a good solution. I suggest you to use this JavaScript redirection tool to create redirections. It also has Internet\u00a0Explorer support to pass the HTTP referrer.Sample code without delay looks like this:",
                "But if someone wants to redirect back to home page then he may use the following snippet.It would be helpful if you have three different environments as development, staging, and production.You can explore this window or window.location object by just putting these words in Chrome Console or Firebug's Console.",
                "JavaScript provides you many methods to retrieve and change the current URL which is displayed in browser's address bar. All these methods uses the Location object, which is  a property of the Window object. You can create a new Location object that has the current URL as follows..Basic Structure of a URLProtocol -- Specifies the protocol name be used to access the resource on the Internet. (HTTP (without SSL) or HTTPS (with SSL))hostname -- Host name specifies the host that owns the resource. For example, www.stackoverflow.com. A server provides services using the name of the host.port -- A port number used to recognize a specific process to which an Internet or other network message is to be forwarded when it arrives at a server.pathname -- The path gives info about the specific resource within the host that the Web client wants to access. For example, stackoverflow.com/index.html.query --  A query string follows the path component, and provides a string of information that the resource can utilize for some purpose (for example, as parameters for a search or as data to be processed).hash -- The anchor portion of a URL, includes the hash sign (#).With these Location object properties you can access all of these URL componentsNow If you want to change a page or redirect the user to some other page you can use the href property of the Location object like thisYou can use the href property of the Location object.Location Object also have these three methodsYou can use assign() and replace methods also to redirect to other pages like theseHow assign() and replace() differs -- The difference between replace() method and assign() method(), is that replace() removes the URL of the current document from the document history, means it is not possible to use the \"back\" button to navigate back to the original document. So Use the assign() method if you want to load a new document, andwant to give the option to navigate back to the original document.You can change the location object href property using jQuery also  like thisAnd hence you can redirect the user to some other url.",
                "Basically jQuery is just a JavaScript framework and for doing some of the things like redirection in this case, you can just use pure JavaScript, so in that case you have 3 options using vanilla JavaScript:1) Using location replace, this will replace the current history of the page, means that it is not possible to use the back button to go back to the original page.2) Using location assign, this will keep the history for you and with using back button, you can go back to the original page:3) I recommend using one of those previous ways, but this could be the third option using pure JavaScript:You can also write a function in jQuery to handle it, but not recommended as it's only one line pure JavaScript function, also you can use all of above functions without window if you are already in the window scope, for example window.location.replace(\"http://stackoverflow.com\"); could be location.replace(\"http://stackoverflow.com\");Also I show them all on the image below:",
                "Should just be able to set using window.location.Example:Here is a past post on the subject: How do I redirect to another webpage?",
                "Before I start, jQuery is a JavaScript library used for DOM manipulation. So you should not be using jQuery for a page redirect.A quote from Jquery.com:While jQuery might run without major issues in older browser versions,\nwe do not actively test jQuery in them and generally do not fix bugs\nthat may appear in them.It was found here:\nhttps://jquery.com/browser-support/So jQuery is not an end-all and be-all solution for backwards compatibility.The following solution using raw JavaScript works in all browsers and have been standard for a long time so you don't need any libraries for cross browser support.This page will redirect to Google after 3000 millisecondsDifferent options are as follows:When using replace, the back button will not go back to the redirect page, as if it was never in the history. If you want the user to be able to go back to the redirect page then use window.location.href or window.location.assign. If you do use an option that lets the user go back to the redirect page, remember that when you enter the redirect page it will redirect you back. So put that into consideration when picking an option for your redirect. Under conditions where the page is only redirecting when an action is done by the user then having the page in the back button history will be okay. But if the page auto redirects then you should use replace so that the user can use the back button without getting forced back to the page the redirect sends.You can also use meta data to run a page redirect as followed.META RefreshMETA LocationBASE HijackingMany more methods to redirect your unsuspecting client to a page they may not wish to go can be found on this page (not one of them is reliant on jQuery):https://code.google.com/p/html5security/wiki/RedirectionMethodsI would also like to point out, people don't like to be randomly redirected. Only redirect people when absolutely needed. If you start redirecting people randomly they will never go to your site again.The next paragraph is hypothetical:You also may get reported as a malicious site. If that happens then when people click on a link to your site the users browser may warn them that your site is malicious. What may also happen is search engines may start dropping your rating if people are reporting a bad experience on your site.Please review Google Webmaster Guidelines about redirects:\nhttps://support.google.com/webmasters/answer/2721217?hl=en&ref_topic=6001971Here is a fun little page that kicks you out of the page.If you combine the two page examples together you would have an infant loop of rerouting that will guarantee that your user will never want to use your site ever again.",
                "You can do that without jQuery as:And if you want only jQuery then you can do it like:",
                "This works with jQuery:",
                "# HTML Page Redirect Using jQuery/JavaScript MethodTry this example code:If you want to give a complete URL as window.location = \"www.google.co.in\";.",
                "Original question: \"How to redirect using jQuery?\", hence the answer implements jQuery >> Complimentary usage case.To just redirect to a page with JavaScript:Or if you need a delay:jQuery allows you to select elements from a web page with ease. You can find anything you want on a page and then use jQuery to add special effects, react to user actions, or show and hide content inside or outside the element you have selected. All these tasks start with knowing how to select an element or an event.Imagine someone wrote a script/plugin with 10000 lines of code. With jQuery you can connect to this code with just a line or two.",
                "So, the question is how to make a redirect page, and not how to redirect to a website?You only need to use JavaScript for this. Here is some tiny code that will create a dynamic redirect page.So say you just put this snippet into a redirect/index.html file on your website you can use it like so.http://www.mywebsite.com/redirect?url=http://stackoverflow.comAnd if you go to that link it will automatically redirect you to stackoverflow.com.Link to DocumentationAnd that's how you make a Simple redirect page with JavaScriptEdit:There is also one thing to note. I have added window.location.replace in my code because I think it suits a redirect page, but, you must know that when using window.location.replace and you get redirected, when you press the back button in your browser it will not got back to the redirect page, and it will go back to the page before it, take a look at this little demo thing.Example:The process: store home => redirect page to google => googleWhen at google: google => back button in browser => store homeSo, if this suits your needs then everything should be fine. If you want to include the redirect page in the browser history replace thiswith",
                "You need to put this line in your code:If you don't have jQuery, go with JavaScript:",
                "On your click function, just add:",
                "Try this:Code snippet of example.",
                "jQuery is not needed. You can do this:It is that easy!The best way to initiate an HTTP request is with document.loacation.href.replace('URL').",
                "First write properly. You want to navigate within an application for another link from your application for another link. Here is the code:And if you want to navigate pages within your application then I also have code, if you want.",
                "You can redirect in jQuery like this:",
                "JavaScript is very extensive. If you want to jump to another page you have three options.As you want to move to another page, you can use any from these if this is your requirement.\nHowever all three options are limited to different situations. Chose wisely according to your requirement.If you are interested in more knowledge about the concept, you can go through further.",
                "In JavaScript and jQuery we can use the following code to redirect the one page to another page:",
                "Please don't kill me, this is a joke. It's a joke. This is a joke.This did \"provide an answer to the question\", in the sense that it asked for a solution \"using jQuery\" which in this case entails forcing it into the equation somehow.Ferrybig apparently needs the joke explained (still joking, I'm sure there are limited options on the review form), so without further ado:Other answers are using jQuery's attr() on the location or window objects unnecessarily.This answer also abuses it, but in a more ridiculous way. Instead of using it to set the location, this uses attr() to retrieve a function that sets the location.The function is named jQueryCode even though there's nothing jQuery about it, and calling a function somethingCode is just horrible, especially when the something is not even a language.The \"85 bytes\" is a reference to Code Golf. Golfing is obviously not something you should do outside of code golf, and furthermore this answer is clearly not actually golfed.Basically, cringe.",
                "Javascript:Jquery:",
                "Here is a time-delay redirection. You can set the delay time to whatever you want:"
            ]
        },
        {
            "tag": "closures",
            "patterns": [
                "How do JavaScript closures work?",
                "What are closures?",
                "Closures"
            ],
            "responses": [
                "A closure is a pairing of:A lexical environment is part of every execution context (stack frame) and is a map between identifiers (i.e. local variable names) and values.Every function in JavaScript maintains a reference to its outer lexical environment. This reference is used to configure the execution context created when a function is invoked. This reference enables code inside the function to \"see\" variables declared outside the function, regardless of when and where the function is called.If a function was called by a function, which in turn was called by another function, then a chain of references to outer lexical environments is created. This chain is called the scope chain.In the following code, inner forms a closure with the lexical environment of the execution context created when foo is invoked, closing over variable secret:function foo() {\n  const secret = Math.trunc(Math.random() * 100)\n  return function inner() {\n    console.log(`The secret number is ${secret}.`)\n  }\n}\nconst f = foo() // `secret` is not directly accessible from outside `foo`\nf() // The only way to retrieve `secret`, is to invoke `f`In other words: in JavaScript, functions carry a reference to a private \"box of state\", to which only they (and any other functions declared within the same lexical environment) have access. This box of the state is invisible to the caller of the function, delivering an excellent mechanism for data-hiding and encapsulation.And remember: functions in JavaScript can be passed around like variables (first-class functions), meaning these pairings of functionality and state can be passed around your program: similar to how you might pass an instance of a class around in C++.If JavaScript did not have closures, then more states would have to be passed between functions explicitly, making parameter lists longer and code noisier.So, if you want a function to always have access to a private piece of state, you can use a closure....and frequently we do want to associate the state with a function. For example, in Java or C++, when you add a private instance variable and a method to a class, you are associating the state with functionality.In C and most other common languages, after a function returns, all the local variables are no longer accessible because the stack-frame is destroyed. In JavaScript, if you declare a function within another function, then the local variables of the outer function can remain accessible after returning from it. In this way, in the code above, secret remains available to the function object inner, after it has been returned from foo.Closures are useful whenever you need a private state associated with a function. This is a very common scenario - and remember: JavaScript did not have a class syntax until 2015, and it still does not have a private field syntax. Closures meet this need.In the following code, the function toString closes over the details of the car.function Car(manufacturer, model, year, color) {\n  return {\n    toString() {\n      return `${manufacturer} ${model} (${year}, ${color})`\n    }\n  }\n}\n\nconst car = new Car('Aston Martin', 'V8 Vantage', '2012', 'Quantum Silver')\nconsole.log(car.toString())In the following code, the function inner closes over both fn and args.function curry(fn) {\n  const args = []\n  return function inner(arg) {\n    if(args.length === fn.length) return fn(...args)\n    args.push(arg)\n    return inner\n  }\n}\n\nfunction add(a, b) {\n  return a + b\n}\n\nconst curriedAdd = curry(add)\nconsole.log(curriedAdd(2)(3)()) // 5In the following code, function onClick closes over variable BACKGROUND_COLOR.const $ = document.querySelector.bind(document)\nconst BACKGROUND_COLOR = 'rgba(200, 200, 242, 1)'\n\nfunction onClick() {\n  $('body').style.background = BACKGROUND_COLOR\n}\n\n$('button').addEventListener('click', onClick)\n<button>Set background color</button>In the following example, all the implementation details are hidden inside an immediately executed function expression. The functions tick and toString close over the private state and functions they need to complete their work. Closures have enabled us to modularize and encapsulate our code.let namespace = {};\n\n(function foo(n) {\n  let numbers = []\n\n  function format(n) {\n    return Math.trunc(n)\n  }\n\n  function tick() {\n    numbers.push(Math.random() * 100)\n  }\n\n  function toString() {\n    return numbers.map(format)\n  }\n\n  n.counter = {\n    tick,\n    toString\n  }\n}(namespace))\n\nconst counter = namespace.counter\ncounter.tick()\ncounter.tick()\nconsole.log(counter.toString())This example shows that the local variables are not copied in the closure: the closure maintains a reference to the original variables themselves. It is as though the stack-frame stays alive in memory even after the outer function exits.function foo() {\n  let x = 42\n  let inner = () => console.log(x)\n  x = x + 1\n  return inner\n}\n\nfoo()() // logs 43In the following code, three methods log, increment, and update all close over the same lexical environment.And every time createObject is called, a new execution context (stack frame) is created and a completely new variable x, and a new set of functions (log etc.) are created, that close over this new variable.function createObject() {\n  let x = 42;\n  return {\n    log() { console.log(x) },\n    increment() { x++ },\n    update(value) { x = value }\n  }\n}\n\nconst o = createObject()\no.increment()\no.log() // 43\no.update(5)\no.log() // 5\nconst p = createObject()\np.log() // 42If you are using variables declared using var, be careful you understand which variable you are closing over. Variables declared using var are hoisted. This is much less of a problem in modern JavaScript due to the introduction of let and const.In the following code, each time around the loop, a new function inner is created, which closes over i. But because var i is hoisted outside the loop, all of these inner functions close over the same variable, meaning that the final value of i (3) is printed, three times.function foo() {\n  var result = []\n  for (var i = 0; i < 3; i++) {\n    result.push(function inner() { console.log(i) } )\n  }\n\n  return result\n}\n\nconst result = foo()\n// The following will print `3`, three times...\nfor (var i = 0; i < 3; i++) {\n  result[i]() \n}",
                "Every function in JavaScript maintains a link to its outer lexical environment. A lexical environment is a map of all the names (eg. variables, parameters) within a scope, with their values.So, whenever you see the function keyword, code inside that function has access to variables declared outside the function.function foo(x) {\r\n  var tmp = 3;\r\n\r\n  function bar(y) {\r\n    console.log(x + y + (++tmp)); // will log 16\r\n  }\r\n\r\n  bar(10);\r\n}\r\n\r\nfoo(2);This will log 16 because function bar closes over the parameter x and the variable tmp, both of which exist in the lexical environment of outer function foo.Function bar, together with its link with the lexical environment of function foo is a closure.A function doesn't have to return in order to create a closure. Simply by virtue of its declaration, every function closes over its enclosing lexical environment, forming a closure.function foo(x) {\r\n  var tmp = 3;\r\n\r\n  return function (y) {\r\n    console.log(x + y + (++tmp)); // will also log 16\r\n  }\r\n}\r\n\r\nvar bar = foo(2);\r\nbar(10); // 16\r\nbar(10); // 17The above function will also log 16, because the code inside bar can still refer to argument x and variable tmp, even though they are no longer directly in scope.However, since tmp is still hanging around inside bar's closure, it is available to be incremented. It will be incremented each time you call bar.The simplest example of a closure is this:var a = 10;\r\n\r\nfunction test() {\r\n  console.log(a); // will output 10\r\n  console.log(b); // will output 6\r\n}\r\nvar b = 6;\r\ntest();When a JavaScript function is invoked, a new execution context ec is created. Together with the function arguments and the target object, this execution context also receives a link to the lexical environment of the calling execution context, meaning the variables declared in the outer lexical environment (in the above example, both a and b) are available from ec.Every function creates a closure because every function has a link to its outer lexical environment.Note that variables themselves are visible from within a closure, not copies.",
                "FOREWORD: this answer was written when the question was:Like the old Albert said : \"If you can't explain it to a six-year old, you really don't understand it yourself.\u201d. Well I tried to explain JS closures to a 27 years old friend and completely failed.Can anybody consider that I am 6 and strangely interested in that subject ?I'm pretty sure I was one of the only people that attempted to take the initial question literally. Since then, the question has mutated several times, so my answer may now seem incredibly silly & out of place. Hopefully the general idea of the story remains fun for some.I'm a big fan of analogy and metaphor when explaining difficult concepts, so let me try my hand with a story.Once upon a time:There was a princess...She lived in a wonderful world full of adventures. She met her Prince Charming, rode around her world on a unicorn, battled dragons, encountered talking animals, and many other fantastical things.But she would always have to return back to her dull world of chores and grown-ups.And she would often tell them of her latest amazing adventure as a princess.But all they would see is a little girl......telling stories about magic and fantasy.And even though the grown-ups knew of real princesses, they would never believe in the unicorns or dragons because they could never see them. The grown-ups said that they only existed inside the little girl's imagination.But we know the real truth; that the little girl with the princess inside......is really a princess with a little girl inside.",
                "Taking the question seriously, we should find out what a typical 6-year-old is capable of cognitively, though admittedly, one who is interested in JavaScript is not so typical.On  Childhood Development: 5 to 7 Years  it says:Your child will be able to follow two-step directions. For example, if you say to your child, \"Go to the kitchen and get me a trash bag\" they will be able to remember that direction.We can use this example to explain closures, as follows:The kitchen is a closure that has a local variable, called trashBags.  There is a function inside the kitchen called getTrashBag that gets one trash bag and returns it.We can code this in JavaScript like this:function makeKitchen() {\r\n  var trashBags = ['A', 'B', 'C']; // only 3 at first\r\n\r\n  return {\r\n    getTrashBag: function() {\r\n      return trashBags.pop();\r\n    }\r\n  };\r\n}\r\n\r\nvar kitchen = makeKitchen();\r\n\r\nconsole.log(kitchen.getTrashBag()); // returns trash bag C\r\nconsole.log(kitchen.getTrashBag()); // returns trash bag B\r\nconsole.log(kitchen.getTrashBag()); // returns trash bag AFurther points that explain why closures are interesting:",
                "I need to know how many times a button has been clicked and do something on every third click...// Declare counter outside event handler's scope\nvar counter = 0;\nvar element = document.getElementById('button');\n\nelement.addEventListener(\"click\", function() {\n  // Increment outside counter\n  counter++;\n\n  if (counter === 3) {\n    // Do something every third time\n    console.log(\"Third time's the charm!\");\n\n    // Reset counter\n    counter = 0;\n  }\n});\n<button id=\"button\">Click Me!</button>Now this will work, but it does encroach into the outer scope by adding a variable, whose sole purpose is to keep track of the count. In some situations, this would be preferable as your outer application might need access to this information. But in this case, we are only changing every third click's behavior, so it is preferable to enclose this functionality inside the event handler.var element = document.getElementById('button');\n\nelement.addEventListener(\"click\", (function() {\n  // init the count to 0\n  var count = 0;\n\n  return function(e) { // <- This function becomes the click handler\n    count++; //    and will retain access to the above `count`\n\n    if (count === 3) {\n      // Do something every third time\n      console.log(\"Third time's the charm!\");\n\n      //Reset counter\n      count = 0;\n    }\n  };\n})());\n<button id=\"button\">Click Me!</button>Notice a few things here.In the above example, I am using the closure behavior of JavaScript. This behavior allows any function to have access to the scope in which it was created, indefinitely. To practically apply this, I immediately invoke a function that returns another function, and because the function I'm returning has access to the internal count variable (because of the closure behavior explained above) this results in a private scope for usage by the resulting function... Not so simple? Let's dilute it down...A simple one-line closureAll variables outside the returned function are available to the returned function, but they are not directly available to the returned function object...Get it? So in our primary example, the count variable is contained within the closure and always available to the event handler, so it retains its state from click to click.Also, this private variable state is fully accessible, for both readings and assigning to its private scoped variables.There you go; you're now fully encapsulating this behavior.Full Blog Post (including jQuery considerations)",
                "Closures are hard to explain because they are used to make some behaviour work that everybody intuitively expects to work anyway. I find the best way to explain them (and the way that I learned what they do) is to imagine the situation without them:const makePlus = function(x) {\n    return function(y) { return x + y; };\n}\n\nconst plus5 = makePlus(5);\nconsole.log(plus5(3));What would happen here if JavaScript didn't know closures? Just replace the call in the last line by its method body (which is basically what function calls do) and you get:Now, where's the definition of x? We didn't define it in the current scope. The only solution is to let plus5 carry its scope (or rather, its parent's scope) around. This way, x is well-defined and it is bound to the value 5.",
                "TLDRA closure is a link between a function and its outer lexical (ie. as-written) environment, such that the identifiers (variables, parameters, function declarations etc) defined within that environment are visible from within the function, regardless of when or from where the function is invoked.DetailsIn the terminology of the ECMAScript specification, a closure can be said to be implemented by the [[Environment]] reference of every function-object, which points to the lexical environment within which the function is defined.When a function is invoked via the internal [[Call]] method, the [[Environment]] reference on the function-object is copied into the outer environment reference of the environment record of the newly-created execution context (stack frame).In the following example, function f closes over the lexical environment of the global execution context:In the following example, function h closes over the lexical environment of function g, which, in turn, closes over the lexical environment of the global execution context.If an inner function is returned by an outer, then the outer lexical environment will persist after the outer function has returned. This is because the outer lexical environment needs to be available if the inner function is eventually invoked.In the following example, function j closes over the lexical environment of function i, meaning that variable x is visible from inside function j, long after function i has completed execution:function i() {\r\n    var x = 'mochacchino'\r\n    return function j() {\r\n        console.log('Printing the value of x, from within function j: ', x)\r\n    }\r\n} \r\n\r\nconst k = i()\r\nsetTimeout(k, 500) // invoke k (which is j) after 500msIn a closure, the variables in the outer lexical environment themselves are available, not copies.function l() {\r\n  var y = 'vanilla';\r\n\r\n  return {\r\n    setY: function(value) {\r\n      y = value;\r\n    },\r\n    logY: function(value) {\r\n      console.log('The value of y is: ', y);\r\n    }\r\n  }\r\n}\r\n\r\nconst o = l()\r\no.logY() // The value of y is: vanilla\r\no.setY('chocolate')\r\no.logY() // The value of y is: chocolateThe chain of lexical environments, linked between execution contexts via outer environment references, forms a scope chain and defines the identifiers visible from any given function.Please note that in an attempt to improve clarity and accuracy, this answer has been substantially changed from the original.",
                "OK, 6-year-old closures fan. Do you want to hear the simplest example of closure?Let's imagine the next situation: a driver is sitting in a car. That car is inside a plane. Plane is in the airport. The ability of driver to access things outside his car, but inside the plane, even if that plane leaves an airport, is a closure. That's it. When you turn 27, look at the more detailed explanation or at the example below.Here is how I can convert my plane story into the code.var plane = function(defaultAirport) {\r\n\r\n  var lastAirportLeft = defaultAirport;\r\n\r\n  var car = {\r\n    driver: {\r\n      startAccessPlaneInfo: function() {\r\n        setInterval(function() {\r\n          console.log(\"Last airport was \" + lastAirportLeft);\r\n        }, 2000);\r\n      }\r\n    }\r\n  };\r\n  car.driver.startAccessPlaneInfo();\r\n\r\n  return {\r\n    leaveTheAirport: function(airPortName) {\r\n      lastAirportLeft = airPortName;\r\n    }\r\n  }\r\n}(\"Boryspil International Airport\");\r\n\r\nplane.leaveTheAirport(\"John F. Kennedy\");",
                "This is an attempt to clear up several (possible) misunderstandings about closures that appear in some of the other answers.",
                "I wrote a blog post a while back explaining closures. Here's what I said about closures in terms of why you'd want one.Closures are a way to let a function\n  have persistent, private variables -\n  that is, variables that only one\n  function knows about, where it can\n  keep track of info from previous times\n  that it was run.In that sense, they let a function act a bit like an object with private attributes.Full post:So what are these closure thingys?",
                "The original question had a quote:If you can't explain it to a six-year old, you really don't understand it yourself.This is how I'd try to explain it to an actual six-year-old:You know how grown-ups can own a house, and they call it home? When a mom has a child, the child doesn't really own anything, right? But its parents own a house, so whenever someone asks \"Where's your home?\", the child can answer \"that house!\", and point to the house of its parents.A \"Closure\" is the ability of the child to always (even if abroad) be able to refer to its home, even though it's really the parent's who own the house.",
                "The following simple example covers all the main points of JavaScript closures.*Here is a factory that produces calculators that can add and multiply:The key point: Each call to make_calculator creates a new local variable n, which continues to be usable by that calculator's add and multiply functions long after make_calculator returns.If you are familiar with stack frames, these calculators seem strange: How can they keep accessing n after make_calculator returns?  The answer is to imagine that JavaScript doesn't use \"stack frames\", but instead uses \"heap frames\", which can persist after the function call that made them returns.Inner functions like add and multiply, which access variables declared in an outer function**, are called closures.That is pretty much all there is to closures.* For example, it covers all the points in the \"Closures for Dummies\" article given in another answer, except example 6, which simply shows that variables can be used before they are declared, a nice fact to know but completely unrelated to closures. It also covers all the points in the accepted answer, except for the points (1) that functions copy their arguments into local variables (the named function arguments), and (2) that copying numbers creates a new number, but copying an object reference gives you another reference to the same object. These are also good to know but again completely unrelated to closures. It is also very similar to the example in this answer but a bit shorter and less abstract. It does not cover the point of this answer or this comment, which is that JavaScript makes it difficult to plug the current value of a loop variable into your inner function: The \"plugging in\" step can only be done with a helper function that encloses your inner function and is invoked on each loop iteration. (Strictly speaking, the inner function accesses the helper function's copy of the variable, rather than having anything plugged in.) Again, very useful when creating closures, but not part of what a closure is or how it works. There is additional confusion due to closures working differently in functional languages like ML, where variables are bound to values rather than to storage space, providing a constant stream of people who understand closures in a way (namely the \"plugging in\" way) that is simply incorrect for JavaScript, where variables are always bound to storage space, and never to values.** Any outer function, if several are nested, or even in the global context, as this answer points out clearly.",
                "I still think Google's explanation works very well and is concise:*A C# question",
                "I tend to learn better by GOOD/BAD comparisons. I like to see working code followed by non-working code that someone is likely to encounter. I put together a jsFiddle that does a comparison and tries to boil down the differences to the simplest explanations I could come up with.In the above code createClosure(n) is invoked in every iteration of the loop. Note that I named the variable n to highlight that it is a new variable created in a new function scope and is not the same variable as index which is bound to the outer scope.This creates a new scope and n is bound to that scope; this means we have 10 separate scopes, one for each iteration.createClosure(n) returns a function that returns the n within that scope.Within each scope n is bound to whatever value it had when createClosure(n) was invoked so the nested function that gets returned will always return the value of n that it had when createClosure(n) was invoked.In the above code the loop was moved within the createClosureArray() function and the function now just returns the completed array, which at first glance seems more intuitive.What might not be obvious is that since createClosureArray() is only invoked once only one scope is created for this function instead of one for every iteration of the loop.Within this function a variable named index is defined. The loop runs and adds functions to the array that return index. Note that index is defined within the createClosureArray function which only ever gets invoked one time.Because there was only one scope within the createClosureArray() function, index is only bound to a value within that scope. In other words, each time the loop changes the value of index, it changes it for everything that references it within that scope.All of the functions added to the array return the SAME index variable from the parent scope where it was defined instead of 10 different ones from 10 different scopes like the first example. The end result is that all 10 functions return the same variable from the same scope.After the loop finished and index was done being modified the end value was 10, therefore every function added to the array returns the value of the single index variable which is now set to 10.CLOSURES DONE RIGHT\nn = 0\nn = 1\nn = 2\nn = 3\nn = 4\nn = 5\nn = 6\nn = 7\nn = 8\nn = 9CLOSURES DONE WRONG\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10",
                "Wikipedia on closures:In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.Technically, in JavaScript, every function is a closure. It always has an access to variables defined in the surrounding scope.Since scope-defining construction in JavaScript is a function, not a code block like in many other languages, what we usually mean by closure in JavaScript is a function working with nonlocal variables defined in already executed surrounding function.Closures are often used for creating functions with some hidden private data (but it's not always the case).emsThe example above is using an anonymous function, which was executed once. But it does not have to be. It can be named (e.g. mkdb) and executed later, generating a database function each time it is invoked. Every generated function will have its own hidden database object. Another usage example of closures is when we don't return a function, but an object containing multiple functions for different purposes, each of those function having access to the same data.",
                "I put together an interactive JavaScript tutorial to explain how closures work.\nWhat's a Closure?Here's one of the examples:",
                "The children will never forget the secrets they have shared with their parents, even after their parents are\ngone. This is what closures are for functions.The secrets for JavaScript functions are the private variablesEvery time you call it, the local variable \"name\" is created and given the name \"Mary\". And every time the function exits the variable is lost and the name is forgotten.As you may guess, because the variables are re-created every time the function is called, and nobody else will know them, there must be a secret place where they are stored. It could be called Chamber of Secrets or stack or local scope but it doesn't matter. We know they are there, somewhere, hidden in the memory.But, in JavaScript, there is this very special thing that functions which are created inside other functions, can also know the local variables of their parents and keep them as long as they live.So, as long as we are in the parent -function, it can create one or more child functions which do share the secret variables from the secret place.But the sad thing is, if the child is also a private variable of its parent function, it would also die when the parent ends, and the secrets would die with them.So to live, the child has to leave before it's too lateAnd now, even though Mary is \"no longer running\", the memory of her is not lost and her child will always remember her name and other secrets they shared during their time together.So, if you call the child \"Alice\", she will respondThat's all there is to tell.",
                "I do not understand why the answers are so complex here.Here is a closure:Yes. You probably use that many times a day.There is no reason to believe closures are a complex design hack to address specific problems. No, closures are just about using a variable that comes from a higher scope from the perspective of where the function was declared (not run).Now what it allows you to do can be more spectacular, see other answers.",
                "A closure is where an inner function has access to variables in its outer function. That's probably the simplest one-line explanation you can get for closures.",
                "Example for the first point by dlaliberte:A closure is not only created when you return an inner function. In fact, the enclosing function does not need to return at all. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be used immediately. Therefore, the closure of the enclosing function probably already exists at the time that enclosing function was called since any inner function has access to it as soon as it is called.",
                "I know there are plenty of solutions already, but I guess that this small and simple script can be useful to demonstrate the concept:",
                "You're having a sleep over and you invite Dan.\nYou tell Dan to bring one XBox controller.Dan invites Paul.\nDan asks Paul to bring one controller. How many controllers were brought to the party?",
                "The author of Closures has explained closures pretty well, explaining the reason why we need them and also explaining LexicalEnvironment which is necessary to understanding closures. \nHere is the summary:What if a variable is accessed, but it isn\u2019t local? Like here:In this case, the interpreter finds the variable in the\nouter LexicalEnvironment object.The process consists of two steps:When a function is created, it gets a hidden property, named [[Scope]], which references the current LexicalEnvironment.If a variable is read, but can not be found anywhere, an error is generated.Nested functionsFunctions can be nested one inside another, forming a chain of LexicalEnvironments which can also be called a scope chain.So, function g has access to g, a and f.ClosuresA nested function may continue to live after the outer function has finished:Marking up LexicalEnvironments:As we see, this.say is a property in the user object, so it continues to live after User completed.And if you remember, when this.say is created, it (as every function) gets an internal reference this.say.[[Scope]] to the current LexicalEnvironment. So, the LexicalEnvironment of the current User execution stays in memory. All variables of User also are its properties, so they are also carefully kept, not junked as usually.The whole point is to ensure that if the inner function wants to access an outer variable in the future, it is able to do so.To summarize:This is called a closure.",
                "JavaScript functions can access their:If a function accesses its environment, then the function is a closure.Note that outer functions are not required, though they do offer benefits I don't discuss here. By accessing data in its environment, a closure keeps that data alive. In the subcase of outer/inner functions, an outer function can create local data and eventually exit, and yet, if any inner function(s) survive after the outer function exits, then the inner function(s) keep the outer function's local data alive.Example of a closure that uses the global environment:Imagine that the Stack Overflow Vote-Up and Vote-Down button events are implemented as closures, voteUp_click and voteDown_click, that have access to external variables isVotedUp and isVotedDown, which are defined globally. (For simplicity's sake, I am referring to StackOverflow's Question Vote buttons, not the array of Answer Vote buttons.)When the user clicks the VoteUp button, the voteUp_click function checks whether isVotedDown == true to determine whether to vote up or merely cancel a down vote. Function voteUp_click is a closure because it is accessing its environment.All four of these functions are closures as they all access their environment.",
                "As a father of a 6-year-old, currently teaching young children (and a relative novice to coding with no formal education so corrections will be required), I think the lesson would stick best through hands-on play. If the 6-year-old is ready to understand what a closure is, then they are old enough to have a go themselves. I'd suggest pasting the code into jsfiddle.net, explaining a bit, and leaving them alone to concoct a unique song. The explanatory text below is probably more appropriate for a 10 year old.INSTRUCTIONSDATA: Data is a collection of facts. It can be numbers, words, measurements, observations or even just descriptions of things. You can't touch it, smell it or taste it. You can write it down, speak it and hear it. You could use it to create touch smell and taste using a computer. It can be made useful by a computer using code.CODE: All the writing above is called code. It is written in JavaScript.JAVASCRIPT: JavaScript is a language. Like English or French or Chinese are languages. There are lots of languages that are understood by computers and other electronic processors. For JavaScript to be understood by a computer it needs an interpreter. Imagine if a teacher who only speaks Russian comes to teach your class at school. When the teacher says \"\u0432\u0441\u0435 \u0441\u0430\u0434\u044f\u0442\u0441\u044f\", the class would not understand. But luckily you have a Russian pupil in your class who tells everyone this means \"everybody sit down\" - so you all do. The class is like a computer and the Russian pupil is the interpreter. For JavaScript the most common interpreter is called a browser.BROWSER: When you connect to the Internet on a computer, tablet or phone to visit a website, you use a browser. Examples you may know are Internet Explorer, Chrome, Firefox and Safari. The browser can understand JavaScript and tell the computer what it needs to do. The JavaScript instructions are called functions.FUNCTION: A function in JavaScript is like a factory. It might be a little factory with only one machine inside. Or it might contain many other little factories, each with many machines doing different jobs. In a real life clothes factory you might have reams of cloth and bobbins of thread going in and T-shirts and jeans coming out. Our JavaScript factory only processes data, it can't sew, drill a hole or melt metal. In our JavaScript factory data goes in and data comes out.All this data stuff sounds a bit boring, but it is really very cool; we might have a function that tells a robot what to make for dinner. Let's say I invite you and your friend to my house. You like chicken legs best, I like sausages, your friend always wants what you want and my friend does not eat meat.I haven't got time to go shopping, so the function needs to know what we have in the fridge to make decisions. Each ingredient has a different cooking time and we want everything to be served hot by the robot at the same time. We need to provide the function with the data about what we like, the function could 'talk' to the fridge, and the function could control the robot.A function normally has a name, parentheses and braces. Like this:Note that /*...*/ and // stop code being read by the browser.NAME: You can call a function just about whatever word you want. The example \"cookMeal\" is typical in joining two words together and giving the second one a capital letter at the beginning - but this is not necessary. It can't have a space in it, and it can't be a number on its own.PARENTHESES: \"Parentheses\" or () are the letter box on the JavaScript function factory's door or a post box in the street for sending packets of information to the factory. Sometimes the postbox might be marked for example cookMeal(you, me, yourFriend, myFriend, fridge, dinnerTime), in which case you know what data you have to give it.BRACES: \"Braces\" which look like this {} are the tinted windows of our factory. From inside the factory you can see out, but from the outside you can't see in.THE LONG CODE EXAMPLE ABOVEOur code begins with the word function, so we know that it is one! Then the name of the function sing - that's my own description of what the function is about. Then parentheses (). The parentheses are always there for a function. Sometimes they are empty, and sometimes they have something in. This one has a word in: (person). After this there is a brace like this { . This marks the start of the function sing(). It has a partner which marks the end of sing() like this }So this function might have something to do with singing, and might need some data about a person. It has instructions inside to do something with that data.Now, after the function sing(), near the end of the code is the lineVARIABLE: The letters var stand for \"variable\". A variable is like an envelope. On the outside this envelope is marked \"person\". On the inside it contains a slip of paper with the information our function needs, some letters and spaces joined together like a piece of string (it's called a string) that make a phrase reading \"an old lady\". Our envelope could contain other kinds of things like numbers (called integers), instructions (called functions), lists (called arrays). Because this variable is written outside of all the braces {}, and because you can see out through the tinted windows when you are inside the braces, this variable can be seen from anywhere in the code. We call this a 'global variable'.GLOBAL VARIABLE: person is a global variable, meaning that if you change its value from \"an old lady\" to \"a young man\", the person will keep being a young man until you decide to change it again and that any other function in the code can see that it's a young man. Press the F12 button or look at the Options settings to open the developer console of a browser and type \"person\" to see what this value is. Type person=\"a young man\" to change it and then type \"person\" again to see that it has changed.After this we have the lineThis line is calling the function, as if it were calling a dog\"Come on sing, Come and get person!\"When the browser has loaded the JavaScript code an reached this line, it will start the function. I put the line at the end to make sure that the browser has all the information it needs to run it.Functions define actions  - the main function is about singing. It contains a variable called firstPart which applies to the singing about the person that applies to each of the verses of the song: \"There was \" + person + \" who swallowed\". If you type firstPart into the console, you won't get an answer because the variable is locked up in a function - the browser can't see inside the tinted windows of the braces.CLOSURES: The closures are the smaller functions that are inside the big sing() function. The little factories inside the big factory. They each have their own braces which mean that the variables inside them can't be seen from the outside. That's why the names of the variables (creature and result) can be repeated in the closures but with different values. If you type these variable names in the console window, you won't get its value because it's hidden by two layers of tinted windows.The closures all know what the sing() function's variable called firstPart is, because they can see out from their tinted windows.After the closures come the linesThe sing() function will call each of these functions in the order they are given. Then the sing() function's work will be done.",
                "Okay, talking with a 6-year old child, I would possibly use following associations.Imagine - you are playing with your little brothers and sisters in the entire house, and you are moving around with your toys and brought some of them into your older brother's room. After a while your brother returned from the school and went to his room, and he locked inside it, so now you could not access toys left there anymore in a direct way. But you could knock the door and ask your brother for that toys. This is called toy's closure; your brother made it up for you, and he is now into outer scope.Compare with a situation when a door was locked by draft and nobody inside (general function execution), and then some local fire occur and burn down the room (garbage collector:D), and then a new room was build and now you may leave another toys there (new function instance), but never get the same toys which were left in the first room instance.For an advanced child I would put something like the following. It is not perfect, but it makes you feel about what it is:As you can see, the toys left in the room are still accessible via the brother and no matter if the room is locked. Here is a jsbin to play around with it.",
                "A function in JavaScript is not just a reference to a set of instructions (as in C language), but it also includes a hidden data structure which is composed of references to all nonlocal variables it uses (captured variables). Such two-piece functions are called closures. Every function in JavaScript can be considered a closure.Closures are functions with a state. It is somewhat similar to \"this\" in the sense that \"this\" also provides state for a function but function and \"this\" are separate objects (\"this\" is just a fancy parameter, and the only way to bind it permanently to a function is to create a closure). While \"this\" and function always live separately, a function cannot be separated from its closure and the language provides no means to access captured variables.Because all these external variables referenced by a lexically nested function are actually local variables in the chain of its lexically enclosing functions (global variables can be assumed to be local variables of some root function), and every single execution of a function creates new instances of its local variables, it follows that every execution of a function returning (or otherwise transferring it out, such as registering it as a callback) a nested function creates a new closure (with its own potentially unique set of referenced nonlocal variables which represent its execution context).Also, it must be understood that local variables in JavaScript are created not on the stack frame, but on the heap and destroyed only when no one is referencing them. When a function returns, references to its local variables are decremented, but they can still be non-null if during the current execution they became part of a closure and are still referenced by its lexically nested functions (which can happen only if the references to these nested functions were returned or otherwise transferred to some external code).An example:",
                "An answer for a six-year-old (assuming he knows what a function is and what a variable is, and what data is):Functions can return data. One kind of data you can return from a function is another function. When that new function gets returned, all the variables and arguments used in the function that created it don't go away. Instead, that parent function \"closes.\" In other words, nothing can look inside of it and see the variables it used except for the function it returned. That new function has a special ability to look back inside the function that created it and see the data inside of it.Another really simple way to explain it is in terms of scope:Any time you create a smaller scope inside of a larger scope, the smaller scope will always be able to see what is in the larger scope.",
                "Perhaps a little beyond all but the most precocious of six-year-olds, but a few examples that helped make the concept of closure in JavaScript click for me.A closure is a function that has access to another function's scope (its variables and functions). The easiest way to create a closure is with a function within a function; the reason being that in JavaScript a function always has access to its containing function\u2019s scope.function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        alert(outerVar);\r\n    }\r\n    \r\n    innerFunction();\r\n}\r\n\r\nouterFunction();ALERT: monkeyIn the above example, outerFunction is called which in turn calls innerFunction. Note how outerVar is available to innerFunction, evidenced by its correctly alerting the value of outerVar.Now consider the following:function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        return outerVar;\r\n    }\r\n    \r\n    return innerFunction;\r\n}\r\n\r\nvar referenceToInnerFunction = outerFunction();\r\nalert(referenceToInnerFunction());ALERT: monkeyreferenceToInnerFunction is set to outerFunction(), which simply returns a reference to innerFunction. When referenceToInnerFunction is called, it returns outerVar. Again, as above, this demonstrates that innerFunction has access to outerVar, a variable of outerFunction. Furthermore, it is interesting to note that it retains this access even after outerFunction has finished executing.And here is where things get really interesting. If we were to get rid of outerFunction, say set it to null, you might think that referenceToInnerFunction would loose its access to the value of outerVar. But this is not the case.function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        return outerVar;\r\n    }\r\n    \r\n    return innerFunction;\r\n}\r\n\r\nvar referenceToInnerFunction = outerFunction();\r\nalert(referenceToInnerFunction());\r\n\r\nouterFunction = null;\r\nalert(referenceToInnerFunction());ALERT: monkey\nALERT: monkeyBut how is this so? How can referenceToInnerFunction still know the value of outerVar now that outerFunction has been set to null?The reason that referenceToInnerFunction can still access the value of outerVar is because when the closure was first created by placing innerFunction inside of outerFunction, innerFunction added a reference to outerFunction\u2019s scope (its variables and functions) to its scope chain. What this means is that innerFunction has a pointer or reference to all of outerFunction\u2019s variables, including outerVar. So even when outerFunction has finished executing, or even if it is deleted or set to null, the variables in its scope, like outerVar, stick around in memory because of the outstanding reference to them on the part of the innerFunction that has been returned to referenceToInnerFunction. To truly release outerVar and the rest of outerFunction\u2019s variables from memory you would have to get rid of this outstanding reference to them, say by setting referenceToInnerFunction to null as well.//////////Two other things about closures to note. First, the closure will always have access to the last values of its containing function.function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        alert(outerVar);\r\n    }\r\n    \r\n    outerVar = \"gorilla\";\r\n\r\n    innerFunction();\r\n}\r\n\r\nouterFunction();ALERT: gorillaSecond, when a closure is created, it retains a reference to all of its enclosing function\u2019s variables and functions; it doesn\u2019t get to pick and choose. And but so, closures should be used sparingly, or at least carefully, as they can be memory intensive; a lot of variables can be kept in memory long after a containing function has finished executing.",
                "I'd simply point them to the Mozilla Closures page. It's the best, most concise and simple explanation of closure basics and practical usage that I've found. It is highly recommended to anyone learning JavaScript.And yes, I'd even recommend it to a 6-year old -- if the 6-year old is learning about closures, then it's logical they're ready to comprehend the concise and simple explanation provided in the article."
            ]
        },
        {
            "tag": "scope_example",
            "patterns": [
                "var functionName = function() {} vs function functionName() {}",
                "Give an example of scope",
                "Scope example"
            ],
            "responses": [
                "The difference is that functionOne is a function expression and so only defined when that line is reached, whereas functionTwo is a function declaration and is defined as soon as its surrounding function or script is executed (due to hoisting).For example, a function expression:// TypeError: functionOne is not a function\r\nfunctionOne();\r\n\r\nvar functionOne = function() {\r\n  console.log(\"Hello!\");\r\n};And, a function declaration:// Outputs: \"Hello!\"\r\nfunctionTwo();\r\n\r\nfunction functionTwo() {\r\n  console.log(\"Hello!\");\r\n}Historically, function declarations defined within blocks were handled inconsistently between browsers. Strict mode (introduced in ES5) resolved this by scoping function declarations to their enclosing block.'use strict';    \r\n{ // note this block!\r\n  function functionThree() {\r\n    console.log(\"Hello!\");\r\n  }\r\n}\r\nfunctionThree(); // ReferenceError",
                "First I want to correct Greg: function abc(){} is scoped too \u2014 the name abc is defined in the scope where this definition is encountered. Example:Secondly, it is possible to combine both styles:xyz is going to be defined as usual, abc is undefined in all browsers but Internet\u00a0Explorer \u2014 do not rely on it being defined. But it will be defined inside its body:If you want to alias functions on all browsers, use this kind of declaration:In this case, both xyz and abc are aliases of the same object:One compelling reason to use the combined style is the \"name\" attribute of function objects (not supported by Internet\u00a0Explorer). Basically when you define a function likeits name is automatically assigned. But when you define it likeits name is empty \u2014 we created an anonymous function and assigned it to some variable.Another good reason to use the combined style is to use a short internal name to refer to itself, while providing a long non-conflicting name for external users:In the example above we can do the same with an external name, but it'll be too unwieldy (and slower).(Another way to refer to itself is to use arguments.callee, which is still relatively long, and not supported in the strict mode.)Deep down, JavaScript treats both statements differently. This is a function declaration:abc here is defined everywhere in the current scope:Also, it hoisted through a return statement:This is a function expression:xyz here is defined from the point of assignment:Function declaration vs. function expression is the real reason why there is a difference demonstrated by Greg.Fun fact:Personally, I prefer the \"function expression\" declaration because this way I can control the visibility. When I define the function likeI know that I defined the function locally. When I define the function likeI know that I defined it globally providing that I didn't define abc anywhere in the chain of scopes. This style of definition is resilient even when used inside eval(). While the definitiondepends on the context and may leave you guessing where it is actually defined, especially in the case of eval() \u2014 the answer is: It depends on the browser.",
                "Here's the rundown on the standard forms that create functions: (Originally written for another question, but adapted after being moved into the canonical question.)Terms:The quick list:Function Declaration\"Anonymous\" function Expression (which despite the term, sometimes create functions with names)Named function ExpressionAccessor Function Initializer (ES5+)Arrow Function Expression (ES2015+) (which, like anonymous function expressions, don't involve an explicit name, and yet can create functions with names)Method Declaration in Object Initializer (ES2015+)Constructor and Method Declarations in class (ES2015+)The first form is a function declaration, which looks like this:A function declaration is a declaration; it's not a statement or expression. As such, you don't follow it with a ; (although doing so is harmless).A function declaration is processed when execution enters the context in which it appears, before any step-by-step code is executed. The function it creates is given a proper name (x in the example above), and that name is put in the scope in which the declaration appears.Because it's processed before any step-by-step code in the same context, you can do things like this:Until ES2015, the spec didn't cover what a JavaScript engine should do if you put a function declaration inside a control structure like try, if, switch, while, etc., like this:And since they're processed before step-by-step code is run, it's tricky to know what to do when they're in a control structure.Although doing this wasn't specified until ES2015, it was an allowable extension to support function declarations in blocks. Unfortunately (and inevitably), different engines did different things.As of ES2015, the specification says what to do. In fact, it gives three separate things to do:The rules for the loose modes are tricky, but in strict mode, function declarations in blocks are easy: They're local to the block (they have block scope, which is also new in ES2015), and they're hoisted to the top of the block. So:The second common form is called an anonymous function expression:Like all expressions, it's evaluated when it's reached in the step-by-step execution of the code.In ES5, the function this creates has no name (it's anonymous). In ES2015, the function is assigned a name if possible by inferring it from context. In the example above, the name would be y. Something similar is done when the function is the value of a property initializer. (For details on when this happens and the rules, search for SetFunctionName in the the specification\u00a0\u2014 it appears all over the place.)The third form is a named function expression (\"NFE\"):The function this creates has a proper name (w in this case). Like all expressions, this is evaluated when it's reached in the step-by-step execution of the code. The name of the function is not added to the scope in which the expression appears; the name is in scope within the function itself:Note that NFEs have frequently been a source of bugs for JavaScript implementations. IE8 and earlier, for instance, handle NFEs completely incorrectly, creating two different functions at two different times. Early versions of Safari had issues as well. The good news is that current versions of browsers (IE9 and up, current Safari) don't have those issues any more. (But as of this writing, sadly, IE8 remains in widespread use, and so using NFEs with code for the web in general is still problematic.)Sometimes functions can sneak in largely unnoticed; that's the case with accessor functions. Here's an example:Note that when I used the function, I didn't use ()! That's because it's an accessor function for a property. We get and set the property in the normal way, but behind the scenes, the function is called.You can also create accessor functions with Object.defineProperty, Object.defineProperties, and the lesser-known second argument to Object.create.ES2015 brings us the arrow function. Here's one example:See that n => n * 2 thing hiding in the map() call? That's a function.A couple of things about arrow functions:They don't have their own this. Instead, they close over the this of the context where they're defined. (They also close over arguments and, where relevant, super.) This means that the this within them is the same as the this where they're created, and cannot be changed.As you'll have noticed with the above, you don't use the keyword function; instead, you use =>.The n => n * 2 example above is one form of them. If you have multiple arguments to pass the function, you use parens:(Remember that Array#map passes the entry as the first argument, and the index as the second.)In both cases, the body of the function is just an expression; the function's return value will automatically be the result of that expression (you don't use an explicit return).If you're doing more than just a single expression, use {} and an explicit return (if you need to return a value), as normal:The version without { ... } is called an arrow function with an expression body or concise body. (Also: A concise arrow function.) The one with { ... } defining the body is an arrow function with a function body. (Also: A verbose arrow function.)ES2015 allows a shorter form of declaring a property that references a function called a method definition; it looks like this:the almost-equivalent in ES5 and earlier would be:the difference (other than verbosity) is that a method can use super, but a function cannot. So for instance, if you had an object that defined (say) valueOf using method syntax, it could use super.valueOf() to get the value Object.prototype.valueOf would have returned (before presumably doing something else with it), whereas the ES5 version would have to do Object.prototype.valueOf.call(this) instead.That also means that the method has a reference to the object it was defined on, so if that object is temporary (for instance, you're passing it into Object.assign as one of the source objects), method syntax could mean that the object is retained in memory when otherwise it could have been garbage collected (if the JavaScript engine doesn't detect that situation and handle it if none of the methods uses super).ES2015 brings us class syntax, including declared constructors and methods:There are two function declarations above: One for the constructor, which gets the name Person, and one for getFullName, which is a function assigned to Person.prototype.",
                "Speaking about the global context, both, the var statement and a FunctionDeclaration at the end will create a non-deleteable property on the global object, but the value of both can be overwritten.The subtle difference between the two ways is that when the Variable Instantiation process runs (before the actual code execution) all identifiers declared with var will be initialized with undefined, and the ones used by the FunctionDeclaration's will be available since that moment, for example:The assignment of the bar FunctionExpression takes place until runtime.A global property created by a FunctionDeclaration can be overwritten without any problems just like a variable value, e.g.:Another obvious difference between your two examples is that the first function doesn't have a name, but the second has it, which can be really useful when debugging (i.e. inspecting a call stack).About your edited first example (foo = function() { alert('hello!'); };), it is an undeclared assignment, I would highly encourage you to always use the var keyword.With an assignment, without the var statement, if the referenced identifier is not found in the scope chain, it will become a deleteable property of the global object.Also, undeclared assignments throw a ReferenceError on ECMAScript 5 under Strict Mode.A must read:Note: This answer has been merged from another question, in which the major doubt and misconception from the OP was that identifiers declared with a FunctionDeclaration, couldn't be overwritten which is not the case.",
                "The two code snippets you've posted there will, for almost all purposes, behave the same way.However, the difference in behaviour is that with the first variant (var functionOne = function() {}), that function can only be called after that point in the code.With the second variant (function functionTwo()), the function is available to code that runs above where the function is declared.This is because with the first variant, the function is assigned to the variable foo at run time. In the second, the function is assigned to that identifier, foo, at parse time.More technical informationJavaScript has three ways of defining functions.",
                "A better explanation to Greg's answerWhy no error? We were always taught that expressions are executed from top to bottom(??)Function declarations and variable declarations are always moved (hoisted) invisibly to the top of their containing scope by the JavaScript interpreter. Function parameters and language-defined names are, obviously, already there. ben cherryThis means that code like this:Notice that the assignment portion of the declarations were not hoisted. Only the name is hoisted.But in the case with function declarations, the entire function body will be hoisted as well:",
                "Other commenters have already covered the semantic difference of the two variants above. I wanted to note a stylistic difference: Only the \"assignment\" variation can set a property of another object.I often build JavaScript modules with a pattern like this:With this pattern, your public functions will all use assignment, while your private functions use declaration.(Note also that assignment should require a semicolon after the statement, while declaration prohibits it.)",
                "An illustration of when to prefer the first method to the second one is when you need to avoid overriding a function's previous definitions.With, this definition of myfunction will override any previous definition, since it will be done at parse-time.Whiledoes the correct job of defining myfunction only when condition is met.",
                "An important reason is to add one and only one variable as the \"Root\" of your namespace...orThere are many techniques for namespacing. It's become more important with the plethora of JavaScript modules available.Also see How do I declare a namespace in JavaScript?",
                "Hoisting is the JavaScript interpreter\u2019s action of moving all variable and function declarations to the top of the current scope.However, only the actual declarations are hoisted. by leaving assignments where they are.VariableJavascript is called loosely typed language. Which means Javascript variables can hold value of any Data-Type. Javascript automatically takes care of changing the variable-type based on the value/literal provided during runtime.FunctionDefault return value of function is 'undefined', Variable declaration default value also 'undefined'Function DeclarationFunction ExpressionFunction assigned to variable Example:javascript interpreted asYou can check function declaration, expression test over different browser's using jsperf Test RunnerES5 Constructor Function Classes: Function objects created using Function.prototype.bindJavaScript treats functions as first-class objects, so being an object, you can assign properties to a function.ES6 introduced Arrow function: An arrow function expression has a shorter syntax, they are best suited for non-method functions, and they cannot be used as constructors.ArrowFunction : ArrowParameters => ConciseBody.",
                "I'm adding my own answer just because everyone else has covered the hoisting part thoroughly.I've wondered about which way is better for a long while now, and thanks to http://jsperf.com now I know :)Function declarations are faster, and that's what really matters in web dev right? ;)",
                "The following works because function add() is scoped to the nearest block:try {\n  console.log(\"Success: \", add(1, 1));\n} catch(e) {\n  console.log(\"ERROR: \" + e);\n}\n\nfunction add(a, b){\n  return a + b;\n}The following does not work because the variable is called before a function value is assigned to the variable add.try {\n  console.log(\"Success: \", add(1, 1));\n} catch(e) {\n  console.log(\"ERROR: \" + e);\n}\n\nvar add=function(a, b){\n  return a + b;\n}The above code is identical in functionality to the code below. Note that explicitly assigning add = undefined is superfluous because simply doing var add; is the exact same as var add=undefined.var add = undefined;\n\ntry {\n  console.log(\"Success: \", add(1, 1));\n} catch(e) {\n  console.log(\"ERROR: \" + e);\n}\n\nadd = function(a, b){\n  return a + b;\n}The following does not work because var add= begins an expression and causes the following function add() to be an expression instead of a block. Named functions are only visible to themselves and their surrounding block. As function add() is an expression here, it has no surrounding block, so it is only visible to itself.try {\n  console.log(\"Success: \", add(1, 1));\n} catch(e) {\n  console.log(\"ERROR: \" + e);\n}\n\nvar add=function add(a, b){\n  return a + b;\n}The name of a function function thefuncname(){} is thefuncname when it is declared this way.function foobar(a, b){}\n\nconsole.log(foobar.name);var a = function foobar(){};\n\nconsole.log(a.name);Otherwise, if a function is declared as function(){}, the function.name is the first variable used to store the function.var a = function(){};\nvar b = (function(){ return function(){} });\n\nconsole.log(a.name);\nconsole.log(b.name);If there are no variables set to the function, then the functions name is the empty string (\"\").console.log((function(){}).name === \"\");Lastly, while the variable the function is assigned to initially sets the name, successive variables set to the function do not change the name.var a = function(){};\nvar b = a;\nvar c = b;\n\nconsole.log(a.name);\nconsole.log(b.name);\nconsole.log(c.name);In Google's V8 and Firefox's Spidermonkey there might be a few microsecond JIT compilation difference, but ultimately the result is the exact same. To prove this, let's examine the efficiency of JSPerf at micro-benchmarks by comparing the speed of two blank code snippets. The JSPerf tests are found here. And, the jsben.ch tests are  found here. As you can see, there is a noticeable difference when there should be none. If you are really a performance freak like me, then it might be more worth your while trying to reduce the number of variables and functions in the scope and especially eliminating polymorphism (such as using the same variable to store two different types).When you use the var keyword to declare a variable, you can then reassign a different value to the variable like so.(function(){\n    \"use strict\";\n    var foobar = function(){}; // initial value\n    try {\n        foobar = \"Hello World!\"; // new value\n        console.log(\"[no error]\");\n    } catch(error) {\n        console.log(\"ERROR: \" + error.message);\n    }\n    console.log(foobar, window.foobar);\n})();However, when we use the const-statement, the variable reference becomes immutable. This means that we cannot assign a new value to the variable. Please note, however, that this does not make the contents of the variable immutable: if you do const arr = [], then you can still do arr[10] = \"example\". Only doing something like arr = \"new value\" or arr = [] would throw an error as seen below.(function(){\n    \"use strict\";\n    const foobar = function(){}; // initial value\n    try {\n        foobar = \"Hello World!\"; // new value\n        console.log(\"[no error]\");\n    } catch(error) {\n        console.log(\"ERROR: \" + error.message);\n    }\n    console.log(foobar, window.foobar);\n})();Interestingly, if we declare the variable as function funcName(){}, then the immutability of the variable is the same as declaring it with var.(function(){\n    \"use strict\";\n    function foobar(){}; // initial value\n    try {\n        foobar = \"Hello World!\"; // new value\n        console.log(\"[no error]\");\n    } catch(error) {\n        console.log(\"ERROR: \" + error.message);\n    }\n    console.log(foobar, window.foobar);\n})();The \"nearest block\" is the nearest \"function,\" (including asynchronous functions, generator functions, and asynchronous generator functions). However, interestingly, a function functionName() {} behaves like a var functionName = function() {} when in a non-closure block to items outside said closure. Observe.try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}');\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\nvar add=function(a, b){return a + b}try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\nfunction add(a, b){\n  return a + b;\n}try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\n(function () {\n    function add(a, b){\n      return a + b;\n    }\n})();try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\n{\n    function add(a, b){\n      return a + b;\n    }\n}try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\n(() => {\n    var add=function(a, b){\n      return a + b;\n    }\n})();try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\n(() => {\n    function add(a, b){\n      return a + b;\n    }\n})();",
                "A function declaration and a function expression assigned to a variable behave the same once the binding is established.There is a difference however at how and when the function object is actually associated with its variable. This difference is due to the mechanism called variable hoisting in JavaScript.Basically, all function declarations and variable declarations are hoisted to the top of the function in which the declaration occurs (this is why we say that JavaScript has function scope).When a function declaration is hoisted, the function body \"follows\"\nso when the function body is evaluated, the variable will immediately\nbe bound to a function object.When a variable declaration is hoisted, the initialization does not\nfollow, but is \"left behind\". The variable is initialized to\nundefined at the start of the function body, and will be assigned\na value at its original location in the code. (Actually, it will be assigned a value at every location where a declaration of a variable with the same name occurs.)The order of hoisting is also important: function declarations take precedence over variable declarations with the same name, and the last function declaration takes precedence over previous function declarations with the same name.Some examples...Variable foo is hoisted to the top of the function, initialized to undefined, so that !foo is true, so foo is assigned 10. The foo outside of bar's scope plays no role and is untouched.Function declarations take precedence over variable declarations, and the last function declaration \"sticks\".In this example a is initialized with the function object resulting from evaluating the second function declaration, and then is assigned 4.Here the function declaration is hoisted first, declaring and initializing variable a. Next, this variable is assigned 10. In other words: the assignment does not assign to outer variable a.",
                "The first example is a function declaration:The second example is a function expression:The main difference is how they are hoisted (lifted and declared). In the first example, the whole function declaration is hoisted. In the second example only the var 'abc' is hoisted, its value (the function) will be undefined, and the function itself remains at the position that it is declared.To put it simply:To study more about this topic I strongly recommend you this\nlink",
                "In terms of code maintenance cost, named functions are more preferable:I suspect more PROS for named functions are follow. And what is listed as an advantage of named functions is a disadvantage for anonymous ones.Historically, anonymous functions appeared from the inability of JavaScript as a language to list members with named functions:",
                "In computer science terms, we talk about anonymous functions and named functions. I think the most important difference is that an anonymous function is not bound to a name, hence the name anonymous function. In JavaScript it is a first class object dynamically declared at runtime.For more information on anonymous functions and lambda calculus, Wikipedia is a good start: Anonymous Functions.",
                "I use the variable approach in my code for a very specific reason, the theory of which has been covered in an abstract way above, but an example might help some people like me, with limited JavaScript expertise.I have code that I need to run with 160 independently-designed brandings. Most of the code is in shared files, but branding-specific stuff is in a separate file, one for each branding.Some brandings require specific functions, and some do not. Sometimes I have to add new functions to do new branding-specific things. I am happy to change the shared coded, but I don't want to have to change all 160 sets of branding files.By using the variable syntax, I can declare the variable (a function pointer essentially) in the shared code and either assign a trivial stub function, or set to null.The one or two brandings that need a specific implementation of the function can then define their version of the function and assign this to the variable if they want, and the rest do nothing. I can test for a null function before I execute it in the shared code.From people's comments above, I gather it may be possible to redefine a static function too, but I think the variable solution is nice and clear.",
                "Greg's Answer is good enough, but I still would like to add something to it that I learned just now watching Douglas Crockford's videos.Function expression:Function statement:The function statement is just a shorthand for var statement with a function value.Soexpands toWhich expands further to:And they are both hoisted to the top of the code.",
                "@EugeneLazutkin gives an example where he names an assigned function to be able to use shortcut() as an internal reference to itself. John Resig gives another example - copying a recursive function assigned to another object in his Learning Advanced Javascript tutorial. While assigning functions to properties isn't strictly the question here, I recommend actively trying the tutorial out - run the code by clicking the button in the upper right corner, and double click the code to edit to your liking.Examples from the tutorial: recursive calls in yell():Tests fail when the original ninja object is removed. (page 13)function assert(predicate, message) { if(!predicate) { throw new Error(message); } }\n\nvar ninja = {\n  yell: function(n){\nreturn n > 0 ? ninja.yell(n-1) + \"a\" : \"hiy\";\n  }\n};\nassert( ninja.yell(4) == \"hiyaaaa\", \"A single object isn't too bad, either.\" ); \n\nvar samurai = { yell: ninja.yell };\nvar ninja = null;\n\ntry {\n  samurai.yell(4);\n} catch(e){\n  assert( false, \"Uh, this isn't good! Where'd ninja.yell go?\" );\n}If you name the function that will be called recursively, the tests will pass. (page 14)function assert(predicate, message) { if(!predicate) { throw new Error(message); } }\n\nvar ninja = {\n  yell: function yell(n){\nreturn n > 0 ? yell(n-1) + \"a\" : \"hiy\";\n  }\n};\nassert( ninja.yell(4) == \"hiyaaaa\", \"Works as we would expect it to!\" );\n \nvar samurai = { yell: ninja.yell };\nvar ninja = {};\nassert( samurai.yell(4) == \"hiyaaaa\", \"The method correctly calls itself.\" );\n\nconsole.log(samurai.yell(4));",
                "Another difference that is not mentioned in the other answers is that if you use the anonymous functionand use that as a constructor as inthen one.constructor.name will not be defined. Function.name is non-standard but is supported by Firefox, Chrome, other Webkit-derived browsers and IE 9+.Withit is possible to retrieve the name of the constructor as a string with two.constructor.name.",
                "The first one (function doSomething(x)) should be part of an object notation.The second one (var doSomething = function(x){ alert(x);}) is simply creating an anonymous function and assigning it to a variable, doSomething. So doSomething() will call the function.You may want to know what a function declaration and function expression is.A function declaration defines a named function variable without requiring variable assignment. Function declarations occur as standalone constructs and cannot be nested within non-function blocks.ECMA 5 (13.0) defines the syntax as \n  function Identifier ( FormalParameterListopt ) { FunctionBody }In above condition the function name is visible within its scope and the scope of its parent (otherwise it would be unreachable).And in a function expressionA function expression defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via functions expressions can be named or anonymous. Function expressions should not start with \u201cfunction\u201d.ECMA 5 (13.0) defines the syntax as \n  function Identifieropt ( FormalParameterListopt ) { FunctionBody }",
                "I'm listing out the differences below:A function declaration can be placed anywhere in the code. Even if it is invoked before the definition appears in code, it gets executed as function declaration is committed to memory or in a way it is hoisted up, before any other code in the page starts execution.Take a look at the function below:This is because, during execution, it looks like:-A function expression, if not defined before calling it, will result in an error. Also, here the function definition itself is not moved to the top or committed to memory like in the function declarations. But the variable to which we assign the function gets hoisted up and undefined gets assigned to it.Same function using function expressions:This is because during execution, it looks like:It is not safe to write function declarations in non-function blocks like if because they won't be accessible.Named function expression like the one below, may not work in Internet\u00a0Explorer browsers prior to version 9.",
                "About performance:New versions of V8 introduced several under-the-hood optimizations and so did SpiderMonkey.There is almost no difference now between expression and declaration. Function expression appears to be faster now.Chrome 62.0.3202FireFox 55Chrome Canary 63.0.3225Anonymous function expressions appear to have better performance\n  against Named function expression.Firefox\n\nChrome Canary\n\nChrome",
                "If you would use those functions to create objects, you would get:",
                "In JavaScript there are two ways to create functions:Function declaration:This is very basic, self-explanatory, used in many languages and standard across C family of languages. We declared a function defined it and executed it by calling it.What you should be knowing is that functions are actually objects in JavaScript; internally we have created an object for above function and given it a name called fn or the reference to the object is stored in fn. Functions are objects in JavaScript; an instance of function is actually an object instance.Function expression:JavaScript has first-class functions, that is, create a function and assign it to a variable just like you create a string or number and assign it to a variable. Here, the fn variable is assigned to a function. The reason for this concept is functions are objects in JavaScript; fn is pointing to the object instance of the above function. We have initialized a function and assigned it to a variable. It's not executing the function and assigning the result.Reference: JavaScript function declaration syntax: var fn = function() {} vs function fn() {}",
                "The first function syntax is Anonymous Function Expression:While, the second one is Function Declaration:The main difference between both is the function name since Anonymous Functions have no name to call.\nAnonymous functions are quick and easy to declare, and many libraries and tools tend to encourage this idiomatic style of code. However, anonymous functions have some drawbacks:Readability: anonymous functions omit a name which could cause less readable code.Debugging: anonymous functions have no name in stack traces, which can make debugging more difficult.Self-Reference: what if the function needs to refer to itself, for recursion for example.Providing a name for your function expression quite effectively addresses all these drawbacks, and has no tangible downsides. The best practice is to always name your function expressions:For functions assigned to a variable, naming the function, in this case, is not very common and may cause confusion, in this case, the arrow function may be a better choice.",
                "In light of the \"named functions show up in stack traces\" argument, modern JavaScript engines are actually quite capable of representing anonymous functions.As of this writing, V8, SpiderMonkey, Chakra and Nitro always refer to named functions by their names. They almost always refer to an anonymous function by its identifier if it has one.SpiderMonkey can figure out the name of an anonymous function returned from another function. The rest can't.If you really, really wanted your iterator and success callbacks to show up in the trace, you could name those too...But for the most part it's not worth stressing over.",
                "Both are different ways of defining a function. The difference is how the browser interprets and loads them into an execution context.The first case is of function expressions which loads only when the interpreter reaches that line of code. So if you do it like the following, you will get an error that the functionOne is not a function.The reason is that on the first line no value is assigned to functionOne, and hence it is undefined. We are trying to call it as a function, and hence we are getting an error.On the second line we are assigning the reference of an anonymous function to functionOne.The second case is of function declarations that loads before any code is executed. So if you do like the following you won't get any error as the declaration loads before code execution.",
                "They are pretty similar with some small differences, first one is a variable which assigned to an anonymous function (Function Declaration) and second one is the normal way to create a function in JavaScript(Anonymous function Declaration), both has usage, cons and pros:1. Function ExpressionA Function Expression defines a function as a part of a larger\n  expression syntax (typically a variable assignment ). Functions\n  defined via Functions Expressions can be named or anonymous. Function\n  Expressions must not start with \u201cfunction\u201d (hence the parentheses\n  around the self invoking example below).Assign a variable to a function, means no Hoisting, as we know functions in JavaScript can Hoist, means they can be called before they get declared, while variables need to be declared before getting access to them, so means in this case we can not access the function before where it's declared, also it could be a way that you write your functions, for the functions which return another function, this kind of declaration could make sense, also in ECMA6 & above you can assign this to an arrow function which can be used to call anonymous functions, also this way of declaring is a better way to create Constructor functions in JavaScript.2. Function DeclarationA Function Declaration defines a named function variable without\n  requiring variable assignment. Function Declarations occur as\n  standalone constructs and cannot be nested within non-function blocks.\n  It\u2019s helpful to think of them as siblings of Variable Declarations.\n  Just as Variable Declarations must start with \u201cvar\u201d, Function\n  Declarations must begin with \u201cfunction\u201d.This is the normal way of calling a function in JavaScript, this function can be called before you even declare it as in JavaScript all functions get Hoisted, but if you have 'use strict' this won't Hoist as expected, it's a good way to call all normal functions which are not big in lines and neither are a  constructor function.Also, if you need more info about how hoisting works in JavaScript, visit the link below:https://developer.mozilla.org/en-US/docs/Glossary/Hoisting",
                "This is just two possible ways of declaring functions, and in the second way, you can use the function before declaration."
            ]
        },
        {
            "tag": "check_substring",
            "patterns": [
                "How to check whether a string contains a substring in JavaScript?",
                "Check for substring",
                "Check for string"
            ],
            "responses": [
                "ECMAScript\u00a06  introduced String.prototype.includes:const string = \"foo\";\nconst substring = \"oo\";\n\nconsole.log(string.includes(substring)); // trueString.prototype.includes is case-sensitive and is not supported by Internet\u00a0Explorer without a polyfill.In ECMAScript\u00a05 or older environments, use String.prototype.indexOf, which returns -1 when a substring cannot be found:var string = \"foo\";\nvar substring = \"oo\";\n\nconsole.log(string.indexOf(substring) !== -1); // true",
                "There is a String.prototype.includes in ES6:Note that this does not work in Internet Explorer or some other old browsers with no or incomplete ES6 support. To make it work in old browsers, you may wish to use a transpiler like Babel, a shim library like es6-shim, or this polyfill from MDN:",
                "KMP (Knuth\u2013Morris\u2013Pratt).The KMP algorithm searches for a length-m substring in a length-n string in worst-case O(n+m) time, compared to a worst-case of O(n\u22c5m) for the naive algorithm, so using KMP may be reasonable if you care about worst-case time complexity.Here's a JavaScript implementation by Project Nayuki, taken from https://www.nayuki.io/res/knuth-morris-pratt-string-matching/kmp-string-matcher.js:function kmpSearch(pattern, text) {\n  if (pattern.length == 0)\n    return 0; // Immediate match\n\n  // Compute longest suffix-prefix table\n  var lsp = [0]; // Base case\n  for (var i = 1; i < pattern.length; i++) {\n    var j = lsp[i - 1]; // Start by assuming we're extending the previous LSP\n    while (j > 0 && pattern[i] !== pattern[j])\n      j = lsp[j - 1];\n    if (pattern[i] === pattern[j])\n      j++;\n    lsp.push(j);\n  }\n\n  // Walk through text string\n  var j = 0; // Number of chars matched in pattern\n  for (var i = 0; i < text.length; i++) {\n    while (j > 0 && text[i] != pattern[j])\n      j = lsp[j - 1]; // Fall back in the pattern\n    if (text[i]  == pattern[j]) {\n      j++; // Next char matched, increment position\n      if (j == pattern.length)\n        return i - (j - 1);\n    }\n  }\n  return -1; // Not found\n}\n\nconsole.log(kmpSearch('ays', 'haystack') != -1) // true\nconsole.log(kmpSearch('asdf', 'haystack') != -1) // false"
            ]
        },
        {
            "tag": "remove_property",
            "patterns": [
                "How do I remove a property from a JavaScript object?",
                "How to remove property",
                "Remove a property from an object"
            ],
            "responses": [
                "To remove a property from an object (mutating the object), you can do it like this:Demo\n\n\nvar myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\",\n    \"regex\": \"^http://.*\"\n};\ndelete myObject.regex;\n\nconsole.log(myObject);For anyone interested in reading more about it, Stack Overflow user kangax has written an incredibly in-depth blog post about the delete statement on their blog, Understanding delete. It is highly recommended.If you'd like a new object with all the keys of the original except some, you could use destructuring.Demo\n\n\nlet myObject = {\n  \"ircEvent\": \"PRIVMSG\",\n  \"method\": \"newURI\",\n  \"regex\": \"^http://.*\"\n};\n\n// assign the key regex to the variable _ indicating it will be unused\nconst {regex: _, ...newObj} = myObject;\n\nconsole.log(newObj);   // has no 'regex' key\nconsole.log(myObject); // remains unchanged",
                "Objects in JavaScript can be thought of as maps between keys and values. The delete operator is used to remove these keys, more commonly known as object properties, one at a time.var obj = {\r\n  myProperty: 1    \r\n}\r\nconsole.log(obj.hasOwnProperty('myProperty')) // true\r\ndelete obj.myProperty\r\nconsole.log(obj.hasOwnProperty('myProperty')) // falseThe delete operator does not directly free memory, and it differs from simply assigning the value of null or undefined to a property, in that the property itself is removed from the object. Note that if the value of a deleted property was a reference type (an object), and another part of your program still holds a reference to that object, then that object will, of course, not be garbage collected until all references to it have disappeared.delete will only work on properties whose descriptor marks them as configurable.",
                "Old question, modern answer. Using object destructuring, an ECMAScript\u00a06 feature, it's as simple as:Or with the questions sample:You can see it in action in the Babel try-out editor.Edit:To reassign to the same variable, use a let:",
                "var myObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\r\n    \r\ndelete myObject.regex;\r\n\r\nconsole.log ( myObject.regex); // logs: undefinedThis works in Firefox and Internet\u00a0Explorer, and I think it works in all others.",
                "The delete operator is used to remove properties from objects.Note that, for arrays, this is not the same as removing an element. To remove an element from an array, use Array#splice or Array#pop. For example:Strictly speaking, it's impossible to truly delete anything in JavaScript. The delete operator neither deletes objects nor frees memory. Rather, it sets its operand to undefined and manipulates the parent object so that the member is gone.The object is not deleted. Only the reference is. Memory is only freed\nby the garbage collector when all references to an object are removed.Another important caveat is that the delete operator will not reorganize structures for you, which has results that can seem counterintuitive. Deleting an array index, for example, will leave a \"hole\" in it.This is because arrays are objects. So indices are the same as keys.Different built-in functions in JavaScript handle arrays with holes in them differently.for..in statements will skip the empty index completely.A naive for loop will yield undefined for the value at the index.Any method using Symbol.iterator will return undefined for the value at the index.forEach, map and reduce will simply skip the missing index, but will not remove itExample:So, the delete operator should not be used for the common use-case of removing elements from an array. Arrays have a dedicated methods for removing elements and reallocating memory: Array#splice() and Array#pop.Array#splice mutates the array, and returns any removed indices. deleteCount elements are removed from index start, and item1, item2... itemN are inserted into the array from index start. If deleteCount is omitted then elements from startIndex are removed to the end of the array.There is also a similarly named, but different, function on Array.prototype: Array#slice.Array#slice is non-destructive, and returns a new array containing the indicated indices from start to end. If end is left unspecified, it defaults to the end of the array. If end is positive, it specifies the zero-based non-inclusive index to stop at. If end is negative it, it specifies the index to stop at by counting back from the end of the array (eg. -1 will omit the final index). If end <= start, the result is an empty array.Array#pop removes the last element from an array, and returns that element. This operation changes the length of the array. The opposite operation is pushArray#shift is similar to pop, except it removes the first element. The opposite operation is unshift.",
                "To complete Koen's answer, in case you want to remove a dynamic variable using the spread syntax, you can do it like so:const key = 'a';\n\nconst { [key]: foo, ...rest } = { a: 1, b: 2, c: 3 };\n\nconsole.log(foo);  // 1\nconsole.log(rest); // { b: 2, c: 3 }* foo will be a new variable with the value of a (which is 1).There are a few common ways to remove a property from an object. Each one has its own pros and cons (check this performance comparison):Delete OperatorIt is readable and short, however, it might not be the best choice if you are operating on a large number of objects as its performance is not optimized.ReassignmentIt is more than two times faster than delete, however the property is not deleted and can be iterated.Spread OperatorThis ES6 operator allows us to return a brand new object, excluding any properties, without mutating the existing object. The downside is that it has the worse performance out of the above and is not suggested to be used when you need to remove many properties at a time.",
                "Another alternative is to use the Underscore.js library.Note that _.pick() and _.omit() both return a copy of the object and don't directly modify the original object. Assigning the result to the original object should do the trick (not shown).Reference: link _.pick(object, *keys)Return a copy of the object, filtered to only have values for the \nwhitelisted keys (or array of valid keys).Reference: link _.omit(object, *keys)Return a copy of the object, filtered to omit the \nblacklisted keys (or array of keys).For arrays, _.filter() and _.reject() can be used in a similar manner.",
                "To clone an object without a property:For example:And we need to delete a.With an explicit prop key:With a variable prop key:A cool arrow function \ud83d\ude0e:For multiple propertiesUsageOr",
                "The term you have used in your question title, Remove a property from a JavaScript object, can be interpreted in some different ways. The one is to remove it for whole the memory and the list of object keys or the other is just to remove it from your object. As it has been mentioned in some other answers, the delete keyword is the main part. Let's say you have your object like:If you do:the result would be:You can delete that specific key from your object keys like:Then your objects key using Object.keys(myJSONObject) would be:But the point is if you care about memory and you want to whole the object gets removed from the memory, it is recommended to set it to null before you delete the key:The other important point here is to be careful about your other references to the same object. For instance, if you create a variable like:Or add it as a new pointer to another object like:Then even if you remove it from your object myJSONObject, that specific object won't get deleted from the memory, since the regex variable and myOtherObject[\"regex\"] still have their values. Then how could we remove the object from the memory for sure?The answer would be to delete all the references you have in your code, pointed to that very object and also not use var statements to create new references to that object. This last point regarding var statements, is one of the most crucial issues that we are usually faced with, because using var statements would prevent the created object from getting removed.Which means in this case you won't be able to remove that object because you have created the regex variable via a var statement, and if you do:The result would be false, which means that your delete statement haven't been executed as you expected. But if you had not created that variable before, and you only had myOtherObject[\"regex\"] as your last existing reference, you could have done this just by removing it like:In other words, a JavaScript object is eligible to be killed as soon as there is no reference left in your code pointed to that object.Update:Thanks to @AgentME:Setting a property to null before deleting it doesn't accomplish\nanything (unless the object has been sealed by Object.seal and the\ndelete fails. That's not usually the case unless you specifically\ntry).To get more information on Object.seal: Object.seal()",
                "ECMAScript 2015 (or ES6) came with built-in Reflect object. It is possible to delete object property by calling Reflect.deleteProperty() function with target object and property key as parameters:which is equivalent to:But if the property of the object is not configurable it cannot be deleted neither with deleteProperty function nor delete operator:Object.freeze() makes all properties of object not configurable (besides other things). deleteProperty function (as well as delete operator) returns false when tries to delete any of it's properties. If property is configurable it returns true, even if property does not exist.The difference between delete and deleteProperty is when using strict mode:",
                "Suppose you have an object that looks like this:If you want to use the entire staff array, the proper way to do this, would be to do this:Alternatively, you could also do this:Similarly, removing the entire students array would be done by calling delete Hogwarts.students; or delete Hogwarts['students'];.Now, if you want to remove a single staff member or student, the procedure is a bit different, because both properties are arrays themselves.If you know the index of your staff member, you could simply do this:If you do not know the index, you'll also have to do an index search:While you technically can use delete for an array, using it would result in getting incorrect results when calling for example Hogwarts.staff.length later on. In other words, delete would remove the element, but it wouldn't update the value of length property. Using delete would also mess up your indexing.So, when deleting values from an object, always first consider whether you're dealing with object properties or whether you're dealing with array values, and choose the appropriate strategy based on that.If you want to experiment with this, you can use this Fiddle as a starting point.",
                "I personally use Underscore.js or Lodash for object and array manipulation:",
                "Using delete method is the best way to do that, as per MDN description, the delete operator removes a property from an object. So you can simply write:The delete operator removes a given property from an object. On\nsuccessful deletion, it will return true, else false will be returned.\nHowever, it is important to consider the following scenarios:The following snippet gives another simple example:var Employee = {\n  age: 28,\n  name: 'Alireza',\n  designation: 'developer'\n}\n\nconsole.log(delete Employee.name);   // returns true\nconsole.log(delete Employee.age);    // returns true\n\n// When trying to delete a property that does \n// not exist, true is returned \nconsole.log(delete Employee.salary); // returns trueFor more info about and seeing more examples visit the link below:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",
                "Another solution, using Array#reduce.var myObject = {\r\n  \"ircEvent\": \"PRIVMSG\",\r\n  \"method\": \"newURI\",\r\n  \"regex\": \"^http://.*\"\r\n};\r\n\r\nmyObject = Object.keys(myObject).reduce(function(obj, key) {\r\n  if (key != \"regex\") {           //key you want to remove\r\n    obj[key] = myObject[key];\r\n  }\r\n  return obj;\r\n}, {});\r\n\r\nconsole.log(myObject);However, it will mutate the original object. If you want to create a new object without the specified key, just assign the reduce function to a new variable, e.g.:(ES6)const myObject = {\r\n  ircEvent: 'PRIVMSG',\r\n  method: 'newURI',\r\n  regex: '^http://.*',\r\n};\r\n\r\nconst myNewObject = Object.keys(myObject).reduce((obj, key) => {\r\n  key !== 'regex' ? obj[key] = myObject[key] : null;\r\n  return obj;\r\n}, {});\r\n\r\nconsole.log(myNewObject);",
                "There are a lot of good answers here but I just want to chime in that when using delete to remove a property in JavaScript, it is often wise to first check if that property exists to prevent errors.E.gDue to the dynamic nature of JavaScript there are often cases where you simply don't know if the property exists or not. Checking if obj exists before the && also makes sure you don't throw an error due to calling the hasOwnProperty() function on an undefined object.Sorry if this didn't add to your specific use case but I believe this to be a good design to adapt when managing objects and their properties.",
                "This post is very old and I find it very helpful so I decided to share the unset function I wrote in case someone else see this post and think why it's not so simple as it in PHP unset function.The reason for writing this new unset function, is to keep the index of all other variables in this hash_map. Look at the following example, and see how the index of \"test2\" did not change after removing a value from the hash_map.function unset(unsetKey, unsetArr, resort) {\n  var tempArr = unsetArr;\n  var unsetArr = {};\n  delete tempArr[unsetKey];\n  if (resort) {\n    j = -1;\n  }\n  for (i in tempArr) {\n    if (typeof(tempArr[i]) !== 'undefined') {\n      if (resort) {\n        j++;\n      } else {\n        j = i;\n      }\n      unsetArr[j] = tempArr[i];\n    }\n  }\n  return unsetArr;\n}\n\nvar unsetArr = ['test', 'deletedString', 'test2'];\n\nconsole.log(unset('1', unsetArr, true)); // output Object {0: \"test\", 1: \"test2\"}\nconsole.log(unset('1', unsetArr, false)); // output Object {0: \"test\", 2: \"test2\"}",
                "Try the following method. Assign the Object property value to undefined. Then stringify the object and parse.var myObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\r\n\r\nmyObject.regex = undefined;\r\nmyObject = JSON.parse(JSON.stringify(myObject));\r\n\r\nconsole.log(myObject);",
                "Using ramda#dissoc you will get a new object without the attribute regex:You can also use other functions to achieve the same effect - omit, pick, ...",
                "There are a couple of ways to remove properties from an object:const myObject = {\n  \"ircEvent\": \"PRIVMSG\",\n  \"method\": \"newURI\",\n  \"regex\": \"^http://.*\",\n};\n\ndelete myObject.regex;\nconsole.log(myObject);const myObject = {\n      \"ircEvent\": \"PRIVMSG\",\n      \"method\": \"newURI\",\n      \"regex\": \"^http://.*\",\n    };\n\ndelete myObject['regex'];\nconsole.log(myObject);\n// or\nconst name = 'ircEvent';\ndelete myObject[name];\nconsole.log(myObject);const myObject = {\n      \"ircEvent\": \"PRIVMSG\",\n      \"method\": \"newURI\",\n      \"regex\": \"^http://.*\",\n    };\n\nconst { regex, ...myObjectRest} = myObject;\nconsole.log(myObjectRest);",
                "If you want to delete a property deeply nested in the object then you can use the following recursive function with path to the property as the second argument:Example:",
                "const obj = {\r\n    \"Filters\":[\r\n        {\r\n            \"FilterType\":\"between\",\r\n            \"Field\":\"BasicInformationRow.A0\",\r\n            \"MaxValue\":\"2017-10-01\",\r\n            \"MinValue\":\"2017-09-01\",\r\n            \"Value\":\"Filters value\"\r\n        }\r\n    ]\r\n};\r\n\r\nlet new_obj1 = Object.assign({}, obj.Filters[0]);\r\nlet new_obj2 = Object.assign({}, obj.Filters[0]);\r\n\r\n/*\r\n\r\n// old version\r\n\r\nlet shaped_obj1 = Object.keys(new_obj1).map(\r\n    (key, index) => {\r\n        switch (key) {\r\n            case \"MaxValue\":\r\n                delete new_obj1[\"MaxValue\"];\r\n                break;\r\n            case \"MinValue\":\r\n                delete new_obj1[\"MinValue\"];\r\n                break;\r\n        }\r\n        return new_obj1;\r\n    }\r\n)[0];\r\n\r\n\r\nlet shaped_obj2 = Object.keys(new_obj2).map(\r\n    (key, index) => {\r\n        if(key === \"Value\"){\r\n            delete new_obj2[\"Value\"];\r\n        }\r\n        return new_obj2;\r\n    }\r\n)[0];\r\n\r\n\r\n*/\r\n\r\n\r\n// new version!\r\n\r\nlet shaped_obj1 = Object.keys(new_obj1).forEach(\r\n    (key, index) => {\r\n        switch (key) {\r\n            case \"MaxValue\":\r\n                delete new_obj1[\"MaxValue\"];\r\n                break;\r\n            case \"MinValue\":\r\n                delete new_obj1[\"MinValue\"];\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n);\r\n\r\nlet shaped_obj2 = Object.keys(new_obj2).forEach(\r\n    (key, index) => {\r\n        if(key === \"Value\"){\r\n            delete new_obj2[\"Value\"];\r\n        }\r\n    }\r\n);",
                "Here's an ES6 way to remove the entry easily:let myObject = {\n  \"ircEvent\": \"PRIVMSG\",\n  \"method\": \"newURI\",\n  \"regex\": \"^http://.*\"\n};\n\nconst removeItem = 'regex';\n\nconst { [removeItem]: remove, ...rest } = myObject;\n\nconsole.log(remove); // \"^http://.*\"\nconsole.log(rest); // Object { ircEvent: \"PRIVMSG\", method: \"newURI\" }",
                "Dan's assertion that 'delete' is very slow and the benchmark he posted were doubted. So I carried out the test myself in Chrome 59. It does seem that 'delete' is about 30 times slower:Note that I purposely carried out more than one 'delete' operations in one loop cycle to minimize the effect caused by the other operations.",
                "There are many different options presented on this page, not because most of the options are wrong\u2014or because the answers are duplicates\u2014but because the appropriate technique depends on the situation you're in and the goals of the tasks you and/or you team are trying to fulfill. To answer you question unequivocally, one needs to know:Once those four queries have been answered, there are essentially four categories of \"property removal\" in JavaScript to chose from in order to meet your goals. They are:This category is for operating on object literals or object instances when you want to retain/continue to use the original reference and aren't using stateless functional principles in your code. An example piece of syntax in this category:This category is the oldest, most straightforward & most widely supported category of property removal. It supports Symbol & array indexes in addition to strings and works in every version of JavaScript except for the very first release. However, it's mutative which violates some programming principles and has performance implications. It also can result in uncaught exceptions when used on non-configurable properties in strict mode.This category is for operating on plain object or array instances in newer ECMAScript flavors when a non-mutative approach is desired and you don't need to account for Symbol keys:This category is for operating on object literals or object instances when you want to retain/continue to use the original reference while guarding against exceptions being thrown on unconfigurable properties:In addition, while mutating objects in-place isn't stateless, you can use the functional nature of Reflect.deleteProperty to do partial application and other functional techniques that aren't possible with delete statements.This category is for operating on plain object or array instances in newer ECMAScript flavors when a non-mutative approach is desired and you don't need to account for Symbol keys:This category is generally allows for greater functional flexibility, including accounting for Symbols & omitting more than one property in one statement:",
                "You can use a filter like belowvar myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\",\n    \"regex\": \"^http://.*\"\n};\n\n// Way 1\n\nlet filter1 = {}\n  Object.keys({...myObject}).filter(d => {\n  if(d !== 'regex'){\n    filter1[d] = myObject[d];\n  }\n})\n\nconsole.log(filter1)\n\n// Way 2\n\nlet filter2 = Object.fromEntries(Object.entries({...myObject}).filter(d =>\nd[0] !== 'regex'\n))\n\nconsole.log(filter2)",
                "@johnstock, we can also use JavaScript's prototyping concept to add method to objects to delete any passed key available in calling object.Above answers are appreciated.var myObject = {\n  \"ircEvent\": \"PRIVMSG\",\n  \"method\": \"newURI\",\n  \"regex\": \"^http://.*\"\n};\n\n// 1st and direct way \ndelete myObject.regex; // delete myObject[\"regex\"]\nconsole.log(myObject); // { ircEvent: 'PRIVMSG', method: 'newURI' }\n\n// 2 way -  by using the concept of JavaScript's prototyping concept\nObject.prototype.removeFromObjectByKey = function(key) {\n  // If key exists, remove it and return true\n  if (this[key] !== undefined) {\n    delete this[key]\n    return true;\n  }\n  // Else return false\n  return false;\n}\n\nvar isRemoved = myObject.removeFromObjectByKey('method')\nconsole.log(myObject) // { ircEvent: 'PRIVMSG' }\n\n// More examples\nvar obj = {\n  a: 45,\n  b: 56,\n  c: 67\n}\nconsole.log(obj) // { a: 45, b: 56, c: 67 }\n\n// Remove key 'a' from obj\nisRemoved = obj.removeFromObjectByKey('a')\nconsole.log(isRemoved); //true\nconsole.log(obj); // { b: 56, c: 67 }\n\n// Remove key 'd' from obj which doesn't exist\nvar isRemoved = obj.removeFromObjectByKey('d')\nconsole.log(isRemoved); // false\nconsole.log(obj); // { b: 56, c: 67 }",
                "I have used Lodash \"unset\" to make it happen for a nested object also... only this needs to write small logic to get the path of the property key which is expected by the omit method.var a = {\"bool\":{\"must\":[{\"range\":{\"price_index.final_price\":{\"gt\":\"450\", \"lt\":\"500\"}}}, {\"bool\":{\"should\":[{\"term\":{\"color_value.keyword\":\"Black\"}}]}}]}};\n\nfunction getPathOfKey(object,key,currentPath, t){\n    var currentPath = currentPath || [];\n\n    for(var i in object){\n        if(i == key){\n            t = currentPath;\n        }\n        else if(typeof object[i] == \"object\"){\n            currentPath.push(i)\n            return getPathOfKey(object[i], key,currentPath)\n        }\n    }\n    t.push(key);\n    return t;\n}\ndocument.getElementById(\"output\").innerHTML =JSON.stringify(getPathOfKey(a,\"price_index.final_price\"))\n<div id=\"output\">\n\n</div>var unset = require('lodash.unset');\nunset(a, getPathOfKey(a, \"price_index.final_price\"));",
                "let myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\",\n    \"regex\": \"^http://.*\"\n};\n\n\nobj = Object.fromEntries(\n    Object.entries(myObject).filter(function (m){\n        return m[0] != \"regex\"/*or whatever key to delete*/\n    }\n))\n\nconsole.log(obj)You can also just treat the object like a2d array using Object.entries, and use splice to remove an element as you would in a normal array, or simply filter through the object, as one would an array, and assign the reconstructed object back to the original variable",
                "If you don't want to modify the original object.Remove a property without mutating the objectIf mutability is a concern, you can create a completely new object by copying all the properties from the old, except the one you want to remove.let myObject = {\n  \"ircEvent\": \"PRIVMSG\",\n  \"method\": \"newURI\",\n  \"regex\": \"^http://.*\"\n};\n\nlet prop = 'regex';\nconst updatedObject = Object.keys(myObject).reduce((object, key) => {\n  if (key !== prop) {\n    object[key] = myObject[key]\n  }\n  return object\n}, {})\n\nconsole.log(updatedObject);"
            ]
        },
        {
            "tag": "asynchronous",
            "patterns": [
                "How do I return the response from an asynchronous call?",
                "Return response from call",
                "asynchronous call"
            ],
            "responses": [
                "\u2192 For a more general explanation of asynchronous behaviour with different examples, see Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference\u2192 If you already understand the problem, skip to the possible solutions below.The A in Ajax stands for asynchronous. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, $.ajax returns immediately and the next statement, return result;, is executed before the function you passed as success callback was even called.Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer:Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer that you needed.The same is happening when you make a function call containing \"normal\" code:Even though findItem might take a long time to execute, any code coming after var item = findItem(); has to wait until the function returns the result.You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should call you back on your mobile phone. You hang up, leave the house, and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.That's exactly what's happening when you do an Ajax request.Instead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a callback (notice something? call back ?). Any statement coming after that call is executed before the callback is called.Embrace the asynchronous nature of JavaScript! While certain asynchronous operations provide synchronous counterparts (so does \"Ajax\"), it's generally discouraged to use them, especially in a browser context.Why is it bad do you ask?JavaScript runs in the UI thread of the browser and any long-running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not.All of this results in a really bad user experience. The user won't be able to tell whether everything is working fine or not. Furthermore, the effect will be worse for users with a slow connection.In the following we will look at three different solutions that are all building on top of each other:All three are available in current browsers, and node 7+.The ECMAScript version released in 2017 introduced syntax-level support for asynchronous functions. With the help of async and await, you can write asynchronous in a \"synchronous style\". The code is still asynchronous, but it's easier to read/understand.async/await builds on top of promises: an async function always returns a promise. await \"unwraps\" a promise and either result in the value the promise was resolved with or throws an error if the promise was rejected.Important: You can only use await inside an async function or in a JavaScript module. Top-level await is not supported outside of modules, so you might have to make an async IIFE (Immediately Invoked Function Expression) to start an async context if not using a module.You can read more about async and await on MDN.Here is an example that elaborates the delay function findItem() above:Current browser and node versions support async/await. You can also support older environments by transforming your code to ES5 with the help of regenerator (or tools that use regenerator, such as Babel).A callback is when function 1 is passed to function 2. Function 2 can call function 1 whenever it is ready. In the context of an asynchronous process, the callback will be called whenever the asynchronous process is done. Usually, the result is passed to the callback.In the example of the question, you can make foo accept a callback and use it as success callback. So thisbecomesHere we defined the function \"inline\" but you can pass any function reference:foo itself is defined as follows:callback will refer to the function we pass to foo when we call it and we pass it on to success. I.e. once the Ajax request is successful, $.ajax will call callback and pass the response to the callback (which can be referred to with result, since this is how we defined the callback).You can also process the response before passing it to the callback:It's easier to write code using callbacks than it may seem. After all, JavaScript in the browser is heavily event-driven (DOM events). Receiving the Ajax response is nothing else but an event.\nDifficulties could arise when you have to work with third-party code, but most problems can be solved by just thinking through the application flow.The Promise API is a new feature of ECMAScript 6 (ES2015), but it has good browser support already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g., bluebird).Promises are containers for future values. When the promise receives the value (it is resolved) or when it is canceled (rejected), it notifies all of its \"listeners\" who want to access this value.The advantage over plain callbacks is that they allow you to decouple your code and they are easier to compose.Here is an example of using a promise:function delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\ndelay()\n  .then(function(v) { // `delay` returns a promise\n    console.log(v); // Log the value once it is resolved\n  })\n  .catch(function(v) {\n    // Or do something else if it is rejected\n    // (it would not happen in this example, since `reject` is not called).\n  });\n.as-console-wrapper { max-height: 100% !important; top: 0; }Applied to our Ajax call we could use promises like this:function ajax(url) {\n  return new Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      resolve(this.responseText);\n    };\n    xhr.onerror = reject;\n    xhr.open('GET', url);\n    xhr.send();\n  });\n}\n\najax(\"https://jsonplaceholder.typicode.com/todos/1\")\n  .then(function(result) {\n    console.log(result); // Code depending on result\n  })\n  .catch(function() {\n    // An error occurred\n  });\n.as-console-wrapper { max-height: 100% !important; top: 0; }Describing all the advantages that promise offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.More information about promises: HTML5 rocks - JavaScript Promises.Deferred objects are jQuery's custom implementation of promises (before the Promise API was standardized). They behave almost like promises but expose a slightly different API.Every Ajax method of jQuery already returns a \"deferred object\" (actually a promise of a deferred object) which you can just return from your function:Keep in mind that promises and deferred objects are just containers for a future value, they are not the value itself. For example, suppose you had the following:This code misunderstands the above asynchronous issues. Specifically, $.ajax() doesn't freeze the code while it checks the '/password' page on your server - it sends a request to the server and while it waits, it immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the if statement is going to always get this Deferred object, treat it as true, and proceed as though the user is logged in. Not good.But the fix is easy:As I mentioned, some(!) asynchronous operations have synchronous counterparts. I don't advocate their use, but for completeness' sake, here is how you would perform a synchronous call:If you directly use a XMLHttpRequest object, pass false as third argument to .open.If you use jQuery, you can set the async option to false. Note that this option is deprecated since jQuery 1.8.\nYou can then either still use a success callback or access the responseText property of the jqXHR object:If you use any other jQuery Ajax method, such as $.get, $.getJSON, etc., you have to change it to $.ajax (since you can only pass configuration parameters to $.ajax).Heads up! It is not possible to make a synchronous JSONP request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).",
                "Your code should be something along the lines of this:Felix Kling did a fine job writing an answer for people using jQuery for AJAX, but I've decided to provide an alternative for people who aren't.(Note, for those using the new fetch API, Angular or promises I've added another answer below)This is a short summary of \"Explanation of the problem\" from the other answer, if you're not sure after reading this, read that.The A in AJAX stands for asynchronous. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, .send returns immediately and the next statement, return result;, is executed before the function you passed as success callback was even called.This means when you're returning, the listener you've defined did not execute yet, which means the value you're returning has not been defined.Here is a simple analogy:(Fiddle)The value of a returned is undefined since the a=5 part has not executed yet. AJAX acts like this, you're returning the value before the server got the chance to tell your browser what that value is.One possible solution to this problem is to code re-actively , telling your program what to do when the calculation completed.This is called CPS. Basically, we're passing getFive an action to perform when it completes, we're telling our code how to react when an event completes (like our AJAX call, or in this case the timeout).Usage would be:Which should alert \"5\" to the screen. (Fiddle).There are basically two ways how to solve this:As for synchronous AJAX, don't do it! Felix's answer raises some compelling arguments about why it's a bad idea. To sum it up, it'll freeze the user's browser until the server returns the response and create a very bad user experience. Here is another short summary taken from MDN on why:XMLHttpRequest supports both synchronous and asynchronous communications. In general, however, asynchronous requests should be preferred to synchronous requests for performance reasons.In short, synchronous requests block the execution of code... ...this can cause serious issues...If you have to do it, you can pass a flag. Here is how:Let your function accept a callback. In the example code foo can be made to accept a callback. We'll be telling our code how to react when foo completes.So:Becomes:Here we passed an anonymous function, but we could just as easily pass a reference to an existing function, making it look like:For more details on how this sort of callback design is done, check Felix's answer.Now, let's define foo itself to act accordingly(fiddle)We have now made our foo function accept an action to run when the AJAX completes successfully. We can extend this further by checking if the response status is not 200 and acting accordingly (create a fail handler and such). Effectively it is solving our issue.If you're still having a hard time understanding this, read the AJAX getting started guide at MDN.",
                "XMLHttpRequest 2 (first of all, read the answers from Benjamin Gruenbaum and Felix Kling)If you don't use jQuery and want a nice short XMLHttpRequest 2 which works in the modern browsers and also in the mobile browsers, I suggest to use it this way:As you can see:There are two ways to get the response of this Ajax call (three using the XMLHttpRequest var name):The simplest:Or if for some reason you bind() the callback to a class:Example:Or (the above one is better anonymous functions are always a problem):Nothing easier.Now some people will probably say that it's better to use onreadystatechange or the even the XMLHttpRequest variable name. That's wrong.Check out XMLHttpRequest advanced features.It supported all *modern browsers. And I can confirm as I have been using this approach since XMLHttpRequest 2 was created. I never had any type of problem in any browsers I used.onreadystatechange is only useful if you want to get the headers on state 2.Using the XMLHttpRequest variable name is another big error as you need to execute the callback inside the onload/oreadystatechange closures, or else you lost it.Now if you want something more complex using POST and FormData you can easily extend this function:Again ... it's a very short function, but it does GET and POST.Examples of usage:Or pass a full form element (document.getElementsByTagName('form')[0]):Or set some custom values:As you can see, I didn't implement sync... it's a bad thing.Having said that ... why don't we do it the easy way?As mentioned in the comment, the use of error && synchronous does completely break the point of the answer. Which is a nice short way to use Ajax in the proper way?Error handlerIn the above script, you have an error handler which is statically defined, so it does not compromise the function. The error handler can be used for other functions too.But to really get out an error, the only way is to write a wrong URL in which case every browser throws an error.Error handlers are maybe useful if you set custom headers, set the responseType to blob array buffer, or whatever...Even if you pass 'POSTAPAPAP' as the method it won't throw an error.Even if you pass 'fdggdgilfdghfldj' as formdata it won't throw an error.In the first case the error is inside the displayAjax() under this.statusText as Method not Allowed.In the second case, it simply works. You have to check at the server side if you passed the right post data.Cross-domain not allowed throws an error automatically.In the error response, there aren't any error codes.There is only the this.type which is set to error.Why add an error handler if you totally don't have any control over errors?\nMost of the errors are returned inside this in the callback function displayAjax().So: There isn't any need for error checks if you're able to copy and paste the URL properly. ;)PS: As the first test I wrote x('x', displayAjax)..., and it totally got a response...??? So I checked the folder where the HTML is located, and there was a file called 'x.xml'. So even if you forget the extension of your file XMLHttpRequest 2 WILL FIND IT. I LOL'dRead a file synchronousDon't do that.If you want to block the browser for a while load a nice big .txt file synchronous.Now you can doThere is no other way to do this in a non-asynchronous way. (Yeah, with setTimeout loop... but seriously?)Another point is... if you work with APIs or just your own list's files or whatever you always use different functions for each request...Only if you have a page where you load always the same XML/JSON or whatever you need only one function. In that case, modify a little the Ajax function and replace b with your special function.The functions above are for basic use.If you want to extend the function...Yes, you can.I'm using a lot of APIs and one of the first functions I integrate into every HTML page is the first Ajax function in this answer, with GET only...But you can do a lot of stuff with XMLHttpRequest 2:I made a download manager (using ranges on both sides with resume, filereader, and filesystem), various image resizers converters using canvas, populate web SQL databases with base64images and much more...But in these cases you should create a function only for that purpose... sometimes you need a blob, array buffers, you can set headers, override mimetype and there is a lot more...But the question here is how to return an Ajax response... (I added an easy way.)",
                "This means AngularJS, jQuery (with deferred), native XHR's replacement (fetch), Ember.js, Backbone.js's save or any Node.js library that returns promises.Your code should be something along the lines of this:Felix Kling did a fine job writing an answer for people using jQuery with callbacks for Ajax. I have an answer for native XHR. This answer is for generic usage of promises either on the frontend or backend.The JavaScript concurrency model in the browser and on the server with Node.js/io.js is asynchronous and reactive.Whenever you call a method that returns a promise, the then handlers are always executed asynchronously - that is, after the code below them that is not in a .then handler.This means when you're returning data the then handler you've defined did not execute yet. This in turn means that the value you're returning has not been set to the correct value in time.Here is a simple analogy for the issue:function getFive(){\n        var data;\n        setTimeout(function(){ // Set a timer for one second in the future\n           data = 5; // After a second, do this\n        }, 1000);\n        return data;\n    }\n    document.body.innerHTML = getFive(); // `undefined` here and not 5The value of data is undefined since the data = 5 part has not executed yet. It will likely execute in a second, but by that time it is irrelevant to the returned value.Since the operation did not happen yet (Ajax, server call, I/O, and timer) you're returning the value before the request got the chance to tell your code what that value is.One possible solution to this problem is to code re-actively, telling your program what to do when the calculation completed. Promises actively enable this by being temporal (time-sensitive) in nature.A Promise is a value over time. Promises have state. They start as pending with no value and can settle to:A promise can only change states once after which it will always stay at the same state forever. You can attach then handlers to promises to extract their value and handle errors. then handlers allow chaining of calls. Promises are created by using APIs that return them. For example, the more modern Ajax replacement fetch or jQuery's $.get return promises.When we call .then on a promise and return something from it - we get a promise for the processed value. If we return another promise we'll get amazing things, but let's hold our horses.Let's see how we can solve the above issue with promises. First, let's demonstrate our understanding of promise states from above by using the Promise constructor for creating a delay function:Now, after we converted setTimeout to use promises, we can use then to make it count:function delay(ms){ // Takes amount of milliseconds\n  // Returns a new promise\n  return new Promise(function(resolve, reject){\n    setTimeout(function(){ // When the time is up,\n      resolve(); // change the promise to the fulfilled state\n    }, ms);\n  });\n}\n\nfunction getFive(){\n  // We're RETURNING the promise. Remember, a promise is a wrapper over our value\n  return delay(100).then(function(){ // When the promise is ready,\n      return 5; // return the value 5. Promises are all about return values\n  })\n}\n// We _have_ to wrap it like this in the call site, and we can't access the plain value\ngetFive().then(function(five){\n   document.body.innerHTML = five;\n});Basically, instead of returning a value which we can't do because of the concurrency model - we're returning a wrapper for a value that we can unwrap with then. It's like a box you can open with then.This stands the same for your original API call, you can:So this works just as well. We've learned we can't return values from already asynchronous calls, but we can use promises and chain them to perform processing. We now know how to return the response from an asynchronous call.ES6 introduces generators which are functions that can return in the middle and then resume the point they were at. This is typically useful for sequences, for example:Is a function that returns an iterator over the sequence 1,2,3,3,3,3,.... which can be iterated. While this is interesting on its own and opens room for a lot of possibility, there is one particular interesting case.If the sequence we're producing is a sequence of actions rather than numbers - we can pause the function whenever an action is yielded and wait for it before we resume the function. So instead of a sequence of numbers, we need a sequence of future values - that is: promises.This somewhat a tricky, but very powerful trick let\u2019s us write asynchronous code in a synchronous manner. There are several \"runners\" that do this for you. Writing one is a short few lines of code, but it is beyond the scope of this answer. I'll be using Bluebird's Promise.coroutine here, but there are other wrappers like co or Q.async.This method returns a promise itself, which we can consume from other coroutines. For example:In ES7, this is further standardized. There are several proposals right now, but in all of them you can await promise. This is just \"sugar\" (nicer syntax) for the ES6 proposal above by adding the async and await keywords. Making the above example:It still returns a promise just the same :)",
                "You are using Ajax incorrectly. The idea is not to have it return anything, but instead hand off the data to something called a callback function, which handles the data.That is:Returning anything in the submit handler will not do anything. You must instead either hand off the data, or do what you want with it directly inside the success function.",
                "I will answer with a horrible-looking, hand-drawn comic. The second image is the reason why result is undefined in your code example.",
                "The simplest solution is to create a JavaScript function and call it for the Ajax success callback.",
                "People who are using AngularJS, can handle this situation using promises.Here it says,Promises can be used to unnest asynchronous functions and allows one to chain multiple functions together.You can find a nice explanation here also.An example found in documentation mentioned below.In Angular 2 with look at the following example, but its recommended to use observables with Angular 2.You can consume that in this way,See the original post here. But TypeScript does not support native ES6 Promises, if you want to use it, you might need plugin for that.Additionally, here is the promises specification.",
                "Most of the answers here give useful suggestions for when you have a single async operation, but sometimes, this comes up when you need to do an asynchronous operation for each entry in an array or other list-like structure. The temptation is to do this:Example:// WRONG\nvar theArray = [1, 2, 3];\nvar results = [];\ntheArray.forEach(function(entry) {\n    doSomethingAsync(entry, function(result) {\n        results.push(result);\n    });\n});\nconsole.log(\"Results:\", results); // E.g., using them, returning them, etc.\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }The reason that doesn't work is that the callbacks from doSomethingAsync haven't run yet by the time you're trying to use the results.So, if you have an array (or list of some kind) and want to do async operations for each entry, you have two options: Do the operations in parallel (overlapping), or in series (one after another in sequence).You can start all of them and keep track of how many callbacks you're expecting, and then use the results when you've gotten that many callbacks:Example:var theArray = [1, 2, 3];\nvar results = [];\nvar expecting = theArray.length;\ntheArray.forEach(function(entry, index) {\n    doSomethingAsync(entry, function(result) {\n        results[index] = result;\n        if (--expecting === 0) {\n            // Done!\n            console.log(\"Results:\", JSON.stringify(results)); // E.g., using the results\n        }\n    });\n});\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }(We could do away with expecting and just use results.length === theArray.length, but that leaves us open to the possibility that theArray is changed while the calls are outstanding...)Notice how we use the index from forEach to save the result in results in the same position as the entry it relates to, even if the results arrive out of order (since async calls don't necessarily complete in the order in which they were started).But what if you need to return those results from a function? As the other answers have pointed out, you can't; you have to have your function accept and call a callback (or return a Promise). Here's a callback version:Example:function doSomethingWith(theArray, callback) {\n    var results = [];\n    var expecting = theArray.length;\n    theArray.forEach(function(entry, index) {\n        doSomethingAsync(entry, function(result) {\n            results[index] = result;\n            if (--expecting === 0) {\n                // Done!\n                callback(results);\n            }\n        });\n    });\n}\ndoSomethingWith([1, 2, 3], function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }Or here's a version returning a Promise instead:Of course, if doSomethingAsync passed us errors, we'd use reject to reject the promise when we got an error.)Example:function doSomethingWith(theArray) {\n    return new Promise(function(resolve) {\n        var results = [];\n        var expecting = theArray.length;\n        theArray.forEach(function(entry, index) {\n            doSomethingAsync(entry, function(result) {\n                results[index] = result;\n                if (--expecting === 0) {\n                    // Done!\n                    resolve(results);\n                }\n            });\n        });\n    });\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }(Or alternately, you could make a wrapper for doSomethingAsync that returns a promise, and then do the below...)If doSomethingAsync gives you a Promise, you can use Promise.all:If you know that doSomethingAsync will ignore a second and third argument, you can just pass it directly to map (map calls its callback with three arguments, but most people only use the first most of the time):Example:function doSomethingWith(theArray) {\n    return Promise.all(theArray.map(doSomethingAsync));\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value) {\n    console.log(\"Starting async operation for \" + value);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            console.log(\"Completing async operation for \" + value);\n            resolve(value * 2);\n        }, Math.floor(Math.random() * 200));\n    });\n}\n.as-console-wrapper { max-height: 100% !important; }Note that Promise.all resolves its promise with an array of the results of all of the promises you give it when they are all resolved, or rejects its promise when the first of the promises you give it rejects.Suppose you don't want the operations to be in parallel? If you want to run them one after another, you need to wait for each operation to complete before you start the next. Here's an example of a function that does that and calls a callback with the result:(Since we're doing the work in series, we can just use results.push(result) since we know we won't get results out of order. In the above we could have used results[index] = result;, but in some of the following examples we don't have an index to use.)Example:function doSomethingWith(theArray, callback) {\n    var results = [];\n    doOne(0);\n    function doOne(index) {\n        if (index < theArray.length) {\n            doSomethingAsync(theArray[index], function(result) {\n                results.push(result);\n                doOne(index + 1);\n            });\n        } else {\n            // Done!\n            callback(results);\n        }\n    }\n}\ndoSomethingWith([1, 2, 3], function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }(Or, again, build a wrapper for doSomethingAsync that gives you a promise and do the below...)If doSomethingAsync gives you a Promise, if you can use ES2017+ syntax (perhaps with a transpiler like Babel), you can use an async function with for-of and await:Example:async function doSomethingWith(theArray) {\n    const results = [];\n    for (const entry of theArray) {\n        results.push(await doSomethingAsync(entry));\n    }\n    return results;\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value) {\n    console.log(\"Starting async operation for \" + value);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            console.log(\"Completing async operation for \" + value);\n            resolve(value * 2);\n        }, Math.floor(Math.random() * 200));\n    });\n}\n.as-console-wrapper { max-height: 100% !important; }If you can't use ES2017+ syntax (yet), you can use a variation on the \"Promise reduce\" pattern (this is more complex than the usual Promise reduce because we're not passing the result from one into the next, but instead gathering up their results in an array):Example:function doSomethingWith(theArray) {\n    return theArray.reduce(function(p, entry) {\n        return p.then(function(results) {\n            return doSomethingAsync(entry).then(function(result) {\n                results.push(result);\n                return results;\n            });\n        });\n    }, Promise.resolve([]));\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value) {\n    console.log(\"Starting async operation for \" + value);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            console.log(\"Completing async operation for \" + value);\n            resolve(value * 2);\n        }, Math.floor(Math.random() * 200));\n    });\n}\n.as-console-wrapper { max-height: 100% !important; }...which is less cumbersome with ES2015+ arrow functions:Example:function doSomethingWith(theArray) {\n    return theArray.reduce((p, entry) => p.then(results => doSomethingAsync(entry).then(result => {\n        results.push(result);\n        return results;\n    })), Promise.resolve([]));\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value) {\n    console.log(\"Starting async operation for \" + value);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            console.log(\"Completing async operation for \" + value);\n            resolve(value * 2);\n        }, Math.floor(Math.random() * 200));\n    });\n}\n.as-console-wrapper { max-height: 100% !important; }",
                "Have a look at this example:As you can see getJoke is returning a resolved promise (it is resolved when returning res.data.value). So you wait until the $http.get request is completed and then console.log(res.joke) is executed (as a normal asynchronous flow).This is the plnkr:http://embed.plnkr.co/XlNR7HpCaIhJxskMJfSg/ES6 way (async - await)",
                "This is one of the places which two-way data binding or store concept that's used in many new JavaScript frameworks will work great for you...So if you are using Angular, React, or any other frameworks which do two-way data binding or store concept, this issue is simply fixed for you, so in easy words, your result is undefined at the first stage, so you have got result = undefined before you receive the data, then as soon as you get the result, it will be updated and get assigned to the new value which response of your Ajax call...But how you can do it in pure JavaScript or jQuery for example as you asked in this question?You can use a callback, promise and recently observable to handle it for you. For example, in promises we have some function like success() or then() which will be executed when your data is ready for you. The same with callback or the subscribe function on an observable.For example, in your case which you are using jQuery, you can do something like this:For more information, study promises and observables which are newer ways to do this async stuff.",
                "It's a very common issue we face while struggling with the 'mysteries' of JavaScript. Let me try demystifying this mystery today.Let's start with a simple JavaScript function:That's a simple synchronous function call (where each line of code is 'finished with its job' before the next one in sequence), and the result is same as expected.Now let's add a bit of twist, by introducing a little delay in our function, so that all lines of code are not 'finished' in sequence. Thus, it will emulate the asynchronous behavior of the function:So there you go; that delay just broke the functionality we expected! But what exactly happened? Well, it's actually pretty logical if you look at the code.The function foo(), upon execution, returns nothing (thus returned value is undefined), but it does start a timer, which executes a function after 1 second to return 'wohoo'. But as you can see, the value that's assigned to bar is the immediately returned stuff from foo(), which is nothing, i.e., just undefined.So, how do we tackle this issue?Let's ask our function for a promise.\nPromise is really about what it means: it means that the function guarantees you to provide with any output it gets in future. So let's see it in action for our little problem above:Thus, the summary is - to tackle the asynchronous functions like Ajax-based calls, etc., you can use a promise to resolve the value (which you intend to return). Thus, in short you resolve value instead of returning, in asynchronous functions.Apart from using then/catch to work with promises, there exists one more approach. The idea is to recognize an asynchronous function and then wait for the promises to resolve, before moving to the next line of code. It's still just the promises under the hood, but with a different syntactical approach. To make things clearer, you can find a comparison below:",
                "Another approach to return a value from an asynchronous function, is to pass in an object that will store the result from the asynchronous function.Here is an example of the same:I am using the result object to store the value during the asynchronous operation. This allows the result be available even after the asynchronous job.I use this approach a lot. I would be interested to know how well this approach works where wiring the result back through consecutive modules is involved.",
                "While promises and callbacks work fine in many situations, it is a pain in the rear to express something like:You'd end up going through async1; check if name is undefined or not and call the callback accordingly.While it is okay in small examples it gets annoying when you have a lot of similar cases and error handling involved.Fibers helps in solving the issue.You can checkout the project here.",
                "The following example I have written shows how toThis working example is self-contained. It will define a simple request object that uses the window XMLHttpRequest object to make calls. It will define a simple function to wait for a bunch of promises to be completed.Context. The example is querying the Spotify Web API endpoint in order to search for playlist objects for a given set of query strings:For each item, a new Promise will fire a block - ExecutionBlock, parse the result, schedule a new set of promises based on the result array, that is a list of Spotify user objects and execute the new HTTP call within the ExecutionProfileBlock asynchronously.You can then see a nested Promise structure, that lets you spawn multiple and completely asynchronous nested HTTP calls, and join the results from each subset of calls through Promise.all.NOTE\nRecent Spotify search APIs will require an access token to be specified in the request headers:So, you to run the following example you need to put your access token in the request headers:var spotifyAccessToken = \"YourSpotifyAccessToken\";\r\nvar console = {\r\n    log: function(s) {\r\n        document.getElementById(\"console\").innerHTML += s + \"<br/>\"\r\n    }\r\n}\r\n\r\n// Simple XMLHttpRequest\r\n// based on https://davidwalsh.name/xmlhttprequest\r\nSimpleRequest = {\r\n    call: function(what, response) {\r\n        var request;\r\n        if (window.XMLHttpRequest) { // Mozilla, Safari, ...\r\n            request = new XMLHttpRequest();\r\n        } else if (window.ActiveXObject) { // Internet Explorer\r\n            try {\r\n                request = new ActiveXObject('Msxml2.XMLHTTP');\r\n            }\r\n            catch (e) {\r\n                try {\r\n                  request = new ActiveXObject('Microsoft.XMLHTTP');\r\n                } catch (e) {}\r\n            }\r\n        }\r\n\r\n        // State changes\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState === 4) { // Done\r\n                if (request.status === 200) { // Complete\r\n                    response(request.responseText)\r\n                }\r\n                else\r\n                    response();\r\n            }\r\n        }\r\n        request.open('GET', what, true);\r\n        request.setRequestHeader(\"Authorization\", \"Bearer \" + spotifyAccessToken);\r\n        request.send(null);\r\n    }\r\n}\r\n\r\n//PromiseAll\r\nvar promiseAll = function(items, block, done, fail) {\r\n    var self = this;\r\n    var promises = [],\r\n                   index = 0;\r\n    items.forEach(function(item) {\r\n        promises.push(function(item, i) {\r\n            return new Promise(function(resolve, reject) {\r\n                if (block) {\r\n                    block.apply(this, [item, index, resolve, reject]);\r\n                }\r\n            });\r\n        }(item, ++index))\r\n    });\r\n    Promise.all(promises).then(function AcceptHandler(results) {\r\n        if (done) done(results);\r\n    }, function ErrorHandler(error) {\r\n        if (fail) fail(error);\r\n    });\r\n}; //promiseAll\r\n\r\n// LP: deferred execution block\r\nvar ExecutionBlock = function(item, index, resolve, reject) {\r\n    var url = \"https://api.spotify.com/v1/\"\r\n    url += item;\r\n    console.log( url )\r\n    SimpleRequest.call(url, function(result) {\r\n        if (result) {\r\n\r\n            var profileUrls = JSON.parse(result).playlists.items.map(function(item, index) {\r\n                return item.owner.href;\r\n            })\r\n            resolve(profileUrls);\r\n        }\r\n        else {\r\n            reject(new Error(\"call error\"));\r\n        }\r\n    })\r\n}\r\n\r\narr = [\r\n    \"search?type=playlist&q=%22doom%20metal%22\",\r\n    \"search?type=playlist&q=Adele\"\r\n]\r\n\r\npromiseAll(arr, function(item, index, resolve, reject) {\r\n    console.log(\"Making request [\" + index + \"]\")\r\n    ExecutionBlock(item, index, resolve, reject);\r\n}, function(results) { // Aggregated results\r\n\r\n    console.log(\"All profiles received \" + results.length);\r\n    //console.log(JSON.stringify(results[0], null, 2));\r\n\r\n    ///// promiseall again\r\n\r\n    var ExecutionProfileBlock = function(item, index, resolve, reject) {\r\n        SimpleRequest.call(item, function(result) {\r\n            if (result) {\r\n                var obj = JSON.parse(result);\r\n                resolve({\r\n                    name: obj.display_name,\r\n                    followers: obj.followers.total,\r\n                    url: obj.href\r\n                });\r\n            } //result\r\n        })\r\n    } //ExecutionProfileBlock\r\n\r\n    promiseAll(results[0], function(item, index, resolve, reject) {\r\n        //console.log(\"Making request [\" + index + \"] \" + item)\r\n        ExecutionProfileBlock(item, index, resolve, reject);\r\n    }, function(results) { // aggregated results\r\n        console.log(\"All response received \" + results.length);\r\n        console.log(JSON.stringify(results, null, 2));\r\n    }\r\n\r\n    , function(error) { // Error\r\n        console.log(error);\r\n    })\r\n\r\n    /////\r\n\r\n  },\r\n  function(error) { // Error\r\n      console.log(error);\r\n  });\n<div id=\"console\" />I have extensively discussed this solution here.",
                "The short answer is, you have to implement a callback like this:",
                "JavaScript is single threaded.The browser can be divided into three parts:Event LoopWeb APIEvent QueueThe event loop runs for forever, i.e., kind of an infinite loop. The event queue is where all your functions are pushed on some event (example: click).This is one by one carried out of queue and put into the event loop which executes this function and prepares itself for the next one after the first one is executed. This means execution of one function doesn't start until the function before it in the queue is executed in the event loop.Now let us think we pushed two functions in a queue. One is for getting a data from the server and another utilises that data. We pushed the serverRequest() function in the queue first and then the utiliseData() function. The serverRequest function goes in the event loop and makes a call to server as we never know how much time it will take to get data from server, so this process is expected to take time and so we busy our event loop thus hanging our page.That's where Web API come into the role. It takes this function from the event loop and deals with the server making the event loop free, so that we can execute the next function from the queue.The next function in the queue is utiliseData() which goes in the loop, but because of no data available, it goes to waste and execution of the next function continues until the end of the queue. (This is called Async calling, i.e., we can do something else until we get data.)Let us suppose our serverRequest() function had a return statement in code. When we get back data from the server Web API, it will push it in the queue at the end of queue.As it gets pushed at the end of the queue, we cannot utilise its data as there isn't any function left in our queue to utilise this data. Thus it is not possible to return something from the async call.Thus the solution to this is callback or promise.We give our function (function utilising data returned from the server) to a function calling the server.In my code it is called as:JavaScript.info callback",
                "This is quite simple:Here's a working version of your code:await is supported in all current browsers and Node.js 8",
                "You can use this custom library (written using Promise) to make a remote call.Simple usage example:",
                "Another solution is to execute code via the sequential executor nsynjs.nsynjs will evaluate all promises sequentially, and put the promise result into the data property:function synchronousCode() {\n\n    var getURL = function(url) {\n        return window.fetch(url).data.text().data;\n    };\n    \n    var url = 'https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js';\n    console.log('received bytes:',getURL(url).length);\n    \n};\n\nnsynjs.run(synchronousCode,{},function(){\n    console.log('synchronousCode done');\n});\n<script src=\"https://rawgit.com/amaksr/nsynjs/master/nsynjs.js\"></script>Step 1. Wrap the function with a callback into the nsynjs-aware wrapper (if it has a promisified version, you can skip this step):Step 2. Put synchronous logic into function:Step 3. Run function in synchronous manner via nsynjs:Nsynjs will evaluate all operators and expressions step-by-step, pausing execution in case if the result of some slow function is not ready.More examples are here.",
                "ECMAScript 6 has 'generators' which allow you to easily program in an asynchronous style.To run the above code you do this:If you need to target browsers that don't support ES6 you can run the code through Babel or closure-compiler to generate ECMAScript 5.The callback ...args are wrapped in an array and destructured when you read them so that the pattern can cope with callbacks that have multiple arguments. For example with node fs:",
                "We find ourselves in a universe which appears to progress along a dimension we call \"time\". We don't really understand what time is, but we have developed abstractions and vocabulary that let us reason and talk about it: \"past\", \"present\", \"future\", \"before\", \"after\".The computer systems we build--more and more--have time as an important dimension. Certain things are set up to happen in the future. Then other things need to happen after those first things eventually occur. This is the basic notion called \"asynchronicity\". In our increasingly networked world, the most common case of asynchronicity is waiting for some remote system to respond to some request.Consider an example. You call the milkman and order some milk. When it comes, you want to put it in your coffee. You can't put the milk in your coffee right now, because it is not here yet. You have to wait for it to come before putting it in your coffee. In other words, the following won't work:Because JavaScript has no way to know that it needs to wait for order_milk to finish before it executes put_in_coffee. In other words, it does not know that order_milk is asynchronous--is something that is not going to result in milk until some future time. JavaScript, and other declarative languages execute one statement after another without waiting.The classic JavaScript approach to this problem, taking advantage of the fact that JavaScript supports functions as first-class objects which can be passed around, is to pass a function as a parameter to the asynchronous request, which it will then invoke when it has completed its task sometime in the future. That is the \"callback\" approach. It looks like this:order_milk kicks off, orders the milk, then, when and only when it arrives, it invokes put_in_coffee.The problem with this callback approach is that it pollutes the normal semantics of a function reporting its result with return; instead, functions must not reports their results by calling a callback given as a parameter. Also, this approach can rapidly become unwieldy when dealing with longer sequences of events. For example, let's say that I want to wait for the milk to be put in the coffee, and then and only then perform a third step, namely drinking the coffee. I end up needing to write something like this:where I am passing to put_in_coffee both the milk to put in it, and also the action (drink_coffee) to execute once the milk has been put in. Such code becomes hard to write, and read, and debug.In this case, we could rewrite the code in the question as:This was the motivation for the notion of a \"promise\", which is a particular type of value which represents a future or asynchronous outcome of some sort. It can represent something that already happened, or that is going to happen in the future, or might never happen at all. Promises have a single method, named then, to which you pass an action to be executed when the outcome the promise represents has been realized.In the case of our milk and coffee, we design order_milk to return a promise for the milk arriving, then specify put_in_coffee as a then action, as follows:One advantage of this is that we can string these together to create sequences of future occurrences (\"chaining\"):Let's apply promises to your particular problem. We will wrap our request logic inside a function, which returns a promise:Actually, all we've done is added a return to the call to $.ajax. This works because jQuery's $.ajax already returns a kind of promise-like thing. (In practice, without getting into details, we would prefer to wrap this call so as for return a real promise, or use some alternative to $.ajax that does so.) Now, if we want to load the file and wait for it to finish and then do something, we can simply sayfor instance,When using promises, we end up passing lots of functions into then, so it's often helpful to use the more compact ES6-style arrow functions:But there's still something vaguely dissatisfying about having to write code one way if synchronous and a quite different way if asynchronous. For synchronous, we writebut if a is asynchronous, with promises we have to writeAbove, we said, \"JavaScript has no way to know that it needs to wait for the first call to finish before it executes the second\". Wouldn't it be nice if there was some way to tell JavaScript that? It turns out that there is--the await keyword, used inside a special type of function called an \"async\" function. This feature is part of the upcoming version of ECMAScript (ES), but it is already available in transpilers such as Babel given the right presets. This allows us to simply writeIn your case, you would be able to write something like",
                "Short answer: Your foo() method returns immediately, while the $ajax() call executes asynchronously after the function returns. The problem is then how or where to store the results retrieved by the async call once it returns.Several solutions have been given in this thread. Perhaps the easiest way is to pass an object to the foo() method, and to store the results in a member of that object after the async call completes.Note that the call to foo() will still return nothing useful. However, the result of the async call will now be stored in result.response.",
                "var App = App || {};\n\nApp = {\n    getDataFromServer: function(){\n\n      var self = this,\n                 deferred = $.Deferred(),\n                 requests = [];\n\n      requests.push($.getJSON('request/ajax/url/1'));\n      requests.push($.getJSON('request/ajax/url/2'));\n\n      $.when.apply(jQuery, requests).done(function(xhrResponse) {\n        return deferred.resolve(xhrResponse.result);\n      });\n      return deferred;\n    },\n\n    init: function(){\n\n        this.getDataFromServer().done(_.bind(function(resp1, resp2) {\n\n           // Do the operations which you wanted to do when you\n           // get a response from Ajax, for example, log response.\n        }, this));\n    }\n};\nApp.init();",
                "As for many others, my encounter with asynchronous calls was puzzling at\nfirst.\nI don't remember the details, but I may have tried something like:let result;\n\n$.ajax({\n  url: 'https://jsonplaceholder.typicode.com/todos/1',\n  success: function (response) {\n    console.log('\\nInside $.ajax:');\n    console.log(response);\n    result = response;\n  }\n});\n\nconsole.log('Finally, the result: ' + result);\n.as-console-wrapper { max-height: 100% !important; top: 0; }\n<script src=\n\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>Whoops! The output of the line\nconsole.log('Finally, the result: ' + result);\nwhich I thought would be printed last, is actually printed before the\nother output! \u2013 And it doesn't contain the result: it just prints undefined.\n1\nHow come?A helpful insightI distinctly remember my first aha! moment on how to understand asynchronous\ncalls.\nIt was this comment saying:\nyou actually don't want to get the data out of a callback;\nyou want to get your data-needing action into the callback!\n2\nThis is obvious in the example above.\nBut is it still possible to write code after the asynchronous call that\ndeals with the response once it has completed?The answer is yes! \u2013 It is possible.\nOne alternative is the use of a callback function in a continuation-passing\nstyle:\n3const url = 'https://jsonplaceholder.typicode.com/todos/2';\n\nfunction asynchronousCall (callback) {\n  const request = new XMLHttpRequest();\n  request.open('GET', url);\n  request.send();\n  request.onload = function () {\n    if (request.readyState === request.DONE) {\n      console.log('The request is done. Now calling back.');\n      callback(request.responseText);\n    }\n  };\n}\n\nasynchronousCall(function (result) {\n  console.log('This is the start of the callback function. Result:');\n  console.log(result);\n  console.log('The callback function finishes on this line. THE END!');\n});\n\nconsole.log('LAST in the code, but executed FIRST!');\n.as-console-wrapper { max-height: 100% !important; top: 0; }Note how the function asynchronousCall is void. It returns nothing.\nInstead, by calling asynchronousCall with an anonymous callback function\n(asynchronousCall(function (result) {...), this function executes the\ndesired actions on the result, but only after the request has completed \u2013\nwhen the responseText is available.Running the above snippet shows how I will probably not want to write any code\nafter the asyncronous call (such as the line\nLAST in the code, but executed FIRST!).\nWhy? \u2013 Because such code will\nhappen before the asyncronous call delivers any response data.\nDoing so is bound to cause confusion when comparing the code with the output.The .then() construct was introduced in the ECMA-262 6th Edition in June\n2015, and the async/await construct was introduced in the ECMA-262\n8th Edition in June 2017.\nThe code below is still plain JavaScript, replacing the old-school\nXMLHttpRequest with Fetch.\n4fetch('http://api.icndb.com/jokes/random')\n  .then(response => response.json())\n  .then(responseBody => {\n    console.log('.then() - the response body:');\n    console.log(JSON.stringify(responseBody) + '\\n\\n');\n  });\n\nasync function receiveAndAwaitPromise () {\n  const responseBody =\n    (await fetch('http://api.icndb.com/jokes/random')).json();\n  console.log('async/await:');\n  console.log(JSON.stringify(await responseBody) + '\\n\\n');\n}\n\nreceiveAndAwaitPromise();\n.as-console-wrapper { max-height: 100% !important; top: 0; }A word of warning is warranted if you decide to go with the async/await\nconstruct. Note in the above snippet how await is needed in two places.\nIf forgotten in the first place, there will be no output. If forgotten in the\nsecond place, the only output will be the empty object, {}\n(or [object Object] or [object Promise]).\nForgetting the async prefix of the function is maybe the worst of all \u2013 the\noutput will be \"SyntaxError: missing ) in parenthetical\" \u2013 no mentioning of\nthe missing async keyword.Suppose we need to request a whole bunch of URLs.\nI could send one request, wait till it responds, then send the next request,\nwait till it responds, and so on ...\nAargh! \u2013 That could take a loong time. Wouldn't it be better if I could send\nthem all at once, and then wait no longer than it takes for the slowest\nresponse to arrive?As a simplified example, I will use:The JSONs of the two URLs:The goal is to get an array of objects, where each object contains the title\nvalue from the corresponding URL.To make it a little more interesting, I will assume that there is already an\narray of names that I want the array of URL results (the titles) to be\nmerged with:The desired output is a mashup combining namesonly and urls into an\narray of objects:where I have changed the name of title to loremipsum.const namesonly = ['two','three'];\n\nconst urls = ['https://jsonplaceholder.typicode.com/todos/2',\n  'https://jsonplaceholder.typicode.com/todos/3'];\n\nPromise.all(urls.map(url => fetch(url)\n  .then(response => response.json())\n  .then(responseBody => responseBody.title)))\n  .then(titles => {\n    const names = namesonly.map(value => ({ name: value }));\n    console.log('names: ' + JSON.stringify(names));\n    const latins = titles.map(value => ({ loremipsum: value }));\n    console.log('latins:\\n' + JSON.stringify(latins));\n    const result =\n      names.map((item, i) => Object.assign({}, item, latins[i]));\n    console.log('result:\\n' + JSON.stringify(result));\n  });\n.as-console-wrapper { max-height: 100% !important; top: 0; }All the above examples are short and succinctly convey how asynchronous calls\nmay be used on toyish APIs.\nUsing small APIs works well to explain concepts and working code, but the\nexamples might be a bit of dry runs.The next section will show a more realistic example on how APIs may be\ncombined to create a more interesting output.The MusicBrainz API\nhas information about artists and music bands.\nAn example \u2013 a request for the British rock band Coldplay is:\nhttp://musicbrainz.org/ws/2/artist/cc197bad-dc9c-440d-a5b5-d52ba2e14234?&fmt=json&inc=url-rels+release-groups.\nThe JSON response contains \u2013 among other things \u2013 the 25 earliest album titles\nby the band.\nThis information is in the release-groups array.\nThe start of this array, including its first object is:This JSON snippet shows that the first album by Coldplay is Parachutes.\nIt also gives an id, in this case 1dc4c347-a1db-32aa-b14f-bc9cc507b843,\nwhich is a unique identifier of the album.This identifier can be used to make a lookup in the Cover Art Archive API:\nhttp://coverartarchive.org/release-group/1dc4c347-a1db-32aa-b14f-bc9cc507b843.\n7For each album, the JSON response contains some images, one of which is the\nfront cover of the album.\nThe first few lines of the response to the above request:Of interest here is the line\n\"small\": \"http://coverartarchive.org/release/435fc965-9121-461e-b8da-d9b505c9dc9b/4086974851-250.jpg\".\nThat URL is a direct link to the front cover of the Parachutes album.The code to create and visualize the mashupThe overall task is to use Postman to visualize all the album titles and front\ncovers of a music band.\nHow to write code to achieve this has already been described in quite some\ndetail in  an answer to the question\nHow can I visualize an API mashup in Postman? \u2013 Therefore I will avoid\nlengthy discussions here and just present the code and a screenshot of the\nresult:The result and documentationHow to download and run the Postman CollectionRunning the Postman Collection should be straightforward.\nAssuming you are using the desktop version of Postman, do as follows:Download and save\nhttp://henke.atwebpages.com/postman/mbid/MusicBands.pm_coll.json\nin a suitable place on your hard drive.In Postman, Ctrl + O > Upload Files >\nMusicBands.pm_coll.json > Import.\nYou should now see MusicBands among your collections in Postman.Collections > MusicBands > DummyRequest > Send.\n8In the Postman Response Body, click Visualize.You should now be able to scroll 15 albums as indicated by the\nscreenshot above.1 Expressed by the original poster as: they all return\nundefined.\n2 If you think asynchronous calls are confusing, consider having a\nlook at some questions and answers about asynchronous calls to see if that helps.\n3 The name XMLHttpRequest is as misleading as the X in\nAJAX \u2013 these days the data format of Web APIs is ubiquitously JSON, not XML.\n4 Fetch\nreturns a Promise.\nI was surprised to learn that neither XMLHttpRequest nor Fetch are part of\nthe ECMAScript standard.\nThe reason JavaScript can access them here is because the web browser provides\nthem.\nThe Fetch Standard and\nthe XMLHttpRequest Standard are both upheld by\nthe Web Hypertext Application Technology Working Group (WHATWG) that was formed in June 2004.\n5 This section borrows a lot from\nHow can I fetch an array of URLs with Promise.all?.\n6 This section relies heavily on\nHow can I visualize an API mashup in Postman?.\n7 This URL is automatically redirected to:\nhttps://ia800503.us.archive.org/29/items/mbid-435fc965-9121-461e-b8da-d9b505c9dc9b/index.json.\n8 If you get an error,\nSomething went wrong while running your scripts,\ntry hitting Send again.",
                "Use a callback() function inside the foo() success.\nTry it in this way. It is simple and easy to understand.",
                "The most perfect answer to this question is using Promise.There is a problem with using promises!I was using this solution for a while until I figured out there is an error in old browsers:Uncaught ReferenceError: Promise is not definedSo I decided to implement my own Promise class for ES3 to below JavaScript compilers if it's not defined. Just add this code before your main code and then safely use Promise!",
                "Of course there are many approaches like synchronous request, promise, but from my experience I think you should use the callback approach. It's natural to asynchronous behavior of JavaScript.So, your code snippet can be rewritten to be a little different:",
                "The question was:How do I return the response from an asynchronous call?which can be interpreted as:How to make asynchronous code look synchronous?The solution will be to avoid callbacks, and use a combination of Promises and async/await.I would like to give an example for an Ajax request.(Although it can be written in JavaScript, I prefer to write it in Python, and compile it to JavaScript using Transcrypt. It will be clear enough.)Let\u2019s first enable jQuery usage, to have $ available as S:Define a function which returns a Promise, in this case an Ajax call:Use the asynchronous code as if it were synchronous:",
                "Rather than throwing code at you, there are two concepts that are key to understanding how JavaScript handles callbacks and asynchronicity (is that even a word?)There are three things you need to be aware of; The queue; the event loop and the stackIn broad, simplistic terms, the event loop is like the project manager, it is constantly listening for any functions that want to run and communicates between the queue and the stack.Once it receives a message to run something it adds it to the queue. The queue is the list of things that are waiting to execute (like your AJAX request). imagine it like this:When one of these messages is going to execute it pops the message from the queue and creates a stack, the stack is everything JavaScript needs to execute to perform the instruction in the message. So in our example it's being told to call foobarFuncSo anything that foobarFunc needs to execute (in our case anotherFunction) will get pushed onto the stack. executed, and then forgotten about - the event loop will then move onto the next thing in the queue (or listen for messages)The key thing here is the order of execution. That isWhen you make a call using AJAX to an external party or run any asynchronous code (a setTimeout for example), JavaScript is dependant upon a response before it can proceed.The big question is when will it get the response? The answer is we don't know - so the event loop is waiting for that message to say \"hey run me\". If JavaScript just waited around for that message synchronously your app would freeze and it will suck. So JavaScript carries on executing the next item in the queue whilst waiting for the message to get added back to the queue.That's why with asynchronous functionality we use things called callbacks. - A function or handler that, when passed into another function, will be executed at a later date. A promise uses callbacks (functions passed to .then() for example) as a way to reason about this asynchronous behaviour in a more linear way. The promise is a way of saying \"I promise to return something at some point\" and the callback is how we handle that value that is eventually returned. jQuery uses specific callbacks called deffered.done deffered.fail and deffered.always (amongst others). You can see them all hereSo what you need to do is pass a function that is promised to execute at some point with data that is passed to it.Because a callback is not executed immediately but at a later time it's important to pass the reference to the function not it executed. soso most of the time (but not always) you'll pass foo not foo()Hopefully that will make some sense. When you encounter things like this that seem confusing - i highly recommend reading the documentation fully to at least get an understanding of it. It will make you a much better developer."
            ]
        },
        {
            "tag": "javascript_files",
            "patterns": [
                "How do I include a JavaScript file in another JavaScript file?",
                "JavaScript files",
                "Files in other files"
            ],
            "responses": [
                "The old versions of JavaScript had no import, include, or require, so many different approaches to this problem have been developed.But since 2015 (ES6), JavaScript has had the ES6 modules standard to import modules in Node.js, which is also supported by most modern browsers.For compatibility with older browsers, build tools like Webpack and Rollup and/or transpilation tools like Babel can be used.ECMAScript (ES6) modules have been supported in Node.js since v8.5, with the --experimental-modules flag, and since at least Node.js v13.8.0 without the flag. To enable \"ESM\" (vs. Node.js's previous CommonJS-style module system [\"CJS\"]) you either use \"type\": \"module\" in package.json or give the files the extension .mjs. (Similarly, modules written with Node.js's previous CJS module can be named .cjs if your default is ESM.)Using package.json:Then module.js:Then main.js:Using .mjs, you'd have module.mjs:Then main.mjs:Browsers have had support for loading ECMAScript modules directly (no tools like Webpack required) since Safari 10.1, Chrome 61, Firefox 60, and Edge 16. Check the current support at caniuse. There is no need to use Node.js' .mjs extension; browsers completely ignore file extensions on modules/scripts.Read more at https://jakearchibald.com/2017/es-modules-in-browsers/Dynamic imports let the script load other scripts as needed:Read more at https://developers.google.com/web/updates/2017/11/dynamic-importThe older CJS module style, still widely used in Node.js, is the module.exports/require system.There are other ways for JavaScript to include external JavaScript contents in browsers that do not require preprocessing.You could load an additional script with an AJAX call and then use eval to run it. This is the most straightforward way, but it is limited to your domain because of the JavaScript sandbox security model. Using eval also opens the door to bugs, hacks and security issues.Like Dynamic Imports you can load one or many scripts with a fetch call using promises to control order of execution for script dependencies using the Fetch Inject library:The jQuery library provides loading functionality in one line:You could add a script tag with the script URL into the HTML. To avoid the overhead of jQuery, this is an ideal solution.The script can even reside on a different server. Furthermore, the browser evaluates the code. The <script> tag can be injected into either the web page <head>, or inserted just before the closing </body> tag.Here is an example of how this could work:This function will add a new <script> tag to the end of the head section of the page, where the src attribute is set to the URL which is given to the function as the first parameter.Both of these solutions are discussed and illustrated in JavaScript Madness: Dynamic Script Loading.Now, there is a big issue you must know about. Doing that implies that you remotely load the code. Modern web browsers will load the file and keep executing your current script because they load everything asynchronously to improve performance. (This applies to both the jQuery method and the manual dynamic script loading method.)It means that if you use these tricks directly, you won't be able to use your newly loaded code the next line after you asked it to be loaded, because it will be still loading.For example: my_lovely_script.js contains MySuperObject:Then you reload the page hitting F5. And it works! Confusing...So what to do about it ?Well, you can use the hack the author suggests in the link I gave you. In summary, for people in a hurry, he uses an event to run a callback function when the script is loaded. So you can put all the code using the remote library in the callback function. For example:Then you write the code you want to use AFTER the script is loaded in a lambda function:Then you run all that:Note that the script may execute after the DOM has loaded, or before, depending on the browser and whether you included the line script.async = false;. There's a great article on Javascript loading in general which discusses this.As mentioned at the top of this answer, many developers use build/transpilation tool(s) like Parcel, Webpack, or Babel in their projects, allowing them to use upcoming JavaScript syntax, provide backward compatibility for older browsers, combine files, minify, perform code splitting etc.",
                "If anyone is looking for something more advanced, try out RequireJS. You'll get added benefits such as dependency management, better concurrency, and avoid duplication (that is, retrieving a script more than once).You can write your JavaScript files in \"modules\" and then reference them as dependencies in other scripts. Or you can use RequireJS as a simple \"go get this script\" solution.Example:Define dependencies as modules:some-dependency.jsimplementation.js is your \"main\" JavaScript file that depends on some-dependency.jsExcerpt from the GitHub README:RequireJS loads plain JavaScript files as well as more defined\n  modules. It is optimized for in-browser use, including in a Web\n  Worker, but it can be used in other JavaScript environments, like\n  Rhino and Node. It implements the Asynchronous Module API.RequireJS uses plain script tags to load modules/files, so it should\n  allow for easy debugging. It can be used simply to load existing\n  JavaScript files, so you can add it to your existing project without\n  having to re-write your JavaScript files....",
                "There actually is a way to load a JavaScript file not asynchronously, so you could use the functions included in your newly loaded file right after loading it, and I think it works in all browsers.You need to use jQuery.append() on the <head> element of your page, that is:However, this method also has a problem: if an error happens in the imported JavaScript file, Firebug (and also Firefox Error Console and Chrome Developer Tools as well) will report its place incorrectly, which is a big problem if you use Firebug to track JavaScript errors down a lot (I do). Firebug simply doesn't know about the newly loaded file for some reason, so if an error occurs in that file, it reports that it occurred in your main HTML file, and you will have trouble finding out the real reason for the error.But if that is not a problem for you, then this method should work.I have actually written a jQuery plugin called $.import_js() which uses this method:So all you would need to do to import JavaScript is:I also made a simple test for this at Example.It includes a main.js file in the main HTML and then the script in main.js uses $.import_js() to import an additional file called included.js, which defines this function:And right after including included.js, the hello() function is called, and you get the alert.(This answer is in response to e-satis' comment).",
                "Another way, that in my opinion is much cleaner, is to make a synchronous Ajax request instead of using a <script> tag. Which is also how Node.js handles includes.Here's an example using jQuery:You can then use it in your code as you'd usually use an include:And be able to call a function from the required script in the next line:",
                "It is possible to dynamically generate a JavaScript tag and append it to HTML document from inside other JavaScript code. This will load targeted JavaScript file.",
                "There is a good news for you. Very soon you will be able to load JavaScript code easily. It will become a standard way of importing modules of JavaScript code and will be part of core JavaScript itself.You simply have to write import cond from 'cond.js'; to load a macro named cond from a file cond.js.So you don't have to rely upon any JavaScript framework nor do you have to explicitly make Ajax calls.Refer to:Static module resolutionModule loaders",
                "Statement import is in ECMAScript 6.Syntax",
                "Maybe you can use this function that I found on this page How do I include a JavaScript file in a JavaScript file?:",
                "Here is a synchronous version without jQuery:Note that to get this working cross-domain, the server will need to set allow-origin header in its response.",
                "I just wrote this JavaScript code (using Prototype for DOM manipulation):Usage:Gist: http://gist.github.com/284442.",
                "If you want it in pure JavaScript, you can use document.write.If you use the jQuery library, you can use the $.getScript method.",
                "Here's the generalized version of how Facebook does it for their ubiquitous Like button:<script>\r\n  var firstScript = document.getElementsByTagName('script')[0],\r\n      js = document.createElement('script');\r\n  js.src = 'https://cdnjs.cloudflare.com/ajax/libs/Snowstorm/20131208/snowstorm-min.js';\r\n  js.onload = function () {\r\n    // do stuff with your dynamically loaded script\r\n    snowStorm.snowColor = '#99ccff';\r\n  };\r\n  firstScript.parentNode.insertBefore(js, firstScript);\r\n</script>If it works for Facebook, it will work for you.The reason why we look for the first script element instead of head or body is because some browsers don't create one if missing, but we're guaranteed to have a script element - this one. Read more at http://www.jspatterns.com/the-ridiculous-case-of-adding-a-script-element/.",
                "You can also assemble your scripts using PHP:File main.js.php:",
                "Most of solutions shown here imply dynamical loading. I was searching instead for a compiler which assemble all the depended files into a single output file. The same as Less/Sass preprocessors deal with the CSS @import at-rule. Since I didn't find anything decent of this sort, I wrote a simple tool solving the issue.So here is the compiler, https://github.com/dsheiko/jsic, which replaces $import(\"file-path\") with the requested file content securely. Here is the corresponding Grunt plugin: https://github.com/dsheiko/grunt-jsic.On the jQuery master branch, they simply concatenate atomic source files into a single one starting with intro.js and ending with outtro.js. That doesn't suits me as it provides no flexibility on the source code design. Check out how it works with jsic:src/main.jssrc/Form/Input/Tel.jsNow we can run the compiler:And get the combined filebuild/main.js",
                "If your intention to load the JavaScript file is using the functions from the imported/included file, you can also define a global object and set the functions as object items. For instance:You just need to be careful when you are including scripts in an HTML file. The order should be as in below:",
                "This should do:",
                "Or rather than including at run time, use a script to concatenate prior to upload.I use Sprockets (I don't know if there are others). You build your JavaScript code in separate files and include comments that are processed by the Sprockets engine as includes. For development you can include files sequentially, then for production to merge them...See also:",
                "I had a simple issue, but I was baffled by responses to this question.I had to use a variable (myVar1) defined in one JavaScript file (myvariables.js) in another JavaScript file (main.js).For this I did as below:Loaded the JavaScript code in the HTML file, in the correct order, myvariables.js first, then main.js:File: myvariables.jsFile: main.jsAs you saw, I had use a variable in one JavaScript file in another JavaScript file, but I didn't need to include one in another. I just needed to ensure that the first JavaScript file loaded before the second JavaScript file, and, the first JavaScript file's variables are accessible in the second JavaScript file, automatically.This saved my day. I hope this helps.",
                "In a modern language with the check if script has already been loaded, it would be:Usage (async/await):orUsage (Promise):",
                "The @import syntax for achieving CSS-like JavaScript importing is possible using a tool such as Mixture via their special .mix file type (see here). I assume the application does this via one of above-mentioned methods.From the Mixture documentation on .mix files:Mix files are simply .js or .css files with .mix. in the file name. A\nmix file simply     extends the functionality of a normal style or\nscript file and allows you to import and combine.Here's an example .mix file that combines multiple .js files into one:Mixture outputs this as scripts-global.js and also as a minified version (scripts-global.min.js).Note: I'm not in any way affiliated with Mixture, other than using it as a front-end development tool. I came across this question upon seeing a .mix JavaScript file in action (in one of the Mixture boilerplates) and being a bit confused by it (\"you can do this?\" I thought to myself). Then I realized that it was an application-specific file type (somewhat disappointing, agreed). Nevertheless, figured the knowledge might be helpful for others.Note: Mixture was discontinued on 2016/07/26 (after being open sourced on 2015/04/12).",
                "In case you are using Web Workers and want to include additional scripts in the scope of the worker, the other answers provided about adding scripts to the head tag, etc. will not work for you.Fortunately, Web Workers have their own importScripts function which is a global function in the scope of the Web Worker, native to the browser itself as it is part of the specification.Alternatively, as the second highest voted answer to your question highlights, RequireJS can also handle including scripts inside a Web Worker (likely calling importScripts itself, but with a few other useful features).",
                "Yes, use type=\"module\" in a script tag (support):And in a script.js file include another file like this:In 'module.js' you must export the function/class that you will import:A working example is here.",
                "Although these answers are great, there is a simple \"solution\" that has been around since script loading existed, and it will cover 99.999% of most people's use cases. Just include the script you need before the script that requires it. For most projects it does not take long to determine which scripts are needed and in what order.If script2 requires script1, this really is the absolute easiest way to do something like this. I'm very surprised no-one has brought this up, as it's the most obvious and simplest answer that will apply in nearly every single case.",
                "My usual method is:It works great and uses no page-reloads for me. I've tried the AJAX method (one of the other answers) but it doesn't seem to work as nicely for me.Here's an explanation of how the code works for those that are curious: essentially, it creates a new script tag (after the first one) of the URL. It sets it to asynchronous mode so it doesn't block the rest of the code, but calls a callback when the readyState (the state of the content to be loaded) changes to 'loaded'.",
                "I wrote a simple module that automates the job of importing/including module scripts in JavaScript. For detailed explanation of the code, refer to the blog post JavaScript require / import / include modules.",
                "This script will add a JavaScript file to the top of any other <script> tag:",
                "Keep it nice, short, simple, and maintainable! :]This code is simply a short functional example that could require additional feature functionality for full support on any (or given) platform.",
                "I came to this question because I was looking for a simple way to maintain a collection of useful JavaScript plugins. After seeing some of the solutions here, I came up with this:Set up a file called \"plugins.js\" (or extensions.js or whatever you want). Keep your plugin files together with that one master file.plugins.js will have an array called pluginNames[] that we will iterate over each(),\nthen append a <script> tag to the head for each pluginBUT:Even though all of the plugins get dropped into the head tag the way they ought to, they don't always get run by the browser when you click into the page or refresh.I've found it's more reliable to just write the script tags in a PHP include. You only have to write it once and that's just as much work as calling the plugin using JavaScript.",
                "There are several ways to implement modules in JavaScript. Here are the two most popular ones:Browsers do not support this moduling system yet, so in order for you to use this syntax you must use a bundler like Webpack. Using a bundler is better anyway because this can combine all of your different files into a single (or a couple of related) files. This will serve the files from the server to the client faster because each HTTP request has some associated overhead accompanied with it. Thus by reducing the overall HTTP request we improve the performance. Here is an example of ES6 modules:This moduling system is used in Node.js. You basically add your exports to an object which is called module.exports. You then can access this object via a require('modulePath'). Important here is to realize that these modules are being cached, so if you require() a certain module twice it will return the already created module."
            ]
        },
        {
            "tag": "let",
            "patterns": [
                "What is the difference between \"let\" and \"var\"?",
                "Let vs Var",
                "Let",
                "Var"
            ],
            "responses": [
                "The main difference is scoping rules. Variables declared by var keyword are scoped to the immediate function body (hence the function scope) while let variables are scoped to the immediate enclosing block denoted by { } (hence the block scope).function run() {\n  var foo = \"Foo\";\n  let bar = \"Bar\";\n\n  console.log(foo, bar); // Foo Bar\n\n  {\n    var moo = \"Mooo\"\n    let baz = \"Bazz\";\n    console.log(moo, baz); // Mooo Bazz\n  }\n\n  console.log(moo); // Mooo\n  console.log(baz); // ReferenceError\n}\n\nrun();The reason why let keyword was introduced to the language was function scope is confusing and was one of the main sources of bugs in JavaScript.Take a look at this example from another Stack Overflow question:var funcs = [];\n// let's create 3 functions\nfor (var i = 0; i < 3; i++) {\n  // and store them in funcs\n  funcs[i] = function() {\n    // each should log its value.\n    console.log(\"My value: \" + i);\n  };\n}\nfor (var j = 0; j < 3; j++) {\n  // and now let's run each one to see\n  funcs[j]();\n}My value: 3 was output to console each time funcs[j](); was invoked since anonymous functions were bound to the same variable.People had to create immediately invoked functions to capture correct values from the loops but that was also hairy.While variables declared with var keyword are hoisted (initialized with undefined before the code is run) which means they are accessible in their enclosing scope even before they are declared:function run() {\n  console.log(foo); // undefined\n  var foo = \"Foo\";\n  console.log(foo); // Foo\n}\n\nrun();let variables are not initialized until their definition is evaluated. Accessing them before the initialization results in a ReferenceError. The variable is said to be in \"temporal dead zone\" from the start of the block until the initialization is processed.function checkHoisting() {\n  console.log(foo); // ReferenceError\n  let foo = \"Foo\";\n  console.log(foo); // Foo\n}\n\ncheckHoisting();At the top level, let, unlike var, does not create a property on the global object:var foo = \"Foo\";  // globally scoped\nlet bar = \"Bar\"; // not allowed to be globally scoped\n\nconsole.log(window.foo); // Foo\nconsole.log(window.bar); // undefinedIn strict mode, var will let you re-declare the same variable in the same scope while let raises a SyntaxError.'use strict';\nvar foo = \"foo1\";\nvar foo = \"foo2\"; // No problem, 'foo1' is replaced with 'foo2'.\n\nlet bar = \"bar1\"; \nlet bar = \"bar2\"; // SyntaxError: Identifier 'bar' has already been declared",
                "let can also be used to avoid problems with closures. It binds fresh value rather than keeping an old reference as shown in examples below.for(var i=1; i<6; i++) {\r\n  $(\"#div\" + i).click(function () { console.log(i); });\r\n}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n<p>Clicking on each number will log to console:</p> \r\n<div id=\"div1\">1</div>\r\n<div id=\"div2\">2</div>\r\n<div id=\"div3\">3</div>\r\n<div id=\"div4\">4</div>\r\n<div id=\"div5\">5</div>Code above demonstrates a classic JavaScript closure problem. Reference to the i variable is being stored in the click handler closure, rather than the actual value of i.Every single click handler will refer to the same object because there\u2019s only one counter object which holds 6 so you get six on each click.A general workaround is to wrap this in an anonymous function and pass i as an argument. Such issues can also be avoided now by using let instead var as shown in the code below.(Tested in Chrome and Firefox 50)for(let i=1; i<6; i++) {\r\n  $(\"#div\" + i).click(function () { console.log(i); });\r\n}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n<p>Clicking on each number will log to console:</p> \r\n<div id=\"div1\">1</div>\r\n<div id=\"div2\">2</div>\r\n<div id=\"div3\">3</div>\r\n<div id=\"div4\">4</div>\r\n<div id=\"div5\">5</div>",
                "To understand the difference, consider the following code:Here, we can see that our variable j is only known in the first for loop, but not before and after. Yet, our variable i is known in the entire function.Also, consider that block scoped variables are not known before they are declared because they are not hoisted. You're also not allowed to redeclare the same block scoped variable within the same block. This makes block scoped variables less error prone than globally or functionally scoped variables, which are hoisted and which do not produce any errors in case of multiple declarations.Some people would argue that in the future we'll ONLY use let statements and that var statements will become obsolete. JavaScript guru Kyle Simpson wrote a very elaborate article on why he believes that won't be the case.Today, however, that is definitely not the case. In fact, we need actually to ask ourselves whether it's safe to use the let statement. The answer to that question depends on your environment:If you're writing server-side JavaScript code (Node.js), you can safely use the let statement.If you're writing client-side JavaScript code and use a browser based transpiler (like Traceur or babel-standalone), you can safely use the let statement, however your code is likely to be anything but optimal with respect to performance.If you're writing client-side JavaScript code and use a Node based transpiler (like the traceur shell script or Babel), you can safely use the let statement. And, because your browser will only know about the transpiled code, performance drawbacks should be limited.If you're writing client-side JavaScript code and don't use a transpiler, you need to consider browser support.There are still some browsers that don't support let at all :For an up-to-date overview of which browsers support the let statement at the time of your reading this answer, see this Can I Use page.(*) Globally and functionally scoped variables can be initialized and used before they are declared because JavaScript variables are hoisted. This means that declarations are always moved to the top of the scope.(**) Block scoped variables are not hoisted",
                "Here's an explanation of the let keyword with some examples.let works very much like var. The main difference is that the scope of a var variable is the entire enclosing functionThis table on Wikipedia shows which browsers support Javascript 1.7.Note that only Mozilla and Chrome browsers support it. IE, Safari, and potentially others don't.",
                "Variables declared using the let keyword are block-scoped, which means that they are available only in the block in which they were declared.At the top level, variables declared using let don't create properties on the global object.Inside a function (but outside of a block), let has the same scope as var.Variables declared using let inside a block can't be accessed outside that block.Variables declared with let in loops can be referenced only inside that loop.If you use let instead of var in a loop, with each iteration you get a new variable. That means that you can safely use a closure inside a loop.Because of the temporal dead zone, variables declared using let can't be accessed before they are declared. Attempting to do so throws an error.You can't declare the same variable multiple times using let. You also can't declare a variable using let with the same identifier as another variable which was declared using var.const is quite similar to let\u2014it's block-scoped and has TDZ. There are, however, two things which are different.Variable declared using const can't be re-assigned.Note that it doesn't mean that the value is immutable. Its properties still can be changed.If you want to have an immutable object, you should use Object.freeze().You always must specify a value when declaring a variable using const.",
                "The accepted answer is missing a point:",
                "\u26a1\ufe0f Sandbox to play around \u2193",
                "The main difference is the scope difference, while let can be only available inside the scope it's declared, like in for loop, var can be accessed outside the loop for example. From the documentation in MDN (examples also from MDN):let allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used. This is unlike the var keyword, which defines a variable globally, or locally to an entire function regardless of block scope.Variables declared by let have as their scope the block in which they are defined, as well as in any contained sub-blocks. In this way, let works very much like var. The main difference is that the scope of a var variable is the entire enclosing function:At the top level of programs and functions, let, unlike var, does not create a property on the global object. For example:When used inside a block, let limits the variable's scope to that block. Note the difference between var whose scope is inside the function where it is declared.Also don't forget it's ECMA6 feature, so it's not fully supported yet, so it's better always transpiles it to ECMA5 using Babel etc... for more info about visit babel website",
                "Here is an example for the difference between the two (support just started for chrome):As you can see the var j variable is still having a value outside of the for loop scope (Block Scope), but the let i variable is undefined outside of the for loop scope.\"use strict\";\r\nconsole.log(\"var:\");\r\nfor (var j = 0; j < 2; j++) {\r\n  console.log(j);\r\n}\r\n\r\nconsole.log(j);\r\n\r\nconsole.log(\"let:\");\r\nfor (let i = 0; i < 2; i++) {\r\n  console.log(i);\r\n}\r\n\r\nconsole.log(i);",
                "There are some subtle differences \u2014 let scoping behaves more like variable scoping does in more or less any other languages.e.g. It scopes to the enclosing block, They don't exist before they're declared, etc.However it's worth noting that let is only a part of newer Javascript implementations and has varying degrees of browser support.",
                "Variable Not Hoistinglet will not hoist to the entire scope of the block they appear in. By contrast, var could hoist as below.Actually, Per @Bergi, Both var and let are hoisted.Garbage CollectionBlock scope of let is useful relates to closures and garbage collection to reclaim memory. Consider,The click handler callback does not need the hugeData variable at all. Theoretically, after process(..) runs, the huge data structure hugeData could be garbage collected. However, it's possible that some JS engine will still have to keep this huge structure, since the click function has a closure over the entire scope.However, the block scope can make this huge data structure to garbage collected.let loopslet in the loop can re-binds it to each iteration of the loop, making sure to re-assign it the value from the end of the previous loop iteration. Consider,However, replace var with letBecause let create a new lexical environment with those names for a) the initialiser expression b) each iteration (previosly to evaluating the increment expression), more details are here.",
                "The difference is in the scope of the variables declared with each.In practice, there are a number of useful consequences of the difference in scope:The restrictions imposed by let reduce the visibility of the variables and increase the likelihood that unexpected name collisions will be found early.  This makes it easier to track and reason about variables, including their reachability(helping with reclaiming unused memory).Consequently, let variables are less likely to cause problems when used in large programs or when independently-developed frameworks are combined in new and unexpected ways.var may still be useful if you are sure you want the single-binding effect when using a closure in a loop (#5) or for declaring externally-visible global variables in your code (#4).  Use of var for exports may be supplanted if export migrates out of transpiler space and into the core language.1. No use outside nearest enclosing block:\nThis block of code will throw a reference error because the second use of x occurs outside of the block where it is declared with let:In contrast, the same example with var works.2. No use before declaration:\nThis block of code will throw a ReferenceError before the code can be run because x is used before it is declared:In contrast, the same example with var parses and runs without throwing any exceptions.3. No redeclaration:\nThe following code demonstrates that a variable declared with let may not be redeclared later:4. Globals not attached to window:5. Easy use with closures:\nVariables declared with var do not work well with closures inside loops.  Here is a simple loop that outputs the sequence of values that the variable i has at different points in time:Specifically, this outputs:In JavaScript we often use variables at a significantly later time than when they are created.  When we demonstrate this by delaying the output with a closure passed to setTimeout:... the output remains unchanged as long as we stick with let.  In contrast, if we had used var i instead:... the loop unexpectedly outputs \"i is 5\" five times:",
                "Here's an example to add on to what others have already written. Suppose you want to make an array of functions, adderFunctions, where each function takes a single Number argument and returns the sum of the argument and the function's index in the array. Trying to generate adderFunctions with a loop using the var keyword won't work the way someone might na\u00efvely expect:The process above doesn't generate the desired array of functions because i's scope extends beyond the iteration of the for block in which each function was created. Instead, at the end of the loop, the i in each function's closure refers to i's value at the end of the loop (1000) for every anonymous function in adderFunctions. This isn't what we wanted at all: we now have an array of 1000 different functions in memory with exactly the same behavior. And if we subsequently update the value of i, the mutation will affect all the adderFunctions.However, we can try again using the let keyword:This time, i is rebound on each iteration of the for loop. Each function now keeps the value of i at the time of the function's creation, and adderFunctions behaves as expected.Now, image mixing the two behaviors and you'll probably see why it's not recommended to mix the newer let and const with the older var in the same script. Doing so can result is some spectacularly confusing code.Don't let this happen to you. Use a linter.NOTE: This is a teaching example intended to demonstrate the var/let behavior in loops and with function closures that would also be easy to understand. This would be a terrible way to add numbers. But the general technique of capturing data in anonymous function closures might be encountered in the real world in other contexts. YMMV.",
                "May the following two functions show the difference:",
                "ES6 introduced two new keyword(let and const) alternate to var.When you need a block level deceleration you can go with let and const instead of var.The below table summarize the difference between var, let and const",
                "The main difference between var and let is that variables declared with var are function scoped. Whereas functions declared with let are block scoped. For example:variables with var:When the first function testVar gets called the variable foo, declared with var, is still accessible outside the if statement. This variable foo would be available everywhere within the scope of the testVar function.variables with let:When the second function testLet gets called the variable bar, declared with let, is only accessible inside the if statement. Because variables declared with let are block scoped (where a block is the code between curly brackets e.g if{} , for{}, function{}).Another difference between var and let is variables with declared with let don't get hoisted. An example is the best way to illustrate this behavior:variables with let don't get hoisted:variables with var do get hoisted:A variable declared with let in the global scope (which is code that is not in a function) doesn't get added as a property on the global window object. For example (this code is in global scope):When should let be used over var?Use let over var whenever you can because it is simply scoped more specific. This reduces potential naming conflicts which can occur when dealing with a large number of variables. var can be used when you want a global variable explicitly to be on the window object (always consider carefully if this is really necessary).",
                "let is interesting, because it allows us to do something like this:Which results in counting [0, 7].WhereasOnly counts [0, 1].",
                "It also appears that, at least in Visual Studio 2015, TypeScript 1.5, \"var\" allows multiple declarations of the same variable name in a block, and \"let\" doesn't.This won't generate a compile error:This will:",
                "This explanation was taken from an article I wrote at Medium:Hoisting is a JavaScript mechanism where variables and function\ndeclarations are moved to the top of their scope by the parser which\nreads the source code into an intermediate representation before the\nactual code execution starts by the JavaScript interpreter. So, it actually\ndoesn\u2019t matter where variables or functions are declared, they will be\nmoved to the top of their scope regardless of whether their scope is\nglobal or local. This means thatis actually interpreted toSo, as we saw just now, var variables are being hoisted to the top\nof their scope and are being initialized with the value of undefined\nwhich means that we can actually assign their value before actually\ndeclaring them in the code like so:Regarding function declarations, we can invoke them before actually declaring them like so:Function expressions, on the other hand, are not hoisted, so we\u2019ll get the following error:ES6 introduced JavaScript developers the let and const keywords. While let and const are block-scoped and not function\nscoped as var it shouldn\u2019t make a difference while discussing their\nhoisting behavior. We\u2019ll start from the end, JavaScript hoists let\nand const.As we can see above, let doesn\u2019t allow us to use undeclared\nvariables, hence the interpreter explicitly output a reference error\nindicating that the hi variable cannot be accessed before\ninitialization. The same error will occur if we change the above let\nto constSo, bottom line, the JavaScript parser searches for variable\ndeclarations and functions and hoists them to the top of their scope\nbefore code execution and assign values to them in the memory so in\ncase the interpreter will encounter them while executing the code he\nwill recognize them and will be able to execute the code with their\nassigned values. Variables declared with let or const remain\nuninitialized at the beginning of execution while that variables\ndeclared with var are being initialized with a value of undefined.I added this visual illustration to help understanding of how are the hoisted\nvariables and function are being saved in the memory",
                "var is global scope (hoist-able) variable.let and const is block scope.test.js{\r\n    let l = 'let';\r\n    const c = 'const';\r\n    var v = 'var';\r\n    v2 = 'var 2';\r\n}\r\n\r\nconsole.log(v, this.v);\r\nconsole.log(v2, this.v2);\r\nconsole.log(l); // ReferenceError: l is not defined\r\nconsole.log(c); // ReferenceError: c is not defined",
                "varIn this code sample, variable i is declared using var. Therefore, it has a function scope. It means you can access i from only inside the function x. You can't read it from outside the function xfunction x(){\n  var i = 100;\n  console.log(i); // 100\n}\n \nconsole.log(i); // Error. You can't do this\n\nx();In this sample, you can see i is declared inside a if block. But it's declared using var. Therefore, it gets function scope. It means still you can access variable i inside function x. Because var always get scoped to functions. Even though variable i is declared inside if block, because of it's using var it get scoped to parent function x.function x(){\n  if(true){\n    var i = 100;\n  }\n  console.log(i); \n}\n\nx();Now variable i is declared inside the function y. Therefore, i scoped to function y. You can access i inside function y. But not from outside function y.function x(){\n  function y(){\n    var i = 100;\n    console.log(i);\n  }\n  \n  y();\n}\n\nx();function x(){\n  function y(){\n    var i = 100;\n  }\n  console.log(i); // ERROR\n}\n\nx();let, constlet and const has block scope.const and let behave same. But the difference is, when you assign value to const you can't re-assign. But you can re-assign values with let.In this example, variable i is declared inside an if block. So it can be only accessed from inside that if block. We can't access it from outside that if block. (here const work same as let)if(true){\n  let i = 100;\n  console.log(i); // Output: 100\n}\n\nconsole.log(i); // Errorfunction x(){\n  if(true){\n    let i = 100;\n    console.log(i); // Output: 100\n  }\n  console.log(i); // Error\n}\n\nx();Another difference with (let, const) vs var is you can access var defined variable before declaring it. It will give you undefined. But if you do that with let or const defined variable it will give you an error.console.log(x);\nvar x = 100;console.log(x); // ERROR\nlet x = 100;",
                "If I read the specs right then let thankfully can also be leveraged to avoid self invoking functions used to simulate private only members - a popular design pattern that decreases code readability, complicates debugging, that adds no real code protection or other benefit - except maybe satisfying someone's desire for semantics, so stop using it. /rantSee 'Emulating private interfaces'",
                "When Using letThe let keyword attaches the variable declaration to the scope of whatever block (commonly a { .. } pair) it's contained in. In other words,let implicitly hijacks any block's scope for its variable declaration.let variables cannot be accessed in the window object because they cannot be globally accessed.When Using varvar and variables in ES5 has scopes in functions meaning the variables are valid within the function and not outside the function itself.var variables can be accessed in the window object because they cannot be globally accessed.If you want to know more continue reading belowone of the most famous interview questions on scope also can suffice the exact use of let and var as below;When using letThis is because when using let, for every loop iteration the variable is scoped and has its own copy.When using varThis is because when using var, for every loop iteration the variable is scoped and has shared copy.",
                "Some hacks with let:1.2.3.",
                "let vs var. It's all about scope.var variables are global and can be accessed basically everywhere, while let variables are not global and only exist until a closing parenthesis kills them.See my example below, and note how the lion (let) variable acts differently in the two console.logs; it becomes out of scope in the 2nd console.log.",
                "I just came across one use case that I had to use var over let to introduce new variable. Here's a case:I want to create a new variable with dynamic variable names.The above code doesn't work because eval introduces a new block of code. The declaration using var will declare a variable outside of this block of code since var declares a variable in the function scope.let, on the other hand, declares a variable in a block scope. So, a variable will only be visible in eval block.",
                "The below shows how 'let' and 'var' are different in the scope:The gfoo, defined by let initially is in the global scope, and when we declare gfoo again inside the if clause its scope changed and when a new value is assigned to the variable inside that scope it does not affect the global scope.Whereas hfoo, defined by var is initially in the global scope, but again when we declare it inside the if clause, it considers the global scope hfoo, although var has been used again to declare it. And when we re-assign its value we see that the global scope hfoo is also affected. This is the primary difference.",
                "let is a part of es6. These functions will explain the difference in easy way.",
                "As mentioned above:The difference is scoping. var is scoped to the nearest function\n  block and let is scoped to the nearest enclosing block, which\n  can be smaller than a function block. Both are global if outside any\n  block.Lets see an example:Example1:In my both examples I have a function myfunc. myfunc contains a variable myvar equals to 10. \nIn my first example  I check   if myvar equals to 10 (myvar==10) . If yes, I agian declare  a variable  myvar (now I have two myvar variables)using var keyword and assign it a new value (20). In next line I  print its value on my console.  After the conditional block I again print the value of myvar on my console. If you look at the output of myfunc,   myvar has value equals to 20.Example2:\nIn my second example  instead of using var keyword in my conditional block I declare myvar using let keyword . Now when I call myfunc  I get two different outputs: myvar=20 and myvar=10.So the difference is very simple i.e its scope.",
                "As I am currently trying to get an in depth understanding of JavaScript I will share my brief research which contains some of the great pieces already discussed plus some other details in a different perspective.Understanding the difference between var and let can be easier if we understand the difference between function and block scope.Let's consider the following cases:when timer() gets called an ExecutionContext is created which will contain both the VariableEnvironment and all the LexicalEnvironments corresponding to each iteration.And a simpler exampleFunction ScopeBlock Scope"
            ]
        },
        {
            "tag": "equals_operator",
            "patterns": [
                "Which equals operator (== vs ===) should be used in JavaScript comparisons?",
                "equals operator",
                "==",
                "==="
            ],
            "responses": [
                "The strict equality operator (===) behaves identically to the abstract equality operator (==) except no type conversion is done, and the types must be the same to be considered equal.Reference: Javascript Tutorial: Comparison OperatorsThe == operator will compare for equality after doing any necessary type conversions.  The === operator will not do the conversion, so if two values are not the same type === will simply return false. Both are equally quick.To quote Douglas Crockford's excellent JavaScript: The Good Parts,JavaScript has two sets of equality operators: === and !==, and their evil twins == and !=.  The good ones work the way you would expect.  If the two operands are of the same type and have the same value, then === produces true and !== produces false.  The evil twins do the right thing when the operands are of the same type, but if they are of different types, they attempt to coerce the values.  the rules by which they do that are complicated and unmemorable.  These are some of the interesting cases:The lack of transitivity is alarming.  My advice is to never use the evil twins.  Instead, always use === and !==.  All of the comparisons just shown produce false with the === operator.A good point was brought up by @Casebash in the comments and in @Phillipe Laybaert's answer concerning objects.  For objects, == and === act consistently with one another (except in a special case).The special case is when you compare a primitive with an object that evaluates to the same primitive, due to its toString or valueOf method. For example, consider the comparison of a string primitive with a string object created using the String constructor.Here the == operator is checking the values of the two objects and returning true, but the === is seeing that they're not the same type and returning false.  Which one is correct?  That really depends on what you're trying to compare.  My advice is to bypass the question entirely and just don't use the String constructor to create string objects from string literals.Reference\nhttp://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3",
                "This is because the equality operator == does type coercion, meaning that the interpreter implicitly tries to convert the values before comparing.On the other hand, the identity operator === does not do type coercion, and thus does not convert the values when comparing.",
                "Here's an interesting visualisation of the equality comparison between == and ===.Source: https://github.com/dorey/JavaScript-Equality-Table (demo, unified demo)When using === for JavaScript equality testing, everything is as is.\nNothing gets converted before being evaluated.When using == for JavaScript equality testing, some funky conversions take place.Always use ===, unless you fully understand the funky conversions that take place with ==.",
                "In the answers here, I didn't read anything about what equal means. Some will say that === means equal and of the same type, but that's not really true. It actually means that both operands reference the same object, or in case of value types, have the same value.So, let's take the following code:The same here:Or even:This behavior is not always obvious. There's more to the story than being equal and being of the same type.The rule is:For value types (numbers):\na === b returns true if a and b have the same value and are of the same typeFor reference types:\na === b returns true if a and b reference the exact same objectFor strings:\na === b returns true if a and b are both strings and contain the exact same charactersStrings are not value types, but in Javascript they behave like value types, so they will be \"equal\" when the characters in the string are the same and when they are of the same length (as explained in the third rule)Now it becomes interesting:But how about this?:I thought strings behave like value types? Well, it depends who you ask... In this case a and b are not the same type. a is of type Object, while b is of type string. Just remember that creating a string object using the String constructor creates something of type Object that behaves as a string most of the time.",
                "Let me add this counsel:If in doubt, read the specification!ECMA-262 is the specification for a scripting language of which JavaScript is a dialect. Of course in practice it matters more how the most important browsers behave than an esoteric definition of how something is supposed to be handled. But it is helpful to understand why new String(\"a\") !== \"a\".Please let me explain how to read the specification to clarify this question. I see that in this very old topic nobody had an answer for the very strange effect. So, if you can read a specification, this will help you in your profession tremendously. It is an acquired skill. So, let's continue.Searching the PDF file for === brings me to page 56 of the specification: 11.9.4. The Strict Equals Operator ( === ), and after wading through the specificationalese I find:11.9.6 The Strict Equality Comparison Algorithm\nThe comparison x === y, where x and y are values, produces true or false. Such a comparison is performed as follows:\n\u00a0\u00a01. If Type(x) is different from Type(y), return false.\n\u00a0\u00a02. If Type(x) is Undefined, return true.\n\u00a0\u00a03. If Type(x) is Null, return true.\n\u00a0\u00a04. If Type(x) is not Number, go to step 11.\n\u00a0\u00a05. If x is NaN, return false.\n\u00a0\u00a06. If y is NaN, return false.\n\u00a0\u00a07. If x is the same number value as y, return true.\n\u00a0\u00a08. If x is +0 and y is \u22120, return true.\n\u00a0\u00a09. If x is \u22120 and y is +0, return true.\n\u00a0\u00a010. Return false.\n\u00a0\u00a011. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return false.\n\u00a0\u00a012. If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false.\n\u00a0\u00a013. Return true if x and y refer to the same object or if they refer to objects joined to each other (see 13.1.2). Otherwise, return false.Interesting is step 11. Yes, strings are treated as value types. But this does not explain why new String(\"a\") !== \"a\". Do we have a browser not conforming to ECMA-262?Not so fast!Let's check the types of the operands. Try it out for yourself by wrapping them in typeof(). I find that new String(\"a\") is an object, and step 1 is used: return false if the types are different.If you wonder why new String(\"a\") does not return a string, how about some exercise reading a specification? Have fun!Aidiakapi wrote this in a comment below:From the specification11.2.2 The new Operator:If Type(constructor) is not Object, throw a TypeError exception.With other words, if String wouldn't be of type Object it couldn't be used with the new operator.new always returns an Object, even for String constructors, too. And alas! The value semantics for strings (see step 11) is lost.And this finally means: new String(\"a\") !== \"a\".",
                "I tested this in Firefox with Firebug using code like this:console.time(\"testEquality\");\nvar n = 0;\nwhile (true) {\n  n++;\n  if (n == 100000)\n    break;\n}\nconsole.timeEnd(\"testEquality\");andconsole.time(\"testTypeEquality\");\nvar n = 0;\nwhile (true) {\n  n++;\n  if (n === 100000)\n    break;\n}\nconsole.timeEnd(\"testTypeEquality\");My results (tested five times each and averaged):So I'd say that the miniscule difference (this is over 100000 iterations, remember) is negligible. Performance isn't a reason to do ===. Type safety (well, as safe as you're going to get in JavaScript), and code quality is.",
                "In PHP and JavaScript, it is a strict equality operator. Which means, it will compare both type and values.",
                "In JavaScript it means of the same value and type.For example,but",
                "Why == is so unpredictable?What do you get when you compare an empty string \"\" with the number zero 0?trueYep, that's right according to == an empty string and the number zero are the same time.And it doesn't end there, here's another one:Things get really weird with arrays.Then weirder with stringsIt get's worse:When is equal not equal?Let me say that again:And this is just the crazy stuff you get with primitives.It's a whole new level of crazy when you use == with objects.At this point your probably wondering...Why does this happen?Well it's because unlike \"triple equals\" (===) which just checks if two values are the same.== does a whole bunch of other stuff.It has special handling for functions, special handling for nulls, undefined, strings, you name it.It get's pretty wacky.In fact, if you tried to write a function that does what == does it would look something like this:So what does this mean?It means == is complicated.Because it's complicated it's hard to know what's going to happen when you use it.Which means you could end up with bugs.So the moral of the story is...Make your life less complicated.Use === instead of ==.The End.",
                "The === operator is called a strict comparison operator, it does differ from the == operator.Lets take 2 vars a and b.For \"a == b\" to evaluate to true a and b need to be the same value.In the case of \"a === b\" a and b must be the same value and also the same type for it to evaluate to true.Take the following exampleIn summary; using the == operator might evaluate to true in situations where you do not want it to so using the === operator would be safer.In the 90% usage scenario it won't matter which one you use, but it is handy to know the difference when you get some unexpected behaviour one day.",
                "Many times an untyped check would be handy because you do not care if the value is either undefined, null, 0  or \"\"",
                "Javascript execution flow diagram for strict equality / Comparison '==='Javascript execution flow diagram for non strict equality / comparison '=='",
                "JavaScript === vs == .",
                "It means equality without type coercion\ntype coercion means JavaScript do not automatically convert any other data types to string data types",
                "In a typical script there will be no performance difference. More important may be the fact that thousand \"===\" is 1\u00a0KB heavier than thousand \"==\" :) JavaScript profilers can tell you if there is a performance difference in your case.But personally I would do what JSLint suggests. This recommendation is there not because of performance issues, but because type coercion means ('\\t\\r\\n' == 0) is true.",
                "The equal comparison operator == is confusing and should be avoided.If you HAVE TO live with it, then remember the following 3 things:EQUAL OPERATOR TRUTH TABLE IN JAVASCRIPT** STRANGE: note that any two values on the first column are not equal in that sense.**",
                "There is unlikely to be any performance difference between the two operations in your usage. There is no type-conversion to be done because both parameters are already the same type. Both operations will have a type comparison followed by a value comparison.",
                "Yes! It does matter.=== operator in javascript checks value as well as type where as == operator just checks the value (does type conversion if required).You can easily test it. Paste following code in an HTML file and open it in browserYou will get 'false' in alert. Now modify the onPageLoad() method to alert(x == 5); you will get true.",
                "Simply== means comparison between operands with type coercionand=== means comparison between operands without type coercion.Type coercion in JavaScript means automatically converting data types to other data types.For example:",
                "As a rule of thumb, I would generally use === instead of == (and !== instead of !=).Reasons are explained in in the answers above and also Douglas Crockford is pretty clear about it (JavaScript: The Good Parts).However there is one single exception:\n== null is an efficient way to check for 'is null or undefined':For example jQuery 1.9.1 uses this pattern 43 times, and  the JSHint syntax checker even provides the eqnull relaxing option for this reason.From the jQuery style guide:Strict equality checks (===) should be used in favor of ==. The only\nexception is when checking for undefined and null by way of null.EDIT 2021-03:Nowadays most browsers\nsupport the Nullish coalescing operator (??)\nand the Logical nullish assignment (??=), which allows a more concise way to\nassign a default value if a variable is null or undefined, for example:can be written as any of these forms",
                "It's a strict check test.It's a good thing especially if you're checking between 0 and false and null.For example, if you have:Then:All returns true and you may not want this. Let's suppose you have a function that can return the 0th index of an array or false on failure. If you check with \"==\" false, you can get a confusing result.So with the same thing as above, but a strict test:",
                "=== operator  checks the values as well as the types of the variables for equality.== operator just checks the value of the variables for equality.",
                "JSLint sometimes gives you unrealistic reasons to modify stuff. === has exactly the same performance as == if the types are already the same.It is faster only when the types are not the same, in which case it does not try to convert types but directly returns a false.So, IMHO, JSLint maybe used to write new code, but useless over-optimizing should be avoided at all costs.Meaning, there is no reason to change == to === in a check like if (a == 'test') when you know it for a fact that a can only be a String.Modifying a lot of code that way wastes developers' and reviewers' time and achieves nothing.",
                "A simple example is",
                "The top 2 answers both mentioned == means equality and === means identity. Unfortunately, this statement is incorrect.If both operands of == are objects, then they are compared to see if they are the same object. If both operands point to the same object, then the equal operator returns true. Otherwise,\nthe two are not equal.In the code above, both == and === get false because a and b are not the same objects.That's to say: if both operands of == are objects, == behaves same as ===, which also means identity. The essential difference of this two operators is about type conversion. == has conversion before it checks equality, but === does not.",
                "The problem is that you might easily get into trouble since JavaScript have a lot of implicit conversions meaning...Which pretty soon becomes a problem. The best sample of why implicit conversion is \"evil\" can be taken from this code in MFC / C++ which actually will compile due to an implicit conversion from CString to HANDLE which is a pointer typedef type...Which obviously during runtime does very undefined things...Google for implicit conversions in C++ and STL to get some of the arguments against it...",
                "From the core javascript reference=== Returns true if the operands are strictly equal (see above)\n  with no type conversion.",
                "Equality comparison:Operator ==Returns true, when both operands are equal. The operands are converted to the same type before being compared.Equality and type comparison:Operator ===Returns true if both operands are equal and of the same type. It's generally \nbetter and safer if you compare this way, because there's no behind-the-scenes type conversions.",
                "Here is a handy comparison table that shows the conversions that happen and the differences between == and ===.As the conclusion states:\"Use three equals unless you fully understand the conversions that take\n  place for two-equals.\"http://dorey.github.io/JavaScript-Equality-Table/",
                "null and undefined are nothingness, that is,Here a and b do not have values. Whereas, 0, false and '' are all values. One thing common beween all these are that they are all falsy values, which means they all satisfy falsy conditions.So, the 0, false and '' together form a sub-group. And on other hand, null & undefined form the second sub-group. Check the comparisons in the below image. null and undefined would equal. The other three would equal to each other. But, they all are treated as falsy conditions in JavaScript.This is same as any object (like {}, arrays, etc.), non-empty string & Boolean true are all truthy conditions. But, they are all not equal."
            ]
        },
        {
            "tag": "array_loop",
            "patterns": [
                "Loop over an array in JavaScript",
                "loop over an array",
                "array loops"
            ],
            "responses": [
                "TL;DRYour best bets are usuallySome quick \"don't\"s:But there's lots more to explore, read on...JavaScript has powerful semantics for looping through arrays and array-like objects. I've split the answer into two parts: Options for genuine arrays, and options for things that are just array-like, such as the arguments object, other iterable objects (ES2015+), DOM collections, and so on.Okay, let's look at our options:You have five options (two supported basically forever, another added by ECMAScript\u00a05 [\"ES5\"], and two more added in ECMAScript\u00a02015 (\"ES2015\", aka \"ES6\"):(You can see those old specs here: ES5, ES2015, but both have been superceded; the current editor's draft is always here.)Details:ES2015 added iterators and iterables to JavaScript. Arrays are iterable (so are strings, Maps, and Sets, as well as DOM collections and lists, as you'll see later). Iterable objects provide iterators for their values. The new for-of statement loops through the values returned by an iterator:const a = [\"a\", \"b\", \"c\"];\nfor (const element of a) { // You can use `let` instead of `const` if you like\n    console.log(element);\n}\n// a\n// b\n// cIt doesn't get simpler than that! Under the covers, that gets an iterator from the array and loops through the values the iterator returns. The iterator provided by arrays provides the values of the array elements, in order beginning to end.Notice how element is scoped to each loop iteration; trying to use element after the end of the loop would fail because it doesn't exist outside the loop body.In theory, a for-of loop involves several function calls (one to get the iterator, then one to get each value from it). Even when that's true, it's nothing to worry about, function calls are very cheap in modern JavaScript engines (it bothered me for forEach [below] until I looked into it; details). But additionally, JavaScript engines optimize those calls away (in performance-critical code) when dealing with native iterators for things like arrays.for-of is entirely async-friendly. If you need the work in a loop body to be done in series (not in parallel), an await in the loop body will wait for the promise to settle before continuing. Here's a silly example:function delay(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function showSlowly(messages) {\n    for (const message of messages) {\n        await delay(400);\n        console.log(message);\n    }\n}\n\nshowSlowly([\n    \"So\", \"long\", \"and\", \"thanks\", \"for\", \"all\", \"the\", \"fish!\"\n]);\n// `.catch` omitted because we know it never rejectsNote how the words appear with a delay before each one.It's a matter of coding style, but for-of is the first thing I reach for when looping through anything iterable.In any even vaguely-modern environment (so, not IE8) where you have access to the Array features added by ES5, you can use forEach (spec | MDN) if you're only dealing with synchronous code (or you don't need to wait for an asynchronous process to finish during the loop):const a = [\"a\", \"b\", \"c\"];\na.forEach((element) => {\n    console.log(element);\n});forEach accepts a callback function and, optionally, a value to use as this when calling that callback (not used above). The callback is called for each element in the array, in order, skipping non-existent elements in sparse arrays. Although I only used one parameter above, the callback is called with three arguments: The element for that iteration, the index of that element, and a reference to the array you're iterating over (in case your function doesn't already have it handy).Like for-of, forEach has the advantage that you don't have to declare indexing and value variables in the containing scope; in this case, they're supplied as arguments to the iteration function, and so nicely scoped to just that iteration.Unlike for-of, forEach has the disadvantage that it doesn't understand async functions and await. If you use an async function as the callback, forEach does not wait for that function's promise to settle before continuing. Here's the async example from for-of using forEach instead\u00a0\u2014 notice how there's an initial delay, but then all the text appears right away instead of waiting:function delay(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function showSlowly(messages) {\n    // INCORRECT, doesn't wait before continuing,\n    // doesn't handle promise rejections\n    messages.forEach(async message => {\n        await delay(400);\n        console.log(message);\n    });\n}\n\nshowSlowly([\n    \"So\", \"long\", \"and\", \"thanks\", \"for\", \"all\", \"the\", \"fish!\"\n]);\n// `.catch` omitted because we know it never rejectsforEach is the \"loop through them all\" function, but ES5 defined several other useful \"work your way through the array and do things\" functions, including:As with forEach, if you use an async function as your callback, none of those waits for the function's promise to settle. That means:Sometimes the old ways are the best:const a = [\"a\", \"b\", \"c\"];\nfor (let index = 0; index < a.length; ++index) {\n    const element = a[index];\n    console.log(element);\n}If the length of the array won't change during the loop, and it's in highly performance-sensitive code, a slightly more complicated version grabbing the length up front might be a tiny bit faster:const a = [\"a\", \"b\", \"c\"];\nfor (let index = 0, len = a.length; index < len; ++index) {\n    const element = a[index];\n    console.log(element);\n}And/or counting backward:const a = [\"a\", \"b\", \"c\"];\nfor (let index = a.length - 1; index >= 0; --index) {\n    const element = a[index];\n    console.log(element);\n}But with modern JavaScript engines, it's rare you need to eke out that last bit of juice.Before ES2015, the loop variable had to exist in the containing scope, because var only has function-level scope, not block-level scope. But as you saw in the examples above, you can use let within the for to scope the variables to just the loop. And when you do that, the index variable is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the index for that specific iteration, which solves the old \"closures in loops\" problem:// (The `NodeList` from `querySelectorAll` is array-like)\nconst divs = document.querySelectorAll(\"div\");\nfor (let index = 0; index < divs.length; ++index) {\n    divs[index].addEventListener('click', e => {\n        console.log(\"Index is: \" + index);\n    });\n}\n<div>zero</div>\n<div>one</div>\n<div>two</div>\n<div>three</div>\n<div>four</div>In the above, you get \"Index is: 0\" if you click the first and \"Index is: 4\" if you click the last. This does not work if you use var instead of let (you'd always see \"Index is: 5\").Like for-of, for loops work well in async functions. Here's the earlier example using a for loop:function delay(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function showSlowly(messages) {\n    for (let i = 0; i < messages.length; ++i) {\n        const message = messages[i];\n        await delay(400);\n        console.log(message);\n    }\n}\n\nshowSlowly([\n    \"So\", \"long\", \"and\", \"thanks\", \"for\", \"all\", \"the\", \"fish!\"\n]);\n// `.catch` omitted because we know it never rejectsfor-in isn't for looping through arrays, it's for looping through the names of an object's properties. It does often seem to work for looping through arrays as a by-product of the fact that arrays are objects, but it doesn't just loop through the array indexes, it loops through all enumerable properties of the object (including inherited ones). (It also used to be that the order wasn't specified; it is now [details in this other answer], but even though the order is specified now, the rules are complex, there are exceptions, and relying on the order is not best practice.)The only real use cases for for-in on an array are:Looking only at that first example: You can use for-in to visit those sparse array elements if you use appropriate safeguards:// `a` is a sparse array\nconst a = [];\na[0] = \"a\";\na[10] = \"b\";\na[10000] = \"c\";\nfor (const name in a) {\n    if (Object.hasOwn(a, name) &&       // These checks are\n        /^0$|^[1-9]\\d*$/.test(name) &&  // explained\n        name <= 4294967294              // below\n       ) {\n        const element = a[name];\n        console.log(a[name]);\n    }\n}Note the three checks:That the object has its own property by that name (not one it inherits from its prototype; this check is also often written as a.hasOwnProperty(name) but ES2022 adds Object.hasOwn which can be more reliable), andThat the name is all decimal digits (e.g., normal string form, not scientific notation), andThat the name's value when coerced to a number is <= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It's part of the definition of an array index in the specification. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it's 2^32 - 2 is that that makes the greatest index value one lower than 2^32 - 1, which is the maximum value an array's length can have. (E.g., an array's length fits in a 32-bit unsigned integer.)...although with that said, most code only does the hasOwnProperty check.You wouldn't do that in inline code, of course. You'd write a utility function. Perhaps:// Utility function for antiquated environments without `forEach`\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);\nconst rexNum = /^0$|^[1-9]\\d*$/;\nfunction sparseEach(array, callback, thisArg) {\n    for (const name in array) {\n        const index = +name;\n        if (hasOwn(a, name) &&\n            rexNum.test(name) &&\n            index <= 4294967294\n           ) {\n            callback.call(thisArg, array[name], index, array);\n        }\n    }\n}\n\nconst a = [];\na[5] = \"five\";\na[10] = \"ten\";\na[100000] = \"one hundred thousand\";\na.b = \"bee\";\n\nsparseEach(a, (value, index) => {\n    console.log(\"Value at \" + index + \" is \" + value);\n});Like for, for-in works well in asynchronous functions if the work within it needs to be done in series.function delay(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function showSlowly(messages) {\n    for (const name in messages) {\n        if (messages.hasOwnProperty(name)) { // Almost always this is the only check people do\n            const message = messages[name];\n            await delay(400);\n            console.log(message);\n        }\n    }\n}\n\nshowSlowly([\n    \"So\", \"long\", \"and\", \"thanks\", \"for\", \"all\", \"the\", \"fish!\"\n]);\n// `.catch` omitted because we know it never rejectsfor-of uses an iterator implicitly, doing all the scut work for you. Sometimes, you might want to use an iterator explicitly. It looks like this:const a = [\"a\", \"b\", \"c\"];\nconst it = a.values(); // Or `const it = a[Symbol.iterator]();` if you like\nlet entry;\nwhile (!(entry = it.next()).done) {\n    const element = entry.value;\n    console.log(element);\n}An iterator is an object matching the Iterator definition in the specification. Its next method returns a new result object each time you call it. The result object has a property, done, telling us whether it's done, and a property value with the value for that iteration. (done is optional if it would be false, value is optional if it would be undefined.)What you get for value varies depending on the iterator. On arrays, the default iterator provides the value of each array element (\"a\", \"b\", and \"c\" in the example earlier). Arrays also have three other methods that return iterators:Since iterator objects don't advance until you call next, they work well in async function loops. Here's the earlier for-of example using the iterator explicitly:function delay(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function showSlowly(messages) {\n    const it = messages.values()\n    while (!(entry = it.next()).done) {\n        await delay(400);\n        const element = entry.value;\n        console.log(element);\n    }\n}\n\nshowSlowly([\n    \"So\", \"long\", \"and\", \"thanks\", \"for\", \"all\", \"the\", \"fish!\"\n]);\n// `.catch` omitted because we know it never rejectsAside from true arrays, there are also array-like objects that have a length property and properties with all-digits names: NodeList instances, HTMLCollection instances, the arguments object, etc. How do we loop through their contents?At least some, and possibly most or even all, of the array approaches above apply equally well to array-like objects:Use for-of (use an iterator implicitly) (ES2015+)for-of uses the iterator provided by the object (if any). That includes host-provided objects (like DOM collections and lists). For instance, HTMLCollection instances from getElementsByXYZ methods and NodeLists instances from querySelectorAll both support iteration. (This is defined quite subtly by the HTML and DOM specifications. Basically, any object with length and indexed access is automatically iterable. It doesn't have to be marked iterable; that is used only for collections that, in addition to being iterable, support forEach, values, keys, and entries methods. NodeList does; HTMLCollection doesn't, but both are iterable.)Here's an example of looping through div elements:const divs = document.querySelectorAll(\"div\");\nfor (const div of divs) {\n    div.textContent = Math.random();\n}\n<div>zero</div>\n<div>one</div>\n<div>two</div>\n<div>three</div>\n<div>four</div>Use forEach and related (ES5+)The various functions on Array.prototype are \"intentionally generic\" and can be used on array-like objects via Function#call (spec | MDN) or Function#apply (spec | MDN). (If you have to deal with IE8 or earlier [ouch], see the \"Caveat for host-provided objects\" at the end of this answer, but it's not an issue with vaguely-modern browsers.)Suppose you wanted to use forEach on a Node's childNodes collection (which, being an HTMLCollection, doesn't have forEach natively). You'd do this:(Note, though, that you could just use for-of on node.childNodes.)If you're going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:Use a simple for loopPerhaps obviously, a simple for loop works for array-like objects.Use an iterator explicitly (ES2015+)See #1.You may be able to get away with for-in (with safeguards), but with all of these more appropriate options, there's no reason to try.Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:Use Array.fromArray.from (spec) | (MDN) (ES2015+, but easily polyfilled) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:...takes the NodeList from querySelectorAll and makes an array from it.The mapping function is handy if you were going to map the contents in some way. For instance, if you wanted to get an array of the tag names of the elements with a given class:Use spread syntax (...)It's also possible to use ES2015's spread syntax. Like for-of, this uses the iterator provided by the object (see #1 in the previous section):So for instance, if we want to convert a NodeList into a true array, with spread syntax this becomes quite succinct:Use the slice method of arraysWe can use the slice method of arrays, which like the other methods mentioned above is \"intentionally generic\" and so can be used with array-like objects, like this:So for instance, if we want to convert a NodeList into a true array, we could do this:(If you still have to handle IE8 [ouch], will fail; IE8 didn't let you use host-provided objects as this like that.)If you use Array.prototype functions with host-provided array-like objects (for example, DOM collections and such provided by the browser rather than the JavaScript engine), obsolete browsers like IE8 didn't necessarily handle that way, so if you have to support them, be sure to test in your target environments. But it's not an issue with vaguely-modern browsers. (For non-browser environments, naturally it'll depend on the environment.)",
                "Note: This answer is hopelessly out-of-date. For a more modern approach, look at the methods available on an array. Methods of interest might be:The standard way to iterate an array in JavaScript is a vanilla for-loop:Note, however, that this approach is only good if you have a dense array, and each index is occupied by an element. If the array is sparse, then you can run into performance problems with this approach, since you will iterate over a lot of indices that do not really exist in the array. In this case, a for .. in-loop might be a better idea. However, you must use the appropriate safeguards to ensure that only the desired properties of the array (that is, the array elements) are acted upon, since the for..in-loop will also be enumerated in legacy browsers, or if the additional properties are defined as enumerable.In ECMAScript 5 there will be a forEach method on the array prototype, but it is not supported in legacy browsers. So to be able to use it consistently you must either have an environment that supports it (for example, Node.js for server side JavaScript), or use a \"Polyfill\". The Polyfill for this functionality is, however, trivial and since it makes the code easier to read, it is a good polyfill to include.",
                "If you\u2019re using the jQuery library, you can use jQuery.each:EDIT :As per question, user want code in javascript instead of jquery so the edit is",
                "I think the reverse for loop deserves a mention here:Some developers use the reverse for loop by default, unless there is a good reason to loop forwards.Although the performance gains are usually insignificant, it sort of screams:\"Just do this to every item in the list, I don't care about the order!\"However in practice that is not actually a reliable indication of intent, since it is indistinguishable from those occasions when you do care about the order, and really do need to loop in reverse.  So in fact another construct would be needed to accurately express the \"don't care\" intent, something currently unavailable in most languages, including ECMAScript, but which could be called, for example, forEachUnordered().If order doesn't matter, and efficiency is a concern (in the innermost loop of a game or animation engine), then it may be acceptable to use the reverse for loop as your go-to pattern.  Just remember that seeing a reverse for loop in existing code does not necessarily mean that the order irrelevant!In general for higher level code where clarity and safety are greater concerns, I previously recommended using Array::forEach as your default pattern for looping (although these days I prefer to use for..of).  Reasons to prefer forEach over a reverse loop are:Then when you do see the reverse for loop in your code, that is a hint that it is reversed for a good reason (perhaps one of the reasons described above).  And seeing a traditional forward for loop may indicate that shifting can take place.(If the discussion of intent makes no sense to you, then you and your code may benefit from watching Crockford's lecture on Programming Style & Your Brain.)There is a debate about whether for..of or forEach() are preferable:For maximum browser support, for..of requires a polyfill for iterators, making your app slightly slower to execute and slightly larger to download.For that reason (and to encourage use of map and filter), some front-end style guides ban for..of completely!But the above concerns is not applicable to Node.js applications, where for..of is now well supported.And furthermore await does not work inside forEach().  Using for..of is the clearest pattern in this case.Personally, I tend to use whatever looks easiest to read, unless performance or minification has become a major concern.  So these days I prefer to use for..of instead of forEach(), but I will always use map or filter or find or some when applicable. \n (For the sake of my colleagues, I rarely use reduce.)You will notice that i-- is the middle clause (where we usually see a comparison) and the last clause is empty (where we usually see i++).  That means that i-- is also used as the condition for continuation.  Crucially, it is executed and checked before each iteration.How can it start at array.length without exploding?Because i-- runs before each iteration, on the first iteration we will actually be accessing the item at array.length - 1 which avoids any issues with Array-out-of-bounds undefined items.Why doesn't it stop iterating before index 0?The loop will stop iterating when the condition i-- evaluates to a falsey value (when it yields 0).The trick is that unlike --i, the trailing i-- operator decrements i but yields the value before the decrement.  Your console can demonstrate this:> var i = 5; [i, i--, i];[5, 5, 4]So on the final iteration, i was previously 1 and the i-- expression changes it to 0 but actually yields 1 (truthy), and so the condition passes.  On the next iteration i-- changes i to -1 but yields 0 (falsey), causing execution to immediately drop out of the bottom of the loop.In the traditional forwards for loop, i++ and ++i are interchangeable (as Douglas Crockford points out).  However in the reverse for loop, because our decrement is also our condition expression, we must stick with i-- if we want to process the item at index 0.Some people like to draw a little arrow in the reverse for loop, and end with a wink:Credits go to WYL for showing me the benefits and horrors of the reverse for loop.",
                "Some C-style languages use foreach to loop through enumerations. In JavaScript this is done with the for..in loop structure:There is a catch. for..in will loop through each of the object's enumerable members, and the members on its prototype. To avoid reading values that are inherited through the object's prototype, simply check if the property belongs to the object:Additionally, ECMAScript 5 has added a forEach method to Array.prototype which can be used to enumerate over an array using a calback (the polyfill is in the docs so you can still use it for older browsers):It's important to note that Array.prototype.forEach doesn't break when the callback returns false. jQuery and Underscore.js provide their own variations on each to provide loops that can be short-circuited.",
                "\ud83d\udc49\ud83c\udffd \u00a0 for...of\ud83d\udc49\ud83c\udffd \u00a0 forEach\ud83d\udc49\ud83c\udffd \u00a0 map*Different from the two above, map() creates a new array and expects you to return something after each iteration.\ud83d\uded1\u00a0 Important: As map() is meant to return a value at each iteration, it is an ideal method for transforming elements in arrays:On the other hand, for...of and forEach( ) don't need to return anything and that's why we typically use them to perform logic tasks that manipulate stuff outside.So to speak, you're going to find if () statements, side effects, and logging activities in these two.\ud83d\udc4c\ud83c\udffe\u00a0 TIP: you can also have the index (as well as the whole array) in each iteration in your .map() or .forEach() functions.Just pass additional arguments to them:",
                "If you want to loop over an array, use the standard three-part for loop.You can get some performance optimisations by caching myArray.length or iterating over it backwards.",
                "If you don't mind emptying the array:x will contain the last value of y and it will be removed from the array. You can also use shift() which will give and remove the first item from y.",
                "A forEach implementation (see in jsFiddle):",
                "I know this is an old post, and there are so many great answers already. For a little more completeness I figured I'd throw in another one using AngularJS. Of course, this only applies if you're using Angular, obviously, nonetheless I'd like to put it anyway.angular.forEach takes 2 arguments and an optional third argument. The first argument is the object (array) to iterate over, the second argument is the iterator function, and the optional third argument is the object context (basically referred to inside the loop as 'this'.There are different ways to use the forEach loop of angular. The simplest and probably most used isAnother way that is useful for copying items from one array to another isThough, you don't have to do that, you can simply do the following and it's equivalent to the previous example:Now there are pros and cons of using the angular.forEach function as opposed to the built in vanilla-flavored for loop.ProsConsider the following 2 nested loops, which do exactly the same thing. Let's say that we have 2 arrays of objects and each object contains an array of results, each of which has a Value property that's a string (or whatever). And let's say we need to iterate over each of the results and if they're equal then perform some action:Granted this is a very simple hypothetical example, but I've written triple embedded for loops using the second approach and it was very hard to read, and write for that matter.ConsI'm sure there's various other pros and cons as well, and please feel free to add any that you see fit. I feel that, bottom line, if you need efficiency, stick with just the native for loop for your looping needs. But, if your datasets are smaller and a some efficiency is okay to give up in exchange for readability and writability, then by all means throw an angular.forEach in that bad boy.",
                "As of ECMAScript\u00a06:list = [0, 1, 2, 3]\r\nfor (let obj of list) {\r\n    console.log(obj)\r\n}Where of avoids the oddities associated with in and makes it work like the for loop of any other language, and let binds i within the loop as opposed to within the function.The braces ({}) can be omitted when there is only one command (e.g. in the example above).",
                "Probably the for(i = 0; i < array.length; i++) loop is not the best choice. Why? If you have this:The method will call from array[0] to array[2]. First, this will first reference variables you don't even have, second you would not have the variables in the array, and third this will make the code bolder. Look here, it's what I use:And if you want it to be a function, you can do this:If you want to break, a little more logic:Example:It returns:",
                "There are three implementations of foreach in jQuery as follows.",
                "An easy solution now would be to use the underscore.js library. It's providing many useful tools, such as each and will automatically delegate the job to the native forEach if available.A CodePen example of how it works is:",
                "There isn't any for each loop in native JavaScript. You can either use libraries to get this functionality (I recommend Underscore.js), use a simple for in loop.However, note that there may be reasons to use an even simpler for loop (see Stack Overflow question Why is using \u201cfor\u2026in\u201d with array iteration such a bad idea?)",
                "ECMAScript\u00a05 (the version on JavaScript) to work with Arrays:forEach - Iterates through every item in the array and do whatever you need with each item.In case, more interested on operation on array using some inbuilt feature.map - It creates a new array with the result of the callback function. This method is good to be used when you need to format the elements of your array.reduce - As the name says, it reduces the array to a single value by calling the given function passing in the current element and the result of the previous execution.every - Returns true or false if all the elements in the array pass the test in the callback function.filter - Very similar to every except that filter returns an array with the elements that return true to the given function.",
                "There are a few ways to loop through an array in JavaScript, as below:for - it's the most common one. Full block of code for loopingvar languages = [\"Java\", \"JavaScript\", \"C#\", \"Python\"];\r\nvar i, len, text;\r\nfor (i = 0, len = languages.length, text = \"\"; i < len; i++) {\r\n    text += languages[i] + \"<br>\";\r\n}\r\ndocument.getElementById(\"example\").innerHTML = text;\n<p id=\"example\"></p>while - loop while a condition is through. It seems to be the fastest loopvar text = \"\";\r\nvar i = 0;\r\nwhile (i < 10) {\r\n    text +=  i + \") something<br>\";\r\n    i++;\r\n}\r\ndocument.getElementById(\"example\").innerHTML = text;\n<p id=\"example\"></p>do/while - also loop through a block of code while the condition is true, will run at least one timevar text = \"\"\r\nvar i = 0;\r\n\r\ndo {\r\n    text += i + \") something <br>\";\r\n    i++;\r\n}\r\nwhile (i < 10);\r\n\r\ndocument.getElementById(\"example\").innerHTML = text;\n<p id=\"example\"></p>Functional loops - forEach, map, filter, also reduce (they loop through the function, but they are used if you need to do something with your array, etc.// For example, in this case we loop through the number and double them up using the map function\r\nvar numbers = [65, 44, 12, 4];\r\ndocument.getElementById(\"example\").innerHTML = numbers.map(function(num){return num * 2});\n<p id=\"example\"></p>For more information and examples about functional programming on arrays, look at the blog post Functional programming in JavaScript: map, filter and reduce.",
                "This is an iterator for NON-sparse list where the index starts at 0, which is the typical scenario when dealing with document.getElementsByTagName or document.querySelectorAll)Examples of usage:Example #1Example #2Each p tag gets class=\"blue\"Example #3Every other p tag gets class=\"red\">Example #4And finally the first 20 blue p tags are changed to greenCaution when using string as function: the function is created out-of-context and ought to be used only where you are certain of variable scoping.  Otherwise, better to pass functions where scoping is more intuitive.",
                "There's no inbuilt ability to break in forEach. To interrupt execution use the Array#some like below:This works because some returns true as soon as any of the callbacks, executed in array order, returns true, short-circuiting the execution of the rest. \nOriginal Answer\nsee Array prototype for some",
                "I also would like to add this as a composition of a reverse loop and an answer above for someone that would like this syntax too.Pros:The benefit for this: You have the reference already in the first like that won't need to be declared later with another line. It is handy when looping trough the object array.Cons:This will break whenever the reference is false - falsey (undefined, etc.). It can be used as an advantage though. However, it would make it a little bit harder to read. And also depending on the browser it can be \"not\" optimized to work faster than the original one.",
                "jQuery way using $.map:",
                "Using loops with ECMAScript\u00a06  destructuring and the spread operatorDestructuring and using of the spread operator have proven quite useful for newcomers to ECMAScript\u00a06 as being more human-readable/aesthetic, although some JavaScript veterans might consider it messy. Juniors or some other people might find it useful.The following examples will use the for...of statement and the .forEach method.Examples 6, 7, and 8 can be used with any functional loops like .map, .filter, .reduce, .sort, .every, .some. For more information about these methods, check out the Array Object.Example 1: Normal for...of loop - no tricks here.let arrSimple = ['a', 'b', 'c'];\n\nfor (let letter of arrSimple) {\n  console.log(letter);\n}Example 2: Split words to characterslet arrFruits = ['apple', 'orange', 'banana'];\n\nfor (let [firstLetter, ...restOfTheWord] of arrFruits) {\n  // Create a shallow copy using the spread operator\n  let [lastLetter] = [...restOfTheWord].reverse();\n  console.log(firstLetter, lastLetter, restOfTheWord);\n}Example 3: Looping with a key and value// let arrSimple = ['a', 'b', 'c'];\n\n// Instead of keeping an index in `i` as per example `for(let i = 0 ; i<arrSimple.length;i++)`\n// this example will use a multi-dimensional array of the following format type:\n// `arrWithIndex: [number, string][]`\n\nlet arrWithIndex = [\n  [0, 'a'],\n  [1, 'b'],\n  [2, 'c'],\n];\n\n// Same thing can be achieved using `.map` method\n// let arrWithIndex = arrSimple.map((i, idx) => [idx, i]);\n\n// Same thing can be achieved using `Object.entries`\n// NOTE: `Object.entries` method doesn't work on Internet Explorer  unless it's polyfilled\n// let arrWithIndex = Object.entries(arrSimple);\n\nfor (let [key, value] of arrWithIndex) {\n  console.log(key, value);\n}Example 4: Get object properties inlinelet arrWithObjects = [{\n    name: 'Jon',\n    age: 32\n  },\n  {\n    name: 'Elise',\n    age: 33\n  }\n];\n\nfor (let { name, age: aliasForAge } of arrWithObjects) {\n  console.log(name, aliasForAge);\n}Example 5: Get deep object properties of what you needlet arrWithObjectsWithArr = [{\n    name: 'Jon',\n    age: 32,\n    tags: ['driver', 'chef', 'jogger']\n  },\n  {\n    name: 'Elise',\n    age: 33,\n    tags: ['best chef', 'singer', 'dancer']\n  }\n];\n\nfor (let { name, tags: [firstItemFromTags, ...restOfTags] } of arrWithObjectsWithArr) {\n  console.log(name, firstItemFromTags, restOfTags);\n}Example 6: Is Example 3 used with .forEachlet arrWithIndex = [\n  [0, 'a'],\n  [1, 'b'],\n  [2, 'c'],\n];\n\n// Not to be confused here, `forEachIndex` is the real index\n// `mappedIndex` was created by \"another user\", so you can't really trust it\n\narrWithIndex.forEach(([mappedIndex, item], forEachIndex) => {\n  console.log(forEachIndex, mappedIndex, item);\n});Example 7: Is Example 4 used with .forEachlet arrWithObjects = [{\n    name: 'Jon',\n    age: 32\n  },\n  {\n    name: 'Elise',\n    age: 33\n  }\n];\n// NOTE: Destructuring objects while using shorthand functions\n// are required to be surrounded by parentheses\narrWithObjects.forEach( ({ name, age: aliasForAge }) => {\n  console.log(name, aliasForAge)\n});Example 8: Is Example 5 used with .forEachlet arrWithObjectsWithArr = [{\n    name: 'Jon',\n    age: 32,\n    tags: ['driver', 'chef', 'jogger']\n  },\n  {\n    name: 'Elise',\n    age: 33,\n    tags: ['best chef', 'singer', 'dancer']\n  }\n];\n\narrWithObjectsWithArr.forEach(({\n  name,\n  tags: [firstItemFromTags, ...restOfTags]\n}) => {\n  console.log(name, firstItemFromTags, restOfTags);\n});",
                "When iterating over an array, we often want to accomplish one of the following goals:We want to iterate over the array and create a new array:Array.prototype.mapWe want to iterate over the array and don't create a new array:Array.prototype.forEach \nfor..of loopIn JavaScript, there are many ways of accomplishing both of these goals. However, some are more convenient than others. Below you can find some commonly used methods (the most convenient IMO) to accomplish array iteration in JavaScript.map() is a function located on Array.prototype which can transform every element of an array and then returns a new array. map() takes as an argument a callback function and works in the following manner:let arr = [1, 2, 3, 4, 5];\r\n\r\nlet newArr = arr.map((element, index, array) => {\r\n  return element * 2;\r\n})\r\n\r\nconsole.log(arr);\r\nconsole.log(newArr);The callback which we have passed into map() as an argument gets executed for every element. Then an array gets returned which has the same length as the original array. In this new array element is transformed by the callback function passed in as an argument to map().The distinct difference between map and another loop mechanism like forEach and a for..of loop is that map returns a new array and leaves the old array intact (except if you explicitly manipulate it with thinks like splice).Also, note that the map function's callback provides the index number of the current iteration as a second argument. Furthermore, does the third argument provide the array on which map was called? Sometimes these properties can be very useful.forEach is a function which is located on Array.prototype which takes a callback function as an argument. It then executes this callback function for every element in the array. In contrast to the map() function, the forEach function returns nothing (undefined). For example:let arr = [1, 2, 3, 4, 5];\r\n\r\narr.forEach((element, index, array) => {\r\n\r\n  console.log(element * 2);\r\n\r\n  if (index === 4) {\r\n    console.log(array)\r\n  }\r\n  // index, and oldArray are provided as 2nd and 3th argument by the callback\r\n\r\n})\r\n\r\nconsole.log(arr);Just like the map function, the forEach callback provides the index number of the current iteration as a second argument. Also, does the third argument provide the array on which forEach was called?The for..of loop loops through every element of an array (or any other iterable object). It works in the following manner:let arr = [1, 2, 3, 4, 5];\r\n\r\nfor(let element of arr) {\r\n  console.log(element * 2);\r\n}In the above example, element stands for an array element and arr is the array which we want to loop. Note that the name element is arbitrary, and we could have picked any other name like 'el' or something more declarative when this is applicable.Don't confuse the for..in loop with the for..of loop. for..in will loop through all enumerable properties of the array whereas the for..of loop will only loop through the array elements. For example:let arr = [1, 2, 3, 4, 5];\r\n\r\narr.foo = 'foo';\r\n\r\nfor(let element of arr) {\r\n  console.log(element);\r\n}\r\n\r\nfor(let element in arr) {\r\n  console.log(element);\r\n}",
                "Today (2019-12-18) I perform test on my macOS v10.13.6 (High Sierra), on Chrome v 79.0, Safari v13.0.4 and Firefox v71.0 (64 bit) - conclusions about optimisation (and micro-optimisation which usually is not worth to introduce it to code because the benefit is small, but code complexity grows).It looks like the traditional for i (Aa) is a good choice to write fast code on all browsers.The other solutions, like for-of (Ad), all in group C.... are usually 2 - 10 (and more) times slower than Aa, but for small arrays it is ok to use it - for the sake of increase code clarity.The loops with array length cached in n (Ab, Bb, Be) are sometimes faster, sometimes not. Probably compilers automatically detect this situation and introduce caching. The speed differences between the cached and no-cached versions (Aa, Ba, Bd) are about ~1%, so it looks like introduce n is a micro-optimisation.The i-- like solutions where the loop starts from the last array element (Ac, Bc) are usually ~30% slower than forward solutions - probably the reason is the way of CPU memory cache working - forward memory reading is more optimal for CPU caching). Is recommended to NOT USE such solutions.In tests we calculate the sum of array elements. I perform a test for small arrays (10 elements) and big arrays (1M elements) and divide them into three groups:let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n//let arr = Array.from(Array(1000000), (x, i) => i%10);\r\n\r\nfunction Aa(a, s=0) {\r\n  for(let i=0; i<a.length; i++) {\r\n    s += a[i];\r\n  }\r\n  console.log('Aa=', s);\r\n}\r\n\r\nfunction Ab(a, s=0) {\r\n  let n = a.length;\r\n  for(let i=0; i<n; i++) {\r\n    s += a[i];\r\n  }\r\n  console.log('Ab=', s);\r\n}\r\n\r\nfunction Ac(a, s=0) {\r\n  for(let i=a.length; i--;) {\r\n    s += a[i];\r\n  }\r\n  console.log('Ac=', s);\r\n}\r\n\r\nfunction Ad(a, s=0) {\r\n  for(let x of a) {\r\n    s += x;\r\n  }\r\n  console.log('Ad=', s);\r\n}\r\n\r\nfunction Ae(a, s=0) {\r\n  for(let i in a) if (a.hasOwnProperty(i)) {\r\n    s += a[i];\r\n  }\r\n  console.log('Ae=', s);\r\n}\r\n\r\nfunction Ba(a, s=0) {\r\n  let i = -1;\r\n  while(++i < a.length) {\r\n    s+= a[i];\r\n  }\r\n  console.log('Ba=', s);\r\n}\r\n\r\nfunction Bb(a, s=0) {\r\n  let i = -1;\r\n  let n = a.length;\r\n  while(++i < n) {\r\n    s+= a[i];\r\n  }\r\n  console.log('Bb=', s);\r\n}\r\n\r\nfunction Bc(a, s=0) {\r\n  let i = a.length;\r\n  while(i--) {\r\n    s += a[i];\r\n  }\r\n  console.log('Bc=', s);\r\n}\r\n\r\nfunction Bd(a, s=0) {\r\n  let i = 0;\r\n  do {\r\n    s+= a[i]\r\n  } while (++i < a.length);\r\n  console.log('Bd=', s);\r\n}\r\n\r\nfunction Be(a, s=0) {\r\n  let i = 0;\r\n  let n = a.length;\r\n  do {\r\n    s += a[i]\r\n  } while (++i < n);\r\n  console.log('Be=', s);\r\n}\r\n\r\nfunction Bf(a, s=0) {\r\n  const it = a.values(); \r\n  let e;\r\n  while (!(e = it.next()).done) { \r\n    s+= e.value; \r\n  }\r\n  console.log('Bf=', s);\r\n}\r\n\r\nfunction Ca(a, s=0) {\r\n  a.map(x => { s+=x });\r\n  console.log('Ca=', s);\r\n}\r\n\r\nfunction Cb(a, s=0) {\r\n  a.forEach(x => { s+=x });\r\n  console.log('Cb=', s);\r\n}\r\n\r\nfunction Cc(a, s=0) {\r\n  a.every(x => (s += x, 1));\r\n  console.log('Cc=', s);\r\n}\r\n\r\nfunction Cd(a, s=0) {\r\n  a.filter(x => { s+=x });\r\n  console.log('Cd=',s);\r\n}\r\n\r\nfunction Ce(a, s=0) {\r\n  a.reduce((z, c) => { s+=c }, 0);\r\n  console.log('Ce=', s);\r\n}\r\n\r\nfunction Cf(a, s=0) {\r\n  a.reduceRight((z, c) => { s += c }, 0);\r\n  console.log('Cf=', s);\r\n}\r\n\r\nfunction Cg(a, s=0) {\r\n  a.some(x => { s += x } );\r\n  console.log('Cg=', s);\r\n}\r\n\r\nfunction Ch(a, s=0) {\r\n  Array.from(a, x=> s += x);\r\n  console.log('Cc=', s);\r\n}\r\n\r\n\r\nAa(arr);\r\nAb(arr);\r\nAc(arr);\r\nAd(arr);\r\nAe(arr);\r\n\r\nBa(arr);\r\nBb(arr);\r\nBc(arr);\r\nBd(arr);\r\nBe(arr);\r\nBf(arr);\r\n\r\nCa(arr);\r\nCb(arr);\r\nCc(arr);\r\nCd(arr);\r\nCe(arr);\r\nCf(arr);\r\nCg(arr);\r\nCh(arr);\n<p style=\"color: red\">This snippets only PRESENTS code used for benchmark - it not perform test itself</p>Cross browser resultsResults for all tested browsersbrowsers**Array with 10 elementsResults for Chrome. You can perform the test on your machine here.Array with 1,000,000 elementsResults for Chrome. You can perform the test on your machine here",
                "A way closest to your idea would be to use Array.forEach() which accepts a closure function which will be executed for each element of the array.Another viable way would be to use Array.map() which works in the same way, but it also takes all values that you return and returns them in a new array (essentially mapping each element to a new one), like this:",
                "As per the new updated feature ECMAScript 6 (ES6) and ECMAScript 2015, you can use the following options with loops:for loopsfor...in loopsArray.forEach()for...of loopswhile loopsdo...while loops",
                "As one can see in the table above, for...of should be used wherever it fits. Since it supports async functions, skips non-numeric properties and prevents messing up the loop by accidentally modifying the loop index.See for...of reference for more examples, link to specification and difference between for...of and for...in. Or maybe check this tutorial for some explanation on how they differ.",
                "The lambda syntax doesn't usually work in Internet\u00a0Explorer\u00a010  or below.I usually use theIf you are a jQuery fan and already have a jQuery file running, you should reverse the positions of the index and value parameters",
                "You can call forEach like this:forEach will iterate over the array you provide and for each iteration it will have element which holds the value of that iteration. If you need index you can get the current index by passing the i as the second parameter in the callback function for forEach.Foreach is basically a High Order Function, Which takes another function as its parameter.Output:You can also iterate over an array like this:",
                "If you want to use forEach(), it will look like -If you want to use for(), it will look like -",
                "Three main options:Detailed examples are below.var myStringArray = [\"Hello\",\"World\"];\nvar arrayLength = myStringArray.length;\nfor (var i = 0; i < arrayLength; i++) {\n    console.log(myStringArray[i]);\n    //Do something\n}ProsConsThe ES5 specification introduced a lot of beneficial array methods. One of them, the Array.prototype.forEach, gave us a concise way to iterate over an array:const array = [\"one\", \"two\", \"three\"]\narray.forEach(function (item, index) {\n  console.log(item, index);\n});Being almost ten years as the time of writing that the ES5 specification was released (Dec. 2009), it has been implemented by nearly all modern engines in the desktop, server, and mobile environments, so it's safe to use them.And with the ES6 arrow function syntax, it's even more succinct:Arrow functions are also widely implemented unless you plan to support ancient platforms (e.g., Internet\u00a0Explorer\u00a011); you are also safe to go.ProsConsNormally, you can replace the need to break out of imperative loops by filtering the array elements before iterating them, for example:Keep in mind if you are iterating an array to build another array from it, you should use map. I've seen this anti-pattern so many times.Anti-pattern:Proper use case of map:const numbers = [1,2,3,4,5];\nconst doubled = numbers.map(n => n * 2);\n\nconsole.log(doubled);Also, if you are trying to reduce the array to a value, for example, you want to sum an array of numbers, you should use the reduce method.Anti-pattern:Proper use of reduce:const numbers = [1,2,3,4,5];\nconst sum = numbers.reduce((total, n) => total + n, 0);\n\nconsole.log(sum);The ES6 standard introduces the concept of iterable objects and defines a new construct for traversing data, the for...of statement.This statement works for any kind of iterable object and also for generators (any object that has a \\[Symbol.iterator\\] property).Array objects are by definition built-in iterables in ES6, so you can use this statement on them:ProsCons@zipcodeman suggests the use of the for...in statement, but for iterating arrays for-in should be avoided, that statement is meant to enumerate object properties.It shouldn't be used for array-like objects because:The second point is that it can give you a lot of problems, for example, if you extend the Array.prototype object to include a method there, that property will also be enumerated.For example:Array.prototype.foo = \"foo!\";\nvar array = ['a', 'b', 'c'];\n\nfor (var i in array) {\n    console.log(array[i]);\n}The above code will console log \"a\", \"b\", \"c\", and \"foo!\".That can be particularly a problem if you use some library that relies heavily on native prototypes augmentation (such as MooTools).The for-in statement, as I said before, is there to enumerate object properties, for example:var obj = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n};\n\nfor (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n        // or if (Object.prototype.hasOwnProperty.call(obj,prop)) for safety...\n        console.log(\"prop: \" + prop + \" value: \" + obj[prop])\n    }\n}In the above example, the hasOwnProperty method allows you to enumerate only own properties. That's it, only the properties that the object physically has, no inherited properties.I would recommend you to read the following article:",
                "Yes, assuming your implementation includes the for...of feature introduced in ECMAScript 2015 (the \"Harmony\" release)... which is a pretty safe assumption these days.It works like this:Or better yet, since ECMAScript 2015 also provides block-scoped variables:(The variable s is different on each iteration, but can still be declared const inside the loop body as long as it isn't modified there.)A note on sparse arrays: an array in JavaScript may not actually store as many items as reported by its length; that number is simply one greater than the highest index at which a value is stored. If the array holds fewer elements than indicated by its length, its said to be sparse. For example, it's perfectly legitimate to have an array with items only at indexes 3, 12, and 247; the length of such an array is 248, though it is only actually storing 3 values.  If you try to access an item at any other index, the array will appear to have the undefined value there, but the array is nonetheless is distinct from one that actually has undefined values stored. You can see this difference in a number of ways, for example in the way the Node REPL displays arrays:So when you want to \"loop through\" an array, you have a question to answer: do you want to loop over the full range indicated by its length and process undefineds for any missing elements, or do you only want to process the elements actually present? There are plenty of applications for both approaches; it just depends on what you're using the array for.If you iterate over an array with for..of, the body of the loop is executed length times, and the loop control variable is set to undefined for any items not actually present in the array. Depending on the details of your \"do something with\" code, that behavior may be what you want, but if not, you should use a different approach.Of course, some developers have no choice but to use a different approach anyway, because for whatever reason they're targeting a version of JavaScript that doesn't yet support for...of.As long as your JavaScript implementation is compliant with the previous edition of the ECMAScript specification (which rules out, for example, versions of Internet Explorer before 9), then you can use the Array#forEach iterator method instead of a loop. In that case, you pass a function to be called on each item in the array:You can of course use an arrow function if your implementation supports ES6+:Unlike for...of, .forEach only calls the function for elements that are actually present in the array. If passed our hypothetical array with three elements and a length of 248, it will only call the function three times, not 248 times. If this is how you want to handle sparse arrays, .forEach may be the way to go even if your interpreter supports for...of.The final option, which works in all versions of JavaScript, is an explicit counting loop. You simply count from 0 up to one less than the length and use the counter as an index. The basic loop looks like this:One advantage of this approach is that you can choose how to handle sparse arrays. The above code will run the body of the loop the full length times, with s set to undefined for any missing elements, just like for..of; if you instead want to handle only the actually-present elements of a sparse array, like .forEach, you can add a simple in test on the index:Depending on your implementation's optimizations, assigning the length value to the local variable (as opposed to including the full myStringArray.length expression in the loop condition) can make a significant difference in performance since it skips a property lookup each time through. You may see the length caching done in the loop initialization clause, like this:The explicit counting loop also means you have access to the index of each value, should you want it. The index is also passed as an extra parameter to the function you pass to forEach, so you can access it that way as well:for...of doesn't give you the index associated with each object, but as long as the object you're iterating over is actually an instance of Array (and not one of the other iterable types for..of works on), you can use the Array#entries method to change it to an array of [index, item] pairs, and then iterate over that:The for...in syntax mentioned by others is for looping over an object's properties; since an Array in JavaScript is just an object with numeric property names (and an automatically-updated length property), you can theoretically loop over an Array with it.  But the problem is that it doesn't restrict itself to the numeric property values (remember that even methods are actually just properties whose value is a closure), nor is it guaranteed to iterate over those in numeric order. Therefore, the for...in syntax should not be used for looping through Arrays.",
                "You can use map, which is a functional programming technique that's also available in other languages like Python and Haskell.The general syntax is:In general func would take one parameter, which is an item of the array. But in the case of JavaScript, it can take a second parameter which is the item's index, and a third parameter which is the array itself.The return value of array.map is another array, so you can use it like this:And now x is [10,20,30,40].You don't have to write the function inline. It could be a separate function.which would be sort-of equivalent to:Except you don't get the new_list.",
                "(Directly answering your question: now you can!)Most other answers are right, but they do not mention (as of this writing) that ECMAScript \u00a06\u00a0 2015 is bringing a new mechanism for doing iteration, the for..of loop.This new syntax is the most elegant way to iterate an array in JavaScript (as long you don't need the iteration index).It currently works with Firefox 13+, Chrome 37+ and it does not natively work with other browsers (see browser compatibility below). Luckily we have JavaScript compilers (such as Babel) that allow us to use next-generation features today.It also works on Node.js (I tested it on version 0.12.0).Iterating an arrayIterating an array of objectsIterating a generator:(example extracted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)Compatibility table:\nhttp://kangax.github.io/compat-table/es6/#test-for..of_loopsSpecification: http://wiki.ecmascript.org/doku.php?id=harmony:iterators",
                "In JavaScript it's not advisable to loop through an Array with a for-in loop, but it's better to use a for loop such as:It's optimized as well (\"caching\" the array length). If you'd like to learn more, read my post on the subject.",
                "You can loop through an array by many different methods. I have sorted my 6 favorite methods from top to bottom.When it's to simply loop through an array, the for loop is my first choice.let array = [1, 2, 3, 4, 5];\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}forEach loop is a modern way to loop through the array. Also, it gives more flexibility and control over the array and elements.let array = [1, 2, 3, 4, 5];\narray.forEach((element) => {\n  console.log(element);\n});for...of loop gives you direct access to the array elements.let array = [1, 2, 3, 4, 5];\nfor (let element of array) {\n  console.log(element);\n}for...in gives you a key using which you can access array elements.let array = [1, 2, 3, 4, 5];\nfor(let index in array){\n  console.log(array[index]);\n}while loop is can be used to loop through the array as well.let array = [1, 2, 3, 4, 5];\nlet length = array.length;\nwhile(length > 0){\n  console.log(array[array.length - length]);\n  length--;\n}Likewise, I use do...while looplet array = [1, 2, 3, 4, 5];\nlet length = array.length;\ndo {\n  console.log(array[array.length - length]);\n  length--;\n}\nwhile (length > 0)",
                "Opera, Safari, Firefox and Chrome now all share a set of enhanced Array methods for optimizing many common loops.You may not need all of them, but they can be very useful, or would be if every browser supported them.Mozilla Labs published the algorithms they and WebKit both use, so that you can add them yourself.filter returns an array of items that satisfy some condition or test.every returns true if every array member passes the test.some returns true if any pass the test.forEach runs a function on each array member and doesn't return anything.map is like forEach, but it returns an array of the results of the operation for each element.These methods all take a function for their first argument and have an optional second argument, which is an object whose scope you want to impose on the array members as they loop through the function.Ignore it until you need it.indexOf and lastIndexOf find the appropriate position of the first or last element that matches its argument exactly.",
                "Since my time in college, I've programmed in Java, JavaScript, Pascal, ABAP, PHP, Progress 4GL, C/C++ and possibly a few other languages I can't think of right now.While they all have their own linguistic idiosyncrasies, each of these languages share many of the same basic concepts. Such concepts include procedures / functions, IF-statements, FOR-loops, and WHILE-loops.A traditional for loop has three components:These three components are separated from each other by a ; symbol. Content for each of these three components is optional, which means that the following is the most minimal for loop possible:Of course, you will need to include an if(condition === true) { break; }  or an if(condition === true) { return; } somewhere inside that for-loop to get it to stop running.Usually, though, the initialization is used to declare an index, the condition is used to compare that index with a minimum or maximum value, and the afterthought is used to increment the index:The traditional way to loop through an array, is this:Or, if you prefer to loop backwards, you do this:There are, however, many variations possible, like for example this one:...or this one......or this one:Whichever works best is largely a matter of both personal taste and the specific use case you're implementing.Note that each of these variations is supported by all browsers, including very very old ones!One alternative to a for loop is a while loop. To loop through an array, you could do this:Like traditional for loops, while loops are supported by even the oldest of browsers.Also, note that every while loop can be rewritten as a for loop. For example, the while loop hereabove behaves the exact same way as this for-loop:In JavaScript, you can also do this:This should be used with care, however, as it doesn't behave the same as a traditional for loop in all cases, and there are potential side-effects that need to be considered. See Why is using \"for...in\" for array iteration a bad idea? for more details.As an alternative to for...in, there's now also for for...of. The following example shows the difference between a for...of loop and a for...in loop:Additionally, you need to consider that no version of Internet Explorer supports for...of (Edge 12+ does) and that for...in requires at least Internet\u00a0Explorer\u00a010.An alternative to for-loops is Array.prototype.forEach(), which uses the following syntax:Array.prototype.forEach() is supported by all modern browsers, as well as Internet\u00a0Explorer\u00a09 and later.Finally, many utility libraries also have their own foreach variation. AFAIK, the three most popular ones are these:jQuery.each(), in jQuery:_.each(), in Underscore.js:_.forEach(), in Lodash:",
                "Use the while loop...It logs: 'one', 'two', and 'three'And for the reverse order, an even more efficient loop:It logs: 'three', 'two', and 'one'Or the classical for loop:It logs: 'one','two','three'Reference: Google Closure: How not to write JavaScript",
                "If you want a terse way to write a fast loop and you can iterate in reverse:This has the benefit of caching the length (similar to for (var i=0, len=myArray.length; i<len; ++i) and unlike for (var i=0; i<myArray.length; ++i)) while being fewer characters to type.There are even some times when you ought to iterate in reverse, such as when iterating over a live NodeList where you plan on removing items from the DOM during iteration.",
                "Some use cases of looping through an array in the functional programming way in JavaScript:Note: Array.prototype.forEach() is not a functional way strictly speaking, as the function it takes as the input parameter is not supposed to return a value, which thus cannot be regarded as a pure function.Note: The map() method creates a new array with the results of calling a provided function on every element in the calling array.Note: The filter() method creates a new array with all elements that pass the test implemented by the provided function.The Array.prototype.find() method returns the value of the first element in the array that satisfies the provided testing function.",
                "Yes, you can do the same in JavaScript using a loop, but not limited to that. There are many ways to do a loop over arrays in JavaScript. Imagine you have this array below, and you'd like to do a loop over it:These are the solutions:1) For loopA for loop is a common way looping through arrays in JavaScript, but it is no considered as the fastest solutions for large arrays:2) While loopA while loop is considered as the fastest way to loop through long arrays, but it is usually less used in the JavaScript code:3) Do while\nA do while is doing the same thing as while with some syntax difference as below:These are the main ways to do JavaScript loops, but there are a few more ways to do that.Also we use a for in loop for looping over objects in JavaScript.Also look at the map(), filter(), reduce(), etc. functions on an Array in JavaScript. They may do things much faster and better than using while and for.This is a good article if you like to learn more about the asynchronous functions over arrays in JavaScript.Functional programming has been making quite a splash in the\ndevelopment world these days. And for good reason: Functional\ntechniques can help you write more declarative code that is easier to\nunderstand at a glance, refactor, and test.One of the cornerstones of functional programming is its special use\nof lists and list operations. And those things are exactly what the\nsound like they are: arrays of things, and the stuff you do to them.\nBut the functional mindset treats them a bit differently than you\nmight expect.This article will take a close look at what I like to call the \"big\nthree\" list operations: map, filter, and reduce. Wrapping your head\naround these three functions is an important step towards being able\nto write clean functional code, and opens the doors to the vastly\npowerful techniques of functional and reactive programming.It also means you'll never have to write a for loop again.Read more>> here:",
                "There is a way to do it where you have very little implicit scope in your loop and do away with extra variables.Or if you really want to get the id and have a really classical for loop:Modern browsers all support iterator methods forEach, map, reduce, filter and a host of other methods on the Array prototype.",
                "There are various way to loop through array in JavaScript.Generic loop:ES5's forEach:jQuery.each:Have a look this for detailed information or you can also check MDN for looping through an array in JavaScript & using jQuery check jQuery for each.",
                "Array loop:Object loop:",
                "I would thoroughly recommend making use of the Underscore.js library. It provides you with various functions that you can use to iterate over arrays/collections.For instance:",
                "If anybody is interested in the performance side of the multiple mechanisms available for Array iterations, I've prepared the following JSPerf tests:https://jsperf.com/fastest-array-iteratorThe traditional for() iterator, is by far the fastest method, especially when used with the array length cached.The Array.prototype.forEach() and the Array.prototype.map() methods are the slowest approximations, probably as a consequence of the function call overhead.",
                "I did not yet see this variation, which I personally like the best:Given an array:You can loop over it without ever accessing the length property:See this JsFiddle demonstrating that: http://jsfiddle.net/prvzk/This only works for arrays that are not sparse. Meaning that there actually is a value at each index in the array. However, I found that in practice I hardly ever use sparse arrays in JavaScript... In such cases it's usually a lot easier to use an object as a map/hashtable. If you do have a sparse array, and want to loop over 0 .. length-1, you need the for (var i=0; i<someArray.length; ++i) construct, but you still need an if inside the loop to check whether the element at the current index is actually defined.Also, as CMS mentions in a comment below, you can only use this on arrays that don't contain any falsish values. The array of strings from the example works, but if you have empty strings, or numbers that are 0 or NaN, etc. the loop will break off prematurely. Again in practice this is hardly ever a problem for me, but it is something to keep in mind, which makes this a loop to think about before you use it... That may disqualify it for some people :)What I like about this loop is:The reason this works is that the array specification mandates that when you read an item from an index >= the array's length, it will return undefined. When you write to such a location it will actually update the length.For me, this construct most closely emulates the Java 5 syntax that I love:... with the added benefit of also knowing about the current index inside the loop",
                "If you're using the jQuery library, consider using \nhttp://api.jquery.com/jQuery.each/From the documentation:jQuery.each( collection, callback(indexInArray, valueOfElement) )Returns: ObjectDescription: A generic iterator function, which can be used to\n  seamlessly iterate over both objects and arrays. Arrays and array-like\n  objects with a length property (such as a function's arguments object)\n  are iterated by numeric index, from 0 to length-1. Other objects are\n  iterated via their named properties.The $.each() function is not the same as $(selector).each(), which is\n  used to iterate, exclusively, over a jQuery object. The $.each()\n  function can be used to iterate over any collection, whether it is a\n  map (JavaScript object) or an array. In the case of an array, the\n  callback is passed an array index and a corresponding array value each\n  time. (The value can also be accessed through the this keyword, but\n  Javascript will always wrap the this value as an Object even if it is\n  a simple string or number value.) The method returns its first\n  argument, the object that was iterated.",
                "There are 4 ways of array iteration:Summary: 1 and 3 solutions create extra variable, 2 - create extra function context. The best way is 4th - \"for of\".",
                "let a= [\"Hello\", \"World\"];\n\nwhile(a.length) { console.log( a.shift() ); }Today (2022-11-13) I perform a test on Chrome 107, Safari 15.2 and Firefox 106 on chosen solutions.I perform 3 tests:The below snippet presents code used in the test.function A(a) {\n  let r=0;\n  while(a.length) r+= a.shift().length;\n  return r;\n}\n\nfunction B(a) {\n  let r=0;\n  for(i in a) r+= a[i].length;\n  return r;\n}\n\nfunction C(a) {\n  let r=0;\n  for(x of a) r+= x.length;\n  return r;\n}\n\nfunction D(a) {\n  let r=0;\n  for (i=0; i<a.length; ++i) r+= a[i].length;\n  return r;\n\n}\n\nfunction E(a) {\n  let r=0;\n  a.forEach(x=> r+= x.length);\n  return r;\n}\n\nlet arr= [\"Hello\", \"World!\"];\n[A,B,C,D,E].forEach(f => console.log(`${f.name}: ${f([...arr])}`))Here are example results for Chrome for a medium array:",
                "There's a method to iterate over only own object properties, not including prototype's ones:but it still will iterate over custom-defined properties.In JavaScript any custom property could be assigned to any object, including an array.If one wants to iterate over sparsed array, for (var i = 0; i < array.length; i++) if (i in array) or array.forEach with es5shim should be used.",
                "http://jsperf.com/native-loop-performance/8Comparing methods for looping through an array of 100000 items and do a minimal operation with the new value each time.Preparation:Tests:",
                "There are a couple of ways to do it in JavaScript. The first two examples are JavaScript samples. The third one makes use of a JavaScript library, that is, jQuery making use of the .each() function.var myStringArray = [\"hello\", \"World\"];\r\nfor(var i in myStringArray) {\r\n  alert(myStringArray[i]);\r\n}var myStringArray = [\"hello\", \"World\"];\r\nfor (var i=0; i < myStringArray.length; i++) {\r\n  alert(myStringArray[i]);\r\n}var myStringArray = [\"hello\", \"World\"];\r\n$.each(myStringArray, function(index, value){\r\n  alert(value);\r\n})\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>",
                "The optimized approach is to cache the length of array and using the single variable pattern, initializing all variables with a single var keyword.If the order of iteration does not matter then you should try reversed loop. It is the fastest as it reduces overhead condition testing and decrement is in one statement:Or better and cleaner to use a while loop:",
                "In JavaScript, there are so many solutions to loop an array.The code below are popular ones/** Declare inputs */\r\nconst items = ['Hello', 'World']\r\n\r\n/** Solution 1. Simple for */\r\nconsole.log('solution 1. simple for')\r\n\r\nfor (let i = 0; i < items.length; i++) {\r\n  console.log(items[i])\r\n}\r\n\r\nconsole.log()\r\nconsole.log()\r\n\r\n/** Solution 2. Simple while */\r\nconsole.log('solution 2. simple while')\r\n\r\nlet i = 0\r\nwhile (i < items.length) {\r\n  console.log(items[i++])\r\n}\r\n\r\nconsole.log()\r\nconsole.log()\r\n\r\n/** Solution 3. forEach*/\r\nconsole.log('solution 3. forEach')\r\n\r\nitems.forEach(item => {\r\n  console.log(item)\r\n})\r\n\r\nconsole.log()\r\nconsole.log()\r\n\r\n/** Solution 4. for-of*/\r\nconsole.log('solution 4. for-of')\r\n\r\nfor (const item of items) {\r\n  console.log(item)\r\n}\r\n\r\nconsole.log()\r\nconsole.log()",
                "If you want to use jQuery, it has a nice example in its documentation:",
                "The best way in my opinion is to use the Array.forEach function. If you cannot use that I would suggest to get the polyfill from MDN. To make it available, it is certainly the safest way to iterate over an array in JavaScript.Array.prototype.forEach()So as others has suggested, this is almost always what you want:This ensures that anything you need in the scope of processing the array stays within that scope, and that you are only processing the values of the array, not the object properties and other members, which is what for .. in does.Using a regular C-style for loop works in most cases. It is just important to remember that everything within the loop shares its scope with the rest of your program, the { } does not create a new scope.Hence:will output \"11\" - which may or may not be what you want.A working jsFiddle example:\nhttps://jsfiddle.net/workingClassHacker/pxpv2dh5/7/",
                "It's not 100% identical, but similar:var myStringArray = ['Hello', 'World']; // The array uses [] not {}\n    for (var i in myStringArray) {\n        console.log(i + ' -> ' + myStringArray[i]); // i is the index/key, not the item\n    }",
                "For example, I used in a Firefox console:You can use querySelectorAll to get same resultdocument.querySelectorAll('pre').forEach( (e) => { \n   console.log(e.textContent);\n})\n<pre>text 1</pre>\n<pre>text 2</pre>\n<pre>text 3</pre>"
            ]
        },
        {
            "tag": "email",
            "patterns": [
                "How can I validate an email address in JavaScript?",
                "valiadate email",
                "validation"
            ],
            "responses": [
                "Using regular expressions is probably the best way. You can see a bunch of tests here (taken from chromium)Here's the example of a regular expression that accepts unicode:But keep in mind that one should not rely only upon JavaScript validation. JavaScript can easily be disabled. This should be validated on the server side as well.Here's an example of the above in action:const validateEmail = (email) => {\n  return email.match(\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  );\n};\n\nconst validate = () => {\n  const $result = $('#result');\n  const email = $('#email').val();\n  $result.text('');\n\n  if (validateEmail(email)) {\n    $result.text(email + ' is valid :)');\n    $result.css('color', 'green');\n  } else {\n    $result.text(email + ' is not valid :(');\n    $result.css('color', 'red');\n  }\n  return false;\n}\n\n$('#email').on('input', validate);\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n\n<label for=\"email\">Enter an email address: </label>\n<input id=\"email\" />\n<h2 id=\"result\"></h2>",
                "I've slightly modified Jaymon's answer for people who want really simple validation in the form of:The regular expression:To prevent matching multiple @ signs:The above regexes match the whole string, remove the leading and ^ and trailing $ if you want to match anywhere in the string. The example below matches anywhere in the string.If you do want to match the whole sring, you may want to trim() the string first.Example JavaScript function:function validateEmail(email) {\n  var re = /\\S+@\\S+\\.\\S+/;\n  return re.test(email);\n}\n    \nconsole.log(validateEmail('my email is anystring@anystring.any')); // true\n    \nconsole.log(validateEmail('my email is anystring@anystring .any')); // false",
                "Just for completeness, here you have another RFC 2822 compliant regexThe official standard is known as RFC 2822. It describes the syntax that valid email addresses must adhere to. You can (but you shouldn't \u2014 read on) implement it with this regular expression:(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])(...) We get a more practical implementation of RFC 2822 if we omit the syntax using double quotes and square brackets. It will still match 99.99% of all email addresses in actual use today.[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?A further change you could make is to allow any two-letter country code top level domain, and only specific generic top level domains. This regex filters dummy email addresses like asdf@adsf.adsf. You will need to update it as new top-level domains are added.[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\\bSo even when following official standards, there are still trade-offs to be made. Don't blindly copy regular expressions from online libraries or discussion forums. Always test them on your own data and with your own applications.Emphasis mine",
                "Wow, there are lots of complexity here. If all you want to do is just catch the most obvious syntax errors, I would do something like this:It usually catches the most obvious errors that the user makes and assures that the form is mostly right, which is what JavaScript validation is all about.EDIT:\nWe can also check for '.' in the email using",
                "There's something you have to understand the second you decide to use a regular expression to validate emails: It's probably not a good idea. Once you have come to terms with that, there are many implementations out there that can get you halfway there, this article sums them up nicely.In short, however, the only way to be absolutely, positively sure that what the user entered is in fact an email is to actually send an email and see what happens. Other than that it's all just guesses.",
                "HTML5 itself has email validation. If your browser supports HTML5 then you can use the following code.jsFiddle linkFrom the HTML5 spec:A valid e-mail address is a string that matches the email production of the following ABNF, the character set for which is Unicode.This requirement is a willful violation of RFC 5322, which defines a syntax for e-mail addresses that is simultaneously too strict (before the \"@\" character), too vague (after the \"@\" character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.The following JavaScript- and Perl-compatible regular expression is an implementation of the above definition.",
                "I have found this to be the best solution:It allows the following formats:It's clearly versatile and allows the all-important international characters, while still enforcing the basic anything@anything.anything format. It will block spaces which are technically allowed by RFC, but they are so rare that I'm happy to do this.",
                "In modern browsers you can build on top of @Sushil's answer with pure JavaScript and the DOM:I've put together an example in the fiddle http://jsfiddle.net/boldewyn/2b6d5/. Combined with feature detection and the bare-bones validation from Squirtle's Answer, it frees you from the regular expression massacre and does not bork on old browsers.",
                "JavaScript can match a regular expression:Here's an RFC22 regular expression for emails:",
                "All email addresses contain an 'at' (i.e. @) symbol. Test that necessary condition:Or, if you need to support IE/older browsers:Don't bother with anything more complicated. Even if you could perfectly determine whether an email is RFC-syntactically valid, that wouldn't tell you whether it belongs to the person who supplied it. That's what really matters.To test that, send a validation message.",
                "This is the correct RFC822 version.",
                "Correct validation of email address in compliance with the RFCs is not something that can be achieved with a one-liner regular expression. An article with the best solution I've found in PHP is What is a valid email address?. Obviously, it has been ported to Java. I think the function is too complex to be ported and used in JavaScript. JavaScript/node.js port: https://www.npmjs.com/package/email-addresses.A good practice is to validate your data on the client, but double-check the validation on the server. With this in mind, you can simply check whether a string looks like a valid email address on the client and perform the strict check on the server.Here's the JavaScript function I use to check if a string looks like a valid mail address:Explanation:lastAtPos < lastDotPos: Last @ should be before last . since @ cannot be part of server name (as far as I know).lastAtPos > 0: There should be something (the email username) before the last @.str.indexOf('@@') == -1: There should be no @@ in the address. Even if @ appears as the last character in email username, it has to be quoted so \" would be between that @ and the last @ in the address.lastDotPos > 2: There should be at least three characters before the last dot, for example a@b.com.(str.length - lastDotPos) > 2: There should be enough characters after the last dot to form a two-character domain. I'm not sure if the brackets are necessary.",
                "This was stolen from http://codesnippets.joyent.com/posts/show/1917",
                "Do this:It's based on RFC 2822Test it at https://regex101.com/r/857lzc/1Often when storing email addresses in the database I make them lowercase and, in practice, regexs can usually be marked case insensitive. In those cases this is slightly shorter:Here's an example of it being used in JavaScript (with the case insensitive flag i at the end).Note:\nTechnically some emails can include quotes in the section before the @ symbol with escape characters inside the quotes (so your email user can be obnoxious and contain stuff like @ and \"...\" as long as it's written in quotes). NOBODY DOES THIS EVER! It's obsolete. But, it IS included in the true RFC 2822 standard and omitted here.Note 2:\nThe beginning of an email (before the @ sign) can be case sensitive (via the spec). However, anyone with a case-sensitive email is probably used to having issues, and, in practice, case insensitive is a safe assumption. More info: Are email addresses case sensitive?More info: http://www.regular-expressions.info/email.html",
                "I'm really looking forward to solve this problem.\nSo I modified email validation regular expression aboveOriginal\n/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/Modified\n/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+[^<>()\\.,;:\\s@\\\"]{2,})$/to pass the examples in Wikipedia Email Address.And you can see the result in here.",
                "Simply check out if the entered email address is valid or not using HTML.There isn't any need to write a function for validation.",
                "You should not use regular expressions to validate an input string to check if it's an email. It's too complicated and would not cover all the cases.Now since you can only cover 90% of the cases, write something like:You can refine it. For instance, 'aaa@' is valid. But overall you get the gist. And don't get carried away... A simple 90% solution is better than 100% solution that does not work.The world needs simpler code...",
                "Wikipedia standard mail syntax :https://en.wikipedia.org/wiki/Email_address#Examples\nhttps://fr.wikipedia.org/wiki/Adresse_%C3%A9lectronique#Syntaxe_exacteFunction :Valid emails :Invalid emails :Show this test : https://regex101.com/r/LHJ9gU/1",
                "It's hard to get an email validator 100% correct. The only real way to get it correct would be to send a test email to the account. That said, there are a few basic checks that can help make sure that you're getting something reasonable.Some things to improve:Instead of new RegExp, just try writing the regexp out like this:Second, check to make sure that a period comes after the @ sign, and make sure that there are characters between the @s and periods.",
                "Regex updated! try thistypscript version completemore info https://git.io/vhEfc",
                "This is how node-validator does it:",
                "Almost all answers to this questions suggest using Regex to validate emails addresses. I think Regex is only good for a rudimentary validation. It seems that the checking validation of email addresses is actually two separate problems:1- Validation of email format: Making sure if the email complies with the format and pattern of emails in RFC 5322 and if the TLD actually exists. A list of all valid TLDs can be found here.For example, although the address example@example.ccc will pass the regex, it is not a valid email, because ccc is not a top-level domain by IANA.2- Making sure the email actually exists: For doing this, the only option is to send the users an email.",
                "Use this code inside your validator function:Else you can use jQuery. Inside rules define:",
                "In contrast to squirtle, here is a complex solution, but it does a mighty fine job of validating emails properly:Use like so:",
                "My knowledge of regular expressions is not that good. That's why I check the general syntax with a simple regular expression first and check more specific options with other functions afterwards. This may not be not the best technical solution, but this way I'm way more flexible and faster.The most common errors I've come across are spaces (especially at the beginning and end) and occasionally a double dot.",
                "Regex for validating email address",
                "var testresults\n\nfunction checkemail() {\n  var str = document.validation.emailcheck.value\n  var filter = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i\n  if (filter.test(str))\n    testresults = true\n  else {\n    alert(\"Please input a valid email address!\")\n    testresults = false\n  }\n  return (testresults)\n}\n\nfunction checkbae() {\n  if (document.layers || document.getElementById || document.all)\n    return checkemail()\n  else\n    return true\n}\n<form name=\"validation\" onSubmit=\"return checkbae()\">\n  Please input a valid email address:<br />\n\n  <input type=\"text\" size=18 name=\"emailcheck\">\n  <input type=\"submit\" value=\"Submit\">\n</form>",
                "Here is a very good discussion about using regular expressions to validate email addresses; \"Comparing E-mail Address Validating Regular Expressions\"Here is the current top expression, that is JavaScript compatible, for reference purposes:",
                "Apparently, that's it:Taken from http://fightingforalostcause.net/misc/2006/compare-email-regex.php on Oct 1 '10.But, of course, that's ignoring internationalization.",
                "I was looking for a Regex in JS that passes all Email Address test cases:email@example.com Valid emailfirstname.lastname@example.com  Email contains dot in the address fieldemail@subdomain.example.com Email contains dot with subdomainfirstname+lastname@example.com   Plus sign is considered valid characteremail@192.0.2.123 Domain is valid IP addressemail@[192.0.2.123] Square bracket around IP address is considered valid\u201cemail\u201d@example.com Quotes around email is considered valid1234567890@example.com Digits in address are validemail@domain-one.example Dash in domain name is valid_______@example.com Underscore in the address field is validemail@example.name .name is valid Top Level Domain nameemail@example.co.jp Dot in Top Level Domain name also considered valid (using co.jp as example here)firstname-lastname@example.com Dash in address field is validHere we go :http://regexr.com/3f07jOR regex:"
            ]
        },
        {
            "tag": "replace",
            "patterns": [
                "How do I replace all occurrences of a string in JavaScript?",
                "Search and replace",
                "Replace string occurrences",
                "Replace substring"
            ],
            "responses": [
                "As of August 2020: Modern browsers have support for the String.replaceAll() method defined by the ECMAScript 2021 language specification.For older/legacy browsers:Here is how this answer evolved:In response to comment \"what's if 'abc' is passed as a variable?\":In response to Click Upvote's comment, you could simplify it even more:Note: Regular expressions contain special (meta) characters, and as such it is dangerous to blindly pass an argument in the find function above without pre-processing it to escape those characters.  This is covered in the Mozilla Developer Network's JavaScript Guide on Regular Expressions, where they present the following utility function (which has changed at least twice since this answer was originally written, so make sure to check the MDN site for potential updates):So in order to make the replaceAll() function above safer, it could be modified to the following if you also include escapeRegExp:",
                "For the sake of completeness, I got to thinking about which method I should use to do this. There are basically two ways to do this as suggested by the other answers on this page.Note: In general, extending the built-in prototypes in JavaScript is generally not recommended. I am providing as extensions on the String prototype simply for purposes of illustration, showing different implementations of a hypothetical standard method on the String built-in prototype.Not knowing too much about how regular expressions work behind the scenes in terms of efficiency, I tended to lean toward the split and join implementation in the past without thinking about performance. When I did wonder which was more efficient, and by what margin, I used it as an excuse to find out.On my Chrome Windows\u00a08 machine, the regular expression based implementation is the fastest, with the split and join implementation being 53% slower. Meaning the regular expressions are twice as fast for the lorem ipsum input I used.Check out this benchmark running these two implementations against each other.As noted in the comment below by @ThomasLeduc and others, there could be an issue with the regular expression-based implementation if search contains certain characters which are reserved as special characters in regular expressions. The implementation assumes that the caller will escape the string beforehand or will only pass strings that are without the characters in the table in Regular Expressions (MDN).MDN also provides an implementation to escape our strings. It would be nice if this was also standardized as RegExp.escape(str), but alas, it does not exist:We could call escapeRegExp within our String.prototype.replaceAll implementation, however, I'm not sure how much this will affect the performance (potentially even for strings for which the escape is not needed, like all alphanumeric strings).",
                "In the latest versions of most popular browsers, you can use replaceAll\nas shown here:But check Can I use or another compatibility table first to make sure the browsers you're targeting have added support for it first.For Node.js and compatibility with older/non-current browsers:Note: Don't use the following solution in performance critical code.As an alternative to regular expressions for a simple literal string, you could useThe general pattern isThis used to be faster in some cases than using replaceAll and a regular expression, but that doesn't seem to be the case anymore in modern browsers.Benchmark: https://jsben.ch/TZYzjIf you have a performance-critical use case (e.g., processing hundreds of strings), use the regular expression method. But for most typical use cases, this is well worth not having to worry about special characters.",
                "Here's a string prototype function based on the accepted answer:If your find contains special characters then you need to escape them:Fiddle: http://jsfiddle.net/cdbzL/",
                "Use word boundaries (\\b)This is a simple regex that avoids replacing parts of words in most cases. However, a dash - is still considered a word boundary. So conditionals can be used in this case to avoid replacing strings like cool-cat:Basically, this question is the same as the question here:\nReplace \" ' \" with \" '' \" in JavaScriptRegexp isn't the only way to replace multiple occurrences of a substring, far from it. Think flexible, think split!Alternatively, to prevent replacing word parts\u2014which the approved answer will do, too! You can get around this issue using regular expressions that are, I admit, somewhat more complex and as an upshot of that, a tad slower, too:The output is the same as the accepted answer, however, using the /cat/g expression on this string:Oops indeed, this probably isn't what you want. What is, then? IMHO, a regex that only replaces 'cat' conditionally (i.e., not part of a word), like so:My guess is, this meets your needs. It's not foolproof, of course, but it should be enough to get you started. I'd recommend reading some more on these pages. This'll prove useful in perfecting this expression to meet your specific needs.RegExp (regular expression) objectRegular-Expressions.infoHere is an example of .replace used with a callback function. In this case, it dramatically simplifies the expression and provides even more flexibility, like replacing with correct capitalisation or replacing both cat and cats in one go:",
                "These are the most common and readable methods.Method 1:Method 2:Method 3:Method 4:Output:",
                "Match against a global regular expression:",
                "For replacing a single time, use:For replacing multiple times, use:",
                "Or try the replaceAll method, as recommended in this answer:or:EDIT: Clarification about replaceAll availabilityThe replaceAll method is added to String's prototype. This means it will be available for all string objects/literals.Example:",
                "Using RegExp in JavaScript could do the job for you. Just simply do something like below code, and don't forget the /g after which standout for global:If you think of reuse, create a function to do that for you, but it's not recommended as it's only one line function. But again, if you heavily use this, you can write something like this:And simply use it in your code over and over like below:But as I mention earlier, it won't make a huge difference in terms of lines to be written or performance. Only caching the function may affect some faster performance on long strings and is also a good practice of DRY code if you want to reuse.",
                "Say you want to replace all the 'abc' with 'x':I was trying to think about something more simple than modifying the string prototype.",
                "Use a regular expression:",
                "Today 27.12.2019 I perform tests on macOS v10.13.6 (High Sierra) for the chosen solutions.ConclusionsI also create my own solution. It looks like currently it is the shortest one which does the question job:str = \"Test abc test test abc test test test abc test test abc\";\nstr = str.split`abc`.join``\n\nconsole.log(str);The tests were performed on Chrome 79.0, Safari 13.0.4 and Firefox 71.0 (64 bit). The tests RA and RB use recursion. ResultsYou can run tests on your machine HERE. Results for Chrome:The recursive solutions RA and RB givesRangeError: Maximum call stack size exceededFor 1M characters they even break ChromeI try to perform tests for 1M characters for other solutions, but E,F,G,H takes so much time that browser ask me to break script so I shrink test string to 275K characters. You can run tests on your machine HERE. Results for ChromeCode used in testsvar t=\"Test abc test test abc test test test abc test test abc\"; // .repeat(5000)\nvar log = (version,result) => console.log(`${version}: ${result}`);\n\n\nfunction A(str) {\n  return str.split('abc').join('');\n}\n\nfunction B(str) {\n  return str.split`abc`.join``; // my proposition\n}\n\n\nfunction C(str) {\n  return str.replace(/abc/g, '');\n}\n\nfunction D(str) {\n  return str.replace(new RegExp(\"abc\", \"g\"), '');\n}\n\nfunction E(str) {\n  while (str.indexOf('abc') !== -1) { str = str.replace('abc', ''); }\n  return str;\n}\n\nfunction F(str) {\n  while (str.indexOf('abc') !== -1) { str = str.replace(/abc/, ''); }\n  return str;\n}\n\nfunction G(str) {\n  while(str.includes(\"abc\")) { str = str.replace('abc', ''); }\n  return str;\n}\n\n// src: https://stackoverflow.com/a/56989553/860099\nfunction H(str)\n{\n    let i = -1\n    let find = 'abc';\n    let newToken = '';\n\n    if (!str)\n    {\n        if ((str == null) && (find == null)) return newToken;\n        return str;\n    }\n\n    while ((\n        i = str.indexOf(\n            find, i >= 0 ? i + newToken.length : 0\n        )) !== -1\n    )\n    {\n        str = str.substring(0, i) +\n            newToken +\n            str.substring(i + find.length);\n    }\n    return str;\n}\n\n// src: https://stackoverflow.com/a/22870785/860099\nfunction RA(string, prevstring) {\n  var omit = 'abc';\n  var place = '';\n  if (prevstring && string === prevstring)\n    return string;\n  prevstring = string.replace(omit, place);\n  return RA(prevstring, string)\n}\n\n// src: https://stackoverflow.com/a/26107132/860099\nfunction RB(str) {\n  var find = 'abc';\n  var replace = '';\n  var i = str.indexOf(find);\n  if (i > -1){\n    str = str.replace(find, replace);\n    i = i + replace.length;\n    var st2 = str.substring(i);\n    if(st2.indexOf(find) > -1){\n      str = str.substring(0,i) + RB(st2, find, replace);\n    }\n  }\n  return str;\n}\n\n\n\n\nlog('A ', A(t));\nlog('B ', B(t));\nlog('C ', C(t));\nlog('D ', D(t));\nlog('E ', E(t));\nlog('F ', F(t));\nlog('G ', G(t));\nlog('H ', H(t));\nlog('RA', RA(t)); // use reccurence\nlog('RB', RB(t)); // use reccurence\n<p style=\"color:red\">This snippet only presents codes used in tests. It not perform test itself!<p>",
                "Replacing single quotes:",
                "Usingworked better for me than the previous answers. So new RegExp(\"abc\", 'g') creates a regular expression what matches all occurrences ('g' flag) of the text (\"abc\"). The second part is what gets replaced to, in your case empty string (\"\").\nstr is the string, and we have to override it, as replace(...) just returns result, but not overrides. In some cases you might want to use that.",
                "This is the fastest version that doesn't use regular expressions.Revised jsperfIt is almost twice as fast as the split and join method.As pointed out in a comment here, this will not work if your omit variable contains place, as in: replaceAll(\"string\", \"s\", \"ss\"), because it will always be able to replace another occurrence of the word.There is another jsperf with variants on my recursive replace that go even faster (http://jsperf.com/replace-all-vs-split-join/12)!",
                "Loop it until number occurrences comes to 0, like this:",
                "If what you want to find is already in a string, and you don't have a regex escaper handy, you can use join/split:function replaceMulti(haystack, needle, replacement)\r\n    {\r\n        return haystack.split(needle).join(replacement);\r\n    }\r\n\r\n    someString = 'the cat looks like a cat';\r\n    console.log(replaceMulti(someString, 'cat', 'dog'));",
                "I like this method (it looks a little cleaner):",
                "String.prototype.replaceAll - ECMAScript 2021The new String.prototype.replaceAll() method returns a new string with all matches of a pattern replaced by a replacement. The pattern can be either a string or a RegExp, and the replacement can be either a string or a function to be called for each match.const message = 'dog barks meow meow';\nconst messageFormatted = message.replaceAll('meow', 'woof')\n\nconsole.log(messageFormatted);",
                "The simplest way to do this without using any regular expression is split and join, like the code here:var str = \"Test abc test test abc test test test abc test test abc\";\nconsole.log(str.split('abc').join(''));",
                "http://jsfiddle.net/ANHR9/",
                "If the string contains a similar pattern like abccc, you can use this:",
                "As of August 2020 there is a Stage 4 proposal to ECMAScript that adds the replaceAll method to String.It's now supported in Chrome 85+, Edge 85+, Firefox 77+, Safari 13.1+.The usage is the same as the replace method:Here's an example usage:It's supported in most modern browsers, but there exist polyfills:It is supported in the V8 engine behind an experimental flag --harmony-string-replaceall.\nRead more on the V8 website.",
                "Of course in 2021 the right answer is:console.log(\n  'Change this and this for me'.replaceAll('this','that') // Normal case\n);\nconsole.log(\n  'aaaaaa'.replaceAll('aa','a') // Challenged case\n);If you don't want to deal with replace() + RegExp.But what if the browser is from before 2020?In this case we need polyfill (forcing older browsers to support new features) (I think for a few years will be necessary).\nI could not find a completely right method in answers. So I suggest this function that will be defined as a polyfill.if(!String.prototype.replaceAll){Object.defineProperty(String.prototype,'replaceAll',{configurable:!0,writable:!0,enumerable:!1,value:function(search,replace){return this.replace(Object.prototype.toString.call(search)==='[object RegExp]'?search.global?search:RegExp(search.source,/\\/([a-z]*)$/.exec(search.toString())[1]+'g'):RegExp(String(search).replace(/[.^$*+?()[{|\\\\]/g,\"\\\\$&\"),\"g\"),replace)}})}\n\nconsole.log(\n  'Change this and this for me'.replaceAll('this','that')\n); // Change that and that for me\n\nconsole.log(\n  'aaaaaa'.replaceAll('aa','a')\n); // aaa\n\nconsole.log(\n  '{} (*) (*) (RegEx) (*) (\\*) (\\\\*) [reserved characters]'.replaceAll('(*)','X')\n); // {} X X (RegEx) X X (\\*) [reserved characters]\n\nconsole.log(\n  'How (replace) (XX) with $1?'.replaceAll(/(xx)/gi,'$$1')\n); // How (replace) ($1) with $1?\n\nconsole.log(\n  'Here is some numbers 1234567890 1000000 123123.'.replaceAll(/\\d+/g,'***')\n); // Here is some numbers *** *** *** and need to be replaced.\n\nconsole.log(\n  'Remove numbers under 233: 236   229  711   200   5'.replaceAll(/\\d+/g, function(m) {\n    return parseFloat(m) < 233 ? '' : m\n  })\n); // Remove numbers under 233: 236     711\n\nconsole.log(\n  'null'.replaceAll(null,'x')\n); // x\n\n\n// The difference between My first preference and the original:\n// Now in 2022 with browsers > 2020 it should throw an error (But possible it be changed in future)\n\n//   console.log(\n//      'xyz ABC abc ABC abc xyz'.replaceAll(/abc/i,'')\n//   );\n\n// Browsers < 2020:\n// xyz     xyz\n// Browsers > 2020\n// TypeError: String.prototype.replaceAll called with a non-global RegExpThe result is the same as the native replaceAll in case of the first argument input is:\nnull, undefined, Object, Function, Date, ... , RegExp, Number, String, ...Ref: 22.1.3.19 String.prototype.replaceAll ( searchValue, replaceValue)\n+ RegExp SyntaxImportant note: As some professionals mention it, many of recursive functions that suggested in answers, will return the wrong result. (Try them with the challenged case of the above snippet.)\nMaybe some tricky methods like .split('searchValue').join('replaceValue') or some well managed functions give same result, but definitely with much lower performance than native replaceAll() / polyfill replaceAll() / replace() + RegExpFor example, we can support IE7+ too, by not using Object.defineProperty() and using my old naive assignment method:And it should work well for basic uses on IE7+. \nBut as here @sebastian-simon explained about, that can make secondary problems in case of more advanced uses. E.g.:In fact, my suggested option is a little optimistic. Like we trusted the environment (browser and Node.js), it is definitely for around 2012-2021. Also it is a standard/famous one, so it does not require any special consideration.But there can be even older browsers or some unexpected problems, and polyfills still can support and solve more possible environment problems. So in case we need the maximum support that is possible, we can use polyfill libraries like:https://polyfill.io/Specially for replaceAll:",
                "The previous answers are way too complicated. Just use the replace function like this:Example:var str = \"Test abc test test abc test test test abc test test abc\";\n\nvar res = str.replace(/[abc]+/g, \"\");\n\nconsole.log(res);",
                "After several trials and a lot of fails, I found that the below function seems to be the best all-rounder when it comes to browser compatibility and ease of use. This is the only working solution for older browsers that I found. (Yes, even though old browser are discouraged and outdated, some legacy applications still make heavy use of OLE browsers (such as old Visual Basic 6 applications or Excel .xlsm macros with forms.)Anyway, here's the simple function.",
                "If you are trying to ensure that the string you are looking for won't exist even after the replacement, you need to use a loop.For example:When complete, you will still have 'test abc'!The simplest loop to solve this would be:But that runs the replacement twice for each cycle. Perhaps (at risk of being voted down) that can be combined for a slightly more efficient but less readable form:This can be particularly useful when looking for duplicate strings.\nFor example, if we have 'a,,,b' and we wish to remove all duplicate commas.\n[In that case, one could do .replace(/,+/g,','), but at some point the regex gets complex and slow enough to loop instead.]"
            ]
        },
        {
            "tag": "deep_clone",
            "patterns": [
                "What is the most efficient way to deep clone an object in JavaScript?",
                "How to deep clone an object",
                "Deep clone",
                "How to deep clone"
            ],
            "responses": [
                "There's now a JS standard called \"structured cloning\", that works experimentally in Node 11 and later, will land in browsers, and which has polyfills for existing systems.If needed, loading the polyfill first:See this answer for more details.If you do not use Dates, functions, undefined, Infinity, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays or other complex types within your object, a very simple one liner to deep clone an object is:JSON.parse(JSON.stringify(object))const a = {\n  string: 'string',\n  number: 123,\n  bool: false,\n  nul: null,\n  date: new Date(),  // stringified\n  undef: undefined,  // lost\n  inf: Infinity,  // forced to 'null'\n  re: /.*/,  // lost\n}\nconsole.log(a);\nconsole.log(typeof a.date);  // Date object\nconst clone = JSON.parse(JSON.stringify(a));\nconsole.log(clone);\nconsole.log(typeof clone.date);  // result of .toISOString()See Corban's answer for benchmarks.Since cloning objects is not trivial (complex types, circular references, function etc.), most major libraries provide function to clone objects. Don't reinvent the wheel - if you're already using a library, check if it has an object cloning function. For example,",
                "Checkout this benchmark: http://jsben.ch/#/bWfk9In my previous tests where speed was a main concern I foundto be the slowest way to deep clone an object (it is slower than jQuery.extend with deep flag set true by 10-20%).jQuery.extend is pretty fast when the deep flag is set to false (shallow clone). It is a good option, because it includes some extra logic for type validation and doesn't copy over undefined properties, etc., but this will also slow you down a little.If you know the structure of the objects you are trying to clone or can avoid deep nested arrays you can write a simple for (var i in obj) loop to clone your object while checking hasOwnProperty and it will be much much faster than jQuery.Lastly if you are attempting to clone a known object structure in a hot loop you can get MUCH MUCH MORE PERFORMANCE by simply in-lining the clone procedure and manually constructing the object.JavaScript trace engines suck at optimizing for..in loops and checking hasOwnProperty will slow you down as well. Manual clone when speed is an absolute must.Beware using the JSON.parse(JSON.stringify(obj)) method on Date objects - JSON.stringify(new Date()) returns a string representation of the date in ISO format, which JSON.parse() doesn't convert back to a Date object. See this answer for more details.Additionally, please note that, in Chrome 65 at least, native cloning is not the way to go. According to JSPerf, performing native cloning by creating a new function is nearly 800x slower than using JSON.stringify which is incredibly fast all the way across the board.Update for ES6If you are using Javascript ES6 try this native method for cloning or shallow copy.",
                "2022 update: The structuredClone global function is already available in Firefox 94, Node 17 and Deno 1.14The HTML standard includes an internal structured cloning/serialization algorithm that can create deep clones of objects. It is still limited to certain built-in types, but in addition to the few types supported by JSON it also supports Dates, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays, and probably more in the future. It also preserves references within the cloned data, allowing it to support cyclical and recursive structures that would cause errors for JSON.The structuredClone global function is provided by Node 17.0:Previous versions: The v8 module in Node.js (as of Node 11) exposes the structured serialization API directly, but this functionality is still marked as \"experimental\", and subject to change or removal in future versions. If you're using a compatible version, cloning an object is as simple as:The structuredClone global function will soon be provided by all major browsers (having previously been discussed in whatwg/html#793 on GitHub). It looks / will look like this:Until this is shipped, browsers' structured clone implementations are only exposed indirectly.The lower-overhead way to create a structured clone with existing APIs is to post the data through one port of a MessageChannels. The other port will emit a message event with a structured clone of the attached .data. Unfortunately, listening for these events is necessarily asynchronous, and the synchronous alternatives are less practical.There are no good options for creating structured clones synchronously. Here are a couple of impractical hacks instead.history.pushState() and history.replaceState() both create a structured clone of their first argument, and assign that value to history.state. You can use this to create a structured clone of any object like this:'use strict';\n\nconst main = () => {\n  const original = { date: new Date(), number: Math.random() };\n  original.self = original;\n\n  const clone = structuredClone(original);\n  \n  // They're different objects:\n  console.assert(original !== clone);\n  console.assert(original.date !== clone.date);\n\n  // They're cyclical:\n  console.assert(original.self === original);\n  console.assert(clone.self === clone);\n\n  // They contain equivalent values:\n  console.assert(original.number === clone.number);\n  console.assert(Number(original.date) === Number(clone.date));\n  \n  console.log(\"Assertions complete.\");\n};\n\nconst structuredClone = obj => {\n  const oldState = history.state;\n  history.replaceState(obj, null);\n  const clonedObj = history.state;\n  history.replaceState(oldState, null);\n  return clonedObj;\n};\n\nmain();Though synchronous, this can be extremely slow. It incurs all of the overhead associated with manipulating the browser history. Calling this method repeatedly can cause Chrome to become temporarily unresponsive.The Notification constructor creates a structured clone of its associated data. It also attempts to display a browser notification to the user, but this will silently fail unless you have requested notification permission. In case you have the permission for other purposes, we'll immediately close the notification we've created.'use strict';\n\nconst main = () => {\n  const original = { date: new Date(), number: Math.random() };\n  original.self = original;\n\n  const clone = structuredClone(original);\n  \n  // They're different objects:\n  console.assert(original !== clone);\n  console.assert(original.date !== clone.date);\n\n  // They're cyclical:\n  console.assert(original.self === original);\n  console.assert(clone.self === clone);\n\n  // They contain equivalent values:\n  console.assert(original.number === clone.number);\n  console.assert(Number(original.date) === Number(clone.date));\n  \n  console.log(\"Assertions complete.\");\n};\n\nconst structuredClone = obj => {\n  const n = new Notification('', {data: obj, silent: true});\n  n.close();\n  return n.data;\n};\n\nmain();",
                "Assuming that you have only properties and not any functions in your object, you can  just use:",
                "If there wasn't any builtin one, you could try:",
                "An Object.assign method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need.The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.Read more...The polyfill to support older browsers:",
                "Deep copy by performance:\nRanked from best to worstWhere:Deep copy an array of primitives:To deep copy arrays with primitives only (i.e. numbers, strings, and booleans), reassignment, slice(), concat(), and Underscore's clone() can be used.Where spread has the fastest performance:And where slice() has better performance than concat(): https://jsbench.me/x5ktn7o94d/Deep copy an array of primitive and object literals:Deep copy an array of primitive, object literals, and prototypes:Write a custom function (has faster performance than $.extend() or JSON.parse):Or use third-party utility functions:Note: jQuery's $.extend also has better performance than JSON.parse(JSON.stringify()):",
                "This is what I'm using:",
                "Code:Test:",
                "Deep copying objects in JavaScript (I think the best and the simplest)1. Using JSON.parse(JSON.stringify(object));2.Using created method3. Using Lo-Dash's _.cloneDeep link lodash4. Using Object.assign() methodBUT WRONG WHEN5.Using Underscore.js _.clone link Underscore.jsBUT WRONG WHENJSBEN.CH Performance Benchmarking Playground 1~3 http://jsben.ch/KVQLd",
                "Cloning an object was always a concern in JS, but it was all about before ES6, I list different ways of copying an object in JavaScript below, imagine you have the Object below and would like to have a deep copy of that:There are few ways to copy this object, without changing the origin:ES5+, Using a simple function to do the copy for you:ES5+, using JSON.parse and JSON.stringify.Angular:jQuery:Underscore.js & Lodash:Hope these help\u2026",
                "There\u2019s a library (called \u201cclone\u201d), that does this quite well. It provides the most complete recursive cloning/copying of arbitrary objects that I know of. It also supports circular references, which is not covered by the other answers, yet.You can find it on npm, too. It can be used for the browser as well as Node.js.Here is an example on how to use it:Install it withor package it with Ender.You can also download the source code manually.Then you can use it in your source code.(Disclaimer: I\u2019m the author of the library.)",
                "I know this is an old post, but I thought this may be of some help to the next person who stumbles along.As long as you don't assign an object to anything it maintains no reference in memory.  So to make an object that you want to share among other objects, you'll have to create a factory like so:",
                "If you're using it, the Underscore.js library has a clone method.",
                "Here's a version of ConroyP's answer above that works even if the constructor has required parameters:This function is also available in my simpleoo library.Edit:Here's a more robust version (thanks to Justin McCandless this now supports cyclic references as well):",
                "The following creates two instances of the same object. I found it and am using it currently. It's simple and easy to use.",
                "Crockford suggests (and I prefer) using this function:It's terse, works as expected and you don't need a library.EDIT:This is a polyfill for Object.create, so you also can use this.NOTE:  If you use some of this, you may have problems with some iteration who use hasOwnProperty. Because, create create new empty object who inherits oldObject. But it is still useful and practical for cloning objects.For exemple if  oldObject.a = 5;but:",
                "Lodash has a nice _.cloneDeep(value) method:",
                "Shallow copy one-liner (ECMAScript 5th edition):And shallow copy one-liner (ECMAScript 6th edition, 2015):",
                "There seems to be no ideal deep clone operator yet for array-like objects.  As the code below illustrates, John Resig's jQuery cloner turns arrays with non-numeric properties into objects that are not arrays, and RegDwight's JSON cloner drops the non-numeric properties. The following tests illustrate these points on multiple browsers:",
                "Just because I didn't see AngularJS mentioned and thought that people might want to know...angular.copy also provides a method of deep copying objects and arrays.",
                "I have two good answers depending on whether your objective is to clone a \"plain old JavaScript object\" or not.Let's also assume that your intention is to create a complete clone with no prototype references back to the source object. If you're not interested in a complete clone, then you can use many of the Object.clone() routines provided in some of the other answers (Crockford's pattern).For plain old JavaScript objects, a tried and true good way to clone an object in modern runtimes is quite simply:Note that the source object must be a pure JSON object. This is to say, all of its nested properties must be scalars (like boolean, string, array, object, etc). Any functions or special objects like RegExp or Date will not be cloned.Is it efficient? Heck yes. We've tried all kinds of cloning methods and this works best. I'm sure some ninja could conjure up a faster method. But I suspect we're talking about marginal gains.This approach is just simple and easy to implement. Wrap it into a convenience function and if you really need to squeeze out some gain, go for at a later time.Now, for non-plain JavaScript objects, there isn't a really simple answer.  In fact, there can't be because of the dynamic nature of JavaScript functions and inner object state. Deep cloning a JSON structure with functions inside requires you recreate those functions and their inner context. And JavaScript simply doesn't have a standardized way of doing that.The correct way to do this, once again, is via a convenience method that you declare and reuse within your code. The convenience method can be endowed with some understanding of your own objects so you can make sure to properly recreate the graph within the new object.We're written our own, but the best general approach I've seen is covered here:http://davidwalsh.name/javascript-cloneThis is the right idea. The author (David Walsh) has commented out the cloning of generalized functions. This is something you might choose to do, depending on your use case.The main idea is that you need to special handle the instantiation of your functions (or prototypal classes, so to speak) on a per-type basis. Here, he's provided a few examples for RegExp and Date.Not only is this code brief, but it's also very readable. It's pretty easy to extend.Is this efficient? Heck yes. Given that the goal is to produce a true deep-copy clone, then you're going to have to walk the members of the source object graph. With this approach, you can tweak exactly which child members to treat and how to manually handle custom types.So there you go. Two approaches. Both are efficient in my view.",
                "I am late to answer this question, but I have an another way of cloning the object:which is much better and faster then:andI have bench-marked the code and you can test the results here:and sharing the results:\n\nReferences: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",
                "Only when you can use ECMAScript 6 or transpilers.Features:Code:",
                "This isn't generally the most efficient solution, but it does what I need. Simple test cases below...Cyclic array test...Function test...",
                "For the people who want to use the JSON.parse(JSON.stringify(obj)) version, but without losing the Date objects, you can use the second argument of parse method to convert the strings back to Date:function clone(obj) {\n  var regExp = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\n  return JSON.parse(JSON.stringify(obj), function(k, v) {\n    if (typeof v === 'string' && regExp.test(v))\n      return new Date(v)\n    return v;\n  })\n}\n\n// usage:\nvar original = {\n a: [1, null, undefined, 0, {a:null}, new Date()],\n b: {\n   c(){ return 0 }\n }\n}\n\nvar cloned = clone(original)\n\nconsole.log(cloned)",
                "I disagree with the answer with the greatest votes here. A Recursive Deep Clone is much faster than the JSON.parse(JSON.stringify(obj)) approach mentioned.And here's the function for quick reference:",
                "Here is a comprehensive clone() method that can clone any JavaScript object. It handles almost all the cases:",
                "There's a new JS standard called structured cloning. It works in many browsers (see Can I Use).To do this for any object in JavaScript will not be simple or straightforward. You will run into the problem of erroneously picking up attributes from the object's prototype that should be left in the prototype and not copied to the new instance. If, for instance, you are adding a clone method to Object.prototype, as some answers depict, you will need to explicitly skip that attribute. But what if there are other additional methods added to Object.prototype, or other intermediate prototypes, that you don't know about? In that case, you will copy attributes you shouldn't, so you need to detect unforeseen, non-local attributes with the hasOwnProperty method.In addition to non-enumerable attributes, you'll encounter a tougher problem when you try to copy objects that have hidden properties. For example, prototype is a hidden property of a function. Also, an object's prototype is referenced with the attribute __proto__, which is also hidden, and will not be copied by a for/in loop iterating over the source object's attributes. I think __proto__ might be specific to Firefox's JavaScript interpreter and it may be something different in other browsers, but you get the picture. Not everything is enumerable. You can copy a hidden attribute if you know its name, but I don't know of any way to discover it automatically.Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object's prototype is Object, then simply creating a new general object with {} will work, but if the source's prototype is some descendant of Object, then you are going to be missing the additional members from that prototype which you skipped using the hasOwnProperty filter, or which were in the prototype, but weren't enumerable in the first place. One solution might be to call the source object's constructor property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a Date object stores its data as a hidden member:The date string for d1 will be 5 seconds behind that of d2. A way to make one Date the same as another is by calling the setTime method, but that is specific to the Date class. I don't think there is a bullet-proof general solution to this problem, though I would be happy to be wrong!When I had to implement general deep copying I ended up compromising by assuming that I would only need to copy a plain Object, Array, Date, String, Number, or Boolean. The last 3 types are immutable, so I could perform a shallow copy and not worry about it changing. I further assumed that any elements contained in Object or Array would also be one of the 6 simple types in that list. This can be accomplished with code like the following:The above function will work adequately for the 6 simple types I mentioned, as long as the data in the objects and arrays form a tree structure. That is, there isn't more than one reference to the same data in the object. For example:It will not be able to handle any JavaScript object, but it may be sufficient for many purposes as long as you don't assume that it will just work for anything you throw at it.",
                "If you do not use Dates, functions, undefined, regExp or Infinity within your object, a very simple one liner is JSON.parse(JSON.stringify(object)):const a = {\r\n  string: 'string',\r\n  number: 123,\r\n  bool: false,\r\n  nul: null,\r\n  date: new Date(),  // stringified\r\n  undef: undefined,  // lost\r\n  inf: Infinity,  // forced to 'null'\r\n}\r\nconsole.log(a);\r\nconsole.log(typeof a.date);  // Date object\r\nconst clone = JSON.parse(JSON.stringify(a));\r\nconsole.log(clone);\r\nconsole.log(typeof clone.date);  // result of .toISOString()This works for all kind of objects containing objects, arrays, strings, booleans and numbers.See also this article about the structured clone algorithm of browsers which is used when posting messages to and from a worker. It also contains a function for deep cloning.",
                "In ECMAScript 6 there is Object.assign method, which copies values of all enumerable own properties from one object to another. For example:But be aware this is a shallow copy - nested objects are still copied as reference.",
                "With jQuery, you can shallow copy with extend:subsequent changes to the copiedObject will not affect the originalObject, and vice versa.Or to make a deep copy:",
                "Per MDN:There is no need for external libraries but you need to check browser compatibility first.",
                "An Object.assign method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need.The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.Read more...The polyfill to support older browsers:",
                "There are many answers, but none that mentions Object.create from ECMAScript 5, which admittedly does not give you an exact copy, but sets the source as the prototype of the new object.Thus, this is not an exact answer to the question, but it is a one-line solution and thus elegant. And it works best for 2 cases:Example:Why do I consider this solution to be superior? It's native, thus no looping, no recursion. However, older browsers will need a polyfill.",
                "There are several issues with most solutions on the internet. So I decided to make a follow-up, which includes, why the accepted answer shouldn't be accepted.I want to deep-copy a Javascript Object with all of its children and their children and so on. But since I'm not kind of a normal developer, my Object has normal properties, circular structures and even nested objects.So let's create a circular structure and a nested object first.Let's bring everything together in an Object named a.Next, we want to copy a into a variable named b and mutate it.You know what happened here because if not you wouldn't even land on this great question.Now let's find a solution.The first attempt I tried was using JSON.Don't waste too much time on it, you'll get TypeError: Converting circular structure to JSON.Let's have a look at the accepted answer.Looks good, heh? It's a recursive copy of the object and handles other types as well, like Date, but that wasn't a requirement.Recursion and circular structures doesn't work well together... RangeError: Maximum call stack size exceededAfter arguing with my co-worker, my boss asked us what happened, and he found a simple solution after some googling. It's called Object.create.This solution was added to Javascript some time ago and even handles circular structure.... and you see, it didn't work with the nested structure inside.There's a polyfill for Object.create in the older browser just like the IE 8. It's something like recommended by Mozilla, and of course, it's not perfect and results in the same problem as the native solution.I've put F outside the scope so we can have a look at what instanceof tells us.Same problem as the native solution, but a little bit worse output.When digging around, I found a similar question (In Javascript, when performing a deep copy, how do I avoid a cycle, due to a property being \"this\"?) to this one, but with a way better solution.And let's have a look at the output...The requirements are matched, but there are still some smaller issues, including changing the instance of nested and circ to Object.The structure of trees that share a leaf won't be copied, they will become two independent leaves:The last solution using recursion and a cache, may not be the best, but it's a real deep-copy of the object. It handles simple properties, circular structures and nested object, but it will mess up the instance of them while cloning.jsfiddle",
                "If you're okay with a shallow copy, the underscore.js library has a clone method.or you can extend it like",
                "OK, imagine you have this object below and you want to clone it:orthe answer is mainly depeneds on which ECMAscript you using, in ES6+, you can simply use Object.assign to do the clone:or using spread operator like this:But if you using ES5, you can use few methods, but the JSON.stringify, just make sure you not using for a big chunk of data to copy, but it could be one line handy way in many cases, something like this:",
                "There are three (3) ways to clone objects in JavaScript. As objects in JavaScript are reference values, you can't simply just copy using the =.The ways are:This can be used as a reference summary.",
                "One particularly inelegant solution is to use JSON encoding to make deep copies of objects that do not have member methods. The methodology is to JSON encode your target object, then by decoding it, you get the copy you are looking for.  You can decode as many times as you want to make as many copies as you need.Of course, functions do not belong in JSON, so this only works for objects without member methods.This methodology was perfect for my use case, since I'm storing JSON blobs in a key-value store, and when they are exposed as objects in a JavaScript API, each object actually contains a copy of the original state of the object so we can calculate the delta after the caller has mutated the exposed object.",
                "You can simply use a spread property to copy an object without references. But be careful (see comments), the 'copy' is just on the lowest object/array level. Nested properties are still references!Complete clone:Clone with references on second level:JavaScript actually does not support deep clones natively. Use an utility function. For example Ramda:http://ramdajs.com/docs/#clone",
                "Be aware that nested objects are still copied as a reference.",
                "From this article: How to copy arrays and objects in Javascript by Brian Huisman:",
                "For those using AngularJS, there is also direct method for cloning or extending of the objects in this library.orMore in angular.copy documentation...",
                "A.Levy's answer is almost complete, here is my little contribution: there is a way how to handle recursive references, see this lineif(this[attr]==this) copy[attr] = copy;If the object is XML DOM element, we must use cloneNode insteadif(this.cloneNode) return this.cloneNode(true);Inspired by A.Levy's exhaustive study and Calvin's prototyping approach, I offer this solution:See also Andy Burke's note in the answers.",
                "In ES-6 you can simply use Object.assign(...).\nEx:A good reference is here:\nhttps://googlechrome.github.io/samples/object-assign-es6/",
                "Interested in cloning simple objects:JSON.parse(JSON.stringify(json_original));Source : How to copy JavaScript object to new variable NOT by reference?",
                "2022 update: The structuredClone() global function is already available in Node 17, Deno 1.14, and most major browsers (see Can I Use).You can use the same structured clone mechanism that the HTML standard includes for sending data between realms.See the other answer for more details.",
                "You can clone an object and remove any reference from the previous one using a single line of code. Simply do:For browsers / engines that do not currently support Object.create you can use this polyfill:",
                "ES6 solution if you want to (shallow) clone a class instance and not just a property object.",
                "New answer to an old question!  If you have the pleasure of having using ECMAScript 2016 (ES6) with Spread Syntax, it's easy.This provides a clean method for a shallow copy of an object.  Making a deep copy, meaning makign a new copy of every value in every recursively nested object, requires on of the heavier solutions above.JavaScript keeps evolving.",
                "I think there is a simple and working answer. In deep copying there are two concerns:So I think one simple solution will be to first serialize and deserialize and then do an assign on it to copy functions too.Although this question has many answers, I hope this one helps too.",
                "For a deep copy and clone, JSON.stringify then JSON.parse the object:",
                "(The following was mainly an integration of @Maciej Bukowski, @A. Levy, @Jan Turo\u0148, @Redu's answers, and @LeviRoberts, @RobG's comments, many thanks to them!!!)Deep copy? \u2014 YES! (mostly);\nShallow copy? \u2014 NO! (except Proxy).I sincerely welcome everyone to test clone().\nIn addition, defineProp() is designed to easily and quickly (re)define or copy any type of descriptor.",
                "Use lodash _.cloneDeep().Shallow Copy: lodash _.clone()A shallow copy can be made by simply copying the reference.Deep Copy: lodash _.cloneDeep()fields are dereferenced: rather than references to objects being copied"
            ]
        },
        {
            "tag": "GUID",
            "patterns": [
                "How do I create a GUID / UUID?",
                "What is a GUID",
                "What is UUID",
                "GUID vs UUID"
            ],
            "responses": [
                "[Edited 2021-10-16 to reflect latest best-practices for producing RFC4122-compliant UUIDs]Most readers here will want to use the uuid module.  It is well-tested and supported.The crypto.randomUUID() function is an emerging standard that is supported in Node.js and an increasing number of browsers. However because new browser APIs are restricted to secure contexts this method is only available to pages served locally (localhost or 127.0.0.1) or over HTTPS.  If you're interested in seeing this restriction lifted for crypto.randomUUID() you can  follow this GitHub issue.If neither of those work for you, there is this method (based on the original answer to this question):\n\n\nfunction uuidv4() {\n  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n  );\n}\n\nconsole.log(uuidv4());Note: The use of any UUID generator that relies on Math.random() is strongly discouraged (including snippets featured in previous versions of this answer) for reasons best explained here. TL;DR: solutions based on Math.random() do not provide good uniqueness guarantees.",
                "UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier), according to RFC 4122, are identifiers designed to provide certain uniqueness guarantees.While it is possible to implement RFC-compliant UUIDs in a few lines of JavaScript code (e.g., see @broofa's answer, below) there are several common pitfalls:Thus, developers writing code for production environments are encouraged to use a rigorous, well-maintained implementation such as the uuid module.",
                "I really like how clean Broofa's answer is, but it's unfortunate that poor implementations of Math.random leave the chance for collision.Here's a similar RFC4122 version 4 compliant solution that solves that issue by offsetting the first 13 hex numbers by a hex portion of the timestamp, and once depleted offsets by a hex portion of the microseconds since pageload.  That way, even if Math.random is on the same seed, both clients would have to generate the UUID the exact same number of microseconds since pageload (if high-perfomance time is supported) AND at the exact same millisecond (or 10,000+ years later) to get the same UUID:function generateUUID() { // Public Domain/MIT\n    var d = new Date().getTime();//Timestamp\n    var d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now()*1000)) || 0;//Time in microseconds since page-load or 0 if unsupported\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16;//random number between 0 and 16\n        if(d > 0){//Use timestamp until depleted\n            r = (d + r)%16 | 0;\n            d = Math.floor(d/16);\n        } else {//Use microseconds since page-load if supported\n            r = (d2 + r)%16 | 0;\n            d2 = Math.floor(d2/16);\n        }\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n}\n\nvar onClick = function(){\n    document.getElementById('uuid').textContent = generateUUID();\n}\nonClick();\n#uuid { font-family: monospace; font-size: 1.5em; }\n<p id=\"uuid\"></p>\n<button id=\"generateUUID\" onclick=\"onClick();\">Generate UUID</button>Here's a fiddle to test.const generateUUID = () => {\n  let\n    d = new Date().getTime(),\n    d2 = (performance && performance.now && (performance.now() * 1000)) || 0;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    let r = Math.random() * 16;\n    if (d > 0) {\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);\n  });\n};\n\nconst onClick = (e) => document.getElementById('uuid').textContent = generateUUID();\n\ndocument.getElementById('generateUUID').addEventListener('click', onClick);\n\nonClick();\n#uuid { font-family: monospace; font-size: 1.5em; }\n<p id=\"uuid\"></p>\n<button id=\"generateUUID\">Generate UUID</button>",
                "broofa's answer is pretty slick, indeed - impressively clever, really...  RFC4122 compliant, somewhat readable, and compact. Awesome!But if you're looking at that regular expression, those many replace() callbacks, toString()'s and Math.random() function calls (where he's only using four bits of the result and wasting the rest), you may start to wonder about performance. Indeed, joelpt even decided to toss out an RFC for generic GUID speed with generateQuickGUID.But, can we get speed and RFC compliance? I say, YES! Can we maintain readability? Well... Not really, but it's easy if you follow along.But first, my results, compared to broofa, guid (the accepted answer), and the non-rfc-compliant generateQuickGuid:So by my 6th iteration of optimizations, I beat the most popular answer by over 12 times, the accepted answer by over 9 times, and the fast-non-compliant answer by 2-3 times. And I'm still RFC\u00a04122 compliant.Interested in how? I've put the full source on http://jsfiddle.net/jcward/7hyaC/3/ and on https://jsben.ch/xczxSFor an explanation, let's start with broofa's code:function broofa() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n        return v.toString(16);\n    });\n}\n\nconsole.log(broofa())So it replaces x with any random hexadecimal digit, y with random data (except forcing the top two bits to 10 per the RFC spec), and the regex doesn't match the - or 4 characters, so he doesn't have to deal with them.  Very, very slick.The first thing to know is that function calls are expensive, as are regular expressions (though he only uses 1, it has 32 callbacks, one for each match, and in each of the 32 callbacks it calls Math.random() and v.toString(16)).The first step toward performance is to eliminate the RegEx and its callback functions and use a simple loop instead.  This means we have to deal with the - and 4 characters whereas broofa did not.  Also, note that we can use String Array indexing to keep his slick String template architecture:function e1() {\n    var u='',i=0;\n    while(i++<36) {\n        var c='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'[i-1],r=Math.random()*16|0,v=c=='x'?r:(r&0x3|0x8);\n        u+=(c=='-'||c=='4')?c:v.toString(16)\n    }\n    return u;\n}\n\nconsole.log(e1())Basically, the same inner logic, except we check for - or 4, and using a while loop (instead of replace() callbacks) gets us an almost 3X improvement!The next step is a small one on the desktop but makes a decent difference on mobile.  Let's make fewer Math.random() calls and utilize all those random bits instead of throwing 87% of them away with a random buffer that gets shifted out each iteration.  Let's also move that template definition out of the loop, just in case it helps:function e2() {\n    var u='',m='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx',i=0,rb=Math.random()*0xffffffff|0;\n    while(i++<36) {\n        var c=m[i-1],r=rb&0xf,v=c=='x'?r:(r&0x3|0x8);\n        u+=(c=='-'||c=='4')?c:v.toString(16);rb=i%8==0?Math.random()*0xffffffff|0:rb>>4\n    }\n    return u\n}\n\nconsole.log(e2())This saves us 10-30% depending on platform.  Not bad.  But the next big step gets rid of the toString function calls altogether with an optimization classic - the look-up table.  A simple 16-element lookup table will perform the job of toString(16) in much less time:function e3() {\n    var h='0123456789abcdef';\n    var k='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n    /* same as e4() below */\n}\nfunction e4() {\n    var h=['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'];\n    var k=['x','x','x','x','x','x','x','x','-','x','x','x','x','-','4','x','x','x','-','y','x','x','x','-','x','x','x','x','x','x','x','x','x','x','x','x'];\n    var u='',i=0,rb=Math.random()*0xffffffff|0;\n    while(i++<36) {\n        var c=k[i-1],r=rb&0xf,v=c=='x'?r:(r&0x3|0x8);\n        u+=(c=='-'||c=='4')?c:h[v];rb=i%8==0?Math.random()*0xffffffff|0:rb>>4\n    }\n    return u\n}\n\nconsole.log(e4())The next optimization is another classic.  Since we're only handling four bits of output in each loop iteration, let's cut the number of loops in half and process eight bits in each iteration.  This is tricky since we still have to handle the RFC compliant bit positions, but it's not too hard.  We then have to make a larger lookup table (16x16, or 256) to store 0x00 - 0xFF, and we build it only once, outside the e5() function.var lut = []; for (var i=0; i<256; i++) { lut[i] = (i<16?'0':'')+(i).toString(16); }\nfunction e5() {\n    var k=['x','x','x','x','-','x','x','-','4','x','-','y','x','-','x','x','x','x','x','x'];\n    var u='',i=0,rb=Math.random()*0xffffffff|0;\n    while(i++<20) {\n        var c=k[i-1],r=rb&0xff,v=c=='x'?r:(c=='y'?(r&0x3f|0x80):(r&0xf|0x40));\n        u+=(c=='-')?c:lut[v];rb=i%4==0?Math.random()*0xffffffff|0:rb>>8\n    }\n    return u\n}\n\nconsole.log(e5())I tried an e6() that processes 16-bits at a time, still using the 256-element LUT, and it showed the diminishing returns of optimization.  Though it had fewer iterations, the inner logic was complicated by the increased processing, and it performed the same on desktop, and only ~10% faster on mobile.The final optimization technique to apply - unroll the loop.  Since we're looping a fixed number of times, we can technically write this all out by hand.  I tried this once with a single random variable, r, that I kept reassigning, and performance tanked.  But with four variables assigned random data up front, then using the lookup table, and applying the proper RFC bits, this version smokes them all:var lut = []; for (var i=0; i<256; i++) { lut[i] = (i<16?'0':'')+(i).toString(16); }\nfunction e7()\n{\n    var d0 = Math.random()*0xffffffff|0;\n    var d1 = Math.random()*0xffffffff|0;\n    var d2 = Math.random()*0xffffffff|0;\n    var d3 = Math.random()*0xffffffff|0;\n    return lut[d0&0xff]+lut[d0>>8&0xff]+lut[d0>>16&0xff]+lut[d0>>24&0xff]+'-'+\n    lut[d1&0xff]+lut[d1>>8&0xff]+'-'+lut[d1>>16&0x0f|0x40]+lut[d1>>24&0xff]+'-'+\n    lut[d2&0x3f|0x80]+lut[d2>>8&0xff]+'-'+lut[d2>>16&0xff]+lut[d2>>24&0xff]+\n    lut[d3&0xff]+lut[d3>>8&0xff]+lut[d3>>16&0xff]+lut[d3>>24&0xff];\n}\n\nconsole.log(e7())Modualized:  http://jcward.com/UUID.js - UUID.generate()The funny thing is, generating 16 bytes of random data is the easy part.  The whole trick is expressing it in string format with RFC compliance, and it's most tightly accomplished with 16 bytes of random data, an unrolled loop and lookup table.I hope my logic is correct -- it's very easy to make a mistake in this kind of tedious bit work. But the outputs look good to me. I hope you enjoyed this mad ride through code optimization!Be advised: my primary goal was to show and teach potential optimization strategies.  Other answers cover important topics such as collisions and truly random numbers, which are important for generating good UUIDs.",
                "Use:document.getElementById(\"unique\").innerHTML =\n  Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n<div id=\"unique\">\n</div>If IDs are generated more than 1 millisecond apart, they are 100% unique.If two IDs are generated at shorter intervals, and assuming that the random method is truly random, this would generate IDs that are 99.99999999999999% likely to be globally unique (collision in 1 of 10^15).You can increase this number by adding more digits, but to generate 100% unique IDs you will need to use a global counter.If you need RFC compatibility, this formatting will pass as a valid version 4 GUID:let u = Date.now().toString(16)+Math.random().toString(16)+'0'.repeat(16);\nlet guid = [u.substr(0,8), u.substr(8,4), '4000-8' + u.substr(13,3), u.substr(16,12)].join('-');\ndocument.getElementById(\"unique\").innerHTML = guid;\n<div id=\"unique\">\n</div>The above code follow the intention, but not the letter of the RFC. Among other discrepancies it's a few random digits short. (Add more random digits if you need it) The upside is that this is really fast :)\nYou can test validity of your GUID here",
                "Here's some code based on RFC 4122, section 4.4 (Algorithms for Creating a UUID from Truly Random or Pseudo-Random Number).",
                "This is the fastest GUID-like string generator method in the format XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX. It does not generate a standard-compliant GUID.Ten million executions of this implementation take just 32.5 seconds, which is the fastest I've ever seen in a browser (the only solution without loops/iterations).The function is as simple as:To test the performance, you can run this code:I'm sure most of you will understand what I did there, but maybe there is at least one person that will need an explanation:The algorithm:The assembly:Link to this post on my blogEnjoy! :-)",
                "Here is a totally non-compliant but very performant implementation to generate an ASCII-safe GUID-like unique identifier.Generates 26 [a-z0-9] characters, yielding a UID that is both shorter and more unique than RFC compliant GUIDs. Dashes can be trivially added if human-readability matters.Here are usage examples and timings for this function and several of this question's other answers. The timing was performed under Chrome m25, 10 million iterations each.Here is the timing code.",
                "From sagi shkedy's technical blog:There are other methods that involve using an ActiveX control, but stay away from these!I thought it was worth pointing out that no GUID generator can guarantee unique keys (check the Wikipedia article). There is always a chance of collisions. A GUID simply offers a large enough universe of keys to reduce the change of collisions to almost nil.",
                "Here is a combination of the top voted answer, with a workaround for Chrome's collisions:It is on jsbin if you want to test it.",
                "Here's a solution dated Oct. 9, 2011 from a comment by user jed at https://gist.github.com/982883:This accomplishes the same goal as the current highest-rated answer, but in 50+ fewer bytes by exploiting coercion, recursion, and exponential notation. For those curious how it works, here's the annotated form of an older version of the function:",
                "You can use node-uuid. It provides simple, fast generation of RFC4122 UUIDS.Features:Install Using NPM:Or using uuid via a browser:Download Raw File (uuid v1): https://raw.githubusercontent.com/kelektiv/node-uuid/master/v1.js\nDownload Raw File (uuid v4): https://raw.githubusercontent.com/kelektiv/node-uuid/master/v4.jsWant even smaller? Check this out: https://gist.github.com/jed/982883Usage:ECMAScript\u00a02015 (ES6):",
                "This version is based on Briguy37's answer and some bitwise operators to extract nibble sized windows from the buffer.It should adhere to the RFC Type 4 (random) schema, since I had problems last time parsing non-compliant UUIDs with Java's UUID.",
                "This creates a version 4 UUID (created from pseudo random numbers):Here is a sample of the UUIDs generated:",
                "One line solution using Blobs.The value at the end (31) depends on the length of the URL.EDIT:A more compact and universal solution, as suggested by rinogo:",
                "Simple JavaScript module as a combination of best answers in this question.var crypto = window.crypto || window.msCrypto || null; // IE11 fix\n\nvar Guid = Guid || (function() {\n\n  var EMPTY = '00000000-0000-0000-0000-000000000000';\n\n  var _padLeft = function(paddingString, width, replacementChar) {\n    return paddingString.length >= width ? paddingString : _padLeft(replacementChar + paddingString, width, replacementChar || ' ');\n  };\n\n  var _s4 = function(number) {\n    var hexadecimalResult = number.toString(16);\n    return _padLeft(hexadecimalResult, 4, '0');\n  };\n\n  var _cryptoGuid = function() {\n    var buffer = new window.Uint16Array(8);\n    crypto.getRandomValues(buffer);\n    return [_s4(buffer[0]) + _s4(buffer[1]), _s4(buffer[2]), _s4(buffer[3]), _s4(buffer[4]), _s4(buffer[5]) + _s4(buffer[6]) + _s4(buffer[7])].join('-');\n  };\n\n  var _guid = function() {\n    var currentDateMilliseconds = new Date().getTime();\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(currentChar) {\n      var randomChar = (currentDateMilliseconds + Math.random() * 16) % 16 | 0;\n      currentDateMilliseconds = Math.floor(currentDateMilliseconds / 16);\n      return (currentChar === 'x' ? randomChar : (randomChar & 0x7 | 0x8)).toString(16);\n    });\n  };\n\n  var create = function() {\n    var hasCrypto = crypto != 'undefined' && crypto !== null,\n      hasRandomValues = typeof(window.crypto.getRandomValues) != 'undefined';\n    return (hasCrypto && hasRandomValues) ? _cryptoGuid() : _guid();\n  };\n\n  return {\n    newGuid: create,\n    empty: EMPTY\n  };\n})();\n\n// DEMO: Create and show GUID\nconsole.log('1. New Guid:   ' + Guid.newGuid());\n\n// DEMO: Show empty GUID\nconsole.log('2. Empty Guid: ' + Guid.empty);Usage:Guid.newGuid()\"c6c2d12f-d76b-5739-e551-07e6de5b0807\"Guid.empty\"00000000-0000-0000-0000-000000000000\"",
                "The version below is an adaptation of broofa's answer, but updated to include a \"true\" random function that uses crypto libraries where available, and the Alea() function as a fallback.",
                "JavaScript project on GitHub - https://github.com/LiosK/UUID.jsUUID.js The RFC-compliant UUID generator for JavaScript.See RFC 4122 http://www.ietf.org/rfc/rfc4122.txt.Features Generates RFC 4122 compliant UUIDs.Version 4 UUIDs (UUIDs from random numbers) and version 1 UUIDs\n  (time-based UUIDs) are available.UUID object allows a variety of access to the UUID including access to\n  the UUID fields.Low timestamp resolution of JavaScript is compensated by random\n  numbers.",
                "Added in: v15.6.0, v14.17.0 there is a built-in crypto.randomUUID() function.In the browser, crypto.randomUUID() is currently supported in Chromium 92+ and Firefox 95+.",
                "For those wanting an RFC 4122 version 4 compliant solution with speed considerations (few calls to Math.random()):var rand = Math.random;\n\nfunction UUID() {\n    var nbr, randStr = \"\";\n    do {\n        randStr += (nbr = rand()).toString(16).substr(3, 6);\n    } while (randStr.length < 30);\n    return (\n        randStr.substr(0, 8) + \"-\" +\n        randStr.substr(8, 4) + \"-4\" +\n        randStr.substr(12, 3) + \"-\" +\n        ((nbr*4|0)+8).toString(16) + // [89ab]\n        randStr.substr(15, 3) + \"-\" +\n        randStr.substr(18, 12)\n    );\n}\n\nconsole.log( UUID() );The above function should have a decent balance between speed and randomness.",
                "I wanted to understand broofa's answer, so I expanded it and added comments:",
                "ES6 sample",
                "I adjusted my own UUID/GUID generator with some extras here.I'm using the following Kybos random number generator to be a bit more cryptographically sound.Below is my script with the Mash and Kybos methods from baagoe.com excluded.",
                "The native URL.createObjectURL is generating an UUID. You can take advantage of this.",
                "The better way:Minimized:",
                "If you just need a random 128 bit string in no particular format, you can use:Which will return something like 2350143528-4164020887-938913176-2513998651.",
                "I couldn't find any answer that uses a single 16-octet TypedArray and a DataView, so I think the following solution for generating a version 4 UUID per the RFC will stand on its own here:I prefer it because it only relies on functions available to the standard ECMAScript platform, where possible -- which is all but one procedure.At the time of writing this, getRandomValues is not something implemented for the crypto object in Node.js. However, it has the equivalent randomBytes function which may be used instead.",
                "Just another more readable variant with just two mutations.",
                "If your environment is SharePoint, there is a utility function called SP.Guid.newGuid (MSDN link which creates a new GUID. This function is inside the sp.init.js file. If you rewrite this function (to remove some other dependencies from other private functions), and it looks like this:"
            ]
        },
        {
            "tag": "checkbox",
            "patterns": [
                "How do I check whether a checkbox is checked in jQuery?",
                "Checkboxes in jQuery",
                "Checkboxes"
            ],
            "responses": [
                "How do I successfully query the checked property?The checked property of a checkbox DOM element will give you the checked state of the element.Given your existing code, you could therefore do this:However, there's a much prettier way to do this, using toggle:$('#isAgeSelected').click(function() {\r\n    $(\"#txtAge\").toggle(this.checked);\r\n});\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n<input type=\"checkbox\" id=\"isAgeSelected\"/>\r\n<div id=\"txtAge\" style=\"display:none\">Age is something</div>",
                "Use jQuery's is() function:",
                "Using jQuery > 1.6Using the new property method:",
                "jQuery 1.6+jQuery 1.5 and belowAny version of jQueryAll credit goes to Xian.",
                "I am using this and this is working absolutely fine:Note: If the checkbox is checked it will return true otherwise undefined, so better check for the \"TRUE\" value.",
                "Use:$(\"#planned_checked\").change(function() {\r\n        if($(this).prop('checked')) {\r\n            alert(\"Checked Box Selected\");\r\n        } else {\r\n            alert(\"Checked Box deselect\");\r\n        }\r\n    });\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\r\n<input type=\"checkbox\" name=\"planned_checked\" checked id=\"planned_checked\"> Planned",
                "Since jQuery 1.6, the behavior of jQuery.attr() has changed and users are encouraged  not to use it to retrieve an element's checked state. Instead, you should use jQuery.prop():Two other possibilities are:",
                "This worked for me:Where isAgeSelected is the id of the control.Also, @karim79's answer works fine. I am not sure what I missed at the time I tested it.Note, this is answer uses Microsoft Ajax, not jQuery",
                "If you are using an updated version of jquery, you must go for .prop method to resolve your issue:$('#isAgeSelected').prop('checked') will return true if checked and false if unchecked. I confirmed it and I came across this issue earlier. $('#isAgeSelected').attr('checked') and $('#isAgeSelected').is('checked') is returning undefined which is not a worthy answer for the situation. So do as given below.",
                "Use:This can help if you want that the required action has to be done only when you check the box not at the time you remove the check.",
                "You can try the change event of checkbox to track the :checked state change.$(\"#isAgeSelected\").on('change', function() {\n  if ($(\"#isAgeSelected\").is(':checked'))\n    alert(\"checked\");\n  else {\n    alert(\"unchecked\");\n  }\n});\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<input type=\"checkbox\" id=\"isAgeSelected\" />\n<div id=\"txtAge\" style=\"display:none\">\n  Age is selected\n</div>",
                "Using the Click event handler for the checkbox property is unreliable, as the checked property can change during the execution of the event handler itself!Ideally, you'd want to put your code into a change event handler such as it is fired every time the value of the check box is changed (independent of how it's done so).",
                "I ran in to the exact same issue. I have an ASP.NET checkboxIn the jQuery code I used the following selector to check if the checkbox was checked or not, and it seems to work like a charm.I'm sure you can also use the ID instead of the CssClass,I hope this helps you.",
                "I believe you could do this:",
                "I decided to post an answer on how to do that exact same thing without jQuery. Just because I'm a rebel.First you get both elements by their ID. Then you assign the checkboxe's onchange event a function that checks whether the checkbox got checked and sets the hidden property of the age text field appropriately. In that example using the ternary operator.Here is a fiddle for you to test it.AddendumIf cross-browser compatibility is an issue then I propose to set the CSS display property to none and inline.Slower but cross-browser compatible.",
                "This code will help you",
                "This works for me:",
                "There are many ways to check if a checkbox is checked or not:Way to check using jQueryCheck example or also document:http://api.jquery.com/attr/http://api.jquery.com/prop/",
                "This is some different method to do the same thing:$(document).ready(function (){\r\n\r\n    $('#isAgeSelected').click(function() {\r\n        // $(\"#txtAge\").toggle(this.checked);\r\n\r\n        // Using a pure CSS selector\r\n        if ($(this.checked)) {\r\n            alert('on check 1');\r\n        };\r\n\r\n        // Using jQuery's is() method\r\n        if ($(this).is(':checked')) {\r\n            alert('on checked 2');\r\n        };\r\n\r\n        //  // Using jQuery's filter() method\r\n        if ($(this).filter(':checked')) {\r\n            alert('on checked 3');\r\n        };\r\n    });\r\n});\n<script src=\"http://code.jquery.com/jquery-1.9.1.js\"></script>\r\n<input type=\"checkbox\" id=\"isAgeSelected\"/>\r\n<div id=\"txtAge\" style=\"display:none\">Age is something</div>",
                "Use this:The length is greater than zero if the checkbox is checked.",
                "My way of doing this is:",
                "This returns true if the input is checked and false if it is not.",
                "You can use:Both of them should work.",
                "1) If your HTML markup is:attr used:If prop is used:2) If your HTML markup is:attr used:Prop used:",
                "This example is for button.Try the following:",
                "The top answer didn't do it for me. This did though:Basically when the element #li_13 is clicked, it checks if the element # agree (which is the checkbox) is checked by using the .attr('checked') function. If it is then fadeIn the #saveForm element, and if not fadeOut the saveForm element.",
                "To act on a checkbox being checked or unchecked on click.$('#customCheck1').click(function() {\n  if (this.checked) {\n    console.log('checked');\n  } else {\n    console.log('un-checked');\n  }\n});\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\n<input type=\"checkbox\" id=\"customCheck1\">EDIT: Not a nice programming expression if (boolean == true) though .checked property might return other type variables as well..It is better to use .prop(\"checked\") instead. It returns true and false only.",
                "I am using this:",
                "Though you have proposed a JavaScript solution for your problem (displaying a textbox when a checkbox is checked), this problem could be solved just by css. With this approach, your form works for users who have disabled JavaScript.Assuming that you have the following HTML:You can use the following CSS to achieve the desired functionality:For other scenarios, you may think of appropriate CSS selectors.Here is a Fiddle to demonstrate this approach."
            ]
        },
        {
            "tag": "uppercase",
            "patterns": [
                "How do I make the first letter of a string uppercase in JavaScript?",
                "Make uppercase",
                "Convert to uppercase"
            ],
            "responses": [
                "The basic solution is:function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconsole.log(capitalizeFirstLetter('foo')); // FooSome other answers modify String.prototype (this answer used to as well), but I would advise against this now due to maintainability (hard to find out where the function is being added to the prototype and could cause conflicts if other code uses the same name / a browser adds a native function with that same name in future)....and then, there is so much more to this question when you consider internationalisation, as this astonishingly good answer (buried below) shows.If you want to work with Unicode code points instead of code units (for example to handle Unicode characters outside of the Basic Multilingual Plane) you can leverage the fact that String#[@iterator] works with code points, and you can use toLocaleUpperCase to get locale-correct uppercasing:const capitalizeFirstLetter = ([ first, ...rest ], locale = navigator.language) =>\n  first === undefined ? '' : first.toLocaleUpperCase(locale) + rest.join('')\n\nconsole.log(\n  capitalizeFirstLetter(''), // [empty string]\n  capitalizeFirstLetter('foo'), // Foo\n  capitalizeFirstLetter(\"\ud801\udc36\ud801\udc32\ud801\udc4c\ud801\udc3c\ud801\udc32\ud801\udc49\"), // \"\ud801\udc0e\ud801\udc32\ud801\udc4c\ud801\udc3c\ud801\udc32\ud801\udc49\" (correct!)\n  capitalizeFirstLetter(\"italya\", 'tr') // \u0130talya\" (correct in Turkish Latin!)\n)For even more internationalization options, please see the original answer below.",
                "Here's a more object-oriented approach:You'd call the function, like this:With the expected output being:",
                "In CSS:",
                "Here is a shortened version of the popular answer that gets the first letter by treating the string as an array:According to the comments below this doesn't work in IE 7 or below.To avoid undefined for empty strings (see @njzk2's comment below), you can check for an empty string:",
                "Here are the fastest methods based on this jsperf test (ordered from fastest to slowest).As you can see, the first two methods are essentially comparable in terms of performance, whereas altering the String.prototype is by far the slowest in terms of performance.",
                "I didn\u2019t see any mention in the existing answers of issues related to astral plane code points or internationalization. \u201cUppercase\u201d doesn\u2019t mean the same thing in every language using a given script.Initially I didn\u2019t see any answers addressing issues related to astral plane code points. There is one, but it\u2019s a bit buried (like this one will be, I guess!)Most of the proposed functions look like this:However, some cased characters fall outside the BMP (basic multilingual plane, code points U+0 to U+FFFF). For example take this Deseret text:The first character here fails to capitalize because the array-indexed properties of strings don\u2019t access \u201ccharacters\u201d or code points*. They access UTF-16 code units. This is true also when slicing \u2014 the index values point at code units.It happens to be that UTF-16 code units are 1:1 with USV code points within two ranges, U+0 to U+D7FF and U+E000 to U+FFFF inclusive. Most cased characters fall into those two ranges, but not all of them.From ES2015 on, dealing with this became a bit easier. String.prototype[@@iterator] yields strings corresponding to code points**. So for example, we can do this:For longer strings, this is probably not terribly efficient*** \u2014 we don\u2019t really need to iterate the remainder. We could use String.prototype.codePointAt to get at that first (possible) letter, but we\u2019d still need to determine where the slice should begin. One way to avoid iterating the remainder would be to test whether the first codepoint is outside the BMP; if it isn\u2019t, the slice begins at 1, and if it is, the slice begins at 2.You could use bitwise math instead of > 0xFFFF there, but it\u2019s probably easier to understand this way and either would achieve the same thing.We can also make this work in ES5 and below by taking that logic a bit further if necessary. There are no intrinsic methods in ES5 for working with codepoints, so we have to manually test whether the first code unit is a surrogate****:At the start I also mentioned internationalization considerations. Some of these are very difficult to account for because they require knowledge not only of what language is being used, but also may require specific knowledge of the words in the language. For example, the Irish digraph \"mb\" capitalizes as \"mB\" at the start of a word. Another example, the German eszett, never begins a word (afaik), but still helps illustrate the problem. The lowercase eszett (\u201c\u00df\u201d) capitalizes to \u201cSS,\u201d but  \u201cSS\u201d could lowercase to either \u201c\u00df\u201d or \u201css\u201d \u2014 you require out-of-band knowledge of the German language to know which is correct!The most famous example of these kinds of issues, probably, is Turkish. In Turkish Latin, the capital form of i is \u0130, while the lowercase form of I is \u0131 \u2014 they\u2019re two different letters. Fortunately we do have a way to account for this:In a browser, the user\u2019s most-preferred language tag is indicated by navigator.language, a list in order of preference is found at navigator.languages, and a given DOM element\u2019s language can be obtained (usually) with Object(element.closest('[lang]')).lang || YOUR_DEFAULT_HERE in multilanguage documents.In agents which support Unicode property character classes in RegExp, which were introduced in ES2018, we can clean stuff up further by directly expressing what characters we\u2019re interested in:This could be tweaked a bit to also handle capitalizing multiple words in a string with fairly good accuracy for at least some languages, though outlying cases will be hard to avoid completely if doing so no matter what the primary language is.The CWU or Changes_When_Uppercased character property matches all code points which change when uppercased in the generic case where specific locale data is absent. There are other interesting case-related Unicode character properties that you may wish to play around with. It\u2019s a cool zone to explore but we\u2019d go on all day if we enumerated em all here. Here\u2019s something to get your curiosity going if you\u2019re unfamiliar, though: \\p{Lower} is a larger group than \\p{LowercaseLetter} (aka \\p{Ll}) \u2014 conveniently illustrated by the default character set comparison in this tool provided by Unicode. (NB: not everything you can reference there is also available in ES regular expressions, but most of the stuff you\u2019re likely to want is).If digraphs with unique locale/language/orthography capitalization rules happen to have a single-codepoint \u201ccomposed\u201d representation in Unicode, these might be used to make one\u2019s capitalization expectations explicit even in the absence of locale data. For example, we could prefer the composed i-j digraph, \u0133 / U+133, associated with Dutch, to ensure a case-mapping to uppercase \u0132 / U+132:On the other hand, precomposed digraphs and similar are sometimes deprecated (like that one, it seems!) and may be undesirable in interchanged text regardless due to the potential copypaste nuisance if that\u2019s not the normal way folks type the sequence in practice. Unfortunately, in the absence of the precomposition \u201chint,\u201d an explicit locale won\u2019t help here (at least as far as I know). If we spell ijsselmeer with an ordinary i + j, capitalizeFirstLetter will produce the wrong result even if we explicitly indicate nl as the locale:(I\u2019m not entirely sure whether there are some such cases where the behavior comes down to ICU data availability \u2014 perhaps someone else could say.)If the point of the transformation is to display textual content in a web browser, though, you have an entirely different option available that will likely be your best bet: leveraging features of the web platform\u2019s other core languages, HTML and CSS. Armed with HTML\u2019s lang=... and CSS\u2019s text-transform:..., you\u2019ve got a (pseudo-)declarative solution that leaves extra room for the user agent to be \u201csmart.\u201d A JS API needs to have predictable outcomes across all browsers (generally) and isn\u2019t free to experiment with heuristics. The user-agent itself is obligated only to its user, though, and heuristic solutions are fair game when the output is for a human being. If we tell it \u201cthis text is Dutch, but please display it capitalized,\u201d the particular outcome might now vary between browsers, but it\u2019s likely going to be the best each of them could do. Let\u2019s see:<!DOCTYPE html>\n<dl>\n<dt>Untransformed\n<dd>ijsselmeer\n<dt>Capitalized with CSS and <code>lang=en</code>\n<dd lang=\"en\" style=\"text-transform: capitalize\">ijsselmeer\n<dt>Capitalized with CSS and <code>lang=nl</code>\n<dd lang=\"nl\" style=\"text-transform: capitalize\">ijsselmeerIn Chromium at the time of writing, both the English and Dutch lines come out as Ijsselmeer \u2014 so it does no better than JS. But try it in current Firefox! The element that we told the browser contains Dutch will be correctly rendered as IJsselmeer there.This solution is purpose-specific (it\u2019s not gonna help you in Node, anyway) but it was silly of me not to draw attention to it previously given some folks might not realize they\u2019re googling the wrong question. Thanks @paul23 for clarifying more about the nature of the IJ digraph in practice and prompting further investigation!As of January 2021, all major engines have implemented the Unicode property character class feature, but depending on your target support range you may not be able to use it safely yet. The last browser to introduce support was Firefox (78; June 30, 2020). You can check for support of this feature with the Kangax compat table. Babel can be used to compile RegExp literals with property references to equivalent patterns without them, but be aware that the resulting code can sometimes be enormous. You probably would not want to do this unless you\u2019re certain the tradeoff is justified for your use case.In all likelihood, people asking this question will not be concerned with Deseret capitalization or internationalization. But it\u2019s good to be aware of these issues because there\u2019s a good chance you\u2019ll encounter them eventually even if they aren\u2019t concerns presently. They\u2019re not \u201cedge\u201d cases, or rather, they\u2019re not by-definition edge cases \u2014 there\u2019s a whole country where most people speak Turkish, anyway, and conflating code units with codepoints is a fairly common source of bugs (especially with regard to emoji). Both strings and language are pretty complicated!* The code units of UTF-16 / UCS2 are also Unicode code points in the sense that e.g. U+D800 is technically a code point, but that\u2019s not what it \u201cmeans\u201d here ... sort of ... though it gets pretty fuzzy. What the surrogates definitely are not, though, is USVs (Unicode scalar values).** Though if a surrogate code unit is \u201corphaned\u201d \u2014 i.e., not part of a logical pair \u2014 you could still get surrogates here, too.*** maybe. I haven\u2019t tested it. Unless you have determined capitalization is a meaningful bottleneck, I probably wouldn\u2019t sweat it \u2014 choose whatever you believe is most clear and readable.**** such a function might wish to test both the first and second code units instead of just the first, since it\u2019s possible that the first unit is an orphaned surrogate. For example the input \"\\uD800x\" would capitalize the X as-is, which may or may not be expected.",
                "For another case I need it to capitalize the first letter and lowercase the rest. The following cases made me change this function:",
                "This is the 2018 ECMAScript\u00a06+ Solution:const str = 'the Eiffel Tower';\r\nconst newStr = `${str[0].toUpperCase()}${str.slice(1)}`;\r\nconsole.log('Original String:', str); // the Eiffel Tower\r\nconsole.log('New String:', newStr); // The Eiffel Tower",
                "If you're already (or considering) using Lodash, the solution is easy:See their documentation: https://lodash.com/docs#capitalize_.camelCase('Foo Bar'); //=> 'fooBar'https://lodash.com/docs/4.15.0#camelCaseVanilla JavaScript for first upper case:",
                "There is a very simple way to implement it by replace. For ECMAScript\u00a06:Result:",
                "Capitalize the first letter of all words in a string:",
                "If the transformation is needed only for displaying on a web page:The difference is rather minuscule nowadays (run the test yourself):",
                "It's always better to handle these kinds of stuff using CSS first, in general, if you can solve something using CSS, go for that first, then try JavaScript to solve your problems, so in this case try using :first-letter in CSS and apply text-transform:capitalize;So try creating a class for that, so you can use it globally, for example: .first-letter-uppercase and add something like below in your CSS:Also the alternative option is JavaScript, so the best gonna be something like this:and call it like:If you  want to reuse it over and over, it's better attach it to javascript native String, so something like below:and call it as below:",
                "And then:then capitalize(\"hello\") // Hello",
                "SHORTEST 3 solutions, 1 and 2 handle cases when s string  is \"\", null and undefined:let s='foo bar';\r\n\r\nconsole.log( s&&s[0].toUpperCase()+s.slice(1) );\r\n\r\nconsole.log( s&&s.replace(/./,s[0].toUpperCase()) );\r\n\r\nconsole.log( 'foo bar'.replace(/./,x=>x.toUpperCase()) );",
                "We could get the first character with one of my favorite RegExp, looks like a cute smiley: /^./And for all coffee-junkies:...and for all guys who think that there's a better way of doing this, without extending native prototypes:",
                "Use:var str = \"ruby java\";\r\n\r\nconsole.log(str.charAt(0).toUpperCase() + str.substring(1));It will output \"Ruby java\" to the console.",
                "Here is a function called ucfirst()(short for \"upper case first letter\"):You can capitalise a string by calling ucfirst(\"some string\") -- for example,It works by splitting the string into two pieces.  On the first line it pulls out firstLetter and then on the second line it capitalises firstLetter by calling firstLetter.toUpperCase() and joins it with the rest of the string, which is found by calling str.substr(1).You might think this would fail for an empty string, and indeed in a language like C you would have to cater for this. However in JavaScript, when you take a substring of an empty string, you just get an empty string back.",
                "If you use Underscore.js or Lodash, the underscore.string library provides string extensions, including capitalize:_.capitalize(string) Converts first letter of the string to\nuppercase.Example:",
                "If you're ok with capitalizing the first letter of every word, and your usecase is in HTML, you can use the following CSS:This is from CSS text-transform Property (at W3Schools).",
                "If you are wanting to reformat all-caps text, you might want to modify the other examples as such:This will ensure that the following text is changed:",
                "Usage:This is a text string => This Is A Text String",
                "I found this arrow function easiest. Replace matches the first letter character (\\w) of your string and converts it to uppercase. Nothing fancier is necessary.",
                "57 81 different answers for this question, some off-topic, and yet none of them raise the important issue that none of the solutions listed will work with Asian characters, emoji's, and other high Unicode-point-value characters in many browsers. Here is a solution that will:Do note that the above solution tries to account for UTF-32. However, the specification officially states that browsers are required to do everything in UTF-16 mapped into UCS2. Nevertheless, if we all come together, do our part, and start preparing for UTF32, then there is a chance that the TC39 may allow browsers to start using UTF-32 (like how Python uses 24-bits for each character of the string). This must seem silly to an English speaker: no one who uses only latin-1 has ever had to deal with Mojibake because Latin-I is supported by all character encodings. But, users in other countries (such as China, Japan, Indonesia, etc.) are not so fortunate. They constantly struggle with encoding problems not just from the webpage, but also from the JavaScript: many Chinese/Japanese characters are treated as two letters by JavaScript and thus may be broken apart in the middle, resulting in \ufffd and \ufffd (two question-marks that make no sense to the end user). If we could start getting ready for UTF-32, then the TC39 might just allow browsers do what Python did many years ago which had made Python very popular for working with high Unicode characters: using UTF-32.consistantCapitalizeFirstLetter works correctly in Internet\u00a0Explorer\u00a03+ (when the const is changed to var). prettyCapitalizeFirstLetter requires Internet\u00a0Explorer\u00a05.5+ (see the top of page 250 of this document). However, these fact are more of just jokes because it is very likely that the rest of the code on your webpage will not even work in Internet\u00a0Explorer\u00a08 - because of all the DOM and JScript bugs and lack of features in these older browsers. Further, no one uses Internet\u00a0Explorer\u00a03 or Internet\u00a0Explorer\u00a05.5 any more.",
                "Check out this solution:",
                "Only because this is really a one-liner I will include this answer. It's an ES6-based interpolated string one-liner.",
                "with arrow functionwith arrow function, another solutionwith array and map()"
            ]
        },
        {
            "tag": "check_value",
            "patterns": [
                "How do I check if an array includes a value in JavaScript?",
                "Check if value is in array",
                "Check for value"
            ],
            "responses": [
                "Modern browsers have Array#includes, which does exactly that and is widely supported by everyone except IE:console.log(['joe', 'jane', 'mary'].includes('jane')); //trueYou can also use Array#indexOf, which is less direct, but doesn't require polyfills for outdated browsers.console.log(['joe', 'jane', 'mary'].indexOf('jane') >= 0); //trueMany frameworks also offer similar methods:Notice that some frameworks implement this as a function, while others add the function to the array prototype.",
                "Update from 2019: This answer is from 2008 (11 years old!) and is not relevant for modern JS usage. The promised performance improvement was based on a benchmark done in browsers of that time. It might not be relevant to modern JS execution contexts. If you need an easy solution, look for other answers. If you need the best performance, benchmark for yourself in the relevant execution environments.As others have said, the iteration through the array is probably the best way, but it has been proven that a decreasing while loop is the fastest way to iterate in JavaScript. So you may want to rewrite your code as follows:Of course, you may as well extend Array prototype:And now you can simply use the following:",
                "indexOf maybe, but it's a \"JavaScript extension to the ECMA-262 standard; as such it may not be present in other implementations of the standard.\"Example:AFAICS Microsoft does not offer some kind of alternative to this, but you can add similar functionality to arrays in Internet Explorer (and other browsers that don't support indexOf) if you want to, as a quick Google search reveals (for example, this one).",
                "The top answers assume primitive types but if you want to find out if an array contains an object with some trait, Array.prototype.some() is an elegant solution:The nice thing about it is that the iteration is aborted once the element is found so unnecessary iteration cycles are spared.Also, it fits nicely in an if statement since it returns a boolean:* As jamess pointed out in the comment, at the time of this answer, September 2018, Array.prototype.some() is fully supported: caniuse.com support table",
                "ECMAScript 7 introduces Array.prototype.includes.It can be used like this:It also accepts an optional second argument fromIndex:Unlike indexOf, which uses Strict Equality Comparison, includes compares using SameValueZero equality algorithm. That means that you can detect if an array includes a NaN:Also unlike indexOf, includes does not skip missing indices:It can be polyfilled to make it work on all browsers.",
                "Let's say you've defined an array like so:Below are three ways of checking whether there is a 3 in there. All of them return either true or false.",
                "Here's a JavaScript 1.6 compatible implementation of Array.indexOf:",
                "Use:",
                "Extending the JavaScript Array object is a really bad idea because you introduce new properties (your custom methods) into for-in loops which can break existing scripts. A few years ago the authors of the Prototype library had to re-engineer their library implementation to remove just this kind of thing.If you don't need to worry about compatibility with other JavaScript running on your page, go for it, otherwise, I'd recommend the more awkward, but safer free-standing function solution.",
                "Today 2020.01.07 I perform tests on MacOs HighSierra 10.13.6 on Chrome v78.0.0, Safari v13.0.4 and Firefox v71.0.0 for 15 chosen solutions. ConclusionsI perform 2 tests cases: for array with 10 elements, and array with 1 milion elements. In both cases we put searched element in the array middle.let log = (name,f) => console.log(`${name}: 3-${f(arr,'s10')}  's7'-${f(arr,'s7')}  6-${f(arr,6)} 's3'-${f(arr,'s3')}`)\r\n\r\nlet arr = [1,2,3,4,5,'s6','s7','s8','s9','s10'];\r\n//arr = new Array(1000000).fill(123); arr[500000]=7;\r\n\r\nfunction A(a, val) {\r\n    var i = -1;\r\n    var n = a.length;\r\n    while (i++<n) {\r\n       if (a[i] === val) {\r\n           return true;\r\n       }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction B(a, val) {\r\n    var i = a.length;\r\n    while (i--) {\r\n       if (a[i] === val) {\r\n           return true;\r\n       }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction C(a, val) {\r\n    for (var i = 0; i < a.length; i++) {\r\n        if (a[i] === val) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction D(a,val)\r\n{\r\n    var len = a.length;\r\n    for(var i = 0 ; i < len;i++)\r\n    {\r\n        if(a[i] === val) return true;\r\n    }\r\n    return false;\r\n} \r\n\r\nfunction E(a, val){  \r\n  var n = a.length-1;\r\n  var t = n/2;\r\n  for (var i = 0; i <= t; i++) {\r\n        if (a[i] === val || a[n-i] === val) return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction F(a,val) {\r\n\treturn a.includes(val);\r\n}\r\n\r\nfunction G(a,val) {\r\n\treturn a.indexOf(val)>=0;\r\n}\r\n\r\nfunction H(a,val) {\r\n\treturn !!~a.indexOf(val);\r\n}\r\n\r\nfunction I(a, val) {\r\n  return a.findIndex(x=> x==val)>=0;\r\n}\r\n\r\nfunction J(a,val) {\r\n\treturn a.some(x=> x===val);\r\n}\r\n\r\nfunction K(a, val) {\r\n  const s = JSON.stringify(val);\r\n  return a.some(x => JSON.stringify(x) === s);\r\n}\r\n\r\nfunction L(a,val) {\r\n\treturn !a.every(x=> x!==val);\r\n}\r\n\r\nfunction M(a, val) {\r\n  return !!a.find(x=> x==val);\r\n}\r\n\r\nfunction N(a,val) {\r\n\treturn a.filter(x=>x===val).length > 0;\r\n}\r\n\r\nfunction O(a, val) {\r\n  return new Set(a).has(val);\r\n}\r\n\r\nlog('A',A);\r\nlog('B',B);\r\nlog('C',C);\r\nlog('D',D);\r\nlog('E',E);\r\nlog('F',F);\r\nlog('G',G);\r\nlog('H',H);\r\nlog('I',I);\r\nlog('J',J);\r\nlog('K',K);\r\nlog('L',L);\r\nlog('M',M);\r\nlog('N',N);\r\nlog('O',O);\nThis shippet only presents functions used in performance tests - it not perform tests itself!Array small - 10 elementsYou can perform tests in your machine HEREArray big - 1.000.000 elementsYou can perform tests in your machine HERE",
                "One-liner:",
                "Thinking out of the box for a second, if you are making this call many many times, it is vastly more efficient to use an associative array a Map to do lookups using a hash function.https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
                "I use the following:",
                "Array.prototype.some() was added to the ECMA-262 standard in the 5th edition",
                "If you are using JavaScript 1.6 or later (Firefox 1.5 or later) you can use Array.indexOf.  Otherwise, I think you are going to end up with something similar to your original code.",
                "A hopefully faster bidirectional indexOf / lastIndexOf alternativeWhile the new method includes is very nice, the support is basically zero for now.It's a long time that I was thinking of a way to replace the slow indexOf/lastIndexOf functions.A performant way has already been found, looking at the top answers. From those I chose the contains function posted by @Damir Zekic which should be the fastest one. But it also states that the benchmarks are from 2008 and so are outdated.I also prefer while over for, but for not a specific reason I ended writing the function with a for loop. It could be also done with a while --.I was curious if the iteration was much slower if I check both sides of the array while doing it. Apparently no, and so this function is around two times faster than the top voted ones. Obviously it's also faster than the native one. This is in a real world environment, where you never know if the value you are searching is at the beginning or at the end of the array.When you know you just pushed an array with a value, using lastIndexOf remains probably the best solution, but if you have to travel through big arrays and the result could be everywhere, this could be a solid solution to make things faster.Bidirectional indexOf/lastIndexOfhttps://jsbench.me/7el1b8dj80As a test I created an array with 100k entries.Three queries: at the beginning, in the middle & at the end of the array.I hope you also find this interesting and test the performance.Note: As you can see I slightly modified the contains function to reflect the indexOf & lastIndexOf output (so basically true with the index and false with -1). That shouldn't harm it.The function can also be easily modified to return true or false or even the object, string or whatever it is.And here is the while variant:I think that the simple calculation to get the reflected index in an array is so simple that it's two times faster than doing an actual loop iteration.Here is a complex example doing three checks per iteration, but this is only possible with a longer calculation which causes the slowdown of the code.https://web.archive.org/web/20151019160219/http://jsperf.com/bidirectionalindexof/2",
                "Returns array index if found, or -1 if not found",
                "If you are checking repeatedly for existence of an object in an array you should maybe look into",
                "We use this snippet (works with objects, arrays, strings):Usage:",
                "Solution that works in all modern browsers:Usage:IE6+ solution:Usage:Array.indexOf and Array.includes (as well as most of the answers here) only compare by reference and not by value.Non-optimized ES6 one-liner:Note:\nComparing objects by value will work better if the keys are in the same order, so to be safe you might sort the keys first with a package like this one: https://www.npmjs.com/package/sort-keysUpdated the contains function with a perf optimization. Thanks itinance for pointing it out.",
                "There are a couple of method which makes this easy to achieve (includes, some, find, findIndex)const array = [1, 2, 3, 4, 5, 6, 7];\n\nconsole.log(array.includes(3));\n//includes() determines whether an array includes a certain value among its entries\n\nconsole.log(array.some(x => x === 3)); \n//some() tests if at least one element in the array passes the test implemented by the provided function\n\nconsole.log(array.find(x => x === 3) ? true : false);\n//find() returns the value of the first element in the provided array that satisfies the provided testing function\n\nconsole.log(array.findIndex(x => x === 3) > -1);\n//findIndex() returns the index of the first element in the array that satisfies the provided testing function, else returning -1.",
                "Use lodash's some function.It's concise, accurate and has great cross platform support.The accepted answer does not even meet the requirements.Requirements: Recommend most concise and efficient way to find out if a JavaScript array contains an object.Accepted Answer:My recommendation:Notes:$.inArray works fine for determining whether a scalar value exists in an array of scalars...... but the question clearly asks for an efficient way to determine if an object is contained in an array.In order to handle both scalars and objects, you could do this:",
                "Simple solution for this requirement is using find()If you're having array of objects like below,Then you can check whether the object with your value is already present or not:if data is null then no admin, else it will return the existing object like:Then you can find the index of that object in the array and replace the object using the code:you will get value like:",
                "ECMAScript 6 has an elegant proposal on find.The find method executes the callback function once for each element\n  present in the array until it finds one where callback returns a true\n  value. If such an element is found, find immediately returns the value\n  of that element. Otherwise, find returns undefined. callback is\n  invoked only for indexes of the array which have assigned values; it\n  is not invoked for indexes which have been deleted or which have never\n  been assigned values.Here is the MDN documentation on that.The find functionality works like this.You can use this in ECMAScript 5 and below by defining the function.",
                "While array.indexOf(x)!=-1 is the most concise way to do this (and has been supported by non-Internet\u00a0Explorer browsers for over decade...), it is not O(1), but rather O(N), which is terrible. If your array will not be changing, you can convert your array to a hashtable, then do table[x]!==undefined or ===undefined:Demo:(Unfortunately, while you can create an Array.prototype.contains to \"freeze\" an array and store a hashtable in this._cache in two lines, this would give wrong results if you chose to edit your array later. JavaScript has insufficient hooks to let you keep this state, unlike Python for example.)",
                "One can use Set that has the method \"has()\":function contains(arr, obj) {\r\n      var proxy = new Set(arr);\r\n      if (proxy.has(obj))\r\n        return true;\r\n      else\r\n        return false;\r\n    }\r\n\r\n    var arr = ['Happy', 'New', 'Year'];\r\n    console.log(contains(arr, 'Happy'));",
                "Use:DemoTo know exactly what the tilde ~ do at this point, refer to this question What does a tilde do when it precedes an expression?.",
                "OK, you can just optimise your code to get the result!There are many ways to do this which are cleaner and better, but I just wanted to get your pattern and apply to that using JSON.stringify, just simply do something like this in your case:",
                "Surprised that this question still doesn't have latest syntax added, adding my 2 cents.Let's say we have array of Objects arrObj and we want to search obj in it.Array.prototype.indexOf -> (returns index or -1) is generally used for finding index of element in array.\nThis can also be used for searching object but only works if you are passing reference to same object.Array.prototype.includes -> (returns true or false)Array.prototype.find -> (takes callback, returns first value/object that returns true in CB).Array.prototype.findIndex -> (takes callback, returns index of first value/object that returns true in CB).Since find and findIndex takes a callback, we can be fetch any object(even if we don't have the reference) from array by creatively setting the true condition.",
                "It has one parameter: an array numbers of objects. Each object in the array has two integer properties denoted by x and y. The function must return a count of all such objects in the array that satisfy numbers.x == numbers.yvar numbers = [ { x: 1, y: 1 },\r\n                { x: 2, y: 3 },\r\n                { x: 3, y: 3 },\r\n                { x: 3, y: 4 },\r\n                { x: 4, y: 5 } ];\r\nvar count = 0; \r\nvar n = numbers.length;\r\nfor (var i =0;i<n;i++)\r\n{\r\n  if(numbers[i].x==numbers[i].y)\r\n    {count+=1;}\r\n}\r\n\r\nalert(count);"
            ]
        },
        {
            "tag": "timestamp",
            "patterns": [
                "How do I get a timestamp in JavaScript?",
                "Timestamps",
                "Get timestamp"
            ],
            "responses": [
                "To get the number of milliseconds since Unix epoch, call Date.now:Alternatively, use the unary operator + to call Date.prototype.valueOf:Alternatively, call valueOf directly:To support IE8 and earlier (see compatibility table), create a shim for Date.now:Alternatively, call getTime directly:To get the number of seconds since Unix epoch, i.e. Unix timestamp:Alternatively, using bitwise-or to floor is slightly faster, but also less readable and may break in the future (see explanations 1, 2):Use performance.now:var isPerformanceSupported = (\n    window.performance &&\n    window.performance.now &&\n    window.performance.timing &&\n    window.performance.timing.navigationStart\n);\n\nvar timeStampInMs = (\n    isPerformanceSupported ?\n    window.performance.now() +\n    window.performance.timing.navigationStart :\n    Date.now()\n);\n\nconsole.log(timeStampInMs, Date.now());",
                "I like this, because it is small:I also like this, because it is just as short and is compatible with modern browsers, and over 500 people voted that it is better:",
                "JavaScript works with the number of milliseconds since the epoch whereas most other languages work with the seconds. You could work with milliseconds but as soon as you pass a value to say PHP, the PHP native functions will probably fail. So to be sure I always use the seconds, not milliseconds.This will give you a Unix timestamp (in seconds):This will give you the milliseconds since the epoch (not Unix timestamp):",
                "I provide multiple solutions with descriptions in this answer. Feel free to ask questions if anything is unclearQuick and dirty solution:Warning: it might break in 2038 and return negative numbers if you do the |0 magic. Use Math.floor() instead by that timeMath.floor() solution:Some nerdy alternative by Derek \u6715\u6703\u529f\u592b taken from the comments below this answer:Polyfill to get Date.now() working:To get it working in IE you could do this (Polyfill from MDN):If you do not care about the year / day of week / daylight saving time you need to remember this for dates after 2038:Bitwise operations will cause usage of 32 Bit Integers instead of 64 Bit Floating Point.You will need to properly use it as:If you just want to know the relative time from the point of when the code was run through first you could use something like this:In case you are using jQuery you could use $.now() as described in jQuery's Docs which makes the polyfill obsolete since $.now() internally does the same thing: (new Date).getTime()If you are just happy about jQuery's version, consider upvoting this answer since I did not find it myself.Now a tiny explaination of what |0 does:By providing |, you tell the interpreter to do a binary OR operation.\nBit operations require absolute numbers which turns the decimal result from Date.now() / 1000 into an integer.During that conversion, decimals are removed, resulting in a similar result to what using Math.floor() would output.Be warned though: it will convert a 64 bit double to a 32 bit integer.\nThis will result in information loss when dealing with huge numbers.\nTimestamps will break after 2038 due to 32 bit integer overflow unless Javascript moves to 64 Bit Integers in Strict Mode.For further information about Date.now follow this link: Date.now() @ MDN",
                "In addition to the other options, if you want a dateformat ISO, you can get it directlyconsole.log(new Date().toISOString());",
                "jQuery provides its own method to get the timestamp:(besides it just implements (new Date).getTime() expression)REF: http://api.jquery.com/jQuery.now/",
                "Date, a native object in JavaScript is the way we get all data about time.Just be careful in JavaScript the timestamp depends on the client computer set, so it's not 100% accurate timestamp. To get the best result, you need to get the timestamp from the server-side.Anyway, my preferred way is using vanilla. This is a common way of doing it in JavaScript:In MDN it's mentioned as below:The Date.now() method returns the number of milliseconds elapsed since\n  1 January 1970 00:00:00 UTC.\n  Because now() is a static method of Date, you always use it as Date.now().If you using a version below ES5, Date.now(); not works and you need to use:",
                "console.log(new Date().valueOf()); // returns the number of milliseconds since the epoch",
                "Today - 2020.04.23 I perform tests for chosen solutions. I tested on MacOs High Sierra 10.13.6 on Chrome 81.0, Safari 13.1, Firefox 75.0Results for chromeYou can perform test on your machine HERECode used in tests is presented in below snippetfunction A() {\n  return new Date().getTime();\n}\n\nfunction B() {\n  return new Date().valueOf();\n}\n\nfunction C() {\n  return +new Date();\n}\n\nfunction D() {\n  return new Date()*1;\n}\n\nfunction E() {\n  return Date.now();\n}\n\nfunction F() {\n  return Number(new Date());\n}\n\nfunction G() {\n  // this solution returns time counted from loading the page.\n  // (and on Chrome it gives better precission)\n  return performance.now(); \n}\n\n\n\n// TEST\n\nlog = (n,f) => console.log(`${n} : ${f()}`);\n\nlog('A',A);\nlog('B',B);\nlog('C',C);\nlog('D',D);\nlog('E',E);\nlog('F',F);\nlog('G',G);\nThis snippet only presents code used in external benchmark",
                "Just to add up, here's a function to return a timestamp string in Javascript. \nExample: 15:06:38 PM",
                "One I haven't seen yetAnother one I haven't seen yet is",
                "The Date.getTime() method can be used with a little tweak:The value returned by the getTime method is the number of milliseconds\n  since 1 January 1970 00:00:00 UTC.Divide the result by 1000 to get the Unix timestamp, floor if necessary:The Date.valueOf() method is functionally equivalent to Date.getTime(), which makes it possible to use arithmetic operators on date object to achieve identical results. In my opinion, this approach affects readability.",
                "The code Math.floor(new Date().getTime() / 1000) can be shortened to new Date / 1E3 | 0.Consider to skip direct getTime() invocation and use | 0 as a replacement for Math.floor() function.\nIt's also good to remember 1E3 is a shorter equivalent for 1000 (uppercase E is preferred than lowercase to indicate 1E3 as a constant).As a result you get the following:var ts = new Date / 1E3 | 0;\r\n\r\nconsole.log(ts);",
                "I highly recommend using moment.js. To get the number of milliseconds since UNIX epoch, doTo get the number of seconds since UNIX epoch, doYou can also convert times like so:I do that all the time. No pun intended.To use moment.js in the browser:For more details, including other ways of installing and using MomentJS, see their docs",
                "For a timestamp with microsecond resolution, there's performance.now:This could for example yield 1436140826653.139, while Date.now only gives 1436140826653.",
                "Here is a simple function to generate timestamp in the format: mm/dd/yy hh:mi:ss",
                "You can only usevar timestamp = new Date().getTime();\r\n    console.log(timestamp);to get the current timestamp. No need to do anything extra.",
                "// The Current Unix Timestamp\r\n// 1443534720 seconds since Jan 01 1970. (UTC)\r\n\r\n// seconds\r\nconsole.log(Math.floor(new Date().valueOf() / 1000)); // 1443534720\r\nconsole.log(Math.floor(Date.now() / 1000)); // 1443534720\r\nconsole.log(Math.floor(new Date().getTime() / 1000)); // 1443534720\r\n\r\n// milliseconds\r\nconsole.log(Math.floor(new Date().valueOf())); // 1443534720087\r\nconsole.log(Math.floor(Date.now())); // 1443534720087\r\nconsole.log(Math.floor(new Date().getTime())); // 1443534720087\r\n\r\n// jQuery\r\n// seconds\r\nconsole.log(Math.floor($.now() / 1000)); // 1443534720\r\n// milliseconds\r\nconsole.log($.now()); // 1443534720087\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>",
                "If it is for logging purposes, you can use ISOStringnew Date().toISOString()\"2019-05-18T20:02:36.694Z\"",
                "Any browsers not supported Date.now, you can use this for get current date time:",
                "This seems to work.",
                "This one has a solution : which converts unixtime stamp to tim in js try this",
                "I learned a really cool way of converting a given Date object to a Unix timestamp from the source code of JQuery Cookie the other day.Here's an example:",
                "If want a basic way to generate a timestamp in Node.js this works well.Our team is using this to bust cache in a localhost environment. The output is /dist/css/global.css?v=245521377 where 245521377 is the timestamp generated by hrtime().Hopefully this helps, the methods above can work as well but I found this to be the simplest approach for our needs in Node.js.",
                "For lodash and underscore users, use _.now.",
                "Moment.js can abstract away a lot of the pain in dealing with Javascript Dates.See: http://momentjs.com/docs/#/displaying/unix-timestamp/",
                "As of writing this, the top answer is 9 years old, and a lot has changed since then - not least, we have near universal support for a non-hacky solution:If you want to be absolutely certain that this won't break in some ancient (pre ie9) browser, you can put it behind a check, like so:This will return the milliseconds since epoch time, of course, not seconds.MDN Documentation on Date.now",
                "more simpler way:"
            ]
        },
        {
            "tag": "checked",
            "patterns": [
                "Setting \"checked\" for a checkbox with jQuery",
                "How to set check for checkboxes"
            ],
            "responses": [
                "Use .prop():If you're working with just one element, you can always just access the underlying HTMLInputElement and modify its .checked property:The benefit to using the .prop() and .attr() methods instead of this is that they will operate on all matched elements.The .prop() method is not available, so you need to use .attr().Note that this is the approach used by jQuery's unit tests prior to version 1.6 and is preferable to using $('.myCheckbox').removeAttr('checked'); since the latter will, if the box was initially checked, change the behaviour of a call to .reset() on any form that contains it \u2013 a subtle but probably unwelcome behaviour change.For more context, some incomplete discussion of the changes to the handling of the checked attribute/property in the transition from 1.5.x to 1.6 can be found in the version 1.6 release notes and the Attributes vs. Properties section of the .prop() documentation.",
                "Use:And if you want to check if a checkbox is checked or not:",
                "This is the correct way of checking and unchecking checkboxes with jQuery, as it is cross-platform standard, and will allow form reposts.By doing this, you are using JavaScript standards for checking and unchecking checkboxes, so any browser that properly implements the \"checked\" property of the checkbox element will run this code flawlessly. This should be all major browsers, but I am unable to test previous to Internet Explorer 9.The Problem (jQuery 1.6):Once a user clicks on a checkbox, that checkbox stops responding to the \"checked\" attribute changes.Here is an example of the checkbox attribute failing to do the job after someone has clicked the checkbox (this happens in Chrome).FiddleThe Solution:By using JavaScript's \"checked\" property on the DOM elements, we are able to solve the problem directly, instead of trying to manipulate the DOM into doing what we want it to do.FiddleThis plugin will alter the checked property of any elements selected by jQuery, and successfully check and uncheck checkboxes under all circumstances. So, while this may seem like an over-bearing solution, it will make your site's user experience better, and help prevent user frustration.Alternatively, if you do not want to use a plugin, you can use the following code snippets:",
                "You can doorIf you have custom code in the onclick event for the checkbox that you want to fire, use this one instead:You can uncheck by removing the attribute entirely:You can check all checkboxes like this:",
                "You can also extend the $.fn object with new methods:Then you can just do:Or you may want to give them more unique names like mycheck() and myuncheck()  in case you use some other library that uses those names.",
                "The last one will fire the click event for the checkbox, the others will not.\nSo if you have custom code in the onclick event for the checkbox that you want to fire, use the last one.",
                "To check a checkbox you should useorand to uncheck a check box you should always set it to false:If you doit removes the attribute all together and therefore you will not be able to reset the form.BAD DEMO jQuery 1.6. I think this is broken. For 1.6 I am going to make a new post on that.NEW WORKING DEMO jQuery 1.5.2 works in Chrome.Both demos use",
                "This selects elements that have the specified attribute with a value containing the given substring \"ckbItem\":It will select all elements that contain ckbItem in its name attribute.",
                "Assuming that the question is...Remember that in a typical checkbox set, all input tags have the same name, they differ by the attribute value:  there are no ID for each input of the set.Xian's answer can be extended with a more specific selector, using the following line of code:",
                "I'm missing the solution. I'll always use:",
                "To check a checkbox using jQuery 1.6 or higher just do this:To uncheck, use:Here' s what I like to use to toggle a checkbox using jQuery:If you're using jQuery 1.5 or lower:To uncheck, use:",
                "Here is a way to do it without jQueryfunction addOrAttachListener(el, type, listener, useCapture) {\r\n  if (el.addEventListener) {\r\n    el.addEventListener(type, listener, useCapture);\r\n  } else if (el.attachEvent) {\r\n    el.attachEvent(\"on\" + type, listener);\r\n  }\r\n};\r\n\r\naddOrAttachListener(window, \"load\", function() {\r\n  var cbElem = document.getElementById(\"cb\");\r\n  var rcbElem = document.getElementById(\"rcb\");\r\n  addOrAttachListener(cbElem, \"click\", function() {\r\n    rcbElem.checked = cbElem.checked;\r\n  }, false);\r\n}, false);\n<label>Click Me!\r\n  <input id=\"cb\" type=\"checkbox\" />\r\n</label>\r\n<label>Reflection:\r\n  <input id=\"rcb\" type=\"checkbox\" />\r\n</label>",
                "Here is code for checked and unchecked with a button:Update: Here is the same code block using the newer Jquery 1.6+ prop method, which replaces attr:",
                "Try this:",
                "We can use elementObject with jQuery for getting the attribute checked:We can use this for all jQuery versions without any error.Update: Jquery 1.6+ has the new prop method which replaces attr, e.g.:",
                "If you are using PhoneGap doing application development, and you have a value on the button that you want to show instantly, remember to do thisI found that without the span, the interface will not update no matter what you do.",
                "Here is the code and demo for how to check multiple check boxes...http://jsfiddle.net/tamilmani/z8TTt/",
                "Another possible solution:",
                "As @livefree75 said:jQuery 1.5.x and belowYou can also extend the $.fn object with new methods:But in new versions of jQuery, we have to use something like this:jQuery 1.6+Then you can just do:",
                "If using mobile and you want the interface to update and show the checkbox as unchecked, use the following:",
                "For jQuery 1.6+For jQuery 1.5.x and belowTo check,",
                "To check and uncheck",
                "Be aware of memory leaks in Internet\u00a0Explorer prior to Internet\u00a0Explorer\u00a09, as the jQuery documentation states:In Internet Explorer prior to version 9, using .prop() to set a DOM\n  element property to anything other than a simple primitive value\n  (number, string, or boolean) can cause memory leaks if the property is\n  not removed (using .removeProp()) before the DOM element is removed\n  from the document. To safely set values on DOM objects without memory\n  leaks, use .data().",
                "This is probably the shortest and easiest solution:orEven shorter would be:Here is a jsFiddle as well.",
                "Plain JavaScript is very simple and much less overhead:Example here",
                "I couldn't get it working using:Both true and false would check the checkbox. What worked for me was:",
                "When you checked a checkbox like;it might not be enough. You should also call the function below;Especially when you removed the checkbox checked attribute.",
                "Here's the complete answer\nusing jQueryI test it and it works 100% :D",
                "In jQuery,orIn JavaScript,"
            ]
        },
        {
            "tag": "AngularJS",
            "patterns": [
                "\"Thinking in AngularJS\" if I have a jQuery background? [closed]",
                "How to AngularJS for jQuery background",
                "jQuery background",
                "AngularJS"
            ],
            "responses": [
                "In jQuery, you design a page, and then you make it dynamic. This is because jQuery was designed for augmentation and has grown incredibly from that simple premise.But in AngularJS, you must start from the ground up with your architecture in mind. Instead of starting by thinking \"I have this piece of the DOM and I want to make it do X\", you have to start with what you want to accomplish, then go about designing your application, and then finally go about designing your view.Similarly, don't start with the idea that jQuery does X, Y, and Z, so I'll just add AngularJS on top of that for models and controllers. This is really tempting when you're just starting out, which is why I always recommend that new AngularJS developers don't use jQuery at all, at least until they get used to doing things the \"Angular Way\".I've seen many developers here and on the mailing list create these elaborate solutions with jQuery plugins of 150 or 200 lines of code that they then glue into AngularJS with a collection of callbacks and $applys that are confusing and convoluted; but they eventually get it working! The problem is that in most cases that jQuery plugin could be rewritten in AngularJS in a fraction of the code, where suddenly everything becomes comprehensible and straightforward.The bottom line is this: when solutioning, first \"think in AngularJS\"; if you can't think of a solution, ask the community; if after all of that there is no easy solution, then feel free to reach for the jQuery. But don't let jQuery become a crutch or you'll never master AngularJS.First know that single-page applications are applications. They're not webpages. So we need to think like a server-side developer in addition to thinking like a client-side developer. We have to think about how to divide our application into individual, extensible, testable components.So then how do you do that? How do you \"think in AngularJS\"? Here are some general principles, contrasted with jQuery.In jQuery, we programmatically change the view. We could have a dropdown menu defined as a ul like so:In jQuery, in our application logic, we would activate it with something like:When we just look at the view, it's not immediately obvious that there is any functionality here. For small applications, that's fine. But for non-trivial applications, things quickly get confusing and hard to maintain.In AngularJS, though, the view is the official record of view-based functionality. Our ul declaration would look like this instead:These two do the same thing, but in the AngularJS version anyone looking at the template knows what's supposed to happen. Whenever a new member of the development team comes on board, she can look at this and then know that there is a directive called dropdownMenu operating on it; she doesn't need to intuit the right answer or sift through any code. The view told us what was supposed to happen. Much cleaner.Developers new to AngularJS often ask a question like: how do I find all links of a specific kind and add a directive onto them. The developer is always flabbergasted when we reply: you don't. But the reason you don't do that is that this is like half-jQuery, half-AngularJS, and no good. The problem here is that the developer is trying to \"do jQuery\" in the context of AngularJS. That's never going to work well. The view is the official record. Outside of a directive (more on this below), you never, ever, never change the DOM. And directives are applied in the view, so intent is clear.Remember: don't design, and then mark up. You must architect, and then design.This is by far one of the most awesome features of AngularJS and cuts out a lot of the need to do the kinds of DOM manipulations I mentioned in the previous section. AngularJS will automatically update your view so you don't have to! In jQuery, we respond to events and then update content. Something like:For a view that looks like this:Apart from mixing concerns, we also have the same problems of signifying intent that I mentioned before. But more importantly, we had to manually reference and update a DOM node. And if we want to delete a log entry, we have to code against the DOM for that too. How do we test the logic apart from the DOM? And what if we want to change the presentation?This a little messy and a trifle frail. But in AngularJS, we can do this:And our view can look like this:But for that matter, our view could look like this:And now instead of using an unordered list, we're using Bootstrap alert boxes. And we never had to change the controller code! But more importantly, no matter where or how the log gets updated, the view will change too. Automatically. Neat!Though I didn't show it here, the data binding is two-way. So those log messages could also be editable in the view just by doing this: <input ng-model=\"entry.msg\" />. And there was much rejoicing.In jQuery, the DOM is kind of like the model. But in AngularJS, we have a separate model layer that we can manage in any way we want, completely independently from the view. This helps for the above data binding, maintains separation of concerns, and introduces far greater testability. Other answers mentioned this point, so I'll just leave it at that.And all of the above tie into this over-arching theme: keep your concerns separate. Your view acts as the official record of what is supposed to happen (for the most part); your model represents your data; you have a service layer to perform reusable tasks; you do DOM manipulation and augment your view with directives; and you glue it all together with controllers. This was also mentioned in other answers, and the only thing I would add pertains to testability, which I discuss in another section below.To help us out with separation of concerns is dependency injection (DI). If you come from a server-side language (from Java to PHP) you're probably familiar with this concept already, but if you're a client-side guy coming from jQuery, this concept can seem anything from silly to superfluous to hipster. But it's not. :-)From a broad perspective, DI means that you can declare components very freely and then from any other component, just ask for an instance of it and it will be granted. You don't have to know about loading order, or file locations, or anything like that. The power may not immediately be visible, but I'll provide just one (common) example: testing.Let's say in our application, we require a service that implements server-side storage through a REST API and, depending on application state, local storage as well. When running tests on our controllers, we don't want to have to communicate with the server - we're testing the controller, after all. We can just add a mock service of the same name as our original component, and the injector will ensure that our controller gets the fake one automatically - our controller doesn't and needn't know the difference.Speaking of testing...This is really part of section 3 on architecture, but it's so important that I'm putting it as its own top-level section.Out of all of the many jQuery plugins you've seen, used, or written, how many of them had an accompanying test suite? Not very many because jQuery isn't very amenable to that. But AngularJS is.In jQuery, the only way to test is often to create the component independently with a sample/demo page against which our tests can perform DOM manipulation. So then we have to develop a component separately and then integrate it into our application. How inconvenient! So much of the time, when developing with jQuery, we opt for iterative instead of test-driven development. And who could blame us?But because we have separation of concerns, we can do test-driven development iteratively in AngularJS! For example, let's say we want a super-simple directive to indicate in our menu what our current route is. We can declare what we want in the view of our application:Okay, now we can write a test for the non-existent when-active directive:And when we run our test, we can confirm that it fails. Only now should we create our directive:Our test now passes and our menu performs as requested. Our development is both iterative and test-driven. Wicked-cool.You'll often hear \"only do DOM manipulation in a directive\". This is a necessity. Treat it with due deference!But let's dive a little deeper...Some directives just decorate what's already in the view (think ngClass) and therefore sometimes do DOM manipulation straight away and then are basically done. But if a directive is like a \"widget\" and has a template, it should also respect separation of concerns. That is, the template too should remain largely independent from its implementation in the link and controller functions.AngularJS comes with an entire set of tools to make this very easy; with ngClass we can dynamically update the class; ngModel allows two-way data binding; ngShow and ngHide programmatically show or hide an element; and many more - including the ones we write ourselves. In other words, we can do all kinds of awesomeness without DOM manipulation. The less DOM manipulation, the easier directives are to test, the easier they are to style, the easier they are to change in the future, and the more re-usable and distributable they are.I see lots of developers new to AngularJS using directives as the place to throw a bunch of jQuery. In other words, they think \"since I can't do DOM manipulation in the controller, I'll take that code put it in a directive\". While that certainly is much better, it's often still wrong.Think of the logger we programmed in section 3. Even if we put that in a directive, we still want to do it the \"Angular Way\". It still doesn't take any DOM manipulation! There are lots of times when DOM manipulation is necessary, but it's a lot rarer than you think! Before doing DOM manipulation anywhere in your application, ask yourself if you really need to. There might be a better way.Here's a quick example that shows the pattern I see most frequently. We want a toggleable button. (Note: this example is a little contrived and a skosh verbose to represent more complicated cases that are solved in exactly the same way.)There are a few things wrong with this:This directive can be rewritten (even for very complicated cases!) much more simply like so:Again, the template stuff is in the template, so you (or your users) can easily swap it out for one that meets any style necessary, and the logic never had to be touched. Reusability - boom!And there are still all those other benefits, like testing - it's easy! No matter what's in the template, the directive's internal API is never touched, so refactoring is easy. You can change the template as much as you want without touching the directive. And no matter what you change, your tests still pass.w00t!So if directives aren't just collections of jQuery-like functions, what are they? Directives are actually extensions of HTML. If HTML doesn't do something you need it to do, you write a directive to do it for you, and then use it just as if it was part of HTML.Put another way, if AngularJS doesn't do something out of the box, think how the team would accomplish it to fit right in with ngClick, ngClass, et al.Don't even use jQuery. Don't even include it. It will hold you back. And when you come to a problem that you think you know how to solve in jQuery already, before you reach for the $, try to think about how to do it within the confines the AngularJS. If you don't know, ask! 19 times out of 20, the best way to do it doesn't need jQuery and to try to solve it with jQuery results in more work for you.",
                "In jQuery, selectors are used to find DOM elements and then bind/register event handlers to them. When an event triggers, that (imperative) code executes to update/change the DOM.In AngularJS, you want to think about views rather than DOM elements. Views are (declarative) HTML that contain AngularJS directives. Directives set up the event handlers behind the scenes for us and give us dynamic databinding. Selectors are rarely used, so the need for IDs (and some types of classes) is greatly diminished. Views are tied to models (via scopes). Views are a projection of the model. Events change models (that is, data, scope properties), and the views that project those models update \"automatically.\"In AngularJS, think about models, rather than jQuery-selected DOM elements that hold your data. Think about views as projections of those models, rather than registering callbacks to manipulate what the user sees.jQuery employs unobtrusive JavaScript - behavior (JavaScript) is separated from the structure (HTML).AngularJS uses controllers and directives (each of which can have their own controller, and/or compile and linking functions) to remove behavior from the view/structure (HTML).  Angular also has services and filters to help separate/organize your application.See also https://stackoverflow.com/a/14346528/215945One approach to designing an AngularJS application:You can do a lot with jQuery without knowing about how JavaScript prototypal inheritance works. When developing AngularJS applications, you will avoid some common pitfalls if you have a good understanding of JavaScript inheritance. Recommended reading: What are the nuances of scope prototypal / prototypical inheritance in AngularJS?",
                "AngularJS and jQuery adopt very different ideologies. If you're coming from jQuery you may find some of the differences surprising. Angular may make you angry.This is normal, you should push through. Angular is worth it.jQuery gives you a toolkit for selecting arbitrary bits of the DOM and making ad-hoc changes to them. You can do pretty much anything you like piece by piece.AngularJS instead gives you a compiler.What this means is that AngularJS reads your entire DOM from top to bottom and treats it as code, literally as instructions to the compiler. As it traverses the DOM, It looks for specific directives (compiler directives) that tell the AngularJS compiler how to behave and what to do. Directives are little objects full of JavaScript which can match against attributes, tags, classes or even comments.When the Angular compiler determines that a piece of the DOM matches a particular directive, it calls the directive function, passing it the DOM element, any attributes, the current $scope (which is a local variable store), and some other useful bits. These attributes may contain expressions which can be interpreted by the Directive, and which tell it how to render, and when it should redraw itself.Directives can then in turn pull in additional Angular components such as controllers, services, etc. What comes out the bottom of the compiler is a fully formed web application, wired up and ready to go.This means that Angular is Template Driven. Your template drives the JavaScript, not the other way around. This is a radical reversal of roles, and the complete opposite of the unobtrusive JavaScript we have been writing for the last 10 years or so. This can take some getting used to.If this sounds like it might be over-prescriptive and limiting, nothing could be farther from the truth. Because AngularJS treats your HTML as code, you get HTML level granularity in your web application. Everything is possible, and most things are surprisingly easy once you make a few conceptual leaps.Let's get down to the nitty gritty.Angular and jQuery do different things. AngularJS gives you a set of tools to produce web applications. jQuery mainly gives you tools for modifying the DOM. If jQuery is present on your page, AngularJS will use it automatically. If it isn't, AngularJS ships with jQuery Lite, which is a cut down, but still perfectly usable version of jQuery.Misko likes jQuery and doesn't object to you using it. However you will find as you advance that you can get a pretty much all of your work done using a combination of scope, templates and directives, and you should prefer this workflow where possible because your code will be more discrete, more configurable, and more Angular.If you do use jQuery, you shouldn't be sprinkling it all over the place. The correct place for DOM manipulation in AngularJS is in a directive. More on these later.jQuery is typically applied unobtrusively. Your JavaScript code is linked in the header (or the footer), and this is the only place it is mentioned. We use selectors to pick out bits of the page and write plugins to modify those parts.The JavaScript is in control. The HTML has a completely independent existence. Your HTML remains semantic even without JavaScript. Onclick attributes are very bad practice.One of the first things your will notice about AngularJS is that custom attributes are everywhere. Your HTML will be littered with ng attributes, which are essentially onClick attributes on steroids. These are directives (compiler directives), and are one of the main ways in which the template is hooked to the model.When you first see this you might be tempted to write AngularJS off as old school intrusive JavaScript (like I did at first). In fact, AngularJS does not play by those rules. In AngularJS, your HTML5 is a template. It is compiled by AngularJS to produce your web page.This is the first big difference. To jQuery, your web page is a DOM to be manipulated. To AngularJS, your HTML is code to be compiled. AngularJS reads in your whole web page and literally compiles it into a new web page using its built in compiler.Your template should be declarative; its meaning should be clear simply by reading it. We use custom attributes with meaningful names. We make up new HTML elements, again with meaningful names. A designer with minimal HTML knowledge and no coding skill can read your AngularJS template and understand what it is doing. He or she can make modifications. This is the Angular way.One of the first questions I asked myself when starting AngularJS and running through the tutorials is \"Where is my code?\". I've written no JavaScript, and yet I have all this behaviour. The answer is obvious. Because AngularJS compiles the DOM, AngularJS is treating your HTML as code. For many simple cases it's often sufficient to just write a template and let AngularJS compile it into an application for you.Your template drives your application. It's treated as a DSL. You write AngularJS components, and AngularJS will take care of pulling them in and making them available at the right time based on the structure of your template. This is very different to a standard MVC pattern, where the template is just for output.It's more similar to XSLT than Ruby on Rails for example.This is a radical inversion of control that takes some getting used to.Stop trying to drive your application from your JavaScript. Let the template drive the application, and let AngularJS take care of wiring the components together. This also is the Angular way.With jQuery your HTML page should contain semantic meaningful content. If the JavaScript is turned off (by a user or search engine) your content remains accessible.Because AngularJS treats your HTML page as a template. The template is not supposed to be semantic as your content is typically stored in your model which ultimately comes from your API. AngularJS compiles your DOM with the model to produce a semantic web page.Your HTML source is no longer semantic, instead, your API and compiled DOM are semantic.In AngularJS, meaning lives in the model, the HTML is just a template, for display only.At this point you likely have all sorts of questions concerning SEO and accessibility, and rightly so. There are open issues here. Most screen readers will now parse JavaScript. Search engines can also index AJAXed content. Nevertheless, you will want to make sure you are using pushstate URLs and you have a decent sitemap. See here for a discussion of the issue: https://stackoverflow.com/a/23245379/687677Separation of concerns (SOC) is a pattern that grew up over many years of web development for a variety of reasons including SEO, accessibility and browser incompatibility. It looks like this:Again, AngularJS does not play by their rules. In a stroke, AngularJS does away with a decade of received wisdom and instead implements an MVC pattern in which the template is no longer semantic, not even a little bit.It looks like this:MVC and SOC are not on opposite ends of the same scale, they are on completely different axes. SOC makes no sense in an AngularJS context. You have to forget it and move on.If, like me, you lived through the browser wars, you might find this idea quite offensive. Get over it, it'll be worth it, I promise.Plugins extend jQuery. AngularJS Directives extend the capabilities of your browser.In jQuery we define plugins by adding functions to the jQuery.prototype. We then hook these into the DOM by selecting elements and calling the plugin on the result. The idea is to extend the capabilities of jQuery.For example, if you want a carousel on your page, you might define an unordered list of figures, perhaps wrapped in a nav element. You might then write some jQuery to select the list on the page and restyle it as a gallery with timeouts to do the sliding animation.In AngularJS, we define directives. A directive is a function which returns a JSON object. This object tells AngularJS what DOM elements to look for, and what changes to make to them. Directives are hooked in to the template using either attributes or elements, which you invent. The idea is to extend the capabilities of HTML with new attributes and elements.The AngularJS way is to extend the capabilities of native looking HTML. You should write HTML that looks like HTML, extended with custom attributes and elements.If you want a carousel, just use a <carousel /> element, then define a directive to pull in a template, and make that sucker work.The tendency with jQuery is to write great big plugins like lightbox which we then configure by passing in numerous values and options.This is a mistake in AngularJS.Take the example of a dropdown. When writing a dropdown plugin you might be tempted to code in click handlers, perhaps a function to add in a chevron which is either up or down, perhaps change the class of the unfolded element, show hide the menu, all helpful stuff.Until you want to make a small change.Say you have a menu that you want to unfold on hover. Well now we have a problem. Our plugin has wired in our click handler for us, we're going to need to add a configuration option to make it behave differently in this specific case.In AngularJS we write smaller directives. Our dropdown directive would be ridiculously small. It might maintain the folded state, and provide methods to fold(), unfold() or toggle(). These methods would simply update $scope.menu.visible which is a boolean holding the state.Now in our template we can wire this up:Need to update on mouseover?The template drives the application so we get HTML level granularity. If we want to make case by case exceptions, the template makes this easy.JQuery plugins are created in a closure. Privacy is maintained within that closure. It's up to you to maintain your scope chain within that closure. You only really have access to the set of DOM nodes passed in to the plugin by jQuery, plus any local variables defined in the closure and any globals you have defined. This means that plugins are quite self contained. This is a good thing, but can get restrictive when creating a whole application. Trying to pass data between sections of a dynamic page becomes a chore.AngularJS has $scope objects. These are special objects created and maintained by AngularJS in which you store your model. Certain directives will spawn a new $scope, which by default inherits from its wrapping $scope using JavaScript prototypical inheritance. The $scope object is accessible in the controller and the view.This is the clever part. Because the structure of $scope inheritance roughly follows the structure of the DOM, elements have access to their own scope, and any containing scopes seamlessly, all the way up to the global $scope (which is not the same as the global scope).This makes it much easier to pass data around, and to store data at an appropriate level. If a dropdown is unfolded, only the dropdown $scope needs to know about it. If the user updates their preferences, you might want to update the global $scope, and any nested scopes listening to the user preferences would automatically be alerted.This might sound complicated, in fact, once you relax into it, it's like flying. You don't need to create the $scope object, AngularJS instantiates and configures it for you, correctly and appropriately based on your template hierarchy. AngularJS then makes it available to your component using the magic of dependency injection (more on this later).In jQuery you make all your DOM changes by hand. You construct new DOM elements programatically. If you have a JSON array and you want to put it to the DOM, you must write a function to generate the HTML and insert it.In AngularJS you can do this too, but you are encouraged to make use of data binding. Change your model, and because the DOM is bound to it via a template your DOM will automatically update, no intervention required.Because data binding is done from the template, using either an attribute or the curly brace syntax, it's super easy to do. There's little cognitive overhead associated with it so you'll find yourself doing it all the time.Binds the input element to $scope.user.name. Updating the input will update the value in your current scope, and vice-versa.Likewise:will output the user name in a paragraph. It's a live binding, so if the $scope.user.name value is updated, the template will update too.In jQuery making an Ajax call is fairly simple, but it's still something you might think twice about. There's the added complexity to think about, and a fair chunk of script to maintain.In AngularJS, Ajax is your default go-to solution and it happens all the time, almost without you noticing. You can include templates with ng-include. You can apply a template with the simplest custom directive. You can wrap an Ajax call in a service and create yourself a GitHub service, or a Flickr service, which you can access with astonishing ease.In jQuery, if we want to accomplish a small non-dom related task such as pulling a feed from an API, we might write a little function to do that in our closure. That's a valid solution, but what if we  want to access that feed often? What if we want to reuse that code in another application?AngularJS gives us service objects.Services are simple objects that contain functions and data. They are always singletons, meaning there can never be more than one of them. Say we want to access the Stack Overflow API, we might write a StackOverflowService which defines methods for doing so.Let's say we have a shopping cart. We might define a ShoppingCartService which maintains our cart and contains methods for adding and removing items. Because the service is a singleton, and is shared by all other components, any object that needs to can write to the shopping cart and pull data from it. It's always the same cart.Service objects are self-contained AngularJS components which we can use and reuse as we see fit. They are simple JSON objects containing functions and Data. They are always singletons, so if you store data on a service in one place, you can get that data out somewhere else just by requesting the same service.AngularJS manages your dependencies for you. If you want an object, simply refer to it and AngularJS will get it for you.Until you start to use this, it's hard to explain just what a massive time boon this is. Nothing like AngularJS DI exists inside jQuery.DI means that instead of writing your application and wiring it together, you instead define a library of components, each identified by a string.Say I have a component called 'FlickrService' which defines methods for pulling JSON feeds from Flickr. Now, if I want to write a controller that can access Flickr, I just need to refer to the 'FlickrService' by name when I declare the controller. AngularJS will take care of instantiating the component and making it available to my controller.For example, here I define a service:Now when I want to use that service I just refer to it by name like this:AngularJS will recognise that a FlickrService object is needed to instantiate the controller, and will provide one for us.This makes wiring things together very easy, and pretty much eliminates any tendency towards spagettification. We have a flat list of components, and AngularJS hands them to us one by one as and when we need them.jQuery says very little about how you should organise your code. AngularJS has opinions.AngularJS gives you modules into which you can place your code. If you're writing a script that talks to Flickr for example, you might want to create a Flickr module to wrap all your Flickr related functions in. Modules can include other modules (DI). Your main application is usually a module, and this should include all the other modules your application will depend on.You get simple code reuse, if you want to write another application based on Flickr, you can just include the Flickr module and voila, you have access to all your Flickr related functions in your new application.Modules contain AngularJS components. When we include a module, all the components in that module become available to us as a simple list identified by their unique strings. We can then inject those components into each other using AngularJS's dependency injection mechanism.AngularJS and jQuery are not enemies. It's possible to use jQuery within AngularJS very nicely. If you're using AngularJS well (templates, data-binding, $scope, directives, etc.) you will find you need a lot less jQuery than you might otherwise require.The main thing to realise is that your template drives your application. Stop trying to write big plugins that do everything. Instead write little directives that do one thing, then write a simple template to wire them together.Think less about unobtrusive JavaScript, and instead think in terms of HTML extensions.I got so excited about AngularJS, I wrote a short book on it which you're very welcome to read online http://nicholasjohnson.com/angular-book/. I hope it's helpful.",
                "Can you describe the paradigm shift that is necessary?Imperative vs DeclarativeWith jQuery you tell the DOM what needs to happen, step by step. With AngularJS you describe what results you want but not how to do it. More on this here. Also, check out Mark Rajcok's answer.How do I architect and design client-side web apps differently?AngularJS is an entire client-side framework that uses the MVC pattern (check out their graphical representation). It greatly focuses on separation of concerns.What is the biggest difference? What should I stop doing/using; what should I start doing/using instead?jQuery is a libraryAngularJS is a beautiful client-side framework, highly testable, that combines tons of cool stuff such as MVC, dependency injection, data binding and much more.It focuses on separation of concerns and testing (unit testing and end-to-end testing), which facilitates test-driven development.The best way to start is going through their awesome tutorial. You can go through the steps in a couple of hours; however, in case you want to master the concepts behind the scenes, they include a myriad of reference for further reading.Are there any server-side considerations/restrictions?You may use it on existing applications where you are already using pure jQuery. However, if you want to fully take advantage of the AngularJS features you may consider coding the server side using a RESTful approach.Doing so will allow you to leverage their resource factory, which creates an abstraction of your server side RESTful API and makes server-side calls (get, save, delete, etc.) incredibly easy.",
                "To describe the \"paradigm shift\", I think a short answer can suffice.In jQuery, you typically  use selectors to find elements, and then wire them up:\n$('#id .class').click(doStuff);In AngularJS, you use directives to mark the elements directly, to wire them up:\n<a ng-click=\"doStuff()\">AngularJS doesn't need (or want) you to find elements using selectors - the primary difference between AngularJS's jqLite versus full-blown jQuery is that jqLite does not support selectors.So when people say \"don't include jQuery at all\", it's mainly because they don't want you to use selectors; they want you to learn to use directives instead. Direct, not select!",
                "jQuery makes ridiculously long JavaScript commands like getElementByHerpDerp shorter and cross-browser.AngularJS allows you to make your own HTML tags/attributes that do things which work well with dynamic web applications (since HTML was designed for static pages).Saying \"I have a jQuery background how do I think in AngularJS?\" is like saying \"I have an HTML background how do I think in JavaScript?\" The fact that you're asking the question shows you most likely don't understand the fundamental purposes of these two resources. This is why I chose to answer the question by simply pointing out the fundamental difference rather than going through the list saying \"AngularJS makes use of directives whereas jQuery uses CSS selectors to make a jQuery object which does this and that etc....\". This question does not require a lengthy answer.jQuery is a way to make programming JavaScript in the browser easier. Shorter, cross-browser commands, etc.AngularJS extends HTML, so you don't have to put <div> all over the place just to make an application. It makes HTML actually work for applications rather than what it was designed for, which is static, educational web pages. It accomplishes this in a roundabout way using JavaScript, but fundamentally it is an extension of HTML, not JavaScript.",
                "jQuery: you think a lot about 'QUERYing the DOM' for DOM elements and doing something.AngularJS: THE model is the truth, and you always think from that ANGLE.For example, when you get data from THE server which you intend to display in some format in the DOM, in jQuery, you need to '1. FIND' where in the DOM you want to place this data, the '2. UPDATE/APPEND' it there by creating a new node or just setting its innerHTML. Then when you want to update this view, you then '3. FIND' the location and '4. UPDATE'. This cycle of find and update all done within the same context of getting and formatting data from server is gone in AngularJS.With AngularJS you have your model (JavaScript objects you are already used to) and the value of the model tells you about the model (obviously) and about the view, and an operation on the model automatically propagates to the view, so you don't have to think about it. You will find yourself in AngularJS no longer finding things in the DOM.To put in another way, in jQuery, you need to think about CSS selectors, that is, where is the div or td that has a class or attribute, etc., so that I can get their HTML or color or value, but in AngularJS, you will find yourself thinking like this: what model am I dealing with, I will set the model's value to true. You are not bothering yourself of whether the view reflecting this value is a checked box or resides in a td element (details you would have often needed to think about in jQuery).And with DOM manipulation in AngularJS, you find yourself adding directives and filters, which you can think of as valid HTML extensions.One more thing you will experience in AngularJS: in jQuery you call the jQuery functions a lot, in AngularJS, AngularJS will call your functions, so AngularJS will 'tell you how to do things', but the benefits are worth it, so learning AngularJS usually means learning what AngularJS wants or the way AngularJS requires that you present your functions and it will call it accordingly. This is one of the things that makes AngularJS a framework rather than a library.",
                "Those are some very nice, but lengthy answers.To sum up my experiences:",
                "jQuery is a DOM manipulation library.AngularJS is an MV* framework.In fact, AngularJS is one of the few JavaScript MV* frameworks (many JavaScript MVC tools still fall under the category library).Being a framework, it hosts your code and takes ownership of decisions about what to call and when!AngularJS itself includes a jQuery-lite edition within it. So for some basic DOM selection/manipulation, you really don't have to include the jQuery library (it saves many bytes to run on the network.)AngularJS has the concept of \"Directives\" for DOM manipulation and designing reusable UI components, so you should use it whenever you feel the need of doing DOM manipulation related stuff (directives are only place where you should write jQuery code while using AngularJS).AngularJS involves some learning curve (more than jQuery :-).-->For any developer coming from jQuery background, my first advice would be to \"learn JavaScript as a first class language before jumping onto a rich framework like AngularJS!\"\nI learned the above fact the hard way.Good luck.",
                "They're apples and oranges. You don't want to compare them. They're two different things. AngularJs has already jQuery lite built in which allows you to perform basic DOM manipulation without even including the full blown jQuery version.jQuery is all about DOM manipulation. It solves all the cross browser pain otherwise you will have to deal with but it's not a framework that allows you to divide your app into components like AngularJS.A nice thing about AngularJs is that it allows you to separate/isolate the DOM manipulation in the directives.  There are built-in directives ready for you to use such as ng-click. You can create your own custom directives that will contain all your view logic or DOM manipulation so you don't end up mingle DOM manipulation code in the controllers or services that should take care of the business logic.Angular breaks down your app into \n- Controllers\n- Services\n- Views\n- etc.and there is one more thing, that's the directive. It's an attribute  you can attach to any DOM element and you can go nuts with jQuery within it without worrying about your jQuery ever conflicts with AngularJs components or messes up with its architecture.I heard from a meetup I attended, one of the founders of Angular said they worked really hard to separate out the DOM manipulation so do not try to include them back in.",
                "Listen to the podcast JavaScript Jabber: Episode #32 that features the original creators of AngularJS: Misko Hevery & Igor Minar. They talk a lot about what it's like to come to AngularJS from other JavaScript backgrounds, especially jQuery.One of the points made in the podcast made a lot of things click for me with respects to your question:MISKO: [...] one of the things we thought about very hardly in Angular is, how do we provide lots of escape hatches so that you can get out and basically figure out a way out of this. So to us, the answer is this thing called \u201cDirectives\u201d. And with directives, you essentially become a regular little jQuery JavaScript, you can do whatever you want.IGOR: So think of directive as the instruction to the compiler that tells it whenever you come across this certain element or this CSS in the template, and you keep this kind of code and that code is in charge of the element and everything below that element in the DOM tree.A transcript of the entire episode is available at the link provided above.So, to directly answer your question: AngularJS is -very- opinionated and is a true MV* framework. However, you can still do all of the really cool stuff you know and love with jQuery inside of directives. It's not a matter of \"How do I do what I used to in jQuery?\" as much as it's a matter of \"How do I supplement AngularJS with all of the stuff I used to do in jQuery?\"It's really two very different states of mind.",
                "I find this question interesting, because my first serious exposure to JavaScript programming was Node.js and AngularJS. I never learned jQuery, and I guess that's a good thing, because I don't have to unlearn anything. In fact, I actively avoid jQuery solutions to my problems, and instead, solely look for an \"AngularJS way\" to solve them. So, I guess my answer to this question would essentially boil down to, \"think like someone who never learned jQuery\" and avoid any temptation to incorporate jQuery directly (obviously AngularJS uses it to some extent behind the scenes).",
                "AngularJS and jQuery:AngularJs and JQuery are completely different at every level except the JQLite functionality and you will see it once you start learning the AngularJs core features (I explained it below).AngularJs is a client side framework that offers to build the independent client side application. JQuery is a client side library that play around the DOM.AngularJs Cool Principle - If you want some changes on your UI think from model data change perspective. Change your data and UI will re-render itself. You need not to play around DOM each time unless and until it is hardly required and that should also be handled through Angular Directives.To answer this question, I want to share my experience on the first enterprise application with AngularJS. These are the most awesome features that Angular provide where we start changing our jQuery mindset and we get the Angular like a framework and not the library.Two-way data binding is amazing: \nI had a grid with all functionality UPDATE, DELTE, INSERT. I have a data object that binds the grid's model using ng-repeat. You only need to write a single line of simple JavaScript code for delete and insert and that's it. grid automatically updates as the grid model changes instantly. Update functionality is real time, no code for it.\nYou feel amazing!!!Reusable directives are super:\nWrite directives in one place and use it throughout the application. OMG!!! I used these directive for paging, regex, validations, etc. It is really cool!Routing is strong:\nIt's up to your implementation how you want to use it, but it requires very few lines of code to route the request to specify HTML and controller (JavaScript)Controllers are great:\nControllers take care of their own HTML, but this separation works well for common functionality well as. If you want to call the same function on the click of a button on master HTML, just write the same function name in each controller and write individual code.Plugins:\nThere are many other similar features like showing an overlay in your app. You don't need to write code for it, just use an overlay plugin available as wc-overlay, and this will automatically take care of all XMLHttpRequest (XHR) requests.Ideal for RESTful architecture:\nBeing a complete frameworks makes AngularJS great to work with a RESTful architecture. To call REST CRUD APIs is very easier andServices: Write common codes using services and less code in controllers. Sevices can be used to share common functionalities among the controllers.Extensibility: Angular has extended the HTML directives using angular directives. Write expressions inside html and evaluate them on runtime. Create your own directives and services and use them in another project without any extra effort.",
                "As a JavaScript MV* beginner and purely focusing on the application architecture (not the server/client-side matters), I would certainly recommend the following resource (which I am surprised wasn't mentioned yet): JavaScript Design Patterns, by Addy Osmani, as an introduction to different JavaScript Design Patterns. The terms used in this answer are taken from the linked document above. I'm not going to repeat what was worded really well in the accepted answer. Instead, this answer links back to the theoretical backgrounds which power AngularJS (and other libraries).Like me, you will quickly realize that AngularJS (or Ember.js, Durandal, & other MV* frameworks for that matter) is one complex framework assembling many of the different JavaScript design patterns.I found it easier also, to test (1) native JavaScript code and (2) smaller libraries for each one of these patterns separately before diving into one global framework. This allowed me to better understand which crucial issues a framework adresses (because you are personally faced with the problem).For example:NB: This list is not complete, nor 'the best libraries'; they just happen to be the libraries I used. These libraries also include more patterns, the ones mentioned are just their main focuses or original intents. If you feel something is missing from this list, please do mention it in the comments, and I will be glad to add it.",
                "Actually, if you're using AngularJS, you don't need jQuery anymore. AngularJS itself has the binding and directive, which is a very good \"replacement\" for most things you can do with jQuery.I usually develop mobile applications using AngularJS and Cordova. The ONLY thing from jQuery I needed is the Selector.By googling, I see that there is a standalone jQuery selector module out there. It's Sizzle.And I decided to make a tiny code snippet that help me quickly start a website using AngularJS with the power of jQuery Selector (using Sizzle).I shared my code here: https://github.com/huytd/Sizzular"
            ]
        },
        {
            "tag": "while(1)",
            "patterns": [
                "Why does Google prepend while(1); to their JSON responses?",
                "while(1)",
                "while(1) in JSON responses"
            ],
            "responses": [
                "It prevents JSON hijacking, a major JSON security issue that is formally fixed in all major browsers since 2011 with ECMAScript 5.Contrived example: say Google has a URL like mail.google.com/json?action=inbox which returns the first 50 messages of your inbox in JSON format. Evil websites on other domains can't make AJAX requests to get this data due to the same-origin policy, but they can include the URL via a <script> tag. The URL is visited with your cookies, and by overriding the global array constructor or accessor methods they can have a method called whenever an object (array or hash) attribute is set, allowing them to read the JSON content.The while(1); or &&&BLAH&&& prevents this: an AJAX request at mail.google.com will have full access to the text content, and can strip it away. But a <script> tag insertion blindly executes the JavaScript without any processing, resulting in either an infinite loop or a syntax error.This does not address the issue of cross-site request forgery.",
                "It prevents disclosure of the response through JSON hijacking.In theory, the content of HTTP responses is protected by the Same Origin Policy: pages from one domain cannot get any pieces of information from pages on the other domain (unless explicitly allowed).An attacker can request pages on other domains on your behalf, e.g. by using a <script src=...> or <img> tag, but it can't get any information about the result (headers, contents).Thus, if you visit an attacker's page, it couldn't read your email from gmail.com.Except that when using a script tag to request JSON content, the JSON is executed as JavaScript in an attacker's controlled environment. If the attacker can replace the Array or Object constructor or some other method used during object construction, anything in the JSON would pass through the attacker's code, and be disclosed.Note that this happens when the JSON is executed as JavaScript, not when it's parsed.There are multiple countermeasures:By placing a while(1); statement before the JSON data, Google ensures that the JSON data is never executed as JavaScript.Only a legitimate page could actually get the whole content, strip the while(1);, and parse the remainder as JSON.Things like for(;;); have been seen on Facebook for instance, with the same results.Similarly, adding invalid tokens before the JSON, like &&&START&&&, makes sure that it is never executed.This is OWASP recommended way to protect from JSON hijacking and is the less intrusive one.Similarly to the previous counter-measures, it makes sure that the JSON is never executed as JavaScript.A valid JSON object, when not enclosed by anything, is not valid in JavaScript, since the { } gets interpreted as a code block:This is however valid JSON:So, make sure you always return an Object at the top level of the response and make sure that the JSON is not valid JavaScript, while still being valid JSON.As noted by @hvd in the comments, the empty object {} is valid JavaScript, and knowing the object is empty may itself be valuable information.The OWASP way is less intrusive, as it needs no client library changes, and transfers valid JSON. It is unsure whether past or future browser bugs could defeat this, however.  As noted by @oriadam, it is unclear whether data could be leaked in a parse error through an error handling or not (e.g. window.onerror).Google's way requires a client library in order for it to support automatic de-serialization and can be considered to be safer with regard to browser bugs.Both methods require server-side changes in order to avoid developers accidentally sending vulnerable JSON.",
                "This is to ensure some other site can't do nasty tricks to try to steal your data. For example, by replacing the array constructor, then including this JSON URL via a <script> tag, a malicious third-party site could steal the data from the JSON response. By putting a while(1); at the start, the script will hang instead.A same-site request using XHR and a separate JSON parser, on the other hand, can easily ignore the while(1); prefix.",
                "That would be to make it difficult for a third-party to insert the JSON response into an HTML document with the <script> tag. Remember that the <script> tag is exempt from the Same Origin Policy.",
                "Note: as of 2019, many of the old vulnerabilities that lead to the preventative measures discussed in this question are no longer an issue in modern browsers.  I'll leave the answer below as a historical curiosity, but really the whole topic has changed radically since 2010 (!!) when this was asked.It prevents it from being used as the target of a simple <script> tag. (Well, it doesn't prevent it, but it makes it unpleasant.)  That way bad guys can't just put that script tag in their own site and rely on an active session to make it possible to fetch your content.edit \u2014 note the comment (and other answers). The issue has to do with subverted built-in facilities, specifically the Object and Array constructors. Those can be altered such that otherwise innocuous JSON, when parsed, could trigger attacker code.",
                "Since the <script> tag is exempted from the Same Origin Policy which is a security necessity in the web world, while(1) when added to the JSON response prevents misuse of it in the <script> tag.",
                "As this is a High traffic post I hope to provide here an answer slightly more undetermined to the original question and thus provide further background on a JSON Hijacking attack and its consequencesJSON Hijacking as the name suggests is an attack similar to Cross-Site Request Forgery where an attacker can access cross-domain sensitive JSON data from applications that return sensitive data as array literals to GET requests. An example of a JSON call returning an array literal is shown below:This attack can be achieved in 3 major steps:Step 1: Get an authenticated user to visit a malicious page.\nStep 2: The malicious page will try and access sensitive data from the application that the user is logged into. This can be done by embedding a script tag in an HTML page since the same-origin policy does not apply to script tags.The browser will make a GET request to json_server.php and any authentication cookies of the user will be sent along with the request.\nStep 3: At this point, while the malicious site has executed the script it does not have access to any sensitive data. Getting access to the data can be achieved by using an object prototype setter. In the code below an object prototypes property is being bound to the defined function when an attempt is being made to set the \"ccnum\" property.At this point, the malicious site has successfully hijacked the sensitive financial data (ccnum) returned byjson_server.php\nJSONIt should be noted that not all browsers support this method; the proof of concept was done on Firefox 3.x.This method has now been deprecated and replaced by the useObject.defineProperty There is also a variation of this attack that should work on all browsers where full-named JavaScript (e.g. pi=3.14159) is returned instead of a JSON array.There are several ways in which JSON Hijacking can be prevented:Since SCRIPT tags can only generate HTTP GET requests, they only return JSON objects to POST\nrequests.Prevent the web browser from interpreting the JSON object as valid JavaScript code.Implement Cross-Site Request Forgery protection by requiring that a predefined random value be required for all JSON requests.so as you can see While(1) comes under the last option. In the most simple terms, while(1)  is an infinite loop that will run till a break statement is issued explicitly. And thus what would be described as a lock for the key to be applied (google break statement). Therefore a JSON hijacking, in which the Hacker has no key will be consistently dismissed. Alas, If you read the JSON block with a parser, the while(1) loop is ignored.So in conclusion, the while(1) loop can more easily be visualized as a simple break statement cypher that google can use to control the flow of data.However, the keyword in that statement is the word 'simple'. The usage of authenticated infinite loops has been thankfully removed from basic practice in the years since 2010 due to its absolute decimation of CPU usage when isolated (and the fact the internet has moved away from forcing through crude 'quick-fixes'). Today instead the codebase has embedded preventative measures, and the system is not crucial or effective anymore. (part of this is the move away from JSON Hijacking to more fruitful data farming techniques that I won't go into at present)",
                "After authentication is in place, JSON hijacking protection can take a\n  variety of forms. Google appends while(1) into their JSON data, so\n  that if any malicious script evaluates it, the malicious script enters\n  an infinite loop.Reference: Web Security Testing Cookbook: Systematic Techniques to Find Problems Fast"
            ]
        },
        {
            "tag": "href",
            "patterns": [
                "Which \"href\" value should I use for JavaScript links, \"#\" or \"javascript:void(0)\"?",
                "void(0)",
                "href for void(0)"
            ],
            "responses": [
                "I use javascript:void(0).Three reasons. Encouraging the use of # amongst a team of developers inevitably leads to some using the return value of the function called like this:But then they forget to use return doSomething() in the onclick and just use doSomething().A second reason for avoiding # is that the final return false; will not execute if the called function throws an error. Hence the developers have to also remember to handle any error appropriately in the called function.A third reason is that there are cases where the onclick event property is assigned dynamically.  I prefer to be able to call a function or assign it dynamically without having to code the function specifically for one method of attachment or another. Hence my onclick (or on anything) in HTML markup look like this:ORUsing javascript:void(0) avoids all of the above headaches, and I haven't found any examples of a downside.So if you're a lone developer then you can clearly make your own choice, but if you work as a team you have to either state:Use href=\"#\", make sure onclick always contains return false; at the end, that any called function does not throw an error and if you attach a function dynamically to the onclick property make sure that as well as not throwing an error it returns false.ORUse href=\"javascript:void(0)\"The second is clearly much easier to communicate.",
                "Neither.If you can have an actual URL that makes sense use that as the HREF.  The onclick won't fire if someone middle-clicks on your link to open a new tab or if they have JavaScript disabled.If that is not possible, then you should at least inject the anchor tag into the document with JavaScript and the appropriate click event handlers.I realize this isn't always possible, but in my opinion it should be striven for in developing any public website.Check out Unobtrusive JavaScript and Progressive enhancement (both Wikipedia).",
                "Doing <a href=\"#\" onclick=\"myJsFunc();\">Link</a> or <a href=\"javascript:void(0)\" onclick=\"myJsFunc();\">Link</a> or whatever else that contains an onclick attribute - was okay back five years ago, though now it can be a bad practice. Here's why:It promotes the practice of obtrusive JavaScript - which has turned out to be difficult to maintain and difficult to scale. More on this in Unobtrusive JavaScript.You're spending your time writing incredibly overly verbose code - which has very little (if any) benefit to your codebase.There are now better, easier, and more maintainable and scalable ways of accomplishing the desired result.Just don't have a href attribute at all! Any good CSS reset would take care of the missing default cursor style, so that is a non-issue. Then attach your JavaScript functionality using graceful and unobtrusive  best practices - which are more maintainable as your JavaScript logic stays in JavaScript, instead of in your markup - which is essential when you start developing large scale JavaScript applications which require your logic to be split up into blackboxed components and templates. More on this in Large-scale JavaScript Application Architecture// Cancel click event\r\n$('.cancel-action').click(function(){\r\n    alert('Cancel action occurs!');\r\n});\r\n\r\n// Hover shim for Internet Explorer 6 and Internet Explorer 7.\r\n$(document.body).on('hover','a',function(){\r\n    $(this).toggleClass('hover');\r\n});\na { cursor: pointer; color: blue; }\r\na:hover,a.hover { text-decoration: underline; }\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n<a class=\"cancel-action\">Cancel this action</a>For a scalable, blackboxed, Backbone.js component example - see this working jsfiddle example here. Notice how we utilize unobtrusive JavaScript practices, and in a tiny amount of code have a component that can be repeated across the page multiple times without side-effects or conflicts between the different component instances. Amazing!Omitting the href attribute on the a element will cause the element to not be accessible using tab key navigation. If you wish for those elements to be accessible via the tab key, you can set the tabindex attribute, or use button elements instead. You can easily style button elements to look like normal links as mentioned in Tracker1's answer.Omitting the href attribute on the a element will cause Internet\u00a0Explorer\u00a06 and Internet\u00a0Explorer\u00a07 to not take on the a:hover styling, which is why we have added a simple JavaScript shim to accomplish this via a.hover instead. Which is perfectly okay, as if you don't have a href attribute and no graceful degradation then your link won't work anyway - and you'll have bigger issues to worry about.If you want your action to still work with JavaScript disabled, then using an a element with a href attribute that goes to some URL that will perform the action manually instead of via an Ajax request or whatever should be the way to go. If you are doing this, then you want to ensure you do an event.preventDefault() on your click call to make sure when the button is clicked it does not follow the link. This option is called graceful degradation.",
                "'#' will take the user back to the top of the page, so I usually go with void(0).javascript:; also behaves like javascript:void(0);",
                "I would honestly suggest neither.  I would use a stylized <button></button> for that behavior.button.link {\r\n  display: inline-block;\r\n  position: relative;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  border: 0;\r\n  padding: 0;\r\n  color: #00f;\r\n  text-decoration: underline;\r\n  font: inherit;\r\n}\n<p>A button that looks like a <button type=\"button\" class=\"link\">link</button>.</p>This way you can assign your onclick.  I also suggest binding via script, not using the onclick attribute on the element tag.  The only gotcha is the psuedo 3d text effect in older IEs that cannot be disabled.If you MUST use an A element, use javascript:void(0); for reasons already mentioned.NOTE: You can replace the 0 with a string such as javascript:void('Delete record 123') which can serve as an extra indicator that will show what the click will actually do.",
                "The first one, ideally with a real link to follow in case the user has JavaScript disabled. Just make sure to return false to prevent the click event from firing if the JavaScript executes.If you use Angular2, this way works:<a [routerLink]=\"\" (click)=\"passTheSalt()\">Click me</a>.See here https://stackoverflow.com/a/45465728/2803344",
                "Neither if you ask me;If your \"link\" has the sole purpose of running some JavaScript code it doesn't qualify as a link; rather a piece of text with a JavaScript function coupled to it. I would recommend to use a <span> tag with an onclick handler attached to it and some basic CSS to immitate a link. Links are made for navigation, and if your JavaScript code isn't for navigation it should not be an <a> tag.Example:function callFunction() { console.log(\"function called\"); }\n.jsAction {\r\n    cursor: pointer;\r\n    color: #00f;\r\n    text-decoration: underline;\r\n}\n<p>I want to call a JavaScript function <span class=\"jsAction\" onclick=\"callFunction();\">here</span>.</p>",
                "Ideally you'd do this:Or, even better, you'd have the default action link in the HTML, and you'd add the onclick event to the element unobtrusively via JavaScript after the DOM renders, thus ensuring that if JavaScript is not present/utilized you don't have useless event handlers riddling your code and potentially obfuscating (or at least distracting from) your actual content.",
                "Using just # makes some funny movements, so I would recommend to use #self if you would like to save on typing efforts of JavaScript bla, bla,.",
                "I use the followinginstead",
                "I recommend using a <button> element instead, especially if the control is supposed to produce a change in the data. (Something like a POST.)It's even better if you inject the elements unobtrusively, a type of progressive enhancement. (See this comment.)",
                "I agree with suggestions elsewhere stating that you should use regular URL in href attribute, then call some JavaScript function in onclick. The flaw is, that they automaticaly add return false after the call.The problem with this approach is, that if the function will not work or if there will be any problem, the link will become unclickable. Onclick event will always return false, so the normal URL will not be called.There's very simple solution. Let function return true if it works correctly. Then use the returned value to determine if the click should be cancelled or not:JavaScriptHTMLNote, that I negate the result of the doSomething() function. If it works, it will return true, so it will be negated (false) and the path/to/some/URL will not be called. If the function will return false (for example, the browser doesn't support something used within the function or anything else goes wrong), it is negated to true and the path/to/some/URL is called.",
                "# is better than javascript:anything, but the following is even better:HTML:JavaScript:You should always strive for graceful degradation (in the event that the user doesn't have JavaScript enabled...and when it is with specs. and budget).  Also, it is considered bad form to use JavaScript attributes and protocol directly in HTML.",
                "Unless you're writing out the link using JavaScript (so that you know it's enabled in the browser), you should ideally be providing a proper link for people who are browsing with JavaScript disabled and then prevent the default action of the link in your onclick event handler. This way those with JavaScript enabled will run the function and those with JavaScript disabled will jump to an appropriate page (or location within the same page) rather than just clicking on the link and having nothing happen.",
                "Definitely hash (#) is better because in JavaScript it is a pseudoscheme:Of course \"#\" with an onclick handler which prevents default action is [much] better. Moreover, a link that has the sole purpose to run JavaScript is not really \"a link\" unless you are sending user to some sensible anchor on the page (just # will send to top) when something goes wrong. You can simply simulate look and feel of link with stylesheet and forget about href at all.In addition, regarding cowgod's suggestion, particularly this: ...href=\"javascript_required.html\" onclick=\"... This is good approach, but it doesn't distinguish between \"JavaScript disabled\" and \"onclick fails\" scenarios.",
                "I usually go forIt's shorter than javascript:void(0) and does the same.",
                "I would use:Reasons:",
                "I choose use javascript:void(0), because use this could prevent right click to open the content menu. But javascript:; is shorter and does the same thing.",
                "Don't use links for the sole purpose of running JavaScript.The use of href=\"#\" scrolls the page to the top; the use of void(0) creates navigational problems within the browser.Instead, use an element other than a link:And style it with CSS:",
                "So, when you are doing some JavaScript things with an <a /> tag and if you put href=\"#\" as well, you can add return false at the end of the event (in case of inline event binding) like:Or you can change the href attribute with JavaScript like:orBut semantically, all the above ways to achieve this are wrong (it works fine though). If any element is not created to navigate the page and that have some JavaScript things associated with it, then it should not be a <a> tag.You can simply use a <button /> instead to do things or any other element like b, span or whatever fits there as per your need, because you are allowed to add events on all the elements.So, there is one benefit to use <a href=\"#\">. You get the cursor pointer by default on that element when you do a href=\"#\". For that, I think you can use CSS for this like cursor:pointer; which solves this problem also.And at the end, if you are binding the event from the JavaScript code itself, there you can do event.preventDefault() to achieve this if you are using <a> tag, but if you are not using a <a> tag for this, there you get an advantage, you don't need to do this.So, if you see, it's better not to use a tag for this kind of stuff.",
                "It would be better to use jQuery,and omit both href=\"#\" and href=\"javascript:void(0)\".The anchor tag markup will be likeSimple enough!",
                "Usually, you should always have a fall back link to make sure that clients with JavaScript disabled still has some functionality. This concept is called unobtrusive JavaScript.Example... Let's say you have the following search link:You can always do the following:That way, people with JavaScript disabled are directed to search.php while your viewers with JavaScript view your enhanced functionality.",
                "If you happen to be using AngularJS, you can use the following:Which will not do anything.In addition",
                "Depending on what you want to accomplish, you could forget the onclick and just use the href:It gets around the need to return false. I don't like the # option because, as mentioned, it will take the user to the top of the page. If you have somewhere else to send the user if they don't have JavaScript enabled (which is rare where I work, but a very good idea), then Steve's proposed method works great.Lastly, you can use javascript:void(0) if you do not want anyone to go anywhere and if you don't want to call a JavaScript function. It works great if you have an image you want a mouseover event to happen with, but there's not anything for the user to click on.",
                "I believe you are presenting a false dichotomy. These are not the only two options.I agree with Mr. D4V360 who suggested that, even though you are using the anchor tag, you do not truly have an anchor here. All you have is a special section of a document that should behave slightly different. A <span> tag is far more appropriate.",
                "I tried both in google chrome with the developer tools, and the id=\"#\" took 0.32 seconds. While the javascript:void(0) method took only 0.18 seconds. So in google chrome, javascript:void(0) works better and faster.",
                "I personally use them in combination. For example:HTMLwith little bit of jQueryorBut I'm using that just for preventing the page jumping to the top when the user clicks on an empty anchor. I'm rarely using onClick and other on events directly in HTML.My suggestion would be to use <span> element with the class attribute instead of\nan anchor. For example:Then assign the function to .link with a script wrapped in the body and just before the </body> tag or in an external JavaScript document.*Note: For dynamically created elements, use:And for dynamically created elements which are created with dynamically created elements, use:Then you can style the span element to look like an anchor with a little CSS:Here's a jsFiddle example of above aforementioned.",
                "When I've got several faux-links, I prefer to give them a class of 'no-link'.Then in jQuery, I add the following code:And for the HTML, the link is simplyI don't like using Hash-Tags unless they're used for anchors, and I only do the above when I've got more than two faux-links, otherwise I go with javascript:void(0).Typically, I like to just avoid using a link at all and just wrap something around in a span and use that as a way to active some JavaScript code, like a pop-up or a content-reveal.",
                "On a modern website the use of href should be avoided if the element is only doing JavaScript functionality (not a real link).Why?\nThe presence of this element tells the browser that this is a link with a destination. \nWith that, the browser will show the Open In New Tab / Window function (also triggered when you use shift+click). \nDoing so will result in opening the same page without the desired function triggered (resulting in user frustration).In regards to IE:\nAs of IE8,  element styling (including hover) works if the doctype is set. Other versions of IE are not really to worry about anymore.Only Drawback:\nRemoving HREF removes the tabindex.\nTo overcome this, you can use a button that's styled as a link or add a tabindex attribute using JS.",
                "It's nice to have your site be accessible by users with JavaScript disabled, in which case the href points to a page that performs the same action as the JavaScript being executed. Otherwise I use \"#\" with a \"return false;\" to prevent the default action (scroll to top of the page) as others have mentioned.Googling for \"javascript:void(0)\" provides a lot of information on this topic. Some of them, like this one mention reasons to NOT use void(0)."
            ]
        },
        {
            "tag": "clipboard",
            "patterns": [
                "How do I copy to the clipboard in JavaScript?",
                "Copying to clipboard",
                "Copy to clipboard"
            ],
            "responses": [
                "There are three primary browser APIs for copying to the clipboard:Async Clipboard API [navigator.clipboard.writeText]document.execCommand('copy') (deprecated) \ud83d\udc4eOverriding the copy eventDon't expect clipboard related commands to work whilst you are testing code in the console. Generally, the page is required to be active (Async Clipboard API) or requires user interaction (e.g. a user click) to allow (document.execCommand('copy')) to access the clipboard see below for more detail.Note that since this post was originally written deprecation of permissions in cross-origin IFRAMEs and other IFRAME \"sandboxing\" prevents the embedded demos \"Run code snippet\" buttons and \"codepen.io example\" from working in some browsers (including Chrome and Microsoft Edge).To develop create your own web page, serve that page over an HTTPS connection to test and develop against.Here is a test/demo page which demonstrates the code working:\nhttps://deanmarktaylor.github.io/clipboard-test/Due to the level of browser support for the new Async Clipboard API, you will likely want to fall back to the document.execCommand('copy') method to get good browser coverage.Here is a simple example (may not work embedded in this site, read \"important\" note above):function fallbackCopyTextToClipboard(text) {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n  \n  // Avoid scrolling to bottom\n  textArea.style.top = \"0\";\n  textArea.style.left = \"0\";\n  textArea.style.position = \"fixed\";\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Fallback: Copying text command was ' + msg);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n}\nfunction copyTextToClipboard(text) {\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(function() {\n    console.log('Async: Copying to clipboard was successful!');\n  }, function(err) {\n    console.error('Async: Could not copy text: ', err);\n  });\n}\n\nvar copyBobBtn = document.querySelector('.js-copy-bob-btn'),\n  copyJaneBtn = document.querySelector('.js-copy-jane-btn');\n\ncopyBobBtn.addEventListener('click', function(event) {\n  copyTextToClipboard('Bob');\n});\n\n\ncopyJaneBtn.addEventListener('click', function(event) {\n  copyTextToClipboard('Jane');\n});\n<div style=\"display:inline-block; vertical-align:top;\">\n  <button class=\"js-copy-bob-btn\">Set clipboard to BOB</button><br /><br />\n  <button class=\"js-copy-jane-btn\">Set clipboard to JANE</button>\n</div>\n<div style=\"display:inline-block;\">\n  <textarea class=\"js-test-textarea\" cols=\"35\" rows=\"4\">Try pasting into here to see what you have on your clipboard:\n\n  </textarea>\n</div>(codepen.io example may not work, read \"important\" note above)\nNote that this snippet is not working well in Stack Overflow's embedded preview you can try it here: https://codepen.io/DeanMarkTaylor/pen/RMRaJX?editors=1011Note that there is an ability to \"request permission\" and test for access to the clipboard via the permissions API in Chrome 66.The rest of this post goes into the nuances and detail of the document.execCommand('copy') API.The JavaScript document.execCommand('copy') support has grown, see the links below for browser updates:  (deprecated) \ud83d\udc4e(may not work embedded in this site, read \"important\" note above)\n\n\nvar copyTextareaBtn = document.querySelector('.js-textareacopybtn');\n\ncopyTextareaBtn.addEventListener('click', function(event) {\n  var copyTextarea = document.querySelector('.js-copytextarea');\n  copyTextarea.focus();\n  copyTextarea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Copying text command was ' + msg);\n  } catch (err) {\n    console.log('Oops, unable to copy');\n  }\n});\n<p>\n  <button class=\"js-textareacopybtn\" style=\"vertical-align:top;\">Copy Textarea</button>\n  <textarea class=\"js-copytextarea\">Hello I'm some text</textarea>\n</p>The above simple example works great if there is a textarea or input element visible on the screen.In some cases, you might wish to copy text to the clipboard without displaying an input / textarea element. This is one example of a way to work around this (basically insert an element, copy to clipboard, remove element):Tested with Google Chrome 44, Firefox 42.0a1, and Internet Explorer 11.0.8600.17814.(may not work embedded in this site, read \"important\" note above)\n\n\nfunction copyTextToClipboard(text) {\n  var textArea = document.createElement(\"textarea\");\n\n  //\n  // *** This styling is an extra step which is likely not required. ***\n  //\n  // Why is it here? To ensure:\n  // 1. the element is able to have focus and selection.\n  // 2. if the element was to flash render it has minimal visual impact.\n  // 3. less flakyness with selection and copying which **might** occur if\n  //    the textarea element is not visible.\n  //\n  // The likelihood is the element won't even render, not even a\n  // flash, so some of these are just precautions. However in\n  // Internet Explorer the element is visible whilst the popup\n  // box asking the user for permission for the web page to\n  // copy to the clipboard.\n  //\n\n  // Place in the top-left corner of screen regardless of scroll position.\n  textArea.style.position = 'fixed';\n  textArea.style.top = 0;\n  textArea.style.left = 0;\n\n  // Ensure it has a small width and height. Setting to 1px / 1em\n  // doesn't work as this gives a negative w/h on some browsers.\n  textArea.style.width = '2em';\n  textArea.style.height = '2em';\n\n  // We don't need padding, reducing the size if it does flash render.\n  textArea.style.padding = 0;\n\n  // Clean up any borders.\n  textArea.style.border = 'none';\n  textArea.style.outline = 'none';\n  textArea.style.boxShadow = 'none';\n\n  // Avoid flash of the white box if rendered for any reason.\n  textArea.style.background = 'transparent';\n\n\n  textArea.value = text;\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Copying text command was ' + msg);\n  } catch (err) {\n    console.log('Oops, unable to copy');\n  }\n\n  document.body.removeChild(textArea);\n}\n\n\nvar copyBobBtn = document.querySelector('.js-copy-bob-btn'),\n  copyJaneBtn = document.querySelector('.js-copy-jane-btn');\n\ncopyBobBtn.addEventListener('click', function(event) {\n  copyTextToClipboard('Bob');\n});\n\n\ncopyJaneBtn.addEventListener('click', function(event) {\n  copyTextToClipboard('Jane');\n});\n<div style=\"display:inline-block; vertical-align:top;\">\n  <button class=\"js-copy-bob-btn\">Set clipboard to BOB</button><br /><br />\n  <button class=\"js-copy-jane-btn\">Set clipboard to JANE</button>\n</div>\n<div style=\"display:inline-block;\">\n  <textarea class=\"js-test-textarea\" cols=\"35\" rows=\"4\">Try pasting into here to see what you have on your clipboard:\n\n  </textarea>\n</div>All document.execCommand('copy') calls must take place as a direct result of a user action, e.g. click event handler. This is a measure to prevent messing with the user's clipboard when they don't expect it.See the Google Developers post here for more info.Note the full Clipboard API draft specification can be found here:\nhttps://w3c.github.io/clipboard-apis/However, as an example of browser compatibility issues, Google Chrome from ~April to ~October 2015 only returned true from document.queryCommandSupported('copy') if the command was called from a user-initiated thread.Note compatibility detail below.Whilst a simple call to document.execCommand('copy') wrapped in a try/catch block called as a result of a user click will get you the most compatibility use the following has some provisos:Any call to document.execCommand, document.queryCommandSupported or document.queryCommandEnabled should be wrapped in a try/catch block.Different browser implementations and browser versions throw differing types of exceptions when called instead of returning false.Different browser implementations are still in flux and the Clipboard API is still in draft, so remember to do your testing.",
                "Automatic copying to the clipboard may be dangerous, and therefore most browsers (except Internet\u00a0Explorer) make it very difficult. Personally, I use the following simple trick:The user is presented with the prompt box, where the text to be copied is already selected. Now it's enough to press Ctrl + C and Enter (to close the box) -- and voila!Now the clipboard copy operation is safe, because the user does it manually (but in a pretty straightforward way). Of course, it works in all browsers.<button id=\"demo\" onclick=\"copyToClipboard(document.getElementById('demo').innerHTML)\">This is what I want to copy</button>\n\n<script>\n  function copyToClipboard(text) {\n    window.prompt(\"Copy to clipboard: Ctrl+C, Enter\", text);\n  }\n</script>",
                "The following approach works in Chrome, Firefox, Internet Explorer and Edge, and in recent versions of Safari (copy support was added in version 10 which was released Oct 2016).Note: you will not see the textarea, as it is added and removed within the same synchronous invocation of Javascript code.Some things to watch out for if you are implementing this yourself:The function below should handle all of the following issues as cleanly as possible. Please leave a comment if you find any problems or have any suggestions for improving it.https://jsfiddle.net/fx6a6n6x/",
                "Here is my take on that one...@korayem: Note that using html input field won't respect line breaks \\n and will flatten any text into a single line.As mentioned by @nikksan in the comments, using textarea will fix the problem as follows:",
                "Reading and modifying the clipboard from a webpage raises security and privacy concerns. However, in Internet\u00a0Explorer, it is possible to do it. I found this example snippet:<script type=\"text/javascript\">\r\n        function select_all(obj) {\r\n            var text_val=eval(obj);\r\n            text_val.focus();\r\n            text_val.select();\r\n            r = text_val.createTextRange();\r\n            if (!r.execCommand) return; // feature detection\r\n            r.execCommand('copy');\r\n        }\r\n    </script>\r\n    <input value=\"http://www.sajithmr.com\"\r\n     onclick=\"select_all(this)\" name=\"url\" type=\"text\" />",
                "If you want a really simple solution (takes less than 5 minutes to integrate) and looks good right out of the box, then Clippy is a nice alternative to some of the more complex solutions.It was written by a cofounder of GitHub. Example Flash embed code below:Remember to replace #{text} with the text you need copied, and #{bgcolor} with a color.",
                "I have recently written a technical blog post on this very problem (I work at Lucidchart and we recently did an overhaul on our clipboard).Copying plain text to the clipboard is relatively simple, assuming you attempt to do it during a system copy event (user presses Ctrl + C or uses the browser's menu).Putting text on the clipboard not during a system copy event is much more difficult. It looks like some of these other answers reference ways to do it via Flash, which is the only cross-browser way to do it (so far as I understand).Other than that, there are some options on a browser-by-browser basis.This is the most simple in Internet\u00a0Explorer, where you can access the clipboardData object at anytime from JavaScript via:(When you attempt to do this outside of a system cut, copy, or paste event, however, Internet\u00a0Explorer will prompt the user to grant the web application clipboard permission.)In Chrome, you can create a Chrome extension that will give you clipboard permissions (this is what we do for Lucidchart). Then for users with your extension installed you'll just need to fire the system event yourself:It looks like Firefox has some options that allow users to grant permissions to certain sites to access the clipboard, but I haven't tried any of these personally.",
                "I like this one:If a user doesn't know how to copy text in their OS, then it's likely they don't know how to paste either.  So just have it automatically selected, leaving the rest to the user.",
                "clipboard.js is a small, non-Flash, utility that allows copying of text or HTML data to the clipboard. It's very easy to use, just include the .js and use something like this:clipboard.js is also on GitHub.Note: This has been deprecated now. Migrate to here.",
                "In 2018, here's how you can go about it:It is used in my Angular 6+ code like so:If I pass in a string, it copies it. If nothing, it copies the page's URL.More gymnastics to the clipboard stuff can be done too. See more information here:Unblocking Clipboard Access",
                "I use this very successfully (without jQuery or any other framework).WarningTabs are converted to spaces (at least in Chrome).",
                "ZeroClipboard is the best cross-browser solution I've found:If you need non-Flash support for iOS you just add a fall-back:http://zeroclipboard.org/https://github.com/zeroclipboard/ZeroClipboard",
                "Since Chrome 42+ and Firefox 41+ now support the document.execCommand('copy') command, I created a couple of functions for a cross-browser copy-to-clipboard ability using a combination of Tim Down's old answer and Google Developer's answer:function selectElementContents(el) {\n    // Copy textarea, pre, div, etc.\n    if (document.body.createTextRange) {\n        // Internet Explorer\n        var textRange = document.body.createTextRange();\n        textRange.moveToElementText(el);\n        textRange.select();\n        textRange.execCommand(\"Copy\");\n    }\n    else if (window.getSelection && document.createRange) {\n        // Non-Internet Explorer\n        var range = document.createRange();\n        range.selectNodeContents(el);\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n        try {\n            var successful = document.execCommand('copy');\n            var msg = successful ? 'successful' : 'unsuccessful';\n            console.log('Copy command was ' + msg);\n        }\n        catch (err) {\n            console.log('Oops, unable to copy');\n        }\n    }\n} // end function selectElementContents(el)\n\nfunction make_copy_button(el) {\n    var copy_btn = document.createElement('input');\n    copy_btn.type = \"button\";\n    el.parentNode.insertBefore(copy_btn, el.nextSibling);\n    copy_btn.onclick = function() {\n        selectElementContents(el);\n    };\n\n    if (document.queryCommandSupported(\"copy\") || parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2]) >= 42) {\n        // Copy works with Internet Explorer 4+, Chrome 42+, Firefox 41+, Opera 29+\n        copy_btn.value = \"Copy to Clipboard\";\n    }\n    else {\n        // Select only for Safari and older Chrome, Firefox and Opera\n        copy_btn.value = \"Select All (then press Ctrl + C to Copy)\";\n    }\n}\n/* Note: document.queryCommandSupported(\"copy\") should return \"true\" on browsers that support copy,\n    but there was a bug in Chrome versions 42 to 47 that makes it return \"false\".  So in those\n    versions of Chrome feature detection does not work!\n    See https://code.google.com/p/chromium/issues/detail?id=476508\n*/\n\nmake_copy_button(document.getElementById(\"markup\"));\n<pre id=\"markup\">\n  Text that can be copied or selected with cross browser support.\n</pre>",
                "$(\"td\").click(function (e) {\r\n        var clickedCell = $(e.target).closest(\"td\");\r\n        navigator.clipboard.writeText(clickedCell.text());\r\n        alert(clickedCell.text());\r\n    });\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n<table>\r\n<tr>\r\n<td>First<td>\r\n</tr>\r\n<tr>\r\n<td>Second<td>\r\n</tr>\r\n<tr>\r\n<td>Third<td>\r\n</tr>\r\n<tr>\r\n<td>Fourth<td>\r\n</tr>\r\n</table>I've read all the answers, as of June 1st, 2020, I've beeen struggling to solve this when I finally found documentation:It will write the clicked cell text to the browser clipboard.You can change the selectors \"td\" for anything you want, you can add console.log for debugging and/or alert functions.Here is documentation:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText",
                "From one of the projects I've been working on, a jQuery copy-to-clipboard plugin that utilizes the ZeroClipboard library.It is easier to use than the native Zero Clipboard plugin if you're a heavy jQuery user.",
                "Best and Easy way in JavaScript/TypeScript use this commandjust pass your value what you want to copy to clipboard in textExample",
                "I've put together what I think is the best one.Here it is:Usage: copyToClipboard('some text')",
                "The other methods will copy plain text to the clipboard. To copy HTML (i.e., you can paste results into a WYSIWYG editor), you can do the following in Internet\u00a0Explorer only. This is is fundamentally different from the other methods, as the browser actually visibly selects the content.",
                "I found the following solution:The on-key-down handler creates a \"pre\" tag. We set the content to copy to this tag, and then make a selection on this tag and return true in the handler. This calls the standard handler of Chrome and copies selected text.And if you need it, you may set the timeout for a function for restoring the previous selection. My implementation on MooTools:Usage:On paste, it creates a textarea and works the same way.PS: Maybe this solution can be used for creating a full cross-browser solution without Flash. It works in Firefox and Chrome.",
                "This code tested @ 2021 May . Work on Chrome , IE , Edge. 'message' parameter on below is the string value you want to copy.",
                "This works straight away, using the newest Clipboard API, and a user interaction:copy.addEventListener(\"pointerdown\", () => navigator.clipboard.writeText(\"Hello World!\"))\n<button id=\"copy\">Copy Hello World!</button>",
                "I just wanted to point out that Stackoverflow actually does this. Under each answer there's a \"Share\" link - when you click that, it opens a popup with the share link highlighted inside an input, along with a \"Copy link\" link:If you go to Chrome DevTools and go to the Event Listeners for that link, you can hunt down the function they use. It's called tryCopy():And this is exactly consistent with Dean Taylors answer here (which was recently updated) - specifically read the section entitled \"Async + Fallback\". The TL;DR is: try using the navigator.clipboard api - if that's not supported by the browser, fall back to document.execCommand().",
                "As of Flash 10, you can only copy to clipboard if the action originates from user interaction with a Flash object. (Read the related section from Adobe's Flash 10 announcement.)The solution is to overlay a Flash object above the Copy button, or whatever element initiates the copy. ZeroClipboard is currently the best library with this implementation. Experienced Flash developers may just want to make their own library.",
                "I found the following solution:I have the text in a hidden input. Because setSelectionRange doesn't work on hidden inputs, I changed temporarily the type to text, copied the text, and then made it hidden again. If you want to copy the text from an element, you can pass it to the function and save its content in the target variable.",
                "Copy text from HTML input to the clipboard:function myFunction() {\r\n   /* Get the text field */\r\n   var copyText = document.getElementById(\"myInput\");\r\n\r\n   /* Select the text field */\r\n   copyText.select();\r\n\r\n   /* Copy the text inside the text field */\r\n   document.execCommand(\"Copy\");\r\n\r\n   /* Alert the copied text */\r\n   alert(\"Copied the text: \" + copyText.value);\r\n }\n <!-- The text field -->\r\n <input type=\"text\" value=\"Hello Friend\" id=\"myInput\">\r\n\r\n <!-- The button used to copy the text -->\r\n<button onclick=\"myFunction()\">Copy text</button>Note: The document.execCommand() method is not supported in Internet Explorer 9 and earlier.Source: W3Schools - Copy Text to Clipboard",
                "There are many answers already, however like to add one (jQuery). Works great on any browser, also mobile ones (i.e., prompts about security, but when you accept it just works fine).In your code:",
                "Best Way to Copy the text inside the text field.\nUse navigator.clipboard.writeText.",
                "I had the same problem building a custom grid edit from (something like Excel) and compatibility with Excel. I had to support selecting multiple cells, copying and pasting.Solution: create a textarea where you will be inserting data for the user to copy (for me when the user is selecting cells), set focus on it (for example, when user press Ctrl) and select the whole text.So, when the user hit Ctrl + C he/she gets copied cells he/she selected. After testing just resizing the textarea to one pixel (I didn't test if it will be working on display:none). It works nicely on all browsers, and it is transparent to the user.Pasting - you could do same like this (differs on your target) - keep focus on textarea and catch paste events using onpaste (in my project I use textareas in cells to edit).I can't paste an example (commercial project), but you get the idea.",
                "This is a bit of a combination between the other answers.It uses jQuery, but it doesn't have to of course. You can change that if you want. I just had jQuery to my disposal. You can also add some CSS to make sure the input doesn't show. For instance something like:Or of course you could also do some inline styling",
                "In browsers other than Internet\u00a0Explorer you need to use a small Flash object to manipulate the clipboard, e.g."
            ]
        },
        {
            "tag": "insert",
            "patterns": [
                "How to insert an item into an array at a specific index (JavaScript)",
                "How to insert an item into an array",
                "How to insert an item"
            ],
            "responses": [
                "You want the splice function on the native array object.arr.splice(index, 0, item); will insert item into arr at the specified index (deleting 0 items first, that is, it's just an insert).In this example we will create an array and add an element to it into index 2:var arr = [];\narr[0] = \"Jani\";\narr[1] = \"Hege\";\narr[2] = \"Stale\";\narr[3] = \"Kai Jim\";\narr[4] = \"Borge\";\n\nconsole.log(arr.join()); // Jani,Hege,Stale,Kai Jim,Borge\narr.splice(2, 0, \"Lene\");\nconsole.log(arr.join()); // Jani,Hege,Lene,Stale,Kai Jim,Borge",
                "You can implement the Array.insert method by doing this:Then you can use it like:",
                "Other than splice, you can use this approach which will not mutate the original array, but it will create a new array with the added item. It is useful, when you need to avoid mutation. I'm using the ES6 spread operator here.const items = [1, 2, 3, 4, 5]\n\nconst insert = (arr, index, newItem) => [\n  // part of the array before the specified index\n  ...arr.slice(0, index),\n  // inserted item\n  newItem,\n  // part of the array after the specified index\n  ...arr.slice(index)\n]\n\nconst result = insert(items, 1, 10)\n\nconsole.log(result)\n// [1, 10, 2, 3, 4, 5]This can be used to add more than one item by tweaking the function a bit to use the rest operator for the new items, and spread that in the returned result as well:const items = [1, 2, 3, 4, 5]\n\nconst insert = (arr, index, ...newItems) => [\n  // part of the array before the specified index\n  ...arr.slice(0, index),\n  // inserted items\n  ...newItems,\n  // part of the array after the specified index\n  ...arr.slice(index)\n]\n\nconst result = insert(items, 1, 10, 20)\n\nconsole.log(result)\n// [1, 10, 20, 2, 3, 4, 5]",
                "It can insert multiple elements (as native splice does) and supports chaining:It can merge arrays from the arguments with the given array and also supports chaining:DEMO: http://jsfiddle.net/UPphH/",
                "If you want to insert multiple elements into an array at once check out this Stack Overflow answer: A better way to splice an array into an array in javascriptAlso here are some functions to illustrate both examples:Finally here is a jsFiddle so you can see it for yourself: http://jsfiddle.net/luisperezphd/Wc8aS/And this is how you use the functions:",
                "Using Array.prototype.splice() is an easy way to achieve itconst numbers = ['one', 'two', 'four', 'five']\nnumbers.splice(2, 0, 'three');\n\nconsole.log(numbers)Read more about Array.prototype.splice() here",
                "Today (2020.04.24) I perform tests for chosen solutions for big and small arrays. I tested them on macOS v10.13.6 (High Sierra) on Chrome 81.0, Safari 13.1, and Firefox 75.0.For all browsersTests were divided into two groups: in-place solutions (AI, BI, and CI) and non-in-place solutions (D, E, and F) and was performed for two cases:Tested code is presented in the below snippet:jsfiddlefunction AI(arr, i, el) {\n  arr.splice(i, 0, el);\n  return arr;\n}\n\nfunction BI(arr, i, el) {\n  Array.prototype.splice.apply(arr, [i, 0, el]);\n  return arr;\n}\n\nfunction CI(arr, i, el) {\n  Array.prototype.splice.call(arr, i, 0, el);\n  return arr;\n}\n\nfunction D(arr, i, el) {\n  return arr.slice(0, i).concat(el, arr.slice(i));\n}\n\nfunction E(arr, i, el) {\n  return [...arr.slice(0, i), el, ...arr.slice(i)]\n}\n\nfunction F(arr, i, el) {\n  return arr.reduce((s, a, j)=> (j-i ? s.push(a) : s.push(el, a), s), []);\n}\n\n\n\n// -------------\n// TEST\n// -------------\n\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\nlet log = (n, f) => {\n  let a = f([...arr], 3, \"NEW\");\n  console.log(`${n}: [${a}]`);\n};\n\nlog('AI', AI);\nlog('BI', BI);\nlog('CI', CI);\nlog('D', D);\nlog('E', E);\nlog('F', F);\nThis snippet only presents tested code (it not perform tests)Example results for a small array on Google Chrome are below:",
                "For proper functional programming and chaining purposes, an invention of Array.prototype.insert() is essential. Actually, the splice could have been perfect if it had returned the mutated array instead of a totally meaningless empty array. So here it goes:Array.prototype.insert = function(i,...rest){\n  this.splice(i,0,...rest)\n  return this\n}\n\nvar a = [3,4,8,9];\ndocument.write(\"<pre>\" + JSON.stringify(a.insert(2,5,6,7)) + \"</pre>\");Well, OK, the above with the Array.prototype.splice() one mutates the original array and some might complain like \"you shouldn't modify what doesn't belong to you\" and that might turn out to be right as well. So for the public welfare, I would like to give another Array.prototype.insert() which doesn't mutate the original array. Here it goes;Array.prototype.insert = function(i,...rest){\n  return this.slice(0,i).concat(rest,this.slice(i));\n}\n\nvar a = [3,4,8,9],\n    b = a.insert(2,5,6,7);\nconsole.log(JSON.stringify(a));\nconsole.log(JSON.stringify(b));",
                "I recommend using pure JavaScript in this case. Also there isn't any insert method in JavaScript, but we have a method which is a built-in Array method which does the job for you. It's called splice...Let's see what's splice()...The splice() method changes the contents of an array by removing\nexisting elements and/or adding new elements.OK, imagine we have this array below:We can remove 3 like this:It will return 3, but if we check the arr now, we have:So far, so good, but how we can add a new element to array using splice?Let's put back 3 in the arr...Let's see what we have done...We use splice again, but this time for the second argument, we pass 0, meaning we don't want to delete any item, but at the same time, we add a third argument which is the 3 that will be added at second index...You should be aware that we can delete and add at the same time. For example, now we can do:Which will delete two items at index 2. Then add 3 at index 2 and the result will be:This is showing how each item in splice work:array.splice(start, deleteCount, item1, item2, item3 ...)",
                "The splice() method usually receives three arguments when adding an element:let array = ['item 1', 'item 2', 'item 3']\nlet insertAtIndex = 0\nlet itemsToRemove = 0\n    \narray.splice(insertAtIndex, itemsToRemove, 'insert this string on index 0')\n\nconsole.log(array)",
                "Here are two ways:const array = [ 'My', 'name', 'Hamza' ];\n\narray.splice(2, 0, 'is');\n\nconsole.log(\"Method 1: \", array.join(\" \"));OrArray.prototype.insert = function ( index, item ) {\n    this.splice( index, 0, item );\n};\n\nconst array = [ 'My', 'name', 'Hamza' ];\narray.insert(2, 'is');\n\nconsole.log(\"Method 2 : \", array.join(\" \"));",
                "Append a single element at a specific indexAppend multiple elements at a specific index",
                "Array#splice() is the way to go, unless you really want to avoid mutating the array. Given 2 arrays arr1 and arr2, here's how you would insert the contents of arr2 into arr1 after the first element:const arr1 = ['a', 'd', 'e'];\r\nconst arr2 = ['b', 'c'];\r\n\r\narr1.splice(1, 0, ...arr2); // arr1 now contains ['a', 'b', 'c', 'd', 'e']\r\n\r\nconsole.log(arr1)If you are concerned about mutating the array (for example, if using Immutable.js), you can instead use slice(), not to be confused with splice() with a 'p'.",
                "Another possible solution, with usage of Array.reduce.const arr = [\"apple\", \"orange\", \"raspberry\"];\nconst arr2 = [1, 2, 4];\n\nconst insert = (arr, item, index) =>\n  arr.reduce(function(s, a, i) {\n    i === index ? s.push(item, a) : s.push(a);\n    return s;\n  }, []);\n\nconsole.log(insert(arr, \"banana\", 1));\nconsole.log(insert(arr2, 3, 2))",
                "Even though this has been answered already, I'm adding this note for an alternative approach.I wanted to place a known number of items into an array, into specific positions, as they come off of an \"associative array\" (i.e. an object) which by definition is not guaranteed to be in a sorted order. I wanted the resulting array to be an array of objects, but the objects to be in a specific order in the array since an array guarantees their order. So I did this.First the source object, a JSONB string retrieved from PostgreSQL. I wanted to have it sorted by the \"order\" property in each child object.Since the number of nodes in the object is known, I first create an array with the specified length:And then iterate the object, placing the newly created temporary objects into the desired locations in the array without really any \"sorting\" taking place.",
                "Using the splice method is surely the best answer if you need to insert into an array in-place.However, if you are looking for an immutable function that returns a new updated array instead of mutating the original array on insert, you can use the following function.function insert(array, index) {\n  const items = Array.prototype.slice.call(arguments, 2);\n\n  return [].concat(array.slice(0, index), items, array.slice(index));\n}\n\nconst list = ['one', 'two', 'three'];\n\nconst list1 = insert(list, 0, 'zero'); // Insert single item\nconst list2 = insert(list, 3, 'four', 'five', 'six'); // Insert multiple\n\nconsole.log('Original list: ', list);\nconsole.log('Inserted list1: ', list1);\nconsole.log('Inserted list2: ', list2);Note: This is a pre-ES6 way of doing it, so it works for both older and newer browsers.If you're using ES6 then you can try out rest parameters too; see this answer.",
                "Anyone who's still having issues with this one and have tried all the options in previous answers and never got it. I'm sharing my solution, and this is to take into consideration that you don't want to explicitly state the properties of your object vs the array.This is a combination of iterating the reference array and comparing it to the object you wanted to check, converting both of them into a string, and then iterating if it matched. Then you can just count. This can be improved, but this is where I settled.",
                "Taking profit of the reduce method as follows:So in this way we can return a new array (will be a cool functional way - more much better than using push or splice) with the element inserted at index, and if the index is greater than the length of the array it will be inserted at the end.",
                "I tried this and it is working fine!Index is the position where you want to insert or delete the element.0, i.e., the second parameter, defines the number of elements from the index to be removed.\nitem contains the new entries which you want to make in the array. It can be one or more than one.",
                "I have to agree with Redu's answer because splice() definitely has a bit of a confusing interface. And the response given by cdbajorin that \"it only returns an empty array when the second parameter is 0. If it's greater than 0, it returns the items removed from the array\" is, while accurate, proving the point.The function's intent is to splice or as said earlier by Jakob Keller, \"to join or connect, also to change.You have an established array that you are now changing which would involve adding or removing elements....\" Given that, the return value of the elements, if any, that were removed is awkward at best. And I 100% agree that this method could have been better suited to chaining if it had returned what seems natural, a new array with the spliced elements added. Then you could do things like [\"19\", \"17\"].splice(1,0,\"18\").join(\"...\") or whatever you like with the returned array.The fact that it returns what was removed is just kind of nonsense IMHO. If the intention of the method was to \"cut out a set of elements\" and that was its only intent, maybe. It seems like if I don't know what I'm cutting out already though, I probably have little reason to cut those elements out, doesn't it?It would be better if it behaved like concat(), map(), reduce(), slice(), etc. where a new array is made from the existing array rather than mutating the existing array. Those are all chainable, and that is a significant issue. It's rather common to chain array manipulation.It seems like the language needs to go one or the other direction and try to stick to it as much as possible. JavaScript being functional and less declarative, it just seems like a strange deviation from the norm.",
                "I like a little safety and I use this:Array.prototype.Insert = function (item, before) {\n  if (!item) return;\n  if (before == null || before < 0 || before > this.length - 1) {\n    this.push(item);\n    return;\n  }\n  this.splice(before, 0, item);\n}\n\n\nvar t = [\"a\", \"b\"]\n\nt.Insert(\"v\", 1)\n\nconsole.log(t)",
                "You can do it with array.splice:Doc of array.slice",
                "Here's a working function that I use in one of my applications.This checks if an item exists:And then I call it below.",
                "Here is the modern (Typescript functional) way:",
                "I do it like so:const insert = (what, where, index) =>\n  ([...where.slice(0, index), what , ...where.slice(index, where.length)]);\n  \nconst list = [1, 2, 3, 4, 5, 6];\nconst newList = insert('a', list, 2);\n\nconsole.log(newList.indexOf('a') === 2);",
                "Here's a simple function that supports inserting multiple values at the same time:Usage example:",
                "Multi purpose for ARRAY and ARRAY OF OBJECT reusable approachlet arr = [0,1,2];\nlet obj = [{ name: \"abc\"},{ name: \"xyz\"},{ name: \"ijk\"} ];\n\nconst addArrayItemAtIndex = ( array, index, newItem ) => {\n    return [...array.slice(0, index), newItem, ...array.slice(index)];\n}\n\n// For Array\nconsole.log( addArrayItemAtIndex(arr, 2,  159 ) );\n\n// For Array of Objects\nconsole.log( addArrayItemAtIndex(obj, 0, { name: \"AMOOS\"} ) );"
            ]
        },
        {
            "tag": "not_not",
            "patterns": [
                "What is the !! (not not) operator in JavaScript?",
                "What is || in JavaScript",
                "What is the not not operator"
            ],
            "responses": [
                "It converts Object to boolean. If it was falsey (e.g., 0, null, undefined, etc.), it would be false, otherwise, true.So !! is not an operator; it's just the ! operator twice.It may be simpler to do:Real World Example \"Test IE version\":If you \u21d2But if you \u21d2",
                "It's a horribly obscure way to do a type conversion.! means NOT.  So !true is false, and !false is true. !0 is true, and !1 is false.So you're converting a value to a Boolean, inverting it, and then inverting it again.Note: the latter two expressions aren't exactly equivalent to the first expression when it comes to some edge case (when userId is [], for example), due to the way the != operator works and what values are considered truthy.",
                "!!expr (two ! operators followed by an expression) returns a Boolean value (true or false) depending on the truthiness of the expression. It makes more sense when used on non-boolean types. Consider these examples, especially the 3rd example and onward:",
                "Brew some tea:!! is not an operator. It is the double-use of ! -- which is the logical \"not\" operator.In theory:! determines the \"truth\" of what a value is not:The truth is that false is not true (that's why !false results\nin true)The truth is that true is not false (that's why !true results\nin false)!! determines the \"truth\" of what a value is not not:The truth is that true is not not true (that's why !!true results in true)The truth is that false is not not false (that's why !!false results in false)What we wish to determine in the comparison is the \"truth\" about the value of a reference, not the value of the reference itself. There is a use-case where we might want to know the truth about a value, even if we expect the value to be false (or falsey), or if we expect the value not to be typeof boolean.In practice:Consider a concise function which detects feature functionality (and in this case, platform compatibility) by way of dynamic typing (aka \"duck typing\"). We want to write a function that returns true if a user's browser supports the HTML5 <audio> element, but we don't want the function to throw an error if <audio> is undefined; and we don't want to use try ... catch to handle any possible errors (because they're gross); and also we don't want to use a check inside the function that won't consistently reveal the truth about the feature (for example, document.createElement('audio') will still create an element called <audio> even if HTML5 <audio> is not supported).Here are the three approaches:Each function accepts an argument for a <tag> and an attribute to look for, but they each return different values based on what the comparisons determine.But wait, there's more!Some of you probably noticed that in this specific example, one could simply check for a property using the slightly more performant means of checking if the object in question has a property. There are two ways to do this:We digress...However rare these situations may be, there may exist a few scenarios where the most concise, most performant, and thus most preferred means of getting true from a non-boolean, possibly undefined value is indeed by using !!. Hopefully this ridiculously clears it up.",
                "!! converts the value to the right of it to its equivalent Boolean value. (Think poor man's way of \"type-casting\".) Its intent is usually to convey to the reader that the code does not care what value is in the variable, but what its \"truth\" value is.",
                "!!foo applies the unary not operator twice and is used to cast to a Boolean type similar to the use of unary plus +foo to cast to a number and concatenating an empty string ''+foo to cast to a string.Instead of these hacks, you can also use the constructor functions corresponding to the primitive types (without using new) to explicitly cast values, i.e.,",
                "So many answers doing half the work. Yes, !!X could be read as \"the truthiness of X [represented as a Boolean]\". But !! isn't, practically speaking, so important for figuring out whether a single variable is (or even if many variables are) truthy or falsy. !!myVar === true is the same as just myVar. Comparing !!X to a \"real\" Boolean isn't really useful.The only thing you gain with !! is the ability to check the truthiness of multiple variables against each other in a repeatable, standardized (and JSLint friendly) fashion.That is...The above's not so useful. if (!0) gives you the same results as if (!!0 === false). I can't think of a good case for casting a variable to Boolean and then comparing to a \"true\" Boolean.See \"== and !=\" from JSLint's directions (note: Crockford is moving his site around a bit; that link is liable to die at some point) for a little on why:The == and != operators do type coercion before comparing. This is bad because it causes ' \\t\\r\\n' == 0 to be true. This can mask type errors. JSLint cannot reliably determine if == is being used correctly, so it is best to not use == and != at all and to always use the more reliable === and !== operators instead.If you only care that a value is truthy or falsy, then use the short form. Instead of\n    (foo != 0)just say\n    (foo)and instead of\n    (foo == 0)say\n     (!foo)Note that there are some unintuitive cases where a Boolean will be cast to a number (true is cast to 1 and false to 0) when comparing a Boolean to a number. In this case, !! might be mentally useful. Though, again, these are cases where you're comparing a non-Boolean to a hard-typed Boolean, which is, in my opinion, a serious mistake. if (-1) is still the way to go here.And things get even crazier depending on your engine. WScript, for instance, wins the prize.Because of some historical Windows jive, that'll output -1 in a message box! Try it in a cmd.exe prompt and see! But WScript.echo(-1 == test()) still gives you 0, or WScript's false. Look away. It's hideous.But what if I have two values I need to check for equal truthiness/falsiness?Pretend we have myVar1 = 0; and myVar2 = undefined;.So the only place you'd really need to use \"Boolean-cast variables\" would be if you had a situation where you're checking if both variables have the same truthiness, right? That is, use !! if you need to see if two variables are both truthy or both falsy (or not), that is, of equal (or not) truthiness.I can't think of a great, non-contrived use case for that offhand. Maybe you have \"linked\" fields in a form?So now if you have a truthy for both or a falsy for both spouse name and age, you can continue. Otherwise you've only got one field with a value (or a very early arranged marriage) and need to create an extra error on your errorObjects collection.Though even in this case, the !! really is superfluous. One ! was enough to cast to a Boolean, and you're just checking equality.EDIT 24 Oct 2017, 6 Feb 19:Here's an interesting case... !! might be useful when third-party libraries expect explicit Boolean values.For instance, False in JSX (React) has a special meaning that's not triggered on simple falsiness. If you tried returning something like the following in your JSX, expecting an int in messageCount...{messageCount && <div>You have messages!</div>}... you might be surprised to see React render a 0 when you have zero messages. You have to explicitly return false for JSX not to render. The above statement returns 0, which JSX happily renders, as it should. It can't tell you didn't have Count: {messageCount}.One fix involves the bangbang, which coerces 0 into !!0, which is false:\n{!!messageCount && <div>You have messages!</div>}JSX' documentation suggests you be more explicit, write self-commenting code, and use a comparison to force to a Boolean.\n{messageCount > 0 && <div>You have messages!</div>}I'm more comfortable handling falsiness myself with a ternary --\n{messageCount ? <div>You have messages!</div> : false}The same deal in TypeScript: If you have a function that returns a Boolean (or you're assigning a value to a Boolean variable), you [usually] can't return/assign a boolean-y value; it has to be a strongly typed boolean. This means, iff myObject is strongly typed, return !myObject; works for a function returning a Boolean, but return myObject; doesn't. You have to return !!myObject (or cast to the proper Boolean another way) to match TypeScript's expectations.The exception for TypeScript? If myObject was an any, you're back in JavaScript's Wild West and can return it without !!, even if your return type is a Boolean.Keep in mind that these are JSX and TypeScript conventions, not ones inherent to JavaScript.But if you see strange 0s in your rendered JSX, think loose falsy management.",
                "It's just the logical NOT operator, twice. It's used to convert something to Boolean, e.g.:",
                "It converts the suffix to a Boolean value.",
                "It's a double not operation.  The first ! converts the value to Boolean and inverts its logical value.  The second ! inverts the logical value back.",
                "It seems that the !! operator results in a double negation.",
                "It simulates the behavior of the Boolean() casting function.\nThe first NOT returns a Boolean value no matter what operand it is given. The second NOT negates that Boolean value and so gives the true Boolean value of a variable. The end result is the same as using the Boolean() function on a value.",
                "!! is using the NOT operation twice together. ! converts the value to a Boolean and reverses it, so using it twice, showing the Boolean (false or true) of that value. Here is a simple example to see how !! works:At first, the place you have:Then you do !0. It will be converted to Boolean and be evaluated to true, because 0 is falsy, so you get the reversed value and converted to Boolean, so it gets evaluated to true.But we don't want the reversed Boolean version of the value, so we can reverse it again to get our result! That's why we use another !.Basically, !! makes us sure the value we get is Boolean, not falsy, truthy, string, etc...So it's like using the Boolean function in JavaScript, but an easier and shorter way to convert a value to Boolean:",
                "! is \"Boolean not\", which essentially typecasts the value of \"enable\" to its boolean opposite. The second ! flips this value. So, !!enable means \"not not enable,\" giving you the value of enable as a Boolean.",
                "I think worth mentioning is that a condition combined with logical AND/OR will not return a Boolean value, but the last success or first fail in case of && and the first success or last fail in case of || of the condition chain.In order to cast the condition to a true Boolean literal we can use the double negation:",
                "The !! construct is a simple way of turning any JavaScript expression into\nits Boolean equivalent.For example: !!\"he shot me down\" === true and !!0 === false.",
                "It's not a single operator; it's two.  It's equivalent to the following and is a quick way to cast a value to Boolean.",
                "This question has been answered quite thoroughly, but I'd like to add an answer that I hope is as simplified as possible, making the meaning of !! as simple to grasp as can be.Because JavaScript has what are called \"truthy\" and \"falsy\" values, there are expressions that when evaluated in other expressions will result in a true or false condition, even though the value or expression being examined is not actually true or false.For instance:If that element does in fact exist, the expression will evaluate as true, and the code block will be executed.However:...will not result in a true condition, and the code block will not be executed, even if the element does exist.Why? Because document.getElementById() is a \"truthy\" expression that will evaluate as true in this if() statement, but it is not an actual Boolean value of true.The double \"not\" in this case is quite simple.  It is simply two nots back to back.The first one simply \"inverts\" the truthy or falsy value, resulting in an actual Boolean type, and then the second one \"inverts\" it back again to its original state, but now in an actual Boolean value.  That way you have consistency:andwill both return true, as expected.",
                "It forces all things to Boolean.For example:",
                "The if and while statements and the ? operator use truth values to determine which branch of code to run. For example, zero and NaN numbers and the empty string are false, but other numbers and strings are true. Objects are true, but the undefined value and null are both false.The double negation operator !! calculates the truth value of a value. It's actually two operators, where !!x means !(!x), and behaves as follows:When used at the top level of a Boolean context (if, while, or ?), the !! operator is behaviorally a no-op. For example, if (x) and if (!!x) mean the same thing.However it has several practical uses.One use is to lossily compress an object to its truth value, so that your code isn't holding a reference to a big object and keeping it alive. Assigning !!some_big_object to a variable instead of some_big_object lets go of it for the garbage collector. This is useful for cases that produce either an object or a false value such as null or the undefined value, such as browser feature detection.Another use, which I mentioned in an answer about C's corresponding !! operator, is with \"lint\" tools that look for common typos and print diagnostics. For example, in both C and JavaScript, a few common typos for Boolean operations produce other behaviors whose output isn't quite as Boolean:The !! operator reassures the lint tool that what you wrote is what you meant: do this operation, then take the truth value of the result.A third use is to produce logical XOR and logical XNOR. In both C and JavaScript, a && b performs a logical AND (true if both sides are true), and a & b performs a bitwise AND. a || b performs a logical OR (true if at least one are true), and a | b performs a bitwise OR. There's a bitwise XOR (exclusive OR) as a ^ b, but there's no built-in operator for logical XOR (true if exactly one side is true). You might, for example, want to allow the user to enter text in exactly one of two fields. What you can do is convert each to a truth value and compare them: !!x !== !!y.",
                "I suspect this is a leftover from C++ where people override the ! operator, but not the bool operator.So to get a negative (or positive) answer in that case, you would first need to use the ! operator to get a Boolean, but if you wanted to check the positive case you would use !!.",
                "I just wanted to add thatis the same asBut this can be an issue when something is undefined.The trick here is the chain of &&s will return the first falsey value it finds -- and this can be fed to an if statement etc.  So if b.foo is undefined, it will return undefined and skip the b.foo.bar statement, and we get no error.The above return undefined but if you have an empty string, false, null, 0, undefined those values will return and soon as we encounter them in the chain -- [] and {} are both \"truthy\" and we will continue down the so-called \"&& chain\" to the next value to the right.P.S. Another way of doing the above (b && b.foo) is (b || {}).foo.  Those are equivalent, because if b is undefined then b || {} will be {}, and you'll be accessing a value in an empty object (no error) instead of trying to access a value within \"undefined\" (causes an error).So, (b || {}).foo is the same as b && b.foo and ((b || {}).foo || {}).bar is the same as b && b.foo && b.foo.bar.",
                "It is double Boolean negation. It is often used to check if a value is not undefined.",
                "!!x is shorthand for Boolean(x).The first bang forces the JavaScript engine to run Boolean(x), but it also has the side effect of inverting the value.  So the second bang undoes the side effect.",
                "There are tons of great answers here, but if you've read down this far, this helped me to 'get it'. Open the console in Chrome (etc.), and start typing:Naturally, these are all the same as merely typing !!someThing, but the added parentheses might help make it more understandable.",
                "After seeing all these great answers, I would like to add another reason for using !!. Currently I'm working in Angular 2-4 (TypeScript) and I want to return a Boolean as false when my user is not authenticated. If he isn't authenticated, the token-string would be null or \"\". I can do this by using the next block of code:",
                "It is important to remember the evaluations to true and false in JavaScript:Everything with a \"Value\" is true (namely truthy), for example:Everything without a \"Value\" is false (namely falsy), for example:Applying the \"logical not\" operator (!) evaluates the operand, converting it to boolean and then negating it.  Applying it twice will negate the negation, effectively converting the value to boolean.  Not applying the operator will just be a regular assignment of the exact value.  Examples:if (value) {\n  value2 = true;\n} else {\n  value2 = false;\n}",
                "Here is a piece of code from AngularJS:Their intention is to set rafSupported to true or false based on the availability of function in requestAnimationFrame.It can be achieved by checking in the following way in general:The short way could be using !!So if requestAnimationFrame was assigned a function then !requestAnimationFrame would be false and one more ! of it would be true.If requestAnimationFrame was assigned undefined then !requestAnimationFrame would be true and one more ! of it would be false.",
                "Use the logical not operator two times.It means !true = false and !!true = true.",
                "It returns the Boolean value of a variable.Instead, the Boolean class can be used.(Please read the code descriptions.)Namely, Boolean(X) = !!X in use.Please check code snippet out below \u2193let a = 0\nconsole.log(\"a: \", a) // Writes a value in its kind\nconsole.log(\"!a: \", !a) // Writes '0 is NOT true in Boolean' value as Boolean - so that's true. In Boolean, 0 means false and 1 means true.\nconsole.log(\"!!a: \", !!a) // Writes 0 value in Boolean. 0 means false.\nconsole.log(\"Boolean(a): \", Boolean(a)) // Equals `!!a`\nconsole.log(\"\\n\") // Newline\n\na = 1\nconsole.log(\"a: \", a)\nconsole.log(\"!a: \", !a)\nconsole.log(\"!!a: \", !!a) // Writes 1 value in Boolean\nconsole.log(\"\\n\") // Newline\n\na = \"\"\nconsole.log(\"a: \", a)\nconsole.log(\"!a: \", !a) // Writes '\"\" is NOT true in Boolean' value as Boolean - so that's true. In Boolean, empty strings, null and undefined values mean false and if there is a string it means true.\nconsole.log(\"!!a: \", !!a) // Writes \"\" value in Boolean\nconsole.log(\"\\n\") // Newline\n\na = \"test\"\nconsole.log(\"a: \", a) // Writes a value in its kind\nconsole.log(\"!a: \", !a)\nconsole.log(\"!!a: \", !!a) // Writes \"test\" value in Boolean\n\nconsole.log(\"Boolean(a) === !!a: \", Boolean(a) === !!a) // writes true"
            ]
        },
        {
            "tag": "empty_object",
            "patterns": [
                "How do I test for an empty JavaScript object?",
                "Test for an empty JavaScript object",
                "empty JavaScript object"
            ],
            "responses": [
                "ECMA 5+:Note, though, that this creates an unnecessary array (the return value of keys).Pre-ECMA 5:jQuery:lodash:Underscore:HoekExtJSAngularJS (version 1)Ramda",
                "If ECMAScript 5 support is available, you can use Object.keys():For ES3 and older, there's no easy way to do this. You'll have to loop over the properties explicitly:",
                "For those of you who have the same problem but use jQuery, you can use jQuery.isEmptyObject.",
                "Today 2020.01.17, I performed tests on macOS High Sierra 10.13.6 on Chrome v79.0, Safari v13.0.4, and Firefox v72.0; for the chosen solutions.There are 15 solutions presented in the snippet below.\nIf you want to run a performance test on your machine, click HERE.\nThis link was updated 2021.07.08, but tests originally were performed here - and results in the table above came from there (but now it looks like that service no longer works).var log = (s, f) => console.log(`${s} --> {}:${f({})}  {k:2}:${f({ k: 2 })}`);\n\nfunction A(obj) {\n  for (var i in obj) return false;\n  return true;\n}\n\nfunction B(obj) {\n  return JSON.stringify(obj) === \"{}\";\n}\n\nfunction C(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nfunction D(obj) {\n  return Object.entries(obj).length === 0;\n}\n\nfunction E(obj) {\n  return Object.getOwnPropertyNames(obj).length === 0;\n}\n\nfunction F(obj) {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nfunction G(obj) {\n  return typeof obj === \"undefined\" || !Boolean(Object.keys(obj)[0]);\n}\n\nfunction H(obj) {\n  return Object.entries(obj).length === 0 && obj.constructor === Object;\n}\n\nfunction I(obj) {\n  return Object.values(obj).every((val) => typeof val === \"undefined\");\n}\n\nfunction J(obj) {\n  for (const key in obj) {\n    if (hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction K(obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n  return JSON.stringify(obj) === JSON.stringify({});\n}\n\nfunction L(obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) return false;\n  }\n  return true;\n}\n\nfunction M(obj) {\n  for (var k in obj) {\n    if (obj.hasOwnProperty(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction N(obj) {\n  return (\n    Object.getOwnPropertyNames(obj).length === 0 &&\n    Object.getOwnPropertySymbols(obj).length === 0 &&\n    Object.getPrototypeOf(obj) === Object.prototype\n  );\n}\n\nfunction O(obj) {\n  return !(Object.getOwnPropertyNames !== undefined\n    ? Object.getOwnPropertyNames(obj).length !== 0\n    : (function () {\n        for (var key in obj) break;\n        return key !== null && key !== undefined;\n      })());\n}\n\nlog(\"A\", A);\nlog(\"B\", B);\nlog(\"C\", C);\nlog(\"D\", D);\nlog(\"E\", E);\nlog(\"F\", F);\nlog(\"G\", G);\nlog(\"H\", H);\nlog(\"I\", I);\nlog(\"J\", J);\nlog(\"K\", K);\nlog(\"L\", L);\nlog(\"M\", M);\nlog(\"N\", N);\nlog(\"O\", O);",
                "You can use Underscore.js.",
                "see http://bencollier.net/2011/04/javascript-is-an-object-empty/",
                "How about using JSON.stringify? It is almost available in all modern browsers.",
                "There is a simple way if you are on a newer browser.\nObject.keys(obj).length === 0",
                "Old question, but just had the issue. Including JQuery is not really a good idea if your only purpose is to check if the object is not empty. Instead, just deep into JQuery's code, and you will get the answer:",
                "Using Object.keys(obj).length (as suggested above for ECMA 5+) is 10 times slower for empty objects!  keep with the old school (for...in) option.Tested under Node, Chrome, Firefox and IE 9, it becomes evident that for most use cases:Bottom line performance wise, use:orSee detailed testing results and test code at Is object empty?",
                "My take:function isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nvar a = {\n  a: 1,\n  b: 2\n}\nvar b = {}\n\nconsole.log(isEmpty(a)); // false\nconsole.log(isEmpty(b)); // trueJust, I don't think all browsers implement Object.keys() currently.",
                "I am using this.Eg:from hereUpdateORyou can use the jQuery implementation of isEmptyObject",
                "Just a workaround. Can your server generate some special property in case of no data?For example:Then you can easily check it in your AJAX callback code.Another way to check it:EDIT:\nIf you use any JSON library (f.e. JSON.js) then you may try JSON.encode() function and test the result against empty value string.",
                "The following example show how to test if a JavaScript object is empty, if by empty we means has no own properties to it.The script works on ES6.const isEmpty = (obj) => {\r\n    if (obj === null ||\r\n        obj === undefined ||\r\n        Array.isArray(obj) ||\r\n        typeof obj !== 'object'\r\n    ) {\r\n        return true;\r\n    }\r\n    return Object.getOwnPropertyNames(obj).length === 0;\r\n};\r\nconsole.clear();\r\nconsole.log('-----');\r\nconsole.log(isEmpty(''));           // true\r\nconsole.log(isEmpty(33));           // true\r\nconsole.log(isEmpty([]));           // true\r\nconsole.log(isEmpty({}));           // true\r\nconsole.log(isEmpty({ length: 0, custom_property: [] })); // false\r\nconsole.log('-----');\r\nconsole.log(isEmpty('Hello'));      // true\r\nconsole.log(isEmpty([1, 2, 3]));    // true\r\nconsole.log(isEmpty({ test: 1 }));  // false\r\nconsole.log(isEmpty({ length: 3, custom_property: [1, 2, 3] })); // false\r\nconsole.log('-----');\r\nconsole.log(isEmpty(new Date()));   // true\r\nconsole.log(isEmpty(Infinity));     // true\r\nconsole.log(isEmpty(null));         // true\r\nconsole.log(isEmpty(undefined));    // true",
                "The correct answer is:This checks that:In other words, the object is indistinguishable from one created with {}.",
                "Object.keys will return an Array, which contains the property names of the object. If the length of the array is 0, then we know that the object is empty.We can also check this using Object.values and Object.entries.\nThis is typically the easiest way to determine if an object is empty.The for\u2026in statement will loop through the enumerable property of object.In the above code, we will loop through object properties and if an object has at least one property, then it will enter the loop and return false. If the object doesn\u2019t have any properties then it will return true.#3. Using JSON.stringify\nIf we stringify the object and the result is simply an opening and closing bracket, we know the object is empty.Resource",
                "jQuery have special function isEmptyObject() for this case:Read more on http://api.jquery.com/jQuery.isEmptyObject/",
                "Caveat! Beware of JSON's limitiations.displays",
                "In addition to Thevs answer:it's jquery + jquery.json",
                "To really accept ONLY {}, the best way to do it in Javascript using Lodash is:",
                "Sugar.JS provides extended objects for this purpose. The code is clean and simple:Make an extended object:Check it's size:",
                "Pure Vanilla Javascript, and full backward compatibilityfunction isObjectDefined (Obj) {\r\n  if (Obj === null || typeof Obj !== 'object' ||\r\n    Object.prototype.toString.call(Obj) === '[object Array]') {\r\n    return false\r\n  } else {\r\n    for (var prop in Obj) {\r\n      if (Obj.hasOwnProperty(prop)) {\r\n        return true\r\n      }\r\n    }\r\n    return JSON.stringify(Obj) !== JSON.stringify({})\r\n  }\r\n}\r\n\r\nconsole.log(isObjectDefined()) // false\r\nconsole.log(isObjectDefined('')) // false\r\nconsole.log(isObjectDefined(1)) // false\r\nconsole.log(isObjectDefined('string')) // false\r\nconsole.log(isObjectDefined(NaN)) // false\r\nconsole.log(isObjectDefined(null)) // false\r\nconsole.log(isObjectDefined({})) // false\r\nconsole.log(isObjectDefined([])) // false\r\nconsole.log(isObjectDefined({a: ''})) // true",
                "IsEmpty Object, unexpectedly lost its meaning i.e.: it's programming semantics, when our famous guru from Yahoo introduced the customized non-enumerable Object properties to ECMA and they got accepted.[ If you don't like history - feel free to skip right to the working code ]I'm seeing lots of good answers \\ solutions to this question \\ problem.\nHowever, grabbing the most recent extensions to ECMA Script is not the honest way to go. We used to hold back the Web back in the day to keep Netscape 4.x, and Netscape based pages work and projects alive, which (by the way) were extremely primitive backwards and idiosyncratic, refusing to use new W3C standards and propositions [ which were quite revolutionary for that time and coder friendly ] while now being brutal against our own legacy.Killing Internet Explorer 11 is plain wrong! Yes, some old warriors that infiltrated Microsoft remaining dormant since the \"Cold War\" era, agreed to it - for all the wrong reasons. - But that doesn't make it right!Making use, of a newly introduced method\\property in your answers and handing it over as a discovery (\"that was always there but we didn't notice it\"), rather than a new invention (for what it really is), is somewhat 'green' and harmful. I used to make such mistakes some 20 years ago when I still couldn't tell what's already in there and treated everything I could find a reference for, as a common working solution...Backward compatibility is important !We just don't know it yet. That's the reason I got the need to share my 'centuries old' generic solution which remains backward and forward compatible to the unforeseen future.There were lots of attacks on the in operator but I think the guys doing that have finally come to senses and really started to understand and appreciate a true Dynamic Type Language such as JavaScript  and its beautiful nature.My methods aim to be simple and nuclear and for reasons mentioned above, I don't call it \"empty\" because the meaning of that word is no longer accurate. Is Enumerable, seems to be the word with the exact meaning.Some use cases:Thanks for reading!",
                "Best one-liner solution I could find (updated):isEmpty = obj => !Object.values(obj).filter(e => typeof e !== 'undefined').length;\n\nconsole.log(isEmpty({}))                                        // true\nconsole.log(isEmpty({a: undefined, b: undefined}))              // true\nconsole.log(isEmpty({a: undefined, b: void 1024, c: void 0}))   // true\n\nconsole.log(isEmpty({a: [undefined, undefined]}))               // false\nconsole.log(isEmpty({a: 1}))                                    // false\nconsole.log(isEmpty({a: ''}))                                   // false\nconsole.log(isEmpty({a: null, b: undefined}))                   // false",
                "Another alternative is to use is.js (14kB) as opposed to jquery (32kB), lodash (50kB), or underscore (16.4kB). is.js proved to be the fastest library among aforementioned libraries that could be used to determine whether an object is empty.http://jsperf.com/check-empty-object-using-librariesObviously all these libraries are not exactly the same so if you need to easily manipulate the DOM then jquery might still be a good choice or if you need more than just type checking then lodash or underscore might be good. As for is.js, here is the syntax:Like underscore's and lodash's _.isObject(), this is not exclusively for objects but also applies to arrays and strings.Under the hood this library is using Object.getOwnPropertyNames which is similar to Object.keys but Object.getOwnPropertyNames is a more thorough since it will return enumerable and non-enumerable properties as described here.If you don't want to bring in a library (which is understandable) and you know that you are only checking objects (not arrays or strings) then the following function should suit your needs.This is only a bit faster than is.js though just because you aren't checking whether it is an object.",
                "I know this doesn't answer 100% your question, but I have faced similar issues before and here's how I use to solve them:I have an API that may return an empty object. Because I know what fields to expect from the API, I only check if any of the required fields are present or not.For example:API returns {} or {agentID: '1234' (required), address: '1234 lane' (opt),...}.\nIn my calling function, I'll only checkThis way I don't need to use those expensive methods to check if an object is empty. The object will be empty for my calling function if it doesn't have the agentID field.",
                "We can check with vanilla js with handling null or undefined check also as follows,function isEmptyObject(obj) {\n  return !!obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\n//tests\n\nisEmptyObject(new Boolean());  // false \nisEmptyObject(new Array());    // false \nisEmptyObject(new RegExp());   // false \nisEmptyObject(new String());   // false \nisEmptyObject(new Number());   // false \nisEmptyObject(new Function()); // false \nisEmptyObject(new Date());     // false\nisEmptyObject(null);          // false\nisEmptyObject(undefined);     // false\nisEmptyObject({});            // true",
                "I liked this one I came up with, with the help of some other answers here. Thought I'd share it.Object.defineProperty(Object.prototype, 'isEmpty', {\n    get() {\n        for(var p in this) {\n            if (this.hasOwnProperty(p)) {return false}\n        }\n        return true;\n    }\n});\n\n\nlet users = {};\nlet colors = {primary: 'red'};\nlet sizes = {sm: 100, md: 200, lg: 300};\n\nconsole.log(\n'\\nusers =', users,\n'\\nusers.isEmpty ==> ' + users.isEmpty,\n'\\n\\n-------------\\n',\n'\\ncolors =', colors,\n'\\ncolors.isEmpty ==> ' + colors.isEmpty,\n'\\n\\n-------------\\n',\n'\\nsizes =', sizes,\n'\\nsizes.isEmpty ==> ' + sizes.isEmpty,\n'\\n',\n''\n);",
                "It's weird that I haven't encountered a solution that compares the object's values as opposed to the existence of any entry (maybe I missed it among the many given solutions).\nI would like to cover the case where an object is considered empty if all its values are undefined:const isObjectEmpty = obj => Object.values(obj).every(val => typeof val === \"undefined\")\n\n    console.log(isObjectEmpty({}))                                 // true\n    console.log(isObjectEmpty({ foo: undefined, bar: undefined })) // true\n    console.log(isObjectEmpty({ foo: false,     bar: null }))      // falseLet's say, for the sake of example, you have a function (paintOnCanvas) that destructs values from its argument (x, y and size). If all of them are undefined, they are to be left out of the resulting set of options. If not they are not, all of them are included."
            ]
        },
        {
            "tag": "sort_array",
            "patterns": [
                "Sort array of objects by string property value",
                "sort array",
                "How to sort an array"
            ],
            "responses": [
                "It's easy enough to write your own comparison function:Or inline (c/o Marco Demaio):Or simplified for numeric (c/o Andre Figueiredo):",
                "You can also create a dynamic sort function that sorts objects by their value that you pass:So you can have an array of objects like this:...and it will work when you do:Actually this already answers the question. Below part is written because many people contacted me, complaining that it doesn't work with multiple parameters.You can use the function below to generate sort functions with multiple sort parameters.Which would enable you to do something like this:For the lucky among us who can use ES6, which allows extending the native objects:That would enable this:",
                "In ES6/ES2015 or later you can do it this way:Prior to ES6/ES2015",
                "Underscore.jsUse Underscore.js]. It\u2019s small and awesome...sortBy_.sortBy(list, iterator, [context])  Returns a sorted copy of\nlist, ranked in ascending order by the results of running each value\nthrough iterator. Iterator may also be the string name of the property\nto sort by (eg. length).",
                "Case sensitiveCase InsensitiveUseful NoteIf no change in order (in case of the same strings) then the condition > will fail and -1 will be returned. But if strings are same then returning 1 or -1 will result in correct outputThe other option could be to use >= operator instead of >var objs = [ \n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\n\n// Define a couple of sorting callback functions, one with hardcoded sort key and the other with an argument sort key\nconst sorter1 = (a, b) => a.last_nom.toLowerCase() > b.last_nom.toLowerCase() ? 1 : -1;\nconst sorter2 = (sortBy) => (a, b) => a[sortBy].toLowerCase() > b[sortBy].toLowerCase() ? 1 : -1;\n\nobjs.sort(sorter1);\nconsole.log(\"Using sorter1 - Hardcoded sort property last_name\", objs);\n\nobjs.sort(sorter2('first_nom'));\nconsole.log(\"Using sorter2 - passed param sortBy='first_nom'\", objs);\n\nobjs.sort(sorter2('last_nom'));\nconsole.log(\"Using sorter2 - passed param sortBy='last_nom'\", objs);",
                "If you have duplicate last names you might sort those by first name-",
                "As of 2018 there is a much shorter and elegant solution. Just use. Array.prototype.sort().Example:",
                "Simple and quick solution to this problem using prototype inheritance:Example / UsageUpdate: No longer modifies original array.",
                "Old answer that is not correct:UPDATEFrom Beauchamp's comment:More readable format:Without nested ternaries:Explanation: Number() will cast true to 1 and false to 0.",
                "Lodash (a superset of Underscore.js).It's good not to add a framework for every simple piece of logic, but relying on well tested utility frameworks can speed up development and reduce the amount of bugs.Lodash produces very clean code and promotes a more functional programming style. In one glimpse, it becomes clear what the intent of the code is.The OP's issue can simply be solved as:More information? For example, we have the following nested object:We now can use the _.property shorthand user.age to specify the path to the property that should be matched. We will sort the user objects by the nested age property. Yes, it allows for nested property matching!Want it reversed? No problem. Use _.reverse.Want to combine both using chain?Or when do you prefer flow over chain?",
                "(https://lodash.com/docs/4.17.10#orderBy)This method is like _.sortBy except that it allows specifying the sort orders of the iteratees to sort by. If orders is unspecified, all values are sorted in ascending order. Otherwise, specify an order of \"desc\" for descending or \"asc\" for ascending sort order of corresponding values.Argumentscollection (Array|Object): The collection to iterate over.\n[iteratees=[_.identity]] (Array[]|Function[]|Object[]|string[]): The iteratees to sort by.\n[orders] (string[]): The sort orders of iteratees.Returns(Array): Returns the new sorted array.",
                "I haven't seen this particular approach suggested, so here's a terse comparison method I like to use that works for both string and number types:const objs = [ \n  { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n  { first_nom: 'Pig',    last_nom: 'Bodine'   },\n  { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\nconst sortBy = fn => {\n  const cmp = (a, b) => -(a < b) || +(a > b);\n  return (a, b) => cmp(fn(a), fn(b));\n};\n\nconst getLastName = o => o.last_nom;\nconst sortByLastName = sortBy(getLastName);\n\nobjs.sort(sortByLastName);\nconsole.log(objs.map(getLastName));sortBy() accepts a fn that selects a value from an object to use in comparison, and returns a function that can be passed to Array.prototype.sort(). In this example, we're comparing o.last_nom. Whenever we receive two objects such aswe compare them with (a, b) => cmp(fn(a), fn(b)). Given thatwe can expand the comparison function to (a, b) => cmp(a.last_nom, b.last_nom). Because of the way logical OR (||) works in JavaScript, cmp(a.last_nom, b.last_nom) is equivalent toIncidentally, this is called the three-way comparison \"spaceship\" (<=>) operator in other languages.Finally, here's the ES5-compatible syntax without using arrow functions:var objs = [ \n  { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n  { first_nom: 'Pig',    last_nom: 'Bodine'   },\n  { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\nfunction sortBy(fn) {\n  function cmp(a, b) { return -(a < b) || +(a > b); }\n  return function (a, b) { return cmp(fn(a), fn(b)); };\n}\n\nfunction getLastName(o) { return o.last_nom; }\nvar sortByLastName = sortBy(getLastName);\n\nobjs.sort(sortByLastName);\nconsole.log(objs.map(getLastName));",
                "Instead of using a custom comparison function, you could also create an object type with custom toString() method (which is invoked by the default comparison function):",
                "There are many good answers here, but I would like to point out that they can be extended very simply to achieve a lot more complex sorting. The only thing you have to do is to use the OR operator to chain comparison functions like this:Where fn1, fn2, ... are the sort functions which return [-1,0,1]. This results in \"sorting by fn1\" and \"sorting by fn2\" which is pretty much equal to ORDER BY in SQL.This solution is based on the behaviour of || operator which evaluates to the first evaluated expression which can be converted to true.The simplest form has only one inlined function like this:Having two steps with last_nom,first_nom sort order would look like this:A generic comparison function could be something like this:This function could be extended to support numeric fields, case-sensitivity, arbitrary data types, etc.You can use them by chaining them by sort priority:The point here is that pure JavaScript with functional approach can take you a long way without external libraries or complex code. It is also very effective, since no string parsing have to be done.",
                "The sort method can be modified to sort anything like an array of numbers, strings and even objects using a compare function.A compare function is passed as an optional argument to the sort method.This compare function accepts 2 arguments generally called a and b. Based on these 2 arguments you can modify the sort method to work as you want.Use the above concept to apply on your object where a will be your object property.var objs = [\n  { first_nom: 'Lazslo', last_nom: 'Jamf' },\n  { first_nom: 'Pig', last_nom: 'Bodine' },\n  { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\nfunction compare(a, b) {\n  if (a.last_nom > b.last_nom) return 1;\n  if (a.last_nom < b.last_nom) return -1;\n  return 0;\n}\nobjs.sort(compare);\nconsole.log(objs)\n// for better look use console.table(objs)",
                "Try this:",
                "Example Usage:Script:",
                "Write short code:",
                "I didn't see any implementation similar to mine. This version is based on the Schwartzian transform idiom.Here's an example how to use it:",
                "Since you probably encounter more complex data structures like this array, I would expand the solution.Are more pluggable version based on @ege-\u00d6zcan's very lovely answer.I encountered the below and couldn't change it. I also did not want to flatten the object temporarily. Nor did I want to use underscore / lodash, mainly for performance reasons and the fun to implement it myself.The goal is to sort it primarily by People.Name.name and secondarily by People.Name.surnameNow, in the base solution uses bracket notation to compute the properties to sort for dynamically. Here, though, we would have to construct the bracket notation dynamically also, since you would expect some like People['Name.name'] would work - which doesn't.Simply doing People['Name']['name'], on the other hand, is static and only allows you to go down the n-th level.The main addition here will be to walk down the object tree and determine the value of the last leaf, you have to specify, as well as any intermediary leaf.Working example on JSBin",
                "Combining Ege's dynamic solution with Vinay's idea, you get a nice robust solution:Array.prototype.sortBy = function() {\n  function _sortByAttr(attr) {\n    var sortOrder = 1;\n    if (attr[0] == \"-\") {\n      sortOrder = -1;\n      attr = attr.substr(1);\n    }\n    return function(a, b) {\n      var result = (a[attr] < b[attr]) ? -1 : (a[attr] > b[attr]) ? 1 : 0;\n      return result * sortOrder;\n    }\n  }\n\n  function _getSortFunc() {\n    if (arguments.length == 0) {\n      throw \"Zero length arguments not allowed for Array.sortBy()\";\n    }\n    var args = arguments;\n    return function(a, b) {\n      for (var result = 0, i = 0; result == 0 && i < args.length; i++) {\n        result = _sortByAttr(args[i])(a, b);\n      }\n      return result;\n    }\n  }\n  return this.sort(_getSortFunc.apply(null, arguments));\n}\n\nUsage:\n\n  // Utility for printing objects\n  Array.prototype.print = function(title) {\n    console.log(\"************************************************************************\");\n    console.log(\"**** \" + title);\n    console.log(\"************************************************************************\");\n    for (var i = 0; i < this.length; i++) {\n      console.log(\"Name: \" + this[i].FirstName, this[i].LastName, \"Age: \" + this[i].Age);\n    }\n  }\n\n// Setup sample data\nvar arrObj = [{\n    FirstName: \"Zach\",\n    LastName: \"Emergency\",\n    Age: 35\n  },\n  {\n    FirstName: \"Nancy\",\n    LastName: \"Nurse\",\n    Age: 27\n  },\n  {\n    FirstName: \"Ethel\",\n    LastName: \"Emergency\",\n    Age: 42\n  },\n  {\n    FirstName: \"Nina\",\n    LastName: \"Nurse\",\n    Age: 48\n  },\n  {\n    FirstName: \"Anthony\",\n    LastName: \"Emergency\",\n    Age: 44\n  },\n  {\n    FirstName: \"Nina\",\n    LastName: \"Nurse\",\n    Age: 32\n  },\n  {\n    FirstName: \"Ed\",\n    LastName: \"Emergency\",\n    Age: 28\n  },\n  {\n    FirstName: \"Peter\",\n    LastName: \"Physician\",\n    Age: 58\n  },\n  {\n    FirstName: \"Al\",\n    LastName: \"Emergency\",\n    Age: 51\n  },\n  {\n    FirstName: \"Ruth\",\n    LastName: \"Registration\",\n    Age: 62\n  },\n  {\n    FirstName: \"Ed\",\n    LastName: \"Emergency\",\n    Age: 38\n  },\n  {\n    FirstName: \"Tammy\",\n    LastName: \"Triage\",\n    Age: 29\n  },\n  {\n    FirstName: \"Alan\",\n    LastName: \"Emergency\",\n    Age: 60\n  },\n  {\n    FirstName: \"Nina\",\n    LastName: \"Nurse\",\n    Age: 54\n  }\n];\n\n//Unit Tests\narrObj.sortBy(\"LastName\").print(\"LastName Ascending\");\narrObj.sortBy(\"-LastName\").print(\"LastName Descending\");\narrObj.sortBy(\"LastName\", \"FirstName\", \"-Age\").print(\"LastName Ascending, FirstName Ascending, Age Descending\");\narrObj.sortBy(\"-FirstName\", \"Age\").print(\"FirstName Descending, Age Ascending\");\narrObj.sortBy(\"-Age\").print(\"Age Descending\");",
                "One more option:It sorts ascending by default.",
                "A simple way:See that '.toLowerCase()' is necessary to prevent erros \nin comparing strings.",
                "Warning!\nUsing this solution is not recommended as it does not result in a sorted array. It is being left here for future reference, because the idea is not rare.",
                "This is my take on this:The order parameter is optional and defaults to \"ASC\" for ascending order.It works on accented characters and it's case insensitive.Note: It sorts and returns the original array.Snippetfunction sanitizeToSort(str) {\n  return str\n    .normalize('NFD')                   // Remove accented characters\n    .replace(/[\\u0300-\\u036f]/g, '')    // Remove diacritics\n    .toLowerCase()\n  ;\n}\n\nfunction sortByProperty(arr, property, order=\"ASC\") {\n  arr.forEach((item) => item.tempProp = sanitizeToSort(item[property]));\n  arr.sort((a, b) => order === \"ASC\" ?\n      a.tempProp > b.tempProp ?  1 : a.tempProp < b.tempProp ? -1 : 0\n    : a.tempProp > b.tempProp ? -1 : a.tempProp < b.tempProp ?  1 : 0\n  );\n  arr.forEach((item) => delete item.tempProp);\n  return arr;\n}\n\nconst rockStars = [\n  { name: \"Axl\",\n    lastname: \"Rose\" },\n  { name: \"Elthon\",\n    lastname: \"John\" },\n  { name: \"Paul\",\n    lastname: \"McCartney\" },\n  { name: \"Lou\",\n    lastname: \"Reed\" },\n  { name: \"freddie\",             // Works on lower/upper case\n    lastname: \"mercury\" },\n  { name: \"\u00c1my\",                 // Works on accented characters too\n    lastname: \"winehouse\"}\n\n];\n\nsortByProperty(rockStars, \"name\");\n\nconsole.log(\"Ordered by name A-Z:\");\nrockStars.forEach((item) => console.log(item.name + \" \" + item.lastname));\n\nsortByProperty(rockStars, \"lastname\", \"DESC\");\n\nconsole.log(\"\\nOrdered by lastname Z-A:\");\nrockStars.forEach((item) => console.log(item.lastname + \", \" + item.name));",
                "A simple function that sorts an array of object by a property:Usage:",
                "Given the original example:Sort by multiple fields:Notes",
                "Additional desc parameters for Ege \u00d6zcan's code:",
                "Using Ramda,npm install ramda"
            ]
        },
        {
            "tag": "round",
            "patterns": [
                "How to round to at most 2 decimal places, if necessary",
                "how to round",
                "Decimal places"
            ],
            "responses": [
                "Use Math.round() :Or to be more specific and to ensure things like 1.005 round correctly, use Number.EPSILON  :",
                "If the value is a text type:If the value is a number:There is a downside that values like 1.5 will give \"1.50\" as the output. A fix suggested by @minitech:It seems like Math.round is a better solution. But it is not! In some cases it will not round correctly:toFixed() will also not round correctly in some cases (tested in Chrome v.55.0.2883.87)!Examples:I guess, this is because 1.555 is actually something like float 1.55499994 behind the scenes.Solution 1 is to use a script with required rounding algorithm, for example:It is also at Plunker.Note: This is not a universal solution for everyone. There are several different rounding algorithms. Your implementation can be different, and it depends on your requirements. See also Rounding.Solution 2 is to avoid front end calculations and pull rounded values from the backend server.Another possible solution, which is not a bulletproof either.In some cases, when you round a number like 1.3549999999999998, it will return an incorrect result. It should be 1.35, but the result is 1.36.",
                "I found this on MDN. Their way avoids the problem with 1.005 that was mentioned.function roundToTwo(num) {\n    return +(Math.round(num + \"e+2\")  + \"e-2\");\n}\n\nconsole.log('1.005 => ', roundToTwo(1.005));\nconsole.log('10 => ', roundToTwo(10));\nconsole.log('1.7777777 => ', roundToTwo(1.7777777));\nconsole.log('9.1 => ', roundToTwo(9.1));\nconsole.log('1234.5678 => ', roundToTwo(1234.5678));",
                "MarkG's answer is the correct one.  Here's a generic extension for any number of decimal places.Usage:Unit test:",
                "You should use:No one seems to be aware of Number.EPSILON.Also it's worth noting that this is not a JavaScript weirdness like some people stated.That is simply the way floating point numbers works in a computer. Like 99% of programming languages, JavaScript doesn't have home made floating point numbers; it relies on the CPU/FPU for that. A computer uses binary, and in binary, there isn't any numbers like 0.1, but a mere binary approximation for that. Why? For the same reason than 1/3 cannot be written in decimal: its value is 0.33333333... with an infinity of threes.Here come Number.EPSILON. That number is the difference between 1 and the next number existing in the double precision floating point numbers. That's it: There is no number between 1 and 1 + Number.EPSILON.EDIT:As asked in the comments, let's clarify one thing: adding Number.EPSILON is relevant only when the value to round is the result of an arithmetic operation, as it can swallow some floating point error delta.It's not useful when the value comes from a direct source (e.g.: literal, user input or sensor).EDIT (2019):Like @maganap and some peoples have pointed out, it's best to add Number.EPSILON before multiplying:EDIT (december 2019):Lately, I use a function similar to this one for comparing numbers epsilon-aware:My use-case is an assertion + data validation lib I'm developing for many years.In fact, in the code I'm using ESPILON_RATE = 1 + 4 * Number.EPSILON and EPSILON_ZERO = 4 * Number.MIN_VALUE (four times the epsilon), because I want an equality checker loose enough for cumulating floating point error.So far, it looks perfect for me.\nI hope it will help.",
                "In general, decimal rounding is done by scaling: round(num * p) / pNaive implementationUsing the following function with halfway numbers, you will get either the upper rounded value as expected, or the lower rounded value sometimes depending on the input.This inconsistency in rounding may introduce hard to detect bugs in the client code.function naiveRound(num, decimalPlaces = 0) {\n    var p = Math.pow(10, decimalPlaces);\n    return Math.round(num * p) / p;\n}\n\nconsole.log( naiveRound(1.245, 2) );  // 1.25 correct (rounded as expected)\nconsole.log( naiveRound(1.255, 2) );  // 1.25 incorrect (should be 1.26)\n\n// testing edge cases\nconsole.log( naiveRound(1.005, 2) );  // 1    incorrect (should be 1.01)\nconsole.log( naiveRound(2.175, 2) );  // 2.17 incorrect (should be 2.18)\nconsole.log( naiveRound(5.015, 2) );  // 5.01 incorrect (should be 5.02)In order to determine whether a rounding operation involves a midpoint value, the Round function multiplies the original value to be rounded by 10 ** n, where n is the desired number of fractional digits in the return value, and then determines whether the remaining fractional portion of the value is greater than or equal to .5. This \"Exact Testing for Equality\" with floating-point values are problematic because of the floating-point format's issues with binary representation and precision. This means that any fractional portion of a number that is slightly less than .5 (because of a loss of precision) will not be rounded upward.In the previous example, 5.015 is a midpoint value if it is to be rounded to two decimal places, the value of 5.015 * 100 is actually 501.49999999999994. Because .49999999999994 is less than .5, it is rounded down to 501 and finally the result is 5.01.Better implementationsExponential notationBy converting the number to a string in the exponential notation, positive numbers are rounded as expected.\nBut, be aware that negative numbers round differently than positive numbers.In fact, it performs what is basically equivalent to \"round half up\" as the rule, you will see that round(-1.005, 2) evaluates to -1 even though round(1.005, 2) evaluates to 1.01. The lodash _.round method uses this technique./**\n * Round half up ('round half towards positive infinity')\n * Negative numbers round differently than positive numbers.\n */\nfunction round(num, decimalPlaces = 0) {\n    num = Math.round(num + \"e\" + decimalPlaces);\n    return Number(num + \"e\" + -decimalPlaces);\n}\n\n// test rounding of half\nconsole.log( round(0.5) );  // 1\nconsole.log( round(-0.5) ); // 0\n\n// testing edge cases\nconsole.log( round(1.005, 2) );   // 1.01\nconsole.log( round(2.175, 2) );   // 2.18\nconsole.log( round(5.015, 2) );   // 5.02\n\nconsole.log( round(-1.005, 2) );  // -1\nconsole.log( round(-2.175, 2) );  // -2.17\nconsole.log( round(-5.015, 2) );  // -5.01If you want the usual behavior when rounding negative numbers, you would need to convert negative numbers to positive before calling Math.round(), and then convert them back to negative numbers before returning.Approximate roundingTo correct the rounding problem shown in the previous naiveRound example, we can define a custom rounding function that performs a \"nearly equal\" test to determine whether a fractional value is sufficiently close to a midpoint value to be subject to midpoint rounding.// round half away from zero\nfunction round(num, decimalPlaces = 0) {\n    if (num < 0)\n        return -round(-num, decimalPlaces);\n    var p = Math.pow(10, decimalPlaces);\n    var n = num * p;\n    var f = n - Math.floor(n);\n    var e = Number.EPSILON * n;\n\n    // Determine whether this fraction is a midpoint value.\n    return (f >= .5 - e) ? Math.ceil(n) / p : Math.floor(n) / p;\n}\n\n// test rounding of half\nconsole.log( round(0.5) );  // 1\nconsole.log( round(-0.5) ); // -1\n\n// testing edge cases\nconsole.log( round(1.005, 2) );  // 1.01\nconsole.log( round(2.175, 2) );  // 2.18\nconsole.log( round(5.015, 2) );  // 5.02\n\nconsole.log( round(-1.005, 2) ); // -1.01\nconsole.log( round(-2.175, 2) ); // -2.18\nconsole.log( round(-5.015, 2) ); // -5.02Number.EPSILONThere is a different purely mathematical technique to perform round-to-nearest (using \"round half away from zero\"), in which epsilon correction is applied before calling the rounding function.Simply, we add the smallest possible float value (= 1.0 ulp; unit in the last place) to the product before rounding. This moves to the next representable float value, away from zero, thus it will offset the binary round-off error that may occur during the multiplication by 10 ** n./**\n * Round half away from zero ('commercial' rounding)\n * Uses correction to offset floating-point inaccuracies.\n * Works symmetrically for positive and negative numbers.\n */\nfunction round(num, decimalPlaces = 0) {\n    var p = Math.pow(10, decimalPlaces);\n    var n = (num * p) * (1 + Number.EPSILON);\n    return Math.round(n) / p;\n}\n\n// rounding of half\nconsole.log( round(0.5) );  // 1\nconsole.log( round(-0.5) ); // -1\n\n// testing edge cases\nconsole.log( round(1.005, 2) );  // 1.01\nconsole.log( round(2.175, 2) );  // 2.18\nconsole.log( round(5.015, 2) );  // 5.02\n\nconsole.log( round(-1.005, 2) ); // -1.01\nconsole.log( round(-2.175, 2) ); // -2.18\nconsole.log( round(-5.015, 2) ); // -5.02After adding 1 ulp, the value of 5.015 * 100 which is 501.49999999999994 will be corrected to 501.50000000000006, this will rounded up to 502 and finally the result is 5.02.Note that the size of a unit in last place (\"ulp\") is determined by (1) the magnitude of the number and (2) the relative machine epsilon (2^-52). Ulps are relatively larger at numbers with bigger magnitudes than they are at numbers with smaller magnitudes.Double roundingHere, we use the toPrecision() method to strip the floating-point round-off errors in the intermediate calculations. Simply, we round to 15 significant figures to strip the round-off error at the 16th significant digit. This technique to preround the result to significant digits is also used by PHP 7 round function.The value of 5.015 * 100 which is 501.49999999999994 will be rounded first to 15 significant digits as 501.500000000000, then it will rounded up again to 502 and finally the result is 5.02.// Round half away from zero\nfunction round(num, decimalPlaces = 0) {\n    if (num < 0)\n        return -round(-num, decimalPlaces);\n    var p = Math.pow(10, decimalPlaces);\n    var n = (num * p).toPrecision(15);\n    return Math.round(n) / p;\n}\n\n// rounding of half\nconsole.log( round(0.5) );  // 1\nconsole.log( round(-0.5) ); // -1\n\n// testing edge cases\nconsole.log( round(1.005, 2) );  // 1.01\nconsole.log( round(2.175, 2) );  // 2.18\nconsole.log( round(5.015, 2) );  // 5.02\n\nconsole.log( round(-1.005, 2) ); // -1.01\nconsole.log( round(-2.175, 2) ); // -2.18\nconsole.log( round(-5.015, 2) ); // -5.02Arbitrary-precision JavaScript library - decimal.js// Round half away from zero\nfunction round(num, decimalPlaces = 0) {\n    return new Decimal(num).toDecimalPlaces(decimalPlaces).toNumber();\n}\n\n// rounding of half\nconsole.log( round(0.5) );  // 1\nconsole.log( round(-0.5) ); // -1\n\n// testing edge cases\nconsole.log( round(1.005, 2) );  // 1.01\nconsole.log( round(2.175, 2) );  // 2.18\nconsole.log( round(5.015, 2) );  // 5.02\n\nconsole.log( round(-1.005, 2) ); // -1.01\nconsole.log( round(-2.175, 2) ); // -2.18\nconsole.log( round(-5.015, 2) ); // -5.02\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/decimal.js/10.2.1/decimal.js\" integrity=\"sha512-GKse2KVGCCMVBn4riigHjXE8j5hCxYLPXDw8AvcjUtrt+a9TbZFtIKGdArXwYOlZvdmkhQLWQ46ZE3Q1RIa7uQ==\" crossorigin=\"anonymous\"></script>Solution 1: string in exponential notationInspired by the solution provided by KFish here: https://stackoverflow.com/a/55521592/4208440A simple drop in solution that provides accurate decimal rounding, flooring, and ceiling to a specific number of decimal places without adding a whole library. It treats floats more like decimals by fixing the binary rounding issues to avoid unexpected results: for example, floor((0.1+0.7)*10) will return the expected result 8.Numbers are rounded to a specific number of fractional digits. Specifying a negative precision will round to any number of places to the left of the decimal point.// Solution 1\nvar DecimalPrecision = (function() {\n    if (Math.trunc === undefined) {\n        Math.trunc = function(v) {\n            return v < 0 ? Math.ceil(v) : Math.floor(v);\n        };\n    }\n    var decimalAdjust = function myself(type, num, decimalPlaces) {\n        if (type === 'round' && num < 0)\n            return -myself(type, -num, decimalPlaces);\n        var shift = function(value, exponent) {\n            value = (value + 'e').split('e');\n            return +(value[0] + 'e' + (+value[1] + (exponent || 0)));\n        };\n        var n = shift(num, +decimalPlaces);\n        return shift(Math[type](n), -decimalPlaces);\n    };\n    return {\n        // Decimal round (half away from zero)\n        round: function(num, decimalPlaces) {\n            return decimalAdjust('round', num, decimalPlaces);\n        },\n        // Decimal ceil\n        ceil: function(num, decimalPlaces) {\n            return decimalAdjust('ceil', num, decimalPlaces);\n        },\n        // Decimal floor\n        floor: function(num, decimalPlaces) {\n            return decimalAdjust('floor', num, decimalPlaces);\n        },\n        // Decimal trunc\n        trunc: function(num, decimalPlaces) {\n            return decimalAdjust('trunc', num, decimalPlaces);\n        },\n        // Format using fixed-point notation\n        toFixed: function(num, decimalPlaces) {\n            return decimalAdjust('round', num, decimalPlaces).toFixed(decimalPlaces);\n        }\n    };\n})();\n\n// test rounding of half\nconsole.log(DecimalPrecision.round(0.5));  // 1\nconsole.log(DecimalPrecision.round(-0.5)); // -1\n\n// testing very small numbers\nconsole.log(DecimalPrecision.ceil(1e-8, 2) === 0.01);\nconsole.log(DecimalPrecision.floor(1e-8, 2) === 0);\n\n// testing simple cases\nconsole.log(DecimalPrecision.round(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision.round(-5.12, 1) === -5.1);\nconsole.log(DecimalPrecision.ceil(5.12, 1) === 5.2);\nconsole.log(DecimalPrecision.ceil(-5.12, 1) === -5.1);\nconsole.log(DecimalPrecision.floor(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision.floor(-5.12, 1) === -5.2);\nconsole.log(DecimalPrecision.trunc(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision.trunc(-5.12, 1) === -5.1);\n\n// testing edge cases for round\nconsole.log(DecimalPrecision.round(1.005, 2) === 1.01);\nconsole.log(DecimalPrecision.round(39.425, 2) === 39.43);\nconsole.log(DecimalPrecision.round(-1.005, 2) === -1.01);\nconsole.log(DecimalPrecision.round(-39.425, 2) === -39.43);\n\n// testing edge cases for ceil\nconsole.log(DecimalPrecision.ceil(9.13, 2) === 9.13);\nconsole.log(DecimalPrecision.ceil(65.18, 2) === 65.18);\nconsole.log(DecimalPrecision.ceil(-2.26, 2) === -2.26);\nconsole.log(DecimalPrecision.ceil(-18.15, 2) === -18.15);\n\n// testing edge cases for floor\nconsole.log(DecimalPrecision.floor(2.26, 2) === 2.26);\nconsole.log(DecimalPrecision.floor(18.15, 2) === 18.15);\nconsole.log(DecimalPrecision.floor(-9.13, 2) === -9.13);\nconsole.log(DecimalPrecision.floor(-65.18, 2) === -65.18);\n\n// testing edge cases for trunc\nconsole.log(DecimalPrecision.trunc(2.26, 2) === 2.26);\nconsole.log(DecimalPrecision.trunc(18.15, 2) === 18.15);\nconsole.log(DecimalPrecision.trunc(-2.26, 2) === -2.26);\nconsole.log(DecimalPrecision.trunc(-18.15, 2) === -18.15);\n\n// testing round to tens and hundreds\nconsole.log(DecimalPrecision.round(1262.48, -1) === 1260);\nconsole.log(DecimalPrecision.round(1262.48, -2) === 1300);\n\n// testing toFixed()\nconsole.log(DecimalPrecision.toFixed(1.005, 2) === \"1.01\");Solution 2: purely mathematical (Number.EPSILON)This solution avoids any string conversion / manipulation of any kind for performance reasons.// Solution 2\nvar DecimalPrecision2 = (function() {\n    if (Number.EPSILON === undefined) {\n        Number.EPSILON = Math.pow(2, -52);\n    }\n    if (Math.trunc === undefined) {\n        Math.trunc = function(v) {\n            return v < 0 ? Math.ceil(v) : Math.floor(v);\n        };\n    }\n    var powers = [\n        1e0,  1e1,  1e2,  1e3,  1e4,  1e5,  1e6,  1e7,\n        1e8,  1e9,  1e10, 1e11, 1e12, 1e13, 1e14, 1e15,\n        1e16, 1e17, 1e18, 1e19, 1e20, 1e21, 1e22\n    ];\n    var intpow10 = function(power) {\n        if (power < 0 || power > 22) {\n            return Math.pow(10, power);\n        }\n        return powers[power];\n    };\n    var isRound = function(num, decimalPlaces) {\n        //return decimalPlaces >= 0 &&\n        //    +num.toFixed(decimalPlaces) === num;\n        var p = intpow10(decimalPlaces);\n        return Math.round(num * p) / p === num;\n    };\n    var decimalAdjust = function(type, num, decimalPlaces) {\n        if (type !== 'round' && isRound(num, decimalPlaces || 0))\n            return num;\n        var p = intpow10(decimalPlaces || 0);\n        var n = (num * p) * (1 + Number.EPSILON);\n        return Math[type](n) / p;\n    };\n    return {\n        // Decimal round (half away from zero)\n        round: function(num, decimalPlaces) {\n            return decimalAdjust('round', num, decimalPlaces);\n        },\n        // Decimal ceil\n        ceil: function(num, decimalPlaces) {\n            return decimalAdjust('ceil', num, decimalPlaces);\n        },\n        // Decimal floor\n        floor: function(num, decimalPlaces) {\n            return decimalAdjust('floor', num, decimalPlaces);\n        },\n        // Decimal trunc\n        trunc: function(num, decimalPlaces) {\n            return decimalAdjust('trunc', num, decimalPlaces);\n        },\n        // Format using fixed-point notation\n        toFixed: function(num, decimalPlaces) {\n            return decimalAdjust('round', num, decimalPlaces).toFixed(decimalPlaces);\n        }\n    };\n})();\n\n// test rounding of half\nconsole.log(DecimalPrecision2.round(0.5));  // 1\nconsole.log(DecimalPrecision2.round(-0.5)); // -1\n\n// testing very small numbers\nconsole.log(DecimalPrecision2.ceil(1e-8, 2) === 0.01);\nconsole.log(DecimalPrecision2.floor(1e-8, 2) === 0);\n\n// testing simple cases\nconsole.log(DecimalPrecision2.round(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision2.round(-5.12, 1) === -5.1);\nconsole.log(DecimalPrecision2.ceil(5.12, 1) === 5.2);\nconsole.log(DecimalPrecision2.ceil(-5.12, 1) === -5.1);\nconsole.log(DecimalPrecision2.floor(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision2.floor(-5.12, 1) === -5.2);\nconsole.log(DecimalPrecision2.trunc(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision2.trunc(-5.12, 1) === -5.1);\n\n// testing edge cases for round\nconsole.log(DecimalPrecision2.round(1.005, 2) === 1.01);\nconsole.log(DecimalPrecision2.round(39.425, 2) === 39.43);\nconsole.log(DecimalPrecision2.round(-1.005, 2) === -1.01);\nconsole.log(DecimalPrecision2.round(-39.425, 2) === -39.43);\n\n// testing edge cases for ceil\nconsole.log(DecimalPrecision2.ceil(9.13, 2) === 9.13);\nconsole.log(DecimalPrecision2.ceil(65.18, 2) === 65.18);\nconsole.log(DecimalPrecision2.ceil(-2.26, 2) === -2.26);\nconsole.log(DecimalPrecision2.ceil(-18.15, 2) === -18.15);\n\n// testing edge cases for floor\nconsole.log(DecimalPrecision2.floor(2.26, 2) === 2.26);\nconsole.log(DecimalPrecision2.floor(18.15, 2) === 18.15);\nconsole.log(DecimalPrecision2.floor(-9.13, 2) === -9.13);\nconsole.log(DecimalPrecision2.floor(-65.18, 2) === -65.18);\n\n// testing edge cases for trunc\nconsole.log(DecimalPrecision2.trunc(2.26, 2) === 2.26);\nconsole.log(DecimalPrecision2.trunc(18.15, 2) === 18.15);\nconsole.log(DecimalPrecision2.trunc(-2.26, 2) === -2.26);\nconsole.log(DecimalPrecision2.trunc(-18.15, 2) === -18.15);\n\n// testing round to tens and hundreds\nconsole.log(DecimalPrecision2.round(1262.48, -1) === 1260);\nconsole.log(DecimalPrecision2.round(1262.48, -2) === 1300);\n\n// testing toFixed()\nconsole.log(DecimalPrecision2.toFixed(1.005, 2) === \"1.01\");Solution 3: double roundingThis solution uses the toPrecision() method to strip the floating-point round-off errors.// Solution 3\nvar DecimalPrecision3 = (function() {\n    if (Math.trunc === undefined) {\n        Math.trunc = function(v) {\n            return v < 0 ? Math.ceil(v) : Math.floor(v);\n        };\n    }\n    var powers = [\n        1e0,  1e1,  1e2,  1e3,  1e4,  1e5,  1e6,  1e7,\n        1e8,  1e9,  1e10, 1e11, 1e12, 1e13, 1e14, 1e15,\n        1e16, 1e17, 1e18, 1e19, 1e20, 1e21, 1e22\n    ];\n    var intpow10 = function(power) {\n        if (power < 0 || power > 22) {\n            return Math.pow(10, power);\n        }\n        return powers[power];\n    };\n    // Eliminate binary floating-point inaccuracies.\n    var stripError = function(num) {\n        if (Number.isInteger(num))\n            return num;\n        return parseFloat(num.toPrecision(15));\n    };\n    var decimalAdjust = function myself(type, num, decimalPlaces) {\n        if (type === 'round' && num < 0)\n            return -myself(type, -num, decimalPlaces);\n        var p = intpow10(decimalPlaces || 0);\n        var n = stripError(num * p);\n        return Math[type](n) / p;\n    };\n    return {\n        // Decimal round (half away from zero)\n        round: function(num, decimalPlaces) {\n            return decimalAdjust('round', num, decimalPlaces);\n        },\n        // Decimal ceil\n        ceil: function(num, decimalPlaces) {\n            return decimalAdjust('ceil', num, decimalPlaces);\n        },\n        // Decimal floor\n        floor: function(num, decimalPlaces) {\n            return decimalAdjust('floor', num, decimalPlaces);\n        },\n        // Decimal trunc\n        trunc: function(num, decimalPlaces) {\n            return decimalAdjust('trunc', num, decimalPlaces);\n        },\n        // Format using fixed-point notation\n        toFixed: function(num, decimalPlaces) {\n            return decimalAdjust('round', num, decimalPlaces).toFixed(decimalPlaces);\n        }\n    };\n})();\n\n// test rounding of half\nconsole.log(DecimalPrecision3.round(0.5));  // 1\nconsole.log(DecimalPrecision3.round(-0.5)); // -1\n\n// testing very small numbers\nconsole.log(DecimalPrecision3.ceil(1e-8, 2) === 0.01);\nconsole.log(DecimalPrecision3.floor(1e-8, 2) === 0);\n\n// testing simple cases\nconsole.log(DecimalPrecision3.round(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision3.round(-5.12, 1) === -5.1);\nconsole.log(DecimalPrecision3.ceil(5.12, 1) === 5.2);\nconsole.log(DecimalPrecision3.ceil(-5.12, 1) === -5.1);\nconsole.log(DecimalPrecision3.floor(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision3.floor(-5.12, 1) === -5.2);\nconsole.log(DecimalPrecision3.trunc(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision3.trunc(-5.12, 1) === -5.1);\n\n// testing edge cases for round\nconsole.log(DecimalPrecision3.round(1.005, 2) === 1.01);\nconsole.log(DecimalPrecision3.round(39.425, 2) === 39.43);\nconsole.log(DecimalPrecision3.round(-1.005, 2) === -1.01);\nconsole.log(DecimalPrecision3.round(-39.425, 2) === -39.43);\n\n// testing edge cases for ceil\nconsole.log(DecimalPrecision3.ceil(9.13, 2) === 9.13);\nconsole.log(DecimalPrecision3.ceil(65.18, 2) === 65.18);\nconsole.log(DecimalPrecision3.ceil(-2.26, 2) === -2.26);\nconsole.log(DecimalPrecision3.ceil(-18.15, 2) === -18.15);\n\n// testing edge cases for floor\nconsole.log(DecimalPrecision3.floor(2.26, 2) === 2.26);\nconsole.log(DecimalPrecision3.floor(18.15, 2) === 18.15);\nconsole.log(DecimalPrecision3.floor(-9.13, 2) === -9.13);\nconsole.log(DecimalPrecision3.floor(-65.18, 2) === -65.18);\n\n// testing edge cases for trunc\nconsole.log(DecimalPrecision3.trunc(2.26, 2) === 2.26);\nconsole.log(DecimalPrecision3.trunc(18.15, 2) === 18.15);\nconsole.log(DecimalPrecision3.trunc(-2.26, 2) === -2.26);\nconsole.log(DecimalPrecision3.trunc(-18.15, 2) === -18.15);\n\n// testing round to tens and hundreds\nconsole.log(DecimalPrecision3.round(1262.48, -1) === 1260);\nconsole.log(DecimalPrecision3.round(1262.48, -2) === 1300);\n\n// testing toFixed()\nconsole.log(DecimalPrecision3.toFixed(1.005, 2) === \"1.01\");Solution 4: double rounding v2This solution is just like Solution 3, however it uses a custom toPrecision() function.// Solution 4\nvar DecimalPrecision4 = (function() {\n    if (Math.trunc === undefined) {\n        Math.trunc = function(v) {\n            return v < 0 ? Math.ceil(v) : Math.floor(v);\n        };\n    }\n    var powers = [\n        1e0,  1e1,  1e2,  1e3,  1e4,  1e5,  1e6,  1e7,\n        1e8,  1e9,  1e10, 1e11, 1e12, 1e13, 1e14, 1e15,\n        1e16, 1e17, 1e18, 1e19, 1e20, 1e21, 1e22\n    ];\n    var intpow10 = function(power) {\n        if (power < 0 || power > 22) {\n            return Math.pow(10, power);\n        }\n        return powers[power];\n    };\n    var toPrecision = function(num, significantDigits) {\n        // Return early for \u00b10, NaN and Infinity.\n        if (!num || !Number.isFinite(num))\n            return num;\n        // Compute shift of the decimal point (sf - leftSidedDigits).\n        var shift = significantDigits - 1 - Math.floor(Math.log10(Math.abs(num)));\n        // Return if rounding to the same or higher precision.\n        var decimalPlaces = 0;\n        for (var p = 1; num != Math.round(num * p) / p; p *= 10) decimalPlaces++;\n        if (shift >= decimalPlaces)\n            return num;\n        // Round to \"shift\" fractional digits\n        var scale = intpow10(Math.abs(shift));\n        return shift > 0 ?\n            Math.round(num * scale) / scale :\n            Math.round(num / scale) * scale;\n    };\n    // Eliminate binary floating-point inaccuracies.\n    var stripError = function(num) {\n        if (Number.isInteger(num))\n            return num;\n        return toPrecision(num, 15);\n    };\n    var decimalAdjust = function myself(type, num, decimalPlaces) {\n        if (type === 'round' && num < 0)\n            return -myself(type, -num, decimalPlaces);\n        var p = intpow10(decimalPlaces || 0);\n        var n = stripError(num * p);\n        return Math[type](n) / p;\n    };\n    return {\n        // Decimal round (half away from zero)\n        round: function(num, decimalPlaces) {\n            return decimalAdjust('round', num, decimalPlaces);\n        },\n        // Decimal ceil\n        ceil: function(num, decimalPlaces) {\n            return decimalAdjust('ceil', num, decimalPlaces);\n        },\n        // Decimal floor\n        floor: function(num, decimalPlaces) {\n            return decimalAdjust('floor', num, decimalPlaces);\n        },\n        // Decimal trunc\n        trunc: function(num, decimalPlaces) {\n            return decimalAdjust('trunc', num, decimalPlaces);\n        },\n        // Format using fixed-point notation\n        toFixed: function(num, decimalPlaces) {\n            return decimalAdjust('round', num, decimalPlaces).toFixed(decimalPlaces);\n        }\n    };\n})();\n\n// test rounding of half\nconsole.log(DecimalPrecision4.round(0.5));  // 1\nconsole.log(DecimalPrecision4.round(-0.5)); // -1\n\n// testing very small numbers\nconsole.log(DecimalPrecision4.ceil(1e-8, 2) === 0.01);\nconsole.log(DecimalPrecision4.floor(1e-8, 2) === 0);\n\n// testing simple cases\nconsole.log(DecimalPrecision4.round(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision4.round(-5.12, 1) === -5.1);\nconsole.log(DecimalPrecision4.ceil(5.12, 1) === 5.2);\nconsole.log(DecimalPrecision4.ceil(-5.12, 1) === -5.1);\nconsole.log(DecimalPrecision4.floor(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision4.floor(-5.12, 1) === -5.2);\nconsole.log(DecimalPrecision4.trunc(5.12, 1) === 5.1);\nconsole.log(DecimalPrecision4.trunc(-5.12, 1) === -5.1);\n\n// testing edge cases for round\nconsole.log(DecimalPrecision4.round(1.005, 2) === 1.01);\nconsole.log(DecimalPrecision4.round(39.425, 2) === 39.43);\nconsole.log(DecimalPrecision4.round(-1.005, 2) === -1.01);\nconsole.log(DecimalPrecision4.round(-39.425, 2) === -39.43);\n\n// testing edge cases for ceil\nconsole.log(DecimalPrecision4.ceil(9.13, 2) === 9.13);\nconsole.log(DecimalPrecision4.ceil(65.18, 2) === 65.18);\nconsole.log(DecimalPrecision4.ceil(-2.26, 2) === -2.26);\nconsole.log(DecimalPrecision4.ceil(-18.15, 2) === -18.15);\n\n// testing edge cases for floor\nconsole.log(DecimalPrecision4.floor(2.26, 2) === 2.26);\nconsole.log(DecimalPrecision4.floor(18.15, 2) === 18.15);\nconsole.log(DecimalPrecision4.floor(-9.13, 2) === -9.13);\nconsole.log(DecimalPrecision4.floor(-65.18, 2) === -65.18);\n\n// testing edge cases for trunc\nconsole.log(DecimalPrecision4.trunc(2.26, 2) === 2.26);\nconsole.log(DecimalPrecision4.trunc(18.15, 2) === 18.15);\nconsole.log(DecimalPrecision4.trunc(-2.26, 2) === -2.26);\nconsole.log(DecimalPrecision4.trunc(-18.15, 2) === -18.15);\n\n// testing round to tens and hundreds\nconsole.log(DecimalPrecision4.round(1262.48, -1) === 1260);\nconsole.log(DecimalPrecision4.round(1262.48, -2) === 1300);\n\n// testing toFixed()\nconsole.log(DecimalPrecision4.toFixed(1.005, 2) === \"1.01\");http://jsbench.github.io/#31ec3a8b3d22bd840f8e6822e681a3acHere is a benchmark comparing the operations per second in the solutions above on Chrome 85.0.4183.83. Obviously all browsers differ, so your mileage may vary.(Note: More is better)Thanks @Mike for adding a screenshot of the benchmark.",
                "This question is complicated.Suppose we have a function, roundTo2DP(num), that takes a float as an argument and returns a value rounded to 2 decimal places. What should each of these expressions evaluate to?The 'obvious' answer is that the first example should round to 0.01 (because it's closer to 0.01 than to 0.02) while the other two should round to 0.02 (because 0.0150000000000000001 is closer to 0.02 than to 0.01, and because 0.015 is exactly halfway between them and there is a mathematical convention that such numbers get rounded up).The catch, which you may have guessed, is that roundTo2DP cannot possibly be implemented to give those obvious answers, because all three numbers passed to it are the same number. IEEE 754 binary floating point numbers (the kind used by JavaScript) can't exactly represent most non-integer numbers, and so all three numeric literals above get rounded to a nearby valid floating point number. This number, as it happens, is exactly0.01499999999999999944488848768742172978818416595458984375which is closer to 0.01 than to 0.02.You can see that all three numbers are the same at your browser console, Node shell, or other JavaScript interpreter. Just compare them:So when I write m = 0.0150000000000000001, the exact value of m that I end up with is closer to 0.01 than it is to 0.02. And yet, if I convert m to a String...... I get 0.015, which should round to 0.02, and which is noticeably not the 56-decimal-place number I earlier said that all of these numbers were exactly equal to. So what dark magic is this?The answer can be found in the ECMAScript specification, in section 7.1.12.1: ToString applied to the Number type. Here the rules for converting some Number m to a String are laid down. The key part is point 5, in which an integer s is generated whose digits will be used in the String representation of m:let n, k, and s be integers such that k \u2265 1, 10k-1 \u2264 s < 10k, the Number value for s \u00d7 10n-k is m, and k is as small as possible. Note that k is the number of digits in the decimal representation of s, that s is not divisible by 10, and that the least significant digit of s is not necessarily uniquely determined by these criteria.The key part here is the requirement that \"k is as small as possible\". What that requirement amounts to is a requirement that, given a Number m, the value of String(m) must have the least possible number of digits while still satisfying the requirement that Number(String(m)) === m. Since we already know that 0.015 === 0.0150000000000000001, it's now clear why String(0.0150000000000000001) === '0.015' must be true.Of course, none of this discussion has directly answered what roundTo2DP(m) should return. If m's exact value is 0.01499999999999999944488848768742172978818416595458984375, but its String representation is '0.015', then what is the correct answer - mathematically, practically, philosophically, or whatever - when we round it to two decimal places?There is no single correct answer to this. It depends upon your use case. You probably want to respect the String representation and round upwards when:On the other hand, you probably want to respect the binary floating point value and round downwards when your value is from an inherently continuous scale - for instance, if it's a reading from a sensor.These two approaches require different code. To respect the String representation of the Number, we can (with quite a bit of reasonably subtle code) implement our own rounding that acts directly on the String representation, digit by digit, using the same algorithm you would've used in school when you were taught how to round numbers. Below is an example which respects the OP's requirement of representing the number to 2 decimal places \"only when necessary\" by stripping trailing zeroes after the decimal point; you may, of course, need to tweak it to your precise needs.Example usage:The function above is probably what you want to use to avoid users ever witnessing numbers that they have entered being rounded wrongly.(As an alternative, you could also try the round10 library which provides a similarly-behaving function with a wildly different implementation.)But what if you have the second kind of Number - a value taken from a continuous scale, where there's no reason to think that approximate decimal representations with fewer decimal places are more accurate than those with more? In that case, we don't want to respect the String representation, because that representation (as explained in the spec) is already sort-of-rounded; we don't want to make the mistake of saying \"0.014999999...375 rounds up to 0.015, which rounds up to 0.02, so 0.014999999...375 rounds up to 0.02\".Here we can simply use the built-in toFixed method. Note that by calling Number() on the String returned by toFixed, we get a Number whose String representation has no trailing zeroes (thanks to the way JavaScript computes the String representation of a Number, discussed earlier in this answer).",
                "Consider .toFixed() and .toPrecision():http://www.javascriptkit.com/javatutors/formatnumber.shtml",
                "One can use .toFixed(NumberOfDecimalPlaces).",
                "Here is a simple way to do it:You might want to go ahead and make a separate function to do it for you though:Then you would simply pass in the value.You could enhance it to round to any arbitrary number of decimals by adding a second parameter.",
                "A precise rounding method. Source: MozillaExamples:",
                "None of the answers found here is correct. stinkycheeseman asked to round up, but you all rounded the number.To round up, use this:",
                "This may help you:For more information, you can have a look at Math.round(num) vs num.toFixed(0) and browser inconsistencies",
                "For me Math.round() was not giving correct answer. I found toFixed(2) works better. \nBelow are examples of both:console.log(Math.round(43000 / 80000) * 100); // wrong answer\r\n\r\nconsole.log(((43000 / 80000) * 100).toFixed(2)); // correct answer",
                "Use this function Number(x).toFixed(2);",
                "If you are using the Lodash library, you can use the round method of Lodash like following.For example:",
                "Try this lightweight solution:",
                "There are a couple of ways to do that. For people like me, Lodash's variantUsage:If your project uses jQuery or Lodash, you can also find the proper round method in the libraries.",
                "2017\nJust use native code .toFixed()If you need to be strict and add digits just if needed it can use replace",
                "Since ES6 there is a 'proper' way (without overriding statics and creating workarounds) to do this by using toPrecisionvar x = 1.49999999999;\r\nconsole.log(x.toPrecision(4));\r\nconsole.log(x.toPrecision(3));\r\nconsole.log(x.toPrecision(2));\r\n\r\nvar y = Math.PI;\r\nconsole.log(y.toPrecision(6));\r\nconsole.log(y.toPrecision(5));\r\nconsole.log(y.toPrecision(4));\r\n\r\nvar z = 222.987654\r\nconsole.log(z.toPrecision(6));\r\nconsole.log(z.toPrecision(5));\r\nconsole.log(z.toPrecision(4));then you can just parseFloat and zeroes will 'go away'.console.log(parseFloat((1.4999).toPrecision(3)));\r\nconsole.log(parseFloat((1.005).toPrecision(3)));\r\nconsole.log(parseFloat((1.0051).toPrecision(3)));It doesn't solve the '1.005 rounding problem' though - since it is intrinsic to how float fractions are being processed.console.log(1.005 - 0.005);If you are open to libraries you can use bignumber.jsconsole.log(1.005 - 0.005);\r\nconsole.log(new BigNumber(1.005).minus(0.005));\r\n\r\nconsole.log(new BigNumber(1.005).round(4));\r\nconsole.log(new BigNumber(1.005).round(3));\r\nconsole.log(new BigNumber(1.005).round(2));\r\nconsole.log(new BigNumber(1.005).round(1));\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bignumber.js/2.3.0/bignumber.min.js\"></script>",
                "Another simple solution (without writing any function) may to use toFixed() and then convert to float again:For example:",
                "One way to achieve such a rounding only if necessary is to use Number.prototype.toLocaleString():This will provide exactly the output you expect, but as strings. You can still convert those back to numbers if that's not the data type you expect.",
                "The easiest approach would be to use toFixed and then strip trailing zeros using the Number function:",
                "MarkG and Lavamantis offered a much better solution than the one that has been accepted. It's a shame they don't get more upvotes!Here is the function I use to solve the floating point decimals issues also based on MDN. It is even more generic (but less concise) than Lavamantis's solution:Use it with:Compared to Lavamantis's solution, we can do...",
                "It may work for you,to know the difference between toFixed and round. You can have a look at Math.round(num) vs num.toFixed(0) and browser inconsistencies.",
                "This is the simplest, more elegant solution (and I am the best of the world;):Modern syntax alternative with fallback values",
                "Keep the type as integer for later sorting or other arithmetic operations:1.781.781.77Or convert to a string:\"1.77\"",
                "toFixed(2): Here 2 is the number of digits up to which we want to round this number.",
                "See AmrAli's answer for a more thorough run through and performance breakdown of all the various adaptations of this solution.var DecimalPrecision = (function(){\n    if (Number.EPSILON === undefined) {\n        Number.EPSILON = Math.pow(2, -52);\n    }\n    if(Number.isInteger === undefined){\n        Number.isInteger = function(value) {\n            return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n        };\n    }\n    this.isRound = function(n,p){\n        let l = n.toString().split('.')[1].length;\n        return (p >= l);\n    }\n    this.round = function(n, p=2){\n        if(Number.isInteger(n) || this.isRound(n,p))\n            return n;\n        let r = 0.5 * Number.EPSILON * n;\n        let o = 1; while(p-- > 0) o *= 10;\n        if(n<0)\n            o *= -1;\n        return Math.round((n + r) * o) / o;\n    }\n    this.ceil = function(n, p=2){\n        if(Number.isInteger(n) || this.isRound(n,p))\n            return n;\n        let r = 0.5 * Number.EPSILON * n;\n        let o = 1; while(p-- > 0) o *= 10;\n\n        return Math.ceil((n + r) * o) / o;\n    }\n    this.floor = function(n, p=2){\n        if(Number.isInteger(n) || this.isRound(n,p))\n            return n;\n        let r = 0.5 * Number.EPSILON * n;\n        let o = 1; while(p-- > 0) o *= 10;\n\n        return Math.floor((n + r) * o) / o;\n    }\n    return this;\n})();\n\nconsole.log(DecimalPrecision.round(1.005));\nconsole.log(DecimalPrecision.ceil(1.005));\nconsole.log(DecimalPrecision.floor(1.005));\nconsole.log(DecimalPrecision.round(1.0049999));\nconsole.log(DecimalPrecision.ceil(1.0049999));\nconsole.log(DecimalPrecision.floor(1.0049999));\nconsole.log(DecimalPrecision.round(2.175495134384,7));\nconsole.log(DecimalPrecision.round(2.1753543549,8));\nconsole.log(DecimalPrecision.round(2.1755465135353,4));\nconsole.log(DecimalPrecision.ceil(17,4));\nconsole.log(DecimalPrecision.ceil(17.1,4));\nconsole.log(DecimalPrecision.ceil(17.1,15));"
            ]
        },
        {
            "tag": "check_key",
            "patterns": [
                "Checking if a key exists in a JavaScript object?",
                "Check for a key",
                "Check if a key exists"
            ],
            "responses": [
                "Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually undefined?var obj = { key: undefined };\nconsole.log(obj[\"key\"] !== undefined); // false, but the key exists!You should instead use the in operator:var obj = { key: undefined };\nconsole.log(\"key\" in obj); // true, regardless of the actual valueIf you want to check if a key doesn't exist, remember to use parenthesis:var obj = { not_key: undefined };\nconsole.log(!(\"key\" in obj)); // true if \"key\" doesn't exist in object\nconsole.log(!\"key\" in obj);   // Do not do this! It is equivalent to \"false in obj\"Or, if you want to particularly test for properties of the object instance (and not inherited properties), use hasOwnProperty:var obj = { key: undefined };\nconsole.log(obj.hasOwnProperty(\"key\")); // trueFor performance comparison between the methods that are in, hasOwnProperty and key is undefined, see this benchmark:",
                "How do I check if a particular key exists in a JavaScript object or array?\nIf a key doesn't exist and I try to access it, will it return false? Or throw an error?Accessing directly a missing property using (associative) array style or object style will return an undefined constant.As people have already mentioned here, you could have an object with a property associated with an \"undefined\" constant.In that case, you will have to use hasOwnProperty or in operator to know if the key is really there. But, but at what price?so, I tell you...in operator and hasOwnProperty are \"methods\" that use the Property Descriptor mechanism in Javascript (similar to Java reflection in the Java language).http://www.ecma-international.org/ecma-262/5.1/#sec-8.10The Property Descriptor type is used to explain the manipulation and reification of named property attributes. Values of the Property Descriptor type are records composed of named fields where each field\u2019s name is an attribute name and its value is a corresponding attribute value as specified in 8.6.1. In addition, any field may be present or absent.On the other hand, calling an object method or key will use Javascript [[Get]] mechanism. That is a far way faster!https://jsben.ch/HaHQt.The result wasThe result wasThe result wasThe result wasThat question puzzles me. In Javascript, there are at least two references for absent objects to avoid problems like this: null and undefined.null is the primitive value that represents the intentional absence of any object value, or in short terms, the confirmed lack of value. On the other hand, undefined is an unknown value (not defined). If there is a property that will be used later with a proper value consider use null reference instead of undefined because in the initial moment the property is confirmed to lack value.Compare:Avoid objects with undefined values. Check directly whenever possible and use null to initialize property values. Otherwise, use the slow in operator or hasOwnProperty() method.As people have commented, modern versions of the Javascript engines (with firefox exception) have changed the approach for access properties. The current implementation is slower than the previous one for this particular case but the difference between access key and object is neglectable.",
                "It will return undefined.var aa = {hello: \"world\"};\r\nalert( aa[\"hello\"] );      // popup box with \"world\"\r\nalert( aa[\"goodbye\"] );    // popup box with \"undefined\"undefined is a special constant value.  So you can say, e.g.This is probably the best way to check for missing keys.  However, as is pointed out in a comment below, it's theoretically possible that you'd want to have the actual value be undefined.  I've never needed to do this and can't think of a reason offhand why I'd ever want to, but just for the sake of completeness, you can use the in operator",
                "Is likely testing only object attribute values that are very different from array keys",
                "Could be determined using the in operator which returns true if the specified property is in the specified object or its prototype chain, false otherwiseconst person = { name: 'dan' };\n\nconsole.log('name' in person); // true\nconsole.log('age' in person); // false*2021 - Using the new method ***Object.hasOwn() as a replacement for Object.hasOwnProperty()Object.hasOwn() is intended as a replacement for Object.hasOwnProperty() and is a new method available to use (yet still not fully supported by all browsers like safari yet but soon will be)Object.hasOwn() is a static method which returns true if the specified object has the specified property as its own property. If the property is inherited, or does not exist, the method returns false.const person = { name: 'dan' };\n\nconsole.log(Object.hasOwn(person, 'name'));// true\nconsole.log(Object.hasOwn(person, 'age'));// false\n\nconst person2 = Object.create({gender: 'male'});\n\nconsole.log(Object.hasOwn(person2, 'gender'));// falseWhat is the motivation to use it over Object.prototype.hasOwnProperty? - It is recommended to this method use over the Object.hasOwnProperty() because it also works for objects created by using Object.create(null) and for objects that have overridden the inherited hasOwnProperty() method. Although it's possible to solve these kind of problems by calling Object.prototype.hasOwnProperty() on an external object, Object.hasOwn() overcome these problems, hence is preferred (see examples below)let person = {\n  hasOwnProperty: function() {\n    return false;\n  },\n  age: 35\n};\n\nif (Object.hasOwn(person, 'age')) {\n  console.log(person.age); // true - the remplementation of hasOwnProperty() did not affect the Object\n}let person = Object.create(null);\nperson.age = 35;\nif (Object.hasOwn(person, 'age')) {\n  console.log(person.age); // true - works regardless of how the object was created\n}More about Object.hasOwn can be found here : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnBrowser compatibility for Object.hasOwn - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn#browser_compatibility",
                "The accepted answer refers to Object. Beware using the in operator on Array to find data instead of keys:To test existing elements in an Array: Best way to find if an item is in a JavaScript array?",
                "Three ways to check if a property is present in a javascript object:Reference:http://book.mixu.net/node/ch5.html",
                "If you are using underscore.js library then object/array operations become simple.In your case _.has method can be used. Example:returns trueBut,returns false",
                "Answer:Explanation:The in operator will check if the key exists in the object. If you checked if the value was undefined: if (myObj[\"key\"] === 'undefined'), you could run into problems because a key could possibly exist in your object with the undefined value.For that reason, it is much better practice to first use the in operator and then compare the value that is inside the key once you already know it exists.",
                "This keyExists(key, search) can be used to easily lookup a key within  objects or arrays!Just pass it the key you want to find, and search obj (the object or array) you want to find it in.function keyExists(key, search) {\r\n        if (!search || (search.constructor !== Array && search.constructor !== Object)) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < search.length; i++) {\r\n            if (search[i] === key) {\r\n                return true;\r\n            }\r\n        }\r\n        return key in search;\r\n    }\r\n\r\n// How to use it:\r\n// Searching for keys in Arrays\r\nconsole.log(keyExists('apple', ['apple', 'banana', 'orange'])); // true\r\nconsole.log(keyExists('fruit', ['apple', 'banana', 'orange'])); // false\r\n\r\n// Searching for keys in Objects\r\nconsole.log(keyExists('age', {'name': 'Bill', 'age': 29 })); // true\r\nconsole.log(keyExists('title', {'name': 'Jason', 'age': 29 })); // falseIt's been pretty reliable and works well cross-browser.",
                "vanila jsIf you want to check if the object has at least one property in es2015",
                "using Array#some and Object.keys. It will return true if given key exists in the object or false if it doesn't.var obj = {foo: 'one', bar: 'two'};\r\n    \r\nfunction isKeyInObject(obj, key) {\r\n    var res = Object.keys(obj).some(v => v == key);\r\n    console.log(res);\r\n}\r\n\r\nisKeyInObject(obj, 'foo');\r\nisKeyInObject(obj, 'something');One-line example.console.log(Object.keys({foo: 'one', bar: 'two'}).some(v => v == 'foo'));",
                "const invoice = {customer: {address: {city: \"foo\"}}}\n\nconsole.log( invoice?.customer?.address?.city )\nconsole.log( invoice?.customer?.address?.street )\nconsole.log( invoice?.xyz?.address?.city )See supported browsers listGets the value at path of object. If the resolved value is undefined,\nthe defaultValue is returned in its place.var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\nconsole.log(\n  _.get(object, 'a[0].b.c'),           // => 3\n  _.get(object, ['a', '0', 'b', 'c']), // => 3\n  _.get(object, 'a.b.c'),              // => undefined \n  _.get(object, 'a.b.c', 'default')    // => 'default'\n)\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js\"></script>This will effectively check if that key, however deep, is defined and will not throw an error which might harm the flow of your program if that key is not defined.",
                "The easiest way to check isfor example:Return value as true implies that key exists in the object.",
                "Optional Chaining (?.) operator can also be used for thisSource: MDN/Operators/Optional_chainingconst adventurer = {\n  name: 'Alice',\n  cat: {\n    name: 'Dinah'\n  }\n}\n\nconsole.log(adventurer.dog?.name) // undefined\nconsole.log(adventurer.cat?.name) // Dinah",
                "To find if a key exists in an object, useObject.keys(obj).includes(key)The ES7 includes method checks if an Array includes an item or not, & is a simpler alternative to indexOf.",
                "The underscore.js way -",
                "If you want to check for any key at any depth on an object and account for falsey values consider this line for a utility function:ResultsAlso see this NPM package: https://www.npmjs.com/package/has-deep-value",
                "While this doesn't necessarily check if a key exists, it does check for the truthiness of a value. Which undefined and null fall under.Boolean(obj.foo)This solution works best for me because I use typescript, and using strings like so 'foo' in obj or obj.hasOwnProperty('foo') \n  to check whether a key exists or not does not provide me with intellisense.",
                "As per MDNReflect is a built-in object that provides methods for interceptable\nJavaScript operations.The static Reflect.has() method works like the in operator as a\nfunction.var obj = {\n  a: undefined,\n  b: 1,\n  c: \"hello world\"\n}\nconsole.log(Reflect.has(obj, 'a'))\nconsole.log(Reflect.has(obj, 'b'))\nconsole.log(Reflect.has(obj, 'c'))\nconsole.log(Reflect.has(obj, 'd'))It depends.Reflect.has() is slower than the other methods mentioned on the accepted answer (as per my benchmark test). But, if you are using it only a few times in your code, I don't see much issues with this approach.",
                "In 'array' world we can look on indexes as some kind of keys. What is surprising the in operator (which is good choice for object) also works with arrays. The returned value for non-existed key is undefinedlet arr = [\"a\",\"b\",\"c\"]; // we have indexes: 0,1,2\r\ndelete arr[1];           // set 'empty' at index 1\r\narr.pop();               // remove last item\r\n\r\nconsole.log(0 in arr,  arr[0]);\r\nconsole.log(1 in arr,  arr[1]);\r\nconsole.log(2 in arr,  arr[2]);",
                "Worth noting that since the introduction of ES11 you can use the nullish coalescing operator, which simplifies things a lot:The code above will return \"Not found\" for any \"falsy\" values in foo. Otherwise it will return obj.foo.See Combining with the nullish coalescing operator",
                "JS Double Exclamation !! sign may help in this case.Suppose we have the object above and If you try to log car with petrol price.You'll definitely get 5000 out of it. But what if you try to get an\nelectric car which does not exist then you'll get undefineBut using !! which is its short way to cast a variable to be a\nBoolean (true or false) value.",
                "In my case, I wanted to check an NLP metadata returned by LUIS which is an object.  I wanted to check if a key which is a string \"FinancialRiskIntent\" exists as a key inside that metadata object.const hasKey = 'FinancialRiskIntent' in data.meta.prediction.intents;\n\nif(hasKey) {\n  console.log('The key exists.');\n}\nelse {\n  console.log('The key does not exist.');\n}This is checking for a specific key which I was initially looking for.Hope this bit helps someone.",
                "yourArray.indexOf(yourArrayKeyName) > -1truefalsefor strict object keys checking:",
                "These example can demonstrate the differences between defferent ways. Hope it will help you to pick the right one for your needs:",
                "checking particular key present in given object, hasOwnProperty will works here.",
                "If you have ESLint configured in your project follows ESLint rule no-prototype-builtins. The reason why has been described in the following link:",
                "New awesome solution with JavaScript Destructuring:Do check other use of JavaScript Destructuring"
            ]
        },
        {
            "tag": "check_empty_string",
            "patterns": [
                "How do I check for an empty/undefined/null string in JavaScript?",
                "Check for null string",
                "null string",
                "Check for empty string"
            ],
            "responses": [
                "To check for a truthy value:To check for a falsy value:To check for exactly an empty string, compare for strict equality against \"\" using the === operator:To check for not an empty string strictly, use the !== operator:",
                "For checking if a variable is falsey or if it has length attribute equal to zero (which for a string, means it is empty), I use:(Note that strings aren't the only variables with a length attribute, arrays have them as well, for example.)Alternativaly, you can use the (not so) newly optional chaining and arrow functions to simplify:It will check the length, returning undefined in case of a nullish value, without throwing an error. In the case of an empty value, zero is falsy and the result is still valid.For checking if a variable is falsey or if the string only contains whitespace or is empty, I use:If you want, you can monkey-patch the String prototype like this:Note that monkey-patching built-in types are controversial, as it can break code that depends on the existing structure of built-in types, for whatever reason.",
                "All the previous answers are good, but this will be even better. Use dual NOT operators (!!):Or use type casting:Both do the same function. Typecast the variable to Boolean, where str is a variable.It returns false for null, undefined, 0, 000, \"\", false.It returns true for all string values other than the empty string (including strings like \"0\" and \" \")",
                "The closest thing you can get to str.Empty (with the precondition that str is a String) is:",
                "If you need to make sure that the string is not just a bunch of empty spaces (I'm assuming this is for form validation) you need to do a replace on the spaces.",
                "I use:",
                "I perform tests on macOS v10.13.6 (High Sierra) for 18 chosen solutions. Solutions works slightly different (for corner-case input data) which was presented in the snippet below.ConclusionsIn the below snippet I compare results of chosen 18 methods by use different input parametersNot all tested methods support all input cases.function A(str) {\r\n  let r=1;\r\n  if (!str)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction B(str) {\r\n  let r=1;\r\n  if (str == \"\")\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction C(str) {\r\n  let r=1;\r\n  if (str === \"\")\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction D(str) {\r\n  let r=1;\r\n  if(!str || 0 === str.length)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction E(str) {\r\n  let r=1;\r\n  if(!str || /^\\s*$/.test(str))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction F(str) {\r\n  let r=1;\r\n  if(!Boolean(str))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction G(str) {\r\n  let r=1;\r\n  if(! ((typeof str != 'undefined') && str) )\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction H(str) {\r\n  let r=1;\r\n  if(!/\\S/.test(str))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction I(str) {\r\n  let r=1;\r\n  if (!str.length)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction J(str) {\r\n  let r=1;\r\n  if(str.length <= 0)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction K(str) {\r\n  let r=1;\r\n  if(str.length === 0 || !str.trim())\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction L(str) {\r\n  let r=1;\r\n  if ( str.replace(/\\s/g,\"\") == \"\")\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction M(str) {\r\n  let r=1;\r\n  if((/^\\s*$/).test(str))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\n\r\nfunction N(str) {\r\n  let r=1;\r\n  if(!str || !str.trim().length)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction O(str) {\r\n  let r=1;\r\n  if(!str || !str.trim())\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction P(str) {\r\n  let r=1;\r\n  if(!str.charAt(0))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction Q(str) {\r\n  let r=1;\r\n  if(!str || (str.trim()==''))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction R(str) {\r\n  let r=1;\r\n  if (typeof str == 'undefined' ||\r\n      !str ||\r\n      str.length === 0 ||\r\n      str === \"\" ||\r\n      !/[^\\s]/.test(str) ||\r\n      /^\\s*$/.test(str) ||\r\n      str.replace(/\\s/g,\"\") === \"\")\r\n\r\n    r=0;\r\n  return r;\r\n}\r\n\r\n\r\n\r\n\r\n// --- TEST ---\r\n\r\nconsole.log(                  '   \"\"  \"a\"  \" \" [] {} 0 1 NaN Infinity f true false null undefined ');\r\nlet log1 = (s,f)=> console.log(`${s}: ${f(\"\")}   ${f(\"a\")}    ${f(\" \")}   ${f([])}  ${f({})}  ${f(0)} ${f(1)} ${f(NaN)}   ${f(Infinity)}        ${f(f)} ${f(true)}    ${f(false)}     ${f(null)}    ${f(undefined)}`);\r\nlet log2 = (s,f)=> console.log(`${s}: ${f(\"\")}   ${f(\"a\")}    ${f(\" \")}   ${f([])}  ${f({})}  ${f(0)} ${f(1)} ${f(NaN)}   ${f(Infinity)}        ${f(f)} ${f(true)}    ${f(false)}`);\r\nlet log3 = (s,f)=> console.log(`${s}: ${f(\"\")}   ${f(\"a\")}    ${f(\" \")}`);\r\n\r\nlog1('A', A);\r\nlog1('B', B);\r\nlog1('C', C);\r\nlog1('D', D);\r\nlog1('E', E);\r\nlog1('F', F);\r\nlog1('G', G);\r\nlog1('H', H);\r\n\r\nlog2('I', I);\r\nlog2('J', J);\r\n\r\nlog3('K', K);\r\nlog3('L', L);\r\nlog3('M', M);\r\nlog3('N', N);\r\nlog3('O', O);\r\nlog3('P', P);\r\nlog3('Q', Q);\r\nlog3('R', R);And then for all methods I perform speed test case str = \"\" for browsers Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0 - you can run tests on your machine here",
                "You can use lodash:\n_.isEmpty(value).It covers a lot of cases like {}, '', null, undefined, etc.But it always returns true for Number type of JavaScript primitive data types like _.isEmpty(10) or _.isEmpty(Number.MAX_VALUE) both returns true.",
                "Very generic \"All-In-One\" Function (not recommended though):However, I don't recommend to use that, because your target variable should be of specific type (i.e. string, or numeric, or object?), so apply the checks that are relative to that variable.",
                "There's nothing representing an empty string in JavaScript. Do a check against either length (if you know that the var will always be a string) or against \"\"",
                "Try:",
                "I would not worry too much about the most efficient method. Use what is most clear to your intention. For me that's usually strVar == \"\".As per the comment from Constantin, if strVar could some how end up containing an integer 0 value, then that would indeed be one of those intention-clarifying situations.",
                "You could also go with regular expressions:Checks for strings that are either empty or filled with whitespace.",
                "A lot of answers, and a lot of different possibilities!Without a doubt for quick and simple implementation the winner is: if (!str.length) {...}However, as many other examples are available. The best functional method to go about this, I would suggest:function empty(str)\n{\n    if (typeof str == 'undefined' || !str || str.length === 0 || str === \"\" || !/[^\\s]/.test(str) || /^\\s*$/.test(str) || str.replace(/\\s/g,\"\") === \"\")\n        return true;\n    else\n        return false;\n}A bit excessive, I know.",
                "trim out the false spaces in the value, then test for emptiness",
                "I usually use something like this,",
                "Also, in case you consider a whitespace filled string as \"empty\".You can test it with this regular expression:",
                "If one needs to detect not only empty but also blank strings, I'll add to Goral's answer:",
                "Starting with:Looking at the last condition, if value == \"\", its length must be 0. Therefore drop it:But wait! In JavaScript, an empty string is false. Therefore, drop value == \"\":And !undefined is true, so that check isn't needed. So we have:And we don't need parentheses:",
                "I use a combination, and the fastest checks are first.",
                "I have not noticed an answer that takes into account the possibility of null characters in a string. For example, if we have a null character string:To test its nullness one could do something like this:It works on a null string, and on an empty string and it is accessible for all strings. In addition, it could be expanded to contain other JavaScript empty or whitespace characters (i.e. nonbreaking space, byte order mark, line/paragraph separator, etc.).",
                "Or in function form:",
                "Meanwhile we can have one function that checks for all 'empties' like null, undefined, '', ' ', {}, [].\nSo I just wrote this.Use cases and results.",
                "I did some research on what happens if you pass a non-string and non-empty/null value to a tester function. As many know, (0 == \"\") is true in JavaScript, but since 0 is a value and not empty or null, you may want to test for it.The following two functions return true only for undefined, null, empty/whitespace values and false for everything else, such as numbers, Boolean, objects, expressions, etc.More complicated examples exists, but these are simple and give consistent results. There is no need to test for undefined, since it's included in (value == null) check. You may also mimic C# behaviour by adding them to String like this:You do not want to put it in Strings prototype, because if the instance of the String-class is null, it will error:I tested with the following value array. You can loop it through to test your functions if in doubt.",
                "I didn't see a good answer here (at least not an answer that fits for me)So I decided to answer myself:value === undefined || value === null || value === \"\";You need to start checking if it's undefined. Otherwise your method can explode, and then you can check if it equals null or is equal to an empty string.You cannot have !! or only if(value) since if you check 0 it's going to give you a false answer (0 is false).With that said, wrap it up in a method like:public static isEmpty(value: any): boolean {\n    return value === undefined || value === null || value === \"\";\n}PS.: You don't need to check typeof, since it would explode and throw even before it enters the method",
                "Trimming whitespace with the null-coalescing operator:",
                "Try this:",
                "All these answers are nice.But I cannot be sure that variable is a string, doesn't contain only spaces (this is important for me), and can contain '0' (string).My version:Sample on jsfiddle.",
                "There is a lot of useful information here, but in my opinion, one of the most important elements was not addressed.null, undefined, and \"\" are all falsy.When evaluating for an empty string, it's often because you need to replace it with something else.In which case, you can expect the following behavior.With that in mind, a method or function that can return whether or not a string is \"\", null, or undefined (an invalid string) versus a valid string is as simple as this:",
                "There's no isEmpty() method, you have to check for the type and the length:The type check is needed in order to avoid runtime errors when test is undefined or null."
            ]
        },
        {
            "tag": "URL",
            "patterns": [
                "Get the current URL with JavaScript?",
                "Get the current URL",
                "current URL"
            ],
            "responses": [
                "Use:As noted in the comments, the line below works, but it is bugged for Firefox.See URL of type DOMString, readonly.",
                "URL Info AccessJavaScript provides you with many methods to retrieve and change the current URL, which is displayed in the browser's address bar. All these methods use the Location object, which is a property of the Window object. You can read the current Location object by reading window.location:Basic URL Structureprotocol: Specifies the protocol name be used to access the resource on the Internet. (HTTP (without SSL) or HTTPS (with SSL))hostname: Host name specifies the host that owns the resource. For example, www.stackoverflow.com. A server provides services using the name of the host.port: A port number used to recognize a specific process to which an Internet or other network message is to be forwarded when it arrives at a server.pathname: The path gives info about the specific resource within the host that the Web client wants to access. For example, /index.html.search: A query string follows the path component, and provides a string of information that the resource can utilize for some purpose (for example, as parameters for a search or as data to be processed).hash: The anchor portion of a URL, includes the hash sign (#).With these Location object properties you can access all of these URL components and what they can set or return:I hope you got your answer..",
                "Use window.location for read and write access to the location object associated with the current frame. If you just want to get the address as a read-only string, you may use document.URL, which should contain the same value as window.location.href.",
                "Gets the current page URL:",
                "OK, getting the full URL of the current page is easy using pure JavaScript. For example, try this code on this page:The window.location.href property returns the URL of the current page.document.getElementById(\"root\").innerHTML = \"The full URL of this page is:<br>\" + window.location.href;\n<!DOCTYPE html>\r\n<html>\r\n\r\n<body>\r\n  <h2>JavaScript</h2>\r\n  <h3>The window.location.href</h3>\r\n  <p id=\"root\"></p>\r\n</body>\r\n\r\n</html>Just not bad to mention these as well:if you need a relative path, simply use window.location.pathname;if you'd like to get the host name, you can use window.location.hostname;and if you need to get the protocol separately, use window.location.protocolSo window.location.href handles all in once... basically:Also using window is not needed if already in window scope...So, in that case, you can use:",
                "To get the path, you can use:console.log('document.location', document.location.href);\r\nconsole.log('location.pathname',  window.location.pathname); // Returns path only\r\nconsole.log('location.href', window.location.href); // Returns full URL",
                "Open Developer Tools, type in the following in the console and press Enter.Ex: Below is the screenshot of the result on the current page.Grab what you need from here. :)",
                "Use: window.location.href.As noted above, document.URL doesn't update when updating window.location. See MDN.",
                "You can get the current URL location with a hash tag by using:JavaScript:jQuery:",
                "For complete URL with query strings:For host URL:",
                "To get the path, you can use:",
                "The above code can also help someone",
                "Adding result for quick referencewindow.location;document.locationwindow.location.pathnamewindow.location.hreflocation.hostname",
                "For those who want an actual URL object, potentially for a utility which takes URLs as an argument:https://developer.mozilla.org/en-US/docs/Web/API/URL",
                "Nikhil Agrawal's answer is great, just adding a little example here you can do in the console to see the different components in action:If you want the base URL without path or query parameter (for example to do AJAX requests against to work on both development/staging AND production servers), window.location.origin is best as it keeps the protocol as well as optional port (in Django development, you sometimes have a non-standard port which breaks it if you just use hostname etc.)",
                "You have multiple ways to do this.1:2:3:",
                "Use this:var url = window.location.href;\n\nconsole.log(url);",
                "In jstl we can access the current URL path using pageContext.request.contextPath. If you want to do an Ajax call, use the following URL.Example: For the page http://stackoverflow.com/posts/36577223 this will give http://stackoverflow.com/controller/path.",
                "The way to get the current location object is window.location.Compare this to document.location, which originally only returned the current URL as a string. Probably to avoid confusion, document.location was replaced with document.URL.And, all modern browsers map document.location to window.location.In reality, for cross-browser safety, you should use window.location rather than document.location.",
                "anddoes the same.",
                "let url = location+'';\n\nconsole.log(url);",
                "You can get the full link of the current page through location.href\nand to get the link of the current controller, use:",
                "Getting the current URL with JavaScript :window.location.toString();window.location.href",
                "if you are referring to a specific link that has an id this code can help you.I am using ajax here to submit an id and redirect the page using window.location.replace. just add an attribute id=\"\" as stated.",
                "Firstly check for page is loaded completely inthen call a function which takes url, URL variable and prints on console,"
            ]
        },
        {
            "tag": "enumerate",
            "patterns": [
                "How do I loop through or enumerate a JavaScript object?",
                "Enumerate a javascript object",
                "Loop through a JavaScript object"
            ],
            "responses": [
                "You can use the for-in loop as shown by others. However, you also have to make sure that the key you get is an actual property of an object, and doesn't come from the prototype.Here is the snippet:\n\n\nvar p = {\n    \"p1\": \"value1\",\n    \"p2\": \"value2\",\n    \"p3\": \"value3\"\n};\n\nfor (var key in p) {\n    if (p.hasOwnProperty(key)) {\n        console.log(key + \" -> \" + p[key]);\n    }\n}For-of with Object.keys() alternative:var p = {\n    0: \"value1\",\n    \"b\": \"value2\",\n    key: \"value3\"\n};\n\nfor (var key of Object.keys(p)) {\n    console.log(key + \" -> \" + p[key])\n}Notice the use of for-of instead of for-in, if not used it will return undefined on named properties, and Object.keys() ensures the use of only the object's own properties without the whole prototype-chain propertiesUsing the new Object.entries() method:Note: This method is not supported natively by Internet Explorer. You may consider using a Polyfill for older browsers.",
                "Under ECMAScript 5, you can combine Object.keys() and Array.prototype.forEach():ECMAScript 6 adds for...of:ECMAScript 8 adds Object.entries() which avoids having to look up each value in the original object:You can combine for...of, destructuring, and Object.entries:Both Object.keys() and Object.entries() iterate properties in the same order as a for...in loop but ignore the prototype chain. Only the object's own enumerable properties are iterated.",
                "You have to use the for-in loopBut be very careful when using this kind of loop, because this will loop all the properties along the prototype chain.Therefore, when using for-in loops, always make use of the hasOwnProperty method to determine if the current property in iteration is really a property of the object you're checking on:",
                "The question won't be complete if we don't mention about alternative methods for looping through objects.Nowadays many well known JavaScript libraries provide their own methods for iterating over collections, i.e. over arrays, objects, and array-like objects. These methods are convenient to use and are entirely compatible with any browser.If you work with jQuery, you may use jQuery.each() method. It can be used to seamlessly iterate over both objects and arrays:In Underscore.js you can find method _.each(), which iterates over a list of elements, yielding each in turn to a supplied function (pay attention to the order of arguments in iteratee function!):Lo-Dash provides several methods for iterating over object properties. Basic _.forEach() (or it's alias _.each()) is useful for looping through both objects and arrays, however (!) objects with length property are treated like arrays, and to avoid this behavior it is suggested to use _.forIn() and _.forOwn() methods (these also have value argument coming first):_.forIn() iterates over own and inherited enumerable properties of an object, while _.forOwn() iterates only over own properties of an object (basically checking against hasOwnProperty function). For simple objects and object literals any of these methods will work fine.Generally all described methods have the same behaviour with any supplied objects. Besides using native for..in loop will usually be faster than any abstraction, such as jQuery.each(), these methods are considerably easier to use, require less coding and provide better error handling.",
                "Preface:Here in 2018, your options for looping through an object's properties are (some examples follow the list):With all of them except for-in, you'd use some kind of looping construct on the array (for, for-of, forEach, etc.).Examples:for-in:// A prototype object to inherit from, with a string-named property\r\nconst p = {answer: 42};\r\n// The object we'll look at, which inherits from `p`\r\nconst o = Object.create(p);\r\n// A string-named property\r\no.question = \"Life, the Universe, and Everything\";\r\n// A symbol-named property\r\no[Symbol(\"author\")] = \"Douglas Adams\";\r\nfor (const name in o) {\r\n    const value = o[name];\r\n    console.log(`${name} = ${value}`);\r\n}Object.keys (with a for-of loop, but you can use any looping construct):// A prototype object to inherit from, with a string-named property\r\nconst p = {answer: 42};\r\n// The object we'll look at, which inherits from `p`\r\nconst o = Object.create(p);\r\n// A string-named property\r\no.question = \"Life, the Universe, and Everything\";\r\n// A symbol-named property\r\no[Symbol(\"author\")] = \"Douglas Adams\";\r\nfor (const name of Object.keys(o)) {\r\n    const value = o[name];\r\n    console.log(`${name} = ${value}`);\r\n}Object.values:// A prototype object to inherit from, with a string-named property\r\nconst p = {answer: 42};\r\n// The object we'll look at, which inherits from `p`\r\nconst o = Object.create(p);\r\n// A string-named property\r\no.question = \"Life, the Universe, and Everything\";\r\n// A symbol-named property\r\no[Symbol(\"author\")] = \"Douglas Adams\";\r\nfor (const value of Object.values(o)) {\r\n    console.log(`${value}`);\r\n}Object.entries:// A prototype object to inherit from, with a string-named property\r\nconst p = {answer: 42};\r\n// The object we'll look at, which inherits from `p`\r\nconst o = Object.create(p);\r\n// A string-named property\r\no.question = \"Life, the Universe, and Everything\";\r\n// A symbol-named property\r\no[Symbol(\"author\")] = \"Douglas Adams\";\r\nfor (const [name, value] of Object.entries(o)) {\r\n    console.log(`${name} = ${value}`);\r\n}Object.getOwnPropertyNames:// A prototype object to inherit from, with a string-named property\r\nconst p = {answer: 42};\r\n// The object we'll look at, which inherits from `p`\r\nconst o = Object.create(p);\r\n// A string-named property\r\no.question = \"Life, the Universe, and Everything\";\r\n// A symbol-named property\r\no[Symbol(\"author\")] = \"Douglas Adams\";\r\nfor (const name of Object.getOwnPropertyNames(o)) {\r\n    const value = o[name];\r\n    console.log(`${name} = ${value}`);\r\n}Object.getOwnPropertySymbols:// A prototype object to inherit from, with a string-named property\r\nconst p = {answer: 42};\r\n// The object we'll look at, which inherits from `p`\r\nconst o = Object.create(p);\r\n// A string-named property\r\no.question = \"Life, the Universe, and Everything\";\r\n// A symbol-named property\r\no[Symbol(\"author\")] = \"Douglas Adams\";\r\nfor (const name of Object.getOwnPropertySymbols(o)) {\r\n    const value = o[name];\r\n    console.log(`${String(name)} = ${value}`);\r\n}Reflect.ownKeys:// A prototype object to inherit from, with a string-named property\r\nconst p = {answer: 42};\r\n// The object we'll look at, which inherits from `p`\r\nconst o = Object.create(p);\r\n// A string-named property\r\no.question = \"Life, the Universe, and Everything\";\r\n// A symbol-named property\r\no[Symbol(\"author\")] = \"Douglas Adams\";\r\nfor (const name of Reflect.ownKeys(o)) {\r\n    const value = o[name];\r\n    console.log(`${String(name)} = ${value}`);\r\n}All properties, including inherited non-enumerable ones:// A prototype object to inherit from, with a string-named property\r\nconst p = {answer: 42};\r\n// The object we'll look at, which inherits from `p`\r\nconst o = Object.create(p);\r\n// A string-named property\r\no.question = \"Life, the Universe, and Everything\";\r\n// A symbol-named property\r\no[Symbol(\"author\")] = \"Douglas Adams\";\r\nfor (let depth = 0, current = o; current; ++depth, current = Object.getPrototypeOf(current)) {\r\n    for (const name of Reflect.ownKeys(current)) {\r\n        const value = o[name];\r\n        console.log(`[${depth}] ${String(name)} = ${String(value)}`);\r\n    }\r\n}\n.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}",
                "You can just iterate over it like:Note that key will not take on the value of the property, it's just an index value.",
                "In ECMAScript 5 you have new approach in iteration fields of literal - Object.keysMore information you can see on MDNMy choice is below as a faster solution in current versions of browsers (Chrome30, IE10, FF25)You can compare performance of this approach with different implementations on jsperf.com:Browser support you can see on Kangax's compat tableFor old browser you have simple and full polyfillUPD:performance comparison for all most popular cases in this question on perfjs.info:object literal iteration",
                "Today 2020.03.06 I perform tests of chosen solutions on Chrome v80.0, Safari v13.0.5 and Firefox 73.0.1 on MacOs High Sierra v10.13.6Performance tests was performed forBelow snippets presents used solutionsfunction A(obj,s='') {\r\n\tfor (let key in obj) if (obj.hasOwnProperty(key)) s+=key+'->'+obj[key] + ' ';\r\n  return s;\r\n}\r\n\r\nfunction B(obj,s='') {\r\n\tfor (let key in obj) s+=key+'->'+obj[key] + ' ';\r\n  return s;\r\n}\r\n\r\nfunction C(obj,s='') {\r\n  const map = new Map(Object.entries(obj));\r\n\tfor (let [key,value] of map) s+=key+'->'+value + ' ';\r\n  return s;\r\n}\r\n\r\nfunction D(obj,s='') {\r\n  let o = { \r\n    ...obj,\r\n    *[Symbol.iterator]() {\r\n      for (const i of Object.keys(this)) yield [i, this[i]];    \r\n    }\r\n  }\r\n  for (let [key,value] of o) s+=key+'->'+value + ' ';\r\n  return s;\r\n}\r\n\r\nfunction E(obj,s='') {\r\n  let o = { \r\n    ...obj,\r\n    *[Symbol.iterator]() {yield *Object.keys(this)}\r\n  }\r\n  for (let key of o) s+=key+'->'+o[key] + ' ';\r\n  return s;\r\n}\r\n\r\nfunction F(obj,s='') {\r\n\tfor (let key of Object.keys(obj)) s+=key+'->'+obj[key]+' ';\r\n  return s;\r\n}\r\n\r\nfunction G(obj,s='') {\r\n\tfor (let [key, value] of Object.entries(obj)) s+=key+'->'+value+' ';\r\n  return s;\r\n}\r\n\r\nfunction H(obj,s='') {\r\n\tfor (let key of Object.getOwnPropertyNames(obj)) s+=key+'->'+obj[key]+' ';\r\n  return s;\r\n}\r\n\r\nfunction I(obj,s='') {\r\n\tfor (const key of Reflect.ownKeys(obj)) s+=key+'->'+obj[key]+' ';\r\n  return s;\r\n}\r\n\r\nfunction J(obj,s='') {\r\n  let keys = Object.keys(obj);\r\n\tfor(let i = 0; i < keys.length; i++){\r\n    let key = keys[i];\r\n    s+=key+'->'+obj[key]+' ';\r\n  }\r\n  return s;\r\n}\r\n\r\nfunction K(obj,s='') {\r\n  var keys = Object.keys(obj), len = keys.length, i = 0;\r\n  while (i < len) {\r\n    let key = keys[i];\r\n    s+=key+'->'+obj[key]+' ';\r\n    i += 1;\r\n  }\r\n  return s;\r\n}\r\n\r\nfunction L(obj,s='') {\r\n  Object.keys(obj).forEach(key=> s+=key+'->'+obj[key]+' ' );\r\n  return s;\r\n}\r\n\r\nfunction M(obj,s='') {\r\n  Object.entries(obj).forEach(([key, value]) => s+=key+'->'+value+' ');\r\n  return s;\r\n}\r\n\r\nfunction N(obj,s='') {\r\n  Object.getOwnPropertyNames(obj).forEach(key => s+=key+'->'+obj[key]+' ');\r\n  return s;\r\n}\r\n\r\nfunction O(obj,s='') {\r\n  Reflect.ownKeys(obj).forEach(key=> s+=key+'->'+obj[key]+' ' );\r\n  return s;\r\n}\r\n\r\n\r\n\r\n// TEST\r\n\r\nvar p = {\r\n    \"p1\": \"value1\",\r\n    \"p2\": \"value2\",\r\n    \"p3\": \"value3\"\r\n};\r\nlet log = (name,f) => console.log(`${name} ${f(p)}`)\r\n\r\nlog('A',A);\r\nlog('B',B);\r\nlog('C',C);\r\nlog('D',D);\r\nlog('E',E);\r\nlog('F',F);\r\nlog('G',G);\r\nlog('H',H);\r\nlog('I',I);\r\nlog('J',J);\r\nlog('K',K);\r\nlog('L',L);\r\nlog('M',M);\r\nlog('N',N);\r\nlog('O',O);\nThis snippet only presents choosen solutionsAnd here are result for small objects on chrome",
                "Note: you can do this over arrays, but you'll iterate over the length and other properties, too.",
                "Since es2015 is getting more and more popular I am posting this answer which include usage of generator and iterator to smoothly iterate through [key, value] pairs. As it is possible in other languages for instance Ruby.Ok here is a code:const MyObject = {\n  'a': 'Hello',\n  'b': 'it\\'s',\n  'c': 'me',\n  'd': 'you',\n  'e': 'looking',\n  'f': 'for',\n  [Symbol.iterator]: function*() {\n    for (const i of Object.keys(this)) {\n      yield [i, this[i]];\n    }\n  }\n};\n\nfor (const [k, v] of MyObject) {\n  console.log(`Here is key ${k} and here is value ${v}`);\n}All information about how can you do an iterator and generator you can find at developer Mozilla page.Hope It helped someone.EDIT:ES2017 will include Object.entries which will make iterating over [key, value] pairs in objects even more easier. It is now known that it will be a part of a standard according to the ts39 stage information.I think it is time to update my answer to let it became even more fresher than it's now.const MyObject = {\n  'a': 'Hello',\n  'b': 'it\\'s',\n  'c': 'me',\n  'd': 'you',\n  'e': 'looking',\n  'f': 'for',\n};\n\nfor (const [k, v] of Object.entries(MyObject)) {\n  console.log(`Here is key ${k} and here is value ${v}`);\n}You can find more about usage on\nMDN page",
                "Single line and more readable code can be..",
                "After looking through all the answers in here, hasOwnProperty isn't required for my own usage because my json object is clean; there's really no sense in adding any additional javascript processing. This is all I'm using:",
                "via prototype with forEach() which should skip the prototype chain properties:",
                "It's interesting people in these answers have touched on both Object.keys() and for...of but never combined them:You can't just for...of an Object because it's not an iterator, and for...index or .forEach()ing the Object.keys() is ugly/inefficient.\nI'm glad most people are refraining from for...in (with or without checking .hasOwnProperty()) as that's also a bit messy, so other than my answer above, I'm here to say...You can make ordinary object associations iterate! Behaving just like Maps with direct use of the fancy for...of\nDEMO working in Chrome and FF (I assume ES6 only)So long as you include my shim below:Without having to create a real Map object that doesn't have the nice syntactic sugar.In fact, with this shim, if you still wanted to take advantage of Map's other functionality (without shimming them all in) but still wanted to use the neat object notation, since objects are now iterable you can now just make a Map from it!For those who don't like to shim, or mess with prototype in general, feel free to make the function on window instead, calling it something like getObjIterator() then;Now you can just call it as an ordinary function, nothing else is affectedorThere's no reason why that wouldn't work.Welcome to the future.",
                "Using a for-of on Object.keys()Like:let object = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n};\n\nfor (let key of Object.keys(object)) {\n  console.log(key + \" : \" + object[key])\n}",
                "You can also use Object.keys() and iterate over the object keys like below to get the value:var p = {\r\n    \"p1\": \"value1\",\r\n    \"p2\": \"value2\",\r\n    \"p3\": \"value3\"\r\n};\r\n\r\nObject.keys(p).forEach((key)=> {\r\n console.log(key +' -> '+ p[key]);\r\n});",
                "var p = {\r\n    \"p1\": \"value1\",\r\n    \"p2\": \"value2\",\r\n    \"p3\": \"value3\"\r\n};\r\n\r\nfor (var key in p) {\r\n    if (p.hasOwnProperty(key)) {\r\n        console.log(key + \" = \" + p[key]);\r\n    }\r\n}\n<p>\r\n  Output:<br>\r\n  p1 = values1<br>\r\n  p2 = values2<br>\r\n  p3 = values3\r\n</p>",
                "Object.keys(obj) : Arrayretrieves all string-valued keys of all enumerable own (non-inherited) properties.So it gives the same list of keys as you intend by testing each object key with hasOwnProperty. You don't need that extra test operation than and Object.keys( obj ).forEach(function( key ){}) is supposed to be faster. Let's prove it:var uniqid = function(){\r\n\t\t\tvar text = \"\",\r\n\t\t\t\t\ti = 0,\r\n\t\t\t\t\tpossible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n\t\t\tfor( ; i < 32; i++ ) {\r\n\t\t\t\t\ttext += possible.charAt( Math.floor( Math.random() * possible.length ) );\r\n\t\t\t}\r\n\t\t\treturn text;\r\n\t\t}, \r\n\t\tCYCLES = 100000,\r\n\t\tobj = {}, \r\n\t\tp1,\r\n\t\tp2,\r\n\t\tp3,\r\n\t\tkey;\r\n\r\n// Populate object with random properties\r\nArray.apply( null, Array( CYCLES ) ).forEach(function(){\r\n\tobj[ uniqid() ] = new Date()\r\n});\r\n\r\n// Approach #1\r\np1 = performance.now();\r\nObject.keys( obj ).forEach(function( key ){\r\n\tvar waste = obj[ key ];\r\n});\r\n\r\np2 = performance.now();\r\nconsole.log( \"Object.keys approach took \" + (p2 - p1) + \" milliseconds.\");\r\n\r\n// Approach #2\r\nfor( key in obj ) {\r\n\tif ( obj.hasOwnProperty( key ) ) {\r\n\t\tvar waste = obj[ key ];\r\n\t}\r\n}\r\n\r\np3 = performance.now();\r\nconsole.log( \"for...in/hasOwnProperty approach took \" + (p3 - p2) + \" milliseconds.\");In my Firefox I have following resultsPS. on Chrome the difference even bigger http://codepen.io/dsheiko/pen/JdrqXaPS2: In ES6 (EcmaScript 2015) you can iterate iterable object nicer:let map = new Map().set('a', 1).set('b', 2);\r\nfor (let pair of map) {\r\n    console.log(pair);\r\n}\r\n\r\n// OR \r\nlet map = new Map([\r\n    [false, 'no'],\r\n    [true,  'yes'],\r\n]);\r\nmap.forEach((value, key) => {\r\n    console.log(key, value);\r\n});",
                "In latest ES script, you can do something like this:let p = {foo: \"bar\"};\r\nfor (let [key, value] of Object.entries(p)) {\r\n  console.log(key, value);\r\n}",
                "Only JavaScript code without dependencies:",
                "The Object.keys() method returns an array of a given object's own enumerable properties. Read more about it herevar p = {\r\n    \"p1\": \"value1\",\r\n    \"p2\": \"value2\",\r\n    \"p3\": \"value3\"\r\n};\r\n\r\nObject.keys(p).map((key)=> console.log(key + \"->\" + p[key]))",
                "Here is another method to iterate through an object.var p = {\r\n\"p1\": \"value1\",\r\n\"p2\": \"value2\",\r\n\"p3\": \"value3\"\r\n};\r\n\r\n\r\nObject.keys(p).forEach(key => { console.log(key, p[key]) })",
                "Multiple way to iterate object in javascriptUsing for...in loopvar p = {\r\n    \"p1\": \"value1\",\r\n    \"p2\": \"value2\",\r\n    \"p3\": \"value3\"\r\n};\r\nfor (let key in p){\r\n   if(p.hasOwnProperty(key)){\r\n     console.log(`${key} : ${p[key]}`)\r\n   }\r\n}Using for...of loopvar p = {\r\n    \"p1\": \"value1\",\r\n    \"p2\": \"value2\",\r\n    \"p3\": \"value3\"\r\n};\r\nfor (let key of Object.keys(p)){\r\n     console.log(`key: ${key} & value: ${p[key]}`)\r\n}Using forEach() with Object.keys, Object.values, Object.entriesvar p = {\r\n    \"p1\": \"value1\",\r\n    \"p2\": \"value2\",\r\n    \"p3\": \"value3\"\r\n};\r\nObject.keys(p).forEach(key=>{\r\n   console.log(`${key} : ${p[key]}`);\r\n});\r\nObject.values(p).forEach(value=>{\r\n   console.log(value);\r\n});\r\nObject.entries(p).forEach(([key,value])=>{\r\n    console.log(`${key}:${value}`)\r\n})",
                "Loops can be pretty interesting when using pure JavaScript. It seems that only ECMA6 (New 2015 JavaScript specification) got the loops under control. Unfortunately as I'm writing this, both Browsers and popular Integrated development environment (IDE) are still struggling to support completely the new bells and whistles.At a glance here is what a JavaScript object loop look like before ECMA6:Also, I know this is out of scope with this question but in 2011, ECMAScript 5.1 added the forEach method for Arrays only which basically created a new improved way to loop through arrays while still leaving non iterable objects with the old verbose and confusing for loop. But the odd part is that this new forEach method does not support break which led to all sorts of other problems.Basically in 2011, there is not a real solid way to loop in JavaScript other than what many popular libraries (jQuery, Underscore, etc.) decided to re-implement.As of 2015, we now have a better out of the box way to loop (and break) any object type (including Arrays and Strings). Here is what a loop in JavaScript will eventually look like when the recommendation becomes mainstream:Note that most browsers won't support the code above as of June 18th 2016. Even in Chrome you need to enable this special flag for it to work: chrome://flags/#enable-javascript-harmonyUntil this becomes the new standard, the old method can still be used but there are also alternatives in popular libraries or even lightweight alternatives for those who aren't using any of these libraries.",
                "You can add a simple forEach function to all objects, so you can automatically loop through any object:For those people who don't like the \"for ... in\"-method:Now, you can simple call:If you don't want to get conflicts with other forEach-Methods you can name it with your unique name.",
                "A good way for looping on an enumerable JavaScript object which could be awesome and common for ReactJS is using Object.keys or Object.entries with using map function. like below:For looping and show some UI on ReactJS act like below:Actually, I use the destructuring assignment twice, once for getting key once for getting name and price.",
                "You can try like this. myObject will be {name: \"\", phone: \"\"} so and so, this will generate key and value. So key here is name, phone and value are like dog, 123123.Example {name: \"dog\"}Here key is name and value is dog.",
                "Pass your object to Object.keys(). This will return an array containing all the keys in the object. You can then loop through the array using map. Using obj[key] where obj is your object and key is the current value in the map iteration, you can get the value for that key/property.",
                "In ES6 we have well-known symbols to expose some previously internal methods, you can use it to define how iterators work for this object:this will give the same result as using for...in es6 loop.But its important to know the capabilities you now have using es6!",
                "I would do this rather than checking obj.hasOwnerProperty within every for ... in loop."
            ]
        },
        {
            "tag": "sleep",
            "patterns": [
                "What is the JavaScript version of sleep()?",
                "What is sleep() in JavaScript"
            ],
            "responses": [
                "Since 2009 when this question was asked, JavaScript has evolved significantly. All other answers are now obsolete or overly complicated. Here is the current best practice:Or as a one-liner:As a function:or in Typescript:use it as:function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function demo() {\n    for (let i = 0; i < 5; i++) {\n        console.log(`Waiting ${i} seconds...`);\n        await sleep(i * 1000);\n    }\n    console.log('Done');\n}\n\ndemo();Note that,Two new JavaScript features (as of 2017) helped write this \"sleep\" function:If for some reason you're using Node older than 7 (which reached end of life in 2017), or are targeting old browsers, async/await can still be used via Babel (a tool that will transpile JavaScript + new features into plain old JavaScript), with the transform-async-to-generator plugin.",
                "(See the updated answer for 2016)I think it's perfectly reasonable to want to perform an action, wait, and then perform another action. If you are used to writing in multi-threaded languages, you probably have the idea of yielding execution for a set amount of time until your thread wakes up.The issue here is that JavaScript is a single-thread event-based model. While in a specific case, it might be nice to have the whole engine wait for a few seconds, in general it is bad practice. Suppose I wanted to make use of your functions while writing my own? When I called your method, my methods would all freeze up. If JavaScript could somehow preserve your function's execution context, store it somewhere, then bring it back and continue later, then sleep could happen, but that would basically be threading.So you are pretty much stuck with what others have suggested -- you'll need to break your code up into multiple functions.Your question is a bit of a false choice, then. There is no way to sleep in the way you want, nor should you pursue the solution you suggest.",
                "In JavaScript, I rewrite every function so that it can end as soon as possible. You want the browser back in control so it can make your DOM changes.Every time I've wanted a sleep in the middle of my function, I refactored to use a setTimeout().The infamous sleep, or delay, function within any language is much debated.  Some will say that there should always be a signal or callback to fire a given functionality, others will argue that sometimes an arbitrary moment of delay is useful.  I say that to each their own and one rule can never dictate anything in this industry.Writing a sleep function is simple and made even more usable with JavaScript Promises:",
                "In Firebug (and probably other JavaScript consoles), nothing happen after hitting enter, only after the sleep duration specified (...)Example of use:function sleepFor(sleepDuration){\n    var now = new Date().getTime();\n    while(new Date().getTime() < now + sleepDuration){ \n        /* Do nothing */ \n    }\n}\n\nfunction sleepThenAct(){\n    sleepFor(2000);\n    console.log(\"Hello, JavaScript sleep!\");\n}\n\nsleepThenAct()Note: Only for debugging and development",
                "I agree with the other posters. A busy sleep is just a bad idea.However, setTimeout does not hold up execution. It executes the next line of the function immediately after the timeout is SET, not after the timeout expires, so that does not accomplish the same task that a sleep would accomplish.The way to do it is to breakdown your function into before and after parts.Make sure your function names still accurately describe what each piece is doing (i.e., GatherInputThenWait and CheckInput, rather than funcPart1 and funcPart2)This method achieves the purpose of not executing the lines of code you decide until after your timeout, while still returning control back to the client PC to execute whatever else it has queued up.As pointed out in the comments this will absolutely not work in a loop. You could do some fancy (ugly) hacking to make it work in a loop, but in general that will just make for disastrous spaghetti code.",
                "For the love of $DEITY please do not make a busy-wait sleep function.  setTimeout and setInterval do everything you need.var showHide = document.getElementById('showHide');\nsetInterval(() => {\n    showHide.style.visibility = \"initial\";\n    setTimeout(() => {\n        showHide.style.visibility = \"hidden\"\n    }, 1000);\n}, 2000);   \n<div id=\"showHide\">Hello! Goodbye!</div>Every two second interval hide text for one second. This shows how to use setInterval and setTimeout to show and hide text each second.",
                "If (like me) you're using JavaScript with Rhino, you can use...",
                "If you're using jQuery, someone actually created a \"delay\" plugin that's nothing more than a wrapper for setTimeout:You can then just use it in a row of function calls as expected:",
                "Use:await new Promise(resolve => setTimeout(resolve, 2000));Make sure your calling function is async. This is verified and is working fine.",
                "I've searched for a sleep solution too (not for production code, only for development and tests) and found this article:JavaScript sleep() or wait()...and here's another article with client-side solutions: JavaScript sleepAlso, when you are calling alert(), your code will be paused too, while the alert is shown -- you need to find a way to not display alert, but get the same effect. :)",
                "I personally like the simple:then:I'm using it all the time to create fake load times while creating scripts in p5.js.",
                "Since April 2021 (Node.js 16+), a new promisified version of setTimeout() is available:Thank @kigiri. See the official documentation:\nhttps://nodejs.org/api/timers.html#timerspromisessettimeoutdelay-value-options",
                "Here you go.  As the code says, don't be a bad developer and use this on websites.  It's a development utility function.",
                "Here's a simple solution using a synchronous XMLHttpRequest:Contents of file sleep.php:Now call it with:If you don't have your own application server (for the above PHP script), you could use some online service instead. For instance:function sleep(n) { \n    var request = new XMLHttpRequest();\n    request.open('GET', 'http://httpstat.us/200?sleep=' + n, false);\n    request.send(null);\n};\n\nsleep(1000);\nconsole.log(\"one second delay completed.\");About passing false for the asynchronous parameter, mdn notes:Synchronous requests on the main thread can be easily disruptive to the user experience and should be avoided; in fact, many browsers have deprecated synchronous XHR support on the main thread entirely. Synchronous requests are permitted in Workers.The number of milliseconds that is passed as argument will be the time that the server waits between receiving the request and sending the response. The delay incurred by transmission and server load will be added to that.",
                "An inliner:500 here is the time in milliseconds for which VM will wait before moving to the next line of code.Bit of tldr;Basically, when you create a promise, it returns an observable while at creation giving a reference of resolve in a callback meant for handing over data/response once it's available. Here, resolve is called via setTimeOut after 500ms, and till resolve is not executed the outside scope is waiting to proceed further, hence, creating a fake blocking. It's totally different than the non-blocking(or call non-thread-reserving sleep available in other languages), as the thread and most probably the UI and any other ongoing tasks of webpage/node-application will be blocked and the main thread will be exclusively used for awaiting the promise resolution.",
                "First:Define a function you want to execute like this:Then schedule its execution with the setTimeout method:Note two things",
                "2019 Update using Atomics.waitIt should work in Node.js 9.3 or higher.I needed a pretty accurate timer in Node.js and it works great for that.However, it seems like there is extremely limited support in browsers.let ms = 10000;\nAtomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, ms);Ran a few 10 second timer benchmarks.With setTimeout I get a error of up to 7000 microseconds (7\u00a0ms).With Atomics, my error seems to stay under 600 microseconds (0.6\u00a0ms)2020 Update: In Summaryof which the server-side page, e.g. sleep.jsp, looks like:",
                "A better solution to make things look like what most people want is to use an anonymous function:This is probably the closest you'll get to something that simply does what you want.Note, if you need multiple sleeps this can get ugly in a hurry and you might actually need to rethink your design.",
                "The shortest solution without any dependencies:",
                "Democonst wait = t => new Promise(s => setTimeout(s, t));\n// Usage\nasync function demo() {\n    // Count down\n    let i = 6;\n    while (i--) {\n        await wait(1000);\n        console.log(i);\n    }\n    // Sum of numbers 0 to 5 using by delay of 1 second\n    const sum = await [...Array(6).keys()].reduce(async (a, b) => {\n        a = await a;\n        await wait(1000);\n        const result = a + b;\n        console.log(`${a} + ${b} = ${result}`);\n        return result;\n    }, Promise.resolve(0));\n    console.log(\"sum\", sum);\n}\ndemo();",
                "For browsers, I agree that setTimeout and setInterval are the way to go.But for server-side code, it may require a blocking function (for example, so you can effectively have thread synchronization).If you're using Node.js and Meteor, you may have run into the limitations of using setTimeout in a fiber. Here is the code for server-side sleep.See: Node.js Fibers, Sleep",
                "Most of the answers here are misguided or at the very least outdated. There is no reason JavaScript has to be single threaded, and indeed it isn't. Today all the mainstream browsers support workers. Before this was the case, other JavaScript runtimes like Rhino and Node.js supported multithreading.'JavaScript is single threaded' is not a valid answer. For example, running a sleep function within a worker would not block any of the code running in the UI thread.In newer runtimes supporting generators and yield, one could bring similar functionality to the sleep function in a singlethreaded environment:This imitation of sleep is different from a true sleep function as it does not block the thread. It is simply sugar on top of JavaScript's current setTimeout function. This functionality type has been implemented in Task.js and should work today in Firefox.",
                "I would encapsulate setTimeOut in a Promise for code consistency with other asynchronous tasks: Demo in FiddleIt is used like this:It is easy to remember the syntax if you are used to using Promises.",
                "Since Node.js 7.6, you can combine the promisify function from the utils module with setTimeout.",
                "I have searched/googled quite a few webpages on JavaScript sleep/wait... and there is no answer if you want JavaScript to \"RUN, DELAY, RUN\"... what most people got was either, \"RUN, RUN(useless stuff), RUN\" or \"RUN, RUN + delayed RUN\"...I thought:\nhere is a solution that works... but you have to chop up your running codes...:\nYes, I know, this is just an easier to read refactoring... still...",
                "UPDATE 2022Just use this code snippet.",
                "I can understand the purpose of a sleep function if you have to deal with synchronous execution. The setInterval and setTimeout functions create a parallel execution thread which returns the execution sequence back to the main program, which is ineffective if you have to wait for a given result. Of course one may use events and handlers, but in some cases is not what is intended.",
                "If you want less clunky functions than setTimeout and setInterval, you can wrap them in functions that just reverse the order of the arguments and give them nice names:CoffeeScript versions:You can then use them nicely with anonymous functions:Now it reads easily as \"after N milliseconds, ...\" (or \"every N milliseconds, ...\")",
                "I suggest this method for former python developersUsage:"
            ]
        },
        {
            "tag": "apply",
            "patterns": [
                "What is the difference between call and apply?",
                "Call",
                "Apply",
                "Call vs Apply"
            ],
            "responses": [
                "The difference is that apply lets you invoke the function with arguments as an array; call requires the parameters be listed explicitly. A useful mnemonic is \"A for array and C for comma.\"See MDN's documentation on apply and call.Pseudo syntax:theFunction.apply(valueForThis, arrayOfArgs)theFunction.call(valueForThis, arg1, arg2, ...)There is also, as of ES6, the possibility to spread the array for use with the call function, you can see the compatibilities here.Sample code:function theFunction(name, profession) {\n    console.log(\"My name is \" + name + \" and I am a \" + profession +\".\");\n}\ntheFunction(\"John\", \"fireman\");\ntheFunction.apply(undefined, [\"Susan\", \"school teacher\"]);\ntheFunction.call(undefined, \"Claude\", \"mathematician\");\ntheFunction.call(undefined, ...[\"Matthew\", \"physicist\"]); // used with the spread operator",
                "K. Scott Allen has a nice writeup on the matter.Basically, they differ on how they handle function arguments.The apply() method is identical to call(), except apply() requires an array as the second parameter. The array represents the arguments for the target method.\"So:",
                "To answer the part about when to use each function, use apply if you don't know the number of arguments you will be passing, or if they are already in an array or array-like object (like the arguments object to forward your own arguments. Use call otherwise, since there's no need to wrap the arguments in an array.When I'm not passing any arguments (like your example), I prefer call since I'm calling the function. apply would imply you are applying the function to the (non-existent) arguments.There shouldn't be any performance differences, except maybe if you use apply and wrap the arguments in an array (e.g. f.apply(thisObject, [a, b, c]) instead of f.call(thisObject, a, b, c)). I haven't tested it, so there could be differences, but it would be very browser specific. It's likely that call is faster if you don't already have the arguments in an array and apply is faster if you do.",
                "Here's a good mnemonic.  Apply uses Arrays and Always takes one or two Arguments.  When you use Call you have to Count the number of arguments.",
                "While this is an old topic, I just wanted to point out that .call is slightly faster than .apply. I can't tell you exactly why.See jsPerf, http://jsperf.com/test-call-vs-apply/3[UPDATE!]Douglas Crockford mentions briefly the difference between the two, which may help explain the performance difference... http://youtu.be/ya4UHuXNygM?t=15m52sApply takes an array of arguments, while Call takes zero or more individual parameters! Ah hah!.apply(this, [...]).call(this, param1, param2, param3, param4...)",
                "Follows an extract from Closure: The Definitive Guide by Michael Bolin. It might look a bit lengthy, but it's saturated with a lot of insight. From \"Appendix B. Frequently Misunderstood JavaScript Concepts\":When calling a function of the form foo.bar.baz(), the object foo.bar is referred to as the receiver. When the function is called, it is the receiver that is used as the value for this:If there is no explicit receiver when a function is called, then the global object becomes the receiver. As explained in \"goog.global\" on page 47, window is the global object when JavaScript is executed in a web browser. This leads to some surprising behavior:Even though obj.addValues and f refer to the same function, they behave differently when called because the value of the receiver is different in each call. For this reason, when calling a function that refers to this, it is important to ensure that this will have the correct value when it is called. To be clear, if this were not referenced in the function body, then the behavior of f(20) and obj.addValues(20) would be the same.Because functions are first-class objects in JavaScript, they can have their own methods. All functions have the methods call() and apply() which make it possible to redefine the receiver (i.e., the object that this refers to) when calling the function. The method signatures are as follows:Note that the only difference between call() and apply() is that call() receives the function parameters as individual arguments, whereas apply() receives them as a single array:The following calls are equivalent, as f and obj.addValues refer to the same function:However, since neither call() nor apply() uses the value of its own receiver to substitute for the receiver argument when it is unspecified, the following will not work:The value of this can never be null or undefined when a function is called. When null or undefined is supplied as the receiver to call() or apply(), the global object is used as the value for receiver instead. Therefore, the previous code has the same undesirable side effect of adding a property named value to the global object.It may be helpful to think of a function as having no knowledge of the variable to which it is assigned. This helps reinforce the idea that the value of this will be bound when the function is called rather than when it is defined.End of extract.",
                "It is useful at times for one object to borrow the function of another object, meaning that the borrowing object simply executes the lent function as if it were its own.A small code example:These methods are very useful for giving objects temporary functionality.",
                "Another example with Call, Apply and Bind.\nThe difference between Call and Apply is evident, but Bind works like this:}",
                "I'd like to show an example, where the 'valueForThis' argument is used:**details: http://es5.github.io/#x15.4.4.7*",
                "Call() takes comma-separated arguments, ex:.call(scope, arg1, arg2, arg3)and apply() takes an array of arguments, ex:.apply(scope, [arg1, arg2, arg3])here are few more usage examples: \nhttp://blog.i-evaluation.com/2012/08/15/javascript-call-and-apply/",
                "From the MDN docs on Function.prototype.apply() :The apply() method calls a function with a given this value and\n  arguments provided as an array (or an array-like object).From the MDN docs on Function.prototype.call() :The call() method calls a function with a given this value and arguments provided individually.From Function.apply and Function.call in JavaScript :The apply() method is identical to call(), except apply() requires an\n  array as the second parameter. The array represents the arguments for\n  the target method.var doSomething = function() {\r\n    var arr = [];\r\n    for(i in arguments) {\r\n        if(typeof this[arguments[i]] !== 'undefined') {\r\n            arr.push(this[arguments[i]]);\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nvar output = function(position, obj) {\r\n    document.body.innerHTML += '<h3>output ' + position + '</h3>' + JSON.stringify(obj) + '\\n<br>\\n<br><hr>';\r\n}\r\n\r\noutput(1, doSomething(\r\n    'one',\r\n    'two',\r\n    'two',\r\n    'one'\r\n));\r\n\r\noutput(2, doSomething.apply({one : 'Steven', two : 'Jane'}, [\r\n    'one',\r\n    'two',\r\n    'two',\r\n    'one'\r\n]));\r\n\r\noutput(3, doSomething.call({one : 'Steven', two : 'Jane'},\r\n    'one',\r\n    'two',\r\n    'two',\r\n    'one'\r\n));See also this Fiddle.",
                "Here's a small-ish post, I wrote on this:http://sizeableidea.com/call-versus-apply-javascript/",
                "Fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.",
                "The difference is that call() takes the function arguments separately, and apply() takes the function arguments in an array.",
                "Both call() and apply() are methods which are located on Function.prototype. Therefore they are available on every function object via the prototype chain. Both call() and apply() can execute a function with a specified value of the this.The main difference between call() and apply() is the way you have to pass in arguments into it. In both call() and apply() you pass as a first argument the object you want to be the value as this. The other arguments differ in the following way:let obj = {\r\n  val1: 5,\r\n  val2: 10\r\n}\r\n\r\nconst summation = function (val3, val4) {\r\n  return  this.val1 + this.val2 + val3 + val4;\r\n}\r\n\r\nconsole.log(summation.apply(obj, [2 ,3]));\r\n// first we assign we value of this in the first arg\r\n// with apply we have to pass in an array\r\n\r\n\r\nconsole.log(summation.call(obj, 2, 3));\r\n// with call we can pass in each arg individuallyThe this value can be tricky sometimes in javascript. The value of this determined when a function is executed not when a function is defined. If our function is dependend on a right this binding we can use call() and apply() to enforce this behaviour. For example:var name = 'unwantedGlobalName';\r\n\r\nconst obj =  {\r\n  name: 'Willem',\r\n  sayName () { console.log(this.name);}\r\n}\r\n\r\n\r\nlet copiedMethod = obj.sayName;\r\n// we store the function in the copiedmethod variable\r\n\r\n\r\n\r\ncopiedMethod();\r\n// this is now window, unwantedGlobalName gets logged\r\n\r\ncopiedMethod.call(obj);\r\n// we enforce this to be obj, Willem gets logged",
                "We can differentiate call and apply methods as belowCALL : A function with argument provide individually.\nIf you know the arguments to be passed or there are no argument to pass you can use call.APPLY : Call a function with argument provided as an array. You can use apply if you don't know how many argument are going to pass to the function.There is a advantage of using apply over call, we don't need to change the number of argument only we can change a array that is passed.There is not big difference in performance. But we can say call is bit faster as compare to apply because an array need to evaluate in apply method.",
                "The main difference is, using call, we can change the scope and pass arguments as normal, but apply lets you call it using arguments as an Array (pass them as an array). But in terms of what they to do in your code, they are pretty similar.While the syntax of this function is almost identical to that of\n  apply(), the fundamental difference is that call() accepts an argument\n  list, while apply() accepts a single array of arguments.So as you see, there is not a big difference, but still, there are cases we prefer using call() or apply(). For example, look at the code below, which finding the smallest and largest number in an array from MDN, using the apply method:So the main difference is just the way we passing the arguments: \nCall:Apply:",
                "Difference between these to methods are, how you want to pass the parameters.\u201cA for array and C for comma\u201d is a handy mnemonic.",
                "Call and apply both are used to force the this value when a function is executed. The only difference is that call takes n+1 arguments where 1 is this and 'n' arguments. apply takes only two arguments, one is this the other is argument array.The advantage I see in apply over call is that we can easily delegate a function call to other function without much effort;Observe how easily we delegated hello to sayHello using apply, but with call this is very difficult to achieve.",
                "Even though call and apply achive the same thing, I think there is atleast one place where you cannot use call but can only use apply. That is when you want to support inheritance and want to call the constructor.Here is a function allows you to create classes which also supports creating classes by extending other classes.",
                "Let me add a little detail to this.these two calls are almost equivalent:There\u2019s only a minor difference:So, these calls complement each other. Where we expect an iterable, call works, where we expect an array-like, apply works.And for objects that are both iterable and array-like, like a real array, we technically could use any of them, but apply will probably be faster because most JavaScript engines internally optimize it better.",
                "I just want to add a simple example to a well explained post by flatline, which makes it easy to understand for beginners.we also use \"Call\" and \"Apply\" method for changing  reference as defined in code belowlet Emp1 = {\n  name: 'X',\n  getEmpDetail: function(age, department) {\n    console.log(`Name: ${this.name}    Age: ${age}    Department: ${department}`)\n  }\n}\n\nEmp1.getEmpDetail(23, 'Delivery')\n\n// 1st approach of changing \"this\"\nlet Emp2 = {\n  name: 'Y',\n  getEmpDetail: Emp1.getEmpDetail\n}\n\nEmp2.getEmpDetail(55, 'Finance')\n\n// 2nd approach of changing \"this\" using \"Call\" and \"Apply\"\nlet Emp3 = {\n  name: 'Emp3_Object',\n}\n\nEmp1.getEmpDetail.call(Emp3, 30, 'Admin')\n\n// here we have change the ref from **Emp1 to Emp3**  object\n// now this will print \"Name =  Emp3_Object\" because it is pointing to Emp3 object\nEmp1.getEmpDetail.apply(Emp3, [30, 'Admin'])",
                "The call() method calls a function with a given this value and a second parameter which are arguments separated by comma.The apply() method is the same as call except the fact that the second argument it takes is an array of arguments .var car  = {  \n  name: \"Reno\",\n  country: \"France\",\n  showBuyer: function(firstName, lastName) {\n    console.log(`${firstName} ${lastName} just bought a ${this.name} from ${this.country}`);\n  }\n}\n\nconst firstName = \"Bryan\";\nconst lastName = \"Smith\";\n\ncar.showBuyer(firstName, lastName);  // Bryan just bought a Reno from France\n\nconst obj = { name: \"Maserati\", country: \"Italy\" };\n\ncar.showBuyer.call(obj, firstName, lastName); // Bryan Smith just bought a Maserati from Italy\n\ncar.showBuyer.apply(obj, [firstName, lastName]); // Bryan Smith just bought a Maserati from Italy"
            ]
        },
        {
            "tag": "convert_string",
            "patterns": [
                "How can I convert a string to boolean in JavaScript?",
                "String to boolean",
                "String conversion to bool"
            ],
            "responses": [
                "using the identity operator (===), which doesn't make any implicit type conversions when the compared variables have different types.This will set isTrueSet to a boolean true if the string is \"true\" and boolean false if it is string \"false\" or not set at all.You should probably be cautious about using these two methods for your specific needs:Any string which isn't the empty string will evaluate to true by using them. Although they're the cleanest methods I can think of concerning to boolean conversion, I think they're not what you're looking for.",
                "This highly upvoted legacy answer is technically correct but only covers a very specific scenario, when your string value is EXACTLY \"true\" or \"false\".An invalid json string passed into these functions below WILL throw an exception.Original answer:How about?or with jQuery",
                "I think this is much universal:if (String(a).toLowerCase() == \"true\") ...It goes:",
                "Remember to match case:Also, if it's a form element checkbox, you can also detect if the checkbox is checked:Assuming that if it is checked, it is \"set\" equal to true. This evaluates as true/false.",
                "You can use regular expressions:If you like extending the String class you can do:For those (see the comments) that would like to extend the String object to get this but are worried about enumerability and are worried about clashing with other code that extends the String object:(Won't work in older browsers of course and Firefox shows false while Opera, Chrome, Safari and IE show true. Bug 720760)",
                "This is the easiest way to do boolean conversion I came across recently. Thought of adding it.let trueResponse = JSON.parse('true');\n\nlet falseResponse = JSON.parse('false');\n\nconsole.log(trueResponse);\nconsole.log(falseResponse);",
                "Wood-eye be careful.\nAfter seeing the consequences after applying the top answer with 500+ upvotes, I feel obligated to post something that is actually useful:Let's start with the shortest, but very strict way:And end with a proper, more tolerant way:Testing:",
                "I thought that @Steven 's answer was the best one, and took care of a lot more cases than if the incoming value was just a string. I wanted to extend it a bit and offer the following:It's not necessary to cover all the false cases if you already know all of the true cases you'd have to account for. You can pass anything into this method that could pass for a true value (or add others, it's pretty straightforward), and everything else would be considered false",
                "Universal solution with JSON parse:UPDATE (without JSON):I also created fiddle to test it http://jsfiddle.net/remunda/2GRhG/",
                "Your solution is fine.Using === would just be silly in this case, as the field's value will always be a String.",
                "This returns false for every falsy value and true for every truthy value except for 'false', 'f', 'no', 'n', and '0' (case-insensitive).",
                "The Boolean object doesn't have a 'parse' method. Boolean('false') returns true, so that won't work. !!'false' also returns true, so that won't work also.If you want string 'true' to return boolean true and string 'false' to return boolean false, then the simplest solution is to use eval(). eval('true') returns true and eval('false') returns false.Keep in mind the performance and security implications when using eval() though.",
                "There are a lot of answers and it's hard to pick one. In my case, I prioritise the performance when choosing, so I create this jsPerf that I hope can throw some light here.Brief of results (the higher the better):They are linked to the related answer where you can find more information (pros and cons) about each one; specially in the comments.",
                "This has been taken from the accepted answer, but really it has a very weak point, and I am shocked how it got that count of upvotes, the problem with it that you have to consider the case of the string because this is case sensitive",
                "I use the following:This function performs the usual Boolean coercion with the exception of the strings \"false\" (case insensitive) and \"0\".",
                "The expression you're looking for simply isas inThis tests myValue against a regular expression , case-insensitive, and doesn't modify the prototype.Examples:",
                "you can use JSON.parse as follows:var trueOrFalse='True';\nresult =JSON.parse(trueOrFalse.toLowerCase());\nif(result==true)\n  alert('this is true');\nelse \n  alert('this is false');in this case .toLowerCase is important",
                "use the logical NOT twice [ !! ] to get the string convertedJust paste this expression...And pass your string to it!You can include other strings at will to easily extend the usage of this expression...:",
                "There are already so many answers available. But following can be useful in some scenarios.This can be useful where one examples with non-boolean values.",
                "To convert both string(\"true\", \"false\") and boolean to booleanWhere flag can be",
                "This function can handle string as well as Boolean true/false.Demonstration below:function stringToBoolean(val) {\r\n  var a = {\r\n    'true': true,\r\n    'false': false\r\n  };\r\n  return a[val];\r\n}\r\n\r\nconsole.log(stringToBoolean(\"true\"));\r\n\r\nconsole.log(typeof(stringToBoolean(\"true\")));\r\n\r\nconsole.log(stringToBoolean(\"false\"));\r\n\r\nconsole.log(typeof(stringToBoolean(\"false\")));\r\n\r\nconsole.log(stringToBoolean(true));\r\n\r\nconsole.log(typeof(stringToBoolean(true)));\r\n\r\nconsole.log(stringToBoolean(false));\r\n\r\nconsole.log(typeof(stringToBoolean(false)));\r\n\r\nconsole.log(\"=============================================\");\r\n// what if value was undefined? \r\nconsole.log(\"undefined result:  \" + stringToBoolean(undefined));\r\nconsole.log(\"type of undefined result:  \" + typeof(stringToBoolean(undefined)));\r\nconsole.log(\"=============================================\");\r\n// what if value was an unrelated string?\r\nconsole.log(\"unrelated string result:  \" + stringToBoolean(\"hello world\"));\r\nconsole.log(\"type of unrelated string result:  \" + typeof(stringToBoolean(undefined)));",
                "I'm suprised that includes was not suggestedYou can modify the check for truely or include more conditions (e.g. null, '').",
                "I'm using this one",
                "We just need to account for the \"false\" string since any other string (including \"true\") is already true.TestTest",
                "why don't you try something like thisIt will return an error when some other text is given rather than true or false regardless of the case and it will capture the numbers also as",
                "You need to separate (in your thinking) the value of your selections and the representation of that value.Pick a point in the JavaScript logic where they need to transition from string sentinels to native type and do a comparison there, preferably where it only gets done once for each value that needs to be converted. Remember to address what needs to happen if the string sentinel is not one the script knows (i.e. do you default to true or to false?)In other words, yes, you need to depend on the string's value. :-)",
                "Hands down the easiest way (assuming you string will be 'true' or 'false') is:Always use the === operator instead of the == operator for these types of conversions!",
                "Like @Shadow2531 said, you can't just convert it directly. I'd also suggest that you consider string inputs besides \"true\" and \"false\" that are 'truthy' and 'falsey' if your code is going to be reused/used by others. This is what I use:"
            ]
        },
        {
            "tag": "multiline",
            "patterns": [
                "Creating multiline strings in JavaScript",
                "Multiline strings",
                "How to create multiline strings"
            ],
            "responses": [
                "ECMAScript 6 (ES6) introduces a new type of literal, namely template literals. They have many features, variable interpolation among others, but most importantly for this question, they can be multiline.A template literal is delimited by backticks:(Note: I'm not advocating to use HTML in strings)Browser support is OK, but you can use transpilers to be more compatible.Javascript doesn't have a here-document syntax. You can escape the literal newline, however, which comes close:",
                "As the first answer mentions, with ES6/Babel, you can now create multi-line strings simply by using backticks:Interpolating variables is a popular new feature that comes with back-tick delimited strings:This just transpiles down to concatenation:Google's JavaScript style guide recommends to use string concatenation instead of escaping newlines:Do not do this:The whitespace at the beginning of each line can't be safely stripped at compile time; whitespace after the slash will result in tricky errors; and while most script engines support this, it is not part of ECMAScript.Use string concatenation instead:",
                "the pattern text = <<\"HERE\" This Is A Multiline String HERE is not available in js (I remember using it much in my good old Perl days).To keep oversight with complex or long multiline strings I sometimes use an array pattern:or the pattern anonymous already showed (escape newline), which can be an ugly block in your code:Here's another weird but working 'trick'1:external edit: jsfiddleES20xx supports spanning strings over multiple lines using template strings:1 Note: this will be lost after minifying/obfuscating your code",
                "You can have multiline strings in pure JavaScript.This method is based on the serialization of functions, which is defined to be implementation-dependent. It does work in the most browsers (see below), but there's no guarantee that it will still work in the future, so do not rely on it.Using the following function:You can have here-documents like this:The method has successfully been tested in the following browsers (not mentioned = not tested):Be careful with your minifier, though. It tends to remove comments. For the YUI compressor, a comment starting with /*! (like the one I used) will be preserved.I think a real solution would be to use CoffeeScript.ES6 UPDATE: You could use backtick instead of creating a function with a comment and running toString on the comment. The regex would need to be updated to only strip spaces. You could also have a string prototype method for doing this:Someone should write this .removeIndentation string method... ;)",
                "You can do this...",
                "I came up with this very jimmy rigged method of a multi lined string. Since converting a function into a string also returns any comments inside the function you can use the comments as your string using a multilined comment /**/. You just have to trim off the ends and you have your string.",
                "I'm surprised I didn't see this, because it works everywhere I've tested it and is very useful for e.g. templates:Does anybody know of an environment where there is HTML but it doesn't work?",
                "I solved this by outputting a div, making it hidden, and calling the div id by jQuery when I needed it.e.g.Then when I need to get the string, I just use the following jQuery:Which returns my text on multiple lines. If I callI get:",
                "There are multiple ways to achieve this1. Slash concatenation2. regular concatenation3. Array Join concatenationPerformance wise, Slash concatenation (first one) is the fastest.Refer this test case for more details regarding the performanceUpdate:With the ES2015, we can take advantage of its Template strings feature. With it, we just need to use back-ticks for creating multi line stringsExample:",
                "Using script tags:get your multiline text as is... (watch out for text encoding: UTF-8, ASCII)",
                "I like this syntax and indendation:(but actually can't be considered as multiline string)",
                "Downvoters: This code is supplied for information only.This has been tested in Fx 19 and Chrome 24 on MacDEMOvar new_comment; /*<<<EOF \r\n    <li class=\"photobooth-comment\">\r\n       <span class=\"username\">\r\n          <a href=\"#\">You</a>:\r\n       </span>\r\n       <span class=\"comment-text\">\r\n          $text\r\n       </span> \r\n       @<span class=\"comment-time\">\r\n          2d\r\n       </span> ago\r\n    </li>\r\nEOF*/\r\n// note the script tag here is hardcoded as the FIRST tag \r\nnew_comment=document.currentScript.innerHTML.split(\"EOF\")[1]; \r\ndocument.querySelector(\"ul\").innerHTML=new_comment.replace('$text','This is a dynamically created text');\n<ul></ul>",
                "There's this library that makes it beautiful:https://github.com/sindresorhus/multiline",
                "Found a lot of over engineered answers here.\nThe two best answers in my opinion were:1:which eventually logs:2:That logs it correctly but it's ugly in the script file if str is nested inside functions / objects etc...:My really simple answer with regex which logs the str correctly:Please note that it is not the perfect solution but it works if you are sure that after the new line (\\n) at least one space will come (+ means at least one occurrence). It also will work with * (zero or more).You can be more explicit and use {n,} which means at least n occurrences.",
                "A simple way to print multiline strings in JavaScript is by using template literals(template strings) denoted by backticks (` `). you can also use variables inside a template string-like (` name is ${value} `)You can alsoconst value = `multiline`\nconst text = `This is a\n${value}\nstring in js`;\nconsole.log(text);",
                "The equivalent in javascript is:Here's the specification. See browser support at the bottom of this page. Here are some examples too.",
                "This works in IE, Safari, Chrome and Firefox:",
                "to sum up, I have tried 2 approaches listed here in user javascript programming (Opera 11.01):So I recommend the working approach for Opera user JS users. Unlike what the author was saying:It doesn't work on firefox or opera; only on IE, chrome and safari.It DOES work in Opera 11. At least in user JS scripts. Too bad I can't comment on individual answers or upvote the answer, I'd do it immediately. If possible, someone with higher privileges please do it for me.",
                "Ruby produce: \"This\\nIs\\nA\\nMultiline\\nString\\n\" - below JS produce exact same stringtext = `This\nIs\nA\nMultiline\nString\n`\n\n// TEST\nconsole.log(JSON.stringify(text));\nconsole.log(text);This is improvement to Lonnie Best answer because new-line characters in his answer are not exactly the same positions as in ruby output",
                "My extension to https://stackoverflow.com/a/15558082/80404.\nIt expects comment in a form /*! any multiline comment */ where symbol ! is used to prevent removing by minification (at least for YUI compressor)Example:",
                "Updated for 2015: it's six years later now:  most people use a module loader, and the main module systems each have ways of loading templates. It's not inline, but the most common type of multiline string are templates, and templates should generally be kept out of JS anyway.Using require.js 'text' plugin, with a multiline template in template.htmlBrowserify uses a 'brfs' module to load text files. This will actually build your template into your bundled HTML.Easy.",
                "If you're willing to use the escaped newlines, they can be used nicely.  It looks like a document with a page border.",
                "Easiest way to make multiline strings in Javascrips is with the use of backticks ( `` ). This allows you to create multiline strings in which you can insert variables with ${variableName}.let name = 'Willem'; \r\nlet age = 26;\r\n\r\nlet multilineString = `\r\nmy name is: ${name}\r\n\r\nmy age is: ${age}\r\n`;\r\n\r\nconsole.log(multilineString);Check exact compatibility in Mozilla docs here",
                "The ES6 way of doing it would be by using template literals:More reference here",
                "You can use TypeScript (JavaScript SuperSet), it supports multiline strings, and transpiles back down to pure JavaScript without overhead:If you'd want to accomplish the same with plain JavaScript:Note that the iPad/Safari does not support 'functionName.toString()'If you have a lot of legacy code, you can also use the plain JavaScript variant in TypeScript (for cleanup purposes):and you can use the multiline-string object from the plain JavaScript variant, where you put the templates into another file (which you can merge in the bundle).You can try TypeScript at\nhttp://www.typescriptlang.org/Playground",
                "ES6 allows you to use a backtick to specify a string on multiple lines.  It's called a Template Literal.  Like this:Using the backtick works in NodeJS, and it's supported by Chrome, Firefox, Edge, Safari, and Opera.https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals",
                "Also do note that, when extending string over multiple lines using forward backslash at end of each line, any extra characters (mostly spaces, tabs and comments added by mistake) after forward backslash will cause unexpected character error, which i took an hour to find out",
                "Please for the love of the internet use string concatenation and opt not to use ES6 solutions for this. ES6 is NOT supported all across the board, much like CSS3 and certain browsers being slow to adapt to the CSS3 movement. Use plain ol' JavaScript, your end users will thank you.Example:var str = \"This world is neither flat nor round. \"+\n           \"Once was lost will be found\";",
                "You can use tagged templates to make sure you get the desired output.For example:",
                "Multiline string with variables"
            ]
        },
        {
            "tag": "element_class",
            "patterns": [
                "How can I change an element's class with JavaScript?",
                "Change element class",
                "Element class"
            ],
            "responses": [
                "Modern browsers have added classList which provides methods to make it easier to manipulate classes without needing a library:Unfortunately, these do not work in Internet Explorer prior to v10, though there is a shim to add support for it to IE8 and IE9, available from this page. It is, though, getting more and more supported.The standard JavaScript way to select an element is using document.getElementById(\"Id\"), which is what the following examples use - you can of course obtain elements in other ways, and in the right situation may simply use this instead - however, going into detail on this is beyond the scope of the answer.To replace all existing classes with one or more new classes, set the className attribute:(You can use a space-delimited list to apply multiple classes.)To add a class to an element, without removing/affecting existing values, append a space and the new classname, like so:To remove a single class to an element, without affecting other potential classes, a simple regex replace is required:An explanation of this regex is as follows:The g flag tells the replace to repeat as required, in case the class name has been added multiple times.The same regex used above for removing a class can also be used as a check as to whether a particular class exists:Whilst it is possible to write JavaScript directly inside the HTML event attributes (such as onClick=\"this.className+=' MyClass'\") this is not recommended behavior. Especially on larger applications, more maintainable code is achieved by separating HTML markup from JavaScript interaction logic.The first step to achieving this is by creating a function, and calling the function in the onClick attribute, for example:(It is not required to have this code in script tags, this is simply for the brevity of example, and including the JavaScript in a distinct file may be more appropriate.)The second step is to move the onClick event out of the HTML and into JavaScript, for example using addEventListener(Note that the window.onload part is required so that the contents of that function are executed after the HTML has finished loading - without this, the MyElement might not exist when the JavaScript code is called, so that line would fail.)The above code is all in standard JavaScript, however, it is common practice to use either a framework or a library to simplify common tasks, as well as benefit from fixed bugs and edge cases that you might not think of when writing your code.Whilst some people consider it overkill to add a ~50\u00a0 KB framework for simply changing a class, if you are doing any substantial amount of JavaScript work or anything that might have unusual cross-browser behavior, it is well worth considering.(Very roughly, a library is a set of tools designed for a specific task, whilst a framework generally contains multiple libraries and performs a complete set of duties.)The examples above have been reproduced below using jQuery, probably the most commonly used JavaScript library (though there are others worth investigating too).(Note that $ here is the jQuery object.)In addition, jQuery provides a shortcut for adding a class if it doesn't apply, or removing a class that does:or, without needing an id:",
                "You could also just do:And to toggle a class (remove if exists else add it):",
                "In one of my old projects that did not use jQuery, I built the following functions for adding, removing and checking if an element has a class:So, for example, if I want onclick to add some class to the button I can use this:By now for sure it would just be better to use jQuery.",
                "You can use node.className like so:This should work in Internet Explorer 5.5 and up according to PPK.",
                "Wow, surprised there are so many overkill answers here...",
                "Using pure JavaScript code:",
                "Let's see multiple ways for each action.Method 1: Best way to add a class in the modern browser is using classList.add() method of element.Case 1: Adding single classCase 2: Adding multiple classTo add multiple classes saperate classes by a comma in the add() methodMethod 2 - You can also add classes to HTML elements using className property.Method 1 - The best way to remove a class from an element is the classList.remove() method.Case 1: Remove single classJust pass the class name you want to remove from the element in the method.Case 2: Remove multiple classPass multiple classes separated by a comma.Method 2 - You can also remove class using className method.To check if a class exists in the element you can simply use classList.contains() method. It returns true if the class exists else returns false.To toggle a class use classList.toggle() method.",
                "This is working for me:",
                "As well you could extend HTMLElement object, in order to add methods to add, remove, toggle and check classes (gist):And then just use like this (on click will add or remove class):Here is demo.",
                "Just to add on information from another popular framework, Google Closures, see their dom/classes class:One option for selecting the element is using goog.dom.query with a CSS\u00a03 selector:",
                "A couple of minor notes and tweaks on the previous regexes:You'll want to do it globally in case the class list has the class name more than once. And, you'll probably want to strip spaces from the ends of the class list and convert multiple spaces to one space to keep from getting runs of spaces. None of these things should be a problem if the only code dinking with the class names uses the regex below and removes a name before adding it. But. Well, who knows who might be dinking with the class name list.This regex is case insensitive so that bugs in class names may show up before the code is used on a browser that doesn't care about case in class names.",
                "Change an element's CSS class with JavaScript in ASP.NET:",
                "I would use jQuery and write something like this:This code adds a function to be called when an element of the id some-element is clicked. The function appends clicked to the element's class attribute if it's not already part of it, and removes it if it's there.Yes, you do need to add a reference to the jQuery library in your page to use this code, but at least you can feel confident the most functions in the library would work on pretty much all the modern browsers, and it will save you time implementing your own code to do the same.",
                "The lineshould be:",
                "You may try to use the node attributes property to keep compatibility with old browsers, even Internet Explorer 6:function getClassNode(element) {\n  for (var i = element.attributes.length; i--;)\n    if (element.attributes[i].nodeName === 'class')\n      return element.attributes[i];\n}\n\nfunction removeClass(classNode, className) {\n  var index, classList = classNode.value.split(' ');\n  if ((index = classList.indexOf(className)) > -1) {\n    classList.splice(index, 1);\n    classNode.value = classList.join(' ');\n  }\n}\n\nfunction hasClass(classNode, className) {\n  return classNode.value.indexOf(className) > -1;\n}\n\nfunction addClass(classNode, className) {\n  if (!hasClass(classNode, className))\n    classNode.value += ' ' + className;\n}\n\ndocument.getElementById('message').addEventListener('click', function() {\n  var classNode = getClassNode(this);\n  var className = hasClass(classNode, 'red') && 'blue' || 'red';\n\n  removeClass(classNode, 'red');\n  removeClass(classNode, 'blue');\n\n  addClass(classNode, className);\n})\n.red {\n  color: red;\n}\n.red:before {\n  content: 'I am red! ';\n}\n.red:after {\n  content: ' again';\n}\n.blue {\n  color: blue;\n}\n.blue:before {\n  content: 'I am blue! '\n}\n<span id=\"message\" class=\"\">Click me</span>",
                "Here's my version, fully working:Usage:",
                "Here's a toggleClass to toggle/add/remove a class on an element:See the JSFiddle.Also see my answer here for creating a new class dynamically.",
                "I use the following vanilla JavaScript functions in my code. They use regular expressions and indexOf but do not require quoting special characters in regular expressions.You can also use element.classList in modern browsers.",
                "The OP question was How can I change an element's class with JavaScript?Modern browsers allow you to do this with one line of JavaScript:document.getElementById('id').classList.replace('span1', 'span2')The classList attribute provides a DOMTokenList which has a variety of methods. You can operate on an element's classList using simple manipulations like add(), remove() or replace(). Or get very sophisticated and manipulate classes like you would an object or Map with keys(), values(), and entries().Peter Boughton's answer is a great one, but it's now over a decade old. All modern browsers now support DOMTokenList - see https://caniuse.com/#search=classList and even Internet\u00a0Explorer\u00a011 supports some DOMTokenList methods.",
                "Here is a little style vs. classList examples to get you to see what are the options you have available and how to use classList to do what you want.The difference between style and classList is that with style you're adding to the style properties of the element, but classList is kinda controlling the class(es) of the element (add, remove, toggle, contain), I will show you how to use the add and remove method since those are the popular ones.If you want to add margin-top  property into an element, you would do in such:Let say we have a <div class=\"class-a class-b\">, in this case, we have 2 classes added to our div element already, class-a and class-b, and we want to control what classes remove and what class to add. This is where classList becomes handy.",
                "Try:function change(box) { box.className='second' }\n.first  { width:  70px; height:  70px; background: #ff0                 }\n.second { width: 150px; height: 150px; background: #f00; transition: 1s }\n<div onclick=\"change(this)\" class=\"first\">Click me</div>",
                "For IE v6-9 (in which classList is not supported and you don't want to use polyfills):",
                "OK, I think in this case you should use jQuery or write your own Methods in pure JavaScript. My preference is adding my own methods rather than injecting all jQuery to my application if I don't need that for other reasons.I'd like to do something like below as methods to my JavaScript framework to add few functionalities which handle adding classes, deleting classes, etc. Similar to jQuery, this is fully supported in IE9+. Also my code is written in ES6, so you need to make sure your browser support it or you using something like Babel, otherwise need to use ES5 syntax in your code. Also in this way, we finding element via ID, which means the element needs to have an ID to be selected:And you can simply use them as below. Imagine your element has id of 'id' and class of 'class'. Make sure you pass them as a string. You can use the utility as below:",
                "A very convenient manner of adding and removing classes is the classList DOM API. This API allows us to select all classes of a specific DOM element in order to modify the list using JavaScript. For example:const el = document.getElementById(\"main\");\nconsole.log(el.classList);\n<div class=\"content wrapper animated\" id=\"main\"></div>We can observe in the log that we are getting back an object with not only the classes of the element, but also many auxiliary methods and properties. This object inherits from the interface DOMTokenList, an interface which is used in the DOM to represent a set of space separated tokens (like classes).const el = document.getElementById('container');\n\nfunction addClass () {\n    el.classList.add('newclass');\n}\n\n\nfunction replaceClass () {\n    el.classList.replace('foo', 'newFoo');\n}\n\n\nfunction removeClass () {\n    el.classList.remove('bar');\n}\nbutton{\n  margin: 20px;\n}\n\n.foo{\n  color: red;\n}\n\n.newFoo {\n  color: blue;\n}\n\n.bar{\n  background-color: powderblue;\n}\n\n.newclass{\n  border: 2px solid green;\n}\n<div class=\"foo bar\" id=\"container\">\n  \"Sed ut perspiciatis unde omnis\n  iste natus error sit voluptatem accusantium doloremque laudantium,\n  totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et\n  quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam\n  voluptatem quia voluptas\n </div>\n\n<button onclick=\"addClass()\">AddClass</button>\n\n<button onclick=\"replaceClass()\">ReplaceClass</button>\n\n<button onclick=\"removeClass()\">removeClass</button>",
                "Yes, there are many ways to do this. In ES6 syntax we can achieve easily. Use this code toggle add and remove class.const tabs=document.querySelectorAll('.menu li');\n\nfor(let tab of tabs){\n\n  tab.onclick = function(){\n\n    let activetab = document.querySelectorAll('li.active');\n\n    activetab[0].classList.remove('active')\n\n    tab.classList.add('active');\n  }\n\n}\nbody {\n    padding: 20px;\n    font-family: sans-serif;\n}\n\nul {\n    margin: 20px 0;\n    list-style: none;\n}\n\nli {\n    background: #dfdfdf;\n    padding: 10px;\n    margin: 6px 0;\n    cursor: pointer;\n}\n\nli.active {\n    background: #2794c7;\n    font-weight: bold;\n    color: #ffffff;\n}\n<i>Please click an item:</i>\n\n<ul class=\"menu\">\n  <li class=\"active\"><span>Three</span></li>\n  <li><span>Two</span></li>\n  <li><span>One</span></li>\n</ul>",
                "Just thought I'd throw this in:",
                "Just use myElement.classList=\"new-class\" unless you need to maintain other existing classes in which case you can use the classList.add, .remove methods.var doc = document;\nvar divOne = doc.getElementById(\"one\");\nvar goButton = doc.getElementById(\"go\");\n\ngoButton.addEventListener(\"click\", function() {\n  divOne.classList=\"blue\";\n});\ndiv{\n  min-height: 48px;\n  min-width: 48px;\n}\n.bordered{\n  border: 1px solid black;\n}\n.green{\n  background: green;\n}\n.blue{\n  background: blue;\n}\n<button id=\"go\">Change Class</button>\n\n<div id=\"one\" class=\"bordered green\">\n\n</div>",
                "TL;DR:ORThat's it.And, if you really want to know the why and educate yourself then I suggest reading Peter Boughton's answer. It's perfect.Note:This is possible with (document or event):",
                "Using Peter Boughton's answer, here is a simple cross-browser function to add and remove class.Add class:Remove class:",
                "There is a property, className, in JavaScript to change the name of the class of an HTML element. The existing class value will be replaced with the new one, that you have assigned in className.Credit - How To Change Class Name of an HTML Element in JavaScript"
            ]
        },
        {
            "tag": "format_date",
            "patterns": [
                "How do I format a date in JavaScript?",
                "JavaScript dates",
                "Format dates"
            ],
            "responses": [
                "If you need slightly less control over formatting than the currently accepted answer, Date#toLocaleDateString can be used to create standard locale-specific renderings. The locale and options arguments let applications specify the language whose formatting conventions should be used, and allow some customization of the rendering.All these keys are optional.  You can change the number of options values based on your requirements, and this will also reflect the presence of each date time term.Note: If you would only like to configure the content options, but still use the current locale, passing null for the first parameter will cause an error.  Use undefined instead.You can use more language options.var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\nvar today  = new Date();\n\nconsole.log(today.toLocaleDateString(\"en-US\")); // 9/17/2016\nconsole.log(today.toLocaleDateString(\"en-US\", options)); // Saturday, September 17, 2016\nconsole.log(today.toLocaleDateString(\"hi-IN\", options)); // \u0936\u0928\u093f\u0935\u093e\u0930, 17 \u0938\u093f\u0924\u0902\u092c\u0930 2016You can also use the toLocaleString() method for the same purpose. The only difference is this function provides the time when you don't pass any options.toLocaleString()toLocaleDateString()",
                "For custom-delimited date formats, you have to pull out the date (or time)\ncomponents from a DateTimeFormat object (which is part of the\nECMAScript Internationalization API), and then manually create a string\nwith the delimiters you want.To do this, you can use DateTimeFormat#formatToParts. You could\ndestructure the array, but that is not ideal, as the array output depends on the\nlocale:{ // example 1\n   let f = new Intl.DateTimeFormat('en');\n   let a = f.formatToParts();\n   console.log(a);\n}\n{ // example 2\n   let f = new Intl.DateTimeFormat('hi');\n   let a = f.formatToParts();\n   console.log(a);\n}Better would be to map a format array to resultant strings:function join(t, a, s) {\n   function format(m) {\n      let f = new Intl.DateTimeFormat('en', m);\n      return f.format(t);\n   }\n   return a.map(format).join(s);\n}\n\nlet a = [{day: 'numeric'}, {month: 'short'}, {year: 'numeric'}];\nlet s = join(new Date, a, '-');\nconsole.log(s);You can also pull out the parts of a DateTimeFormat one-by-one using\nDateTimeFormat#format, but note that when using this method, as of March\n2020, there is a bug in the ECMAScript implementation when it comes to\nleading zeros on minutes and seconds (this bug is circumvented by the approach\nabove).let d = new Date(2010, 7, 5);\nlet ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);\nlet mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);\nlet da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);\nconsole.log(`${da}-${mo}-${ye}`);When working with dates and times, it is usually worth using a library (eg. luxon, date-fns, moment.js is not recommended for new projects) because of the many hidden complexities of the field.Note that the ECMAScript Internationalization API, used in the solutions above\nis not supported in IE10 (0.03% global browser market share in Feb\n2020).",
                "If you need to quickly format your date using plain JavaScript, use getDate, getMonth + 1, getFullYear, getHours and getMinutes:Or, if you need it to be padded with zeros:",
                "Use the date.format library:returns:dateformat on npmhttp://jsfiddle.net/phZr7/1/",
                "Well, what I wanted was to convert today's date to a MySQL friendly date string like 2012-06-23, and to use that string as a parameter in one of my queries. The simple solution I've found is this:Keep in mind that the above solution does not take into account your timezone offset.You might consider using this function instead:This will give you the correct date in case you are executing this code around the start/end of the day.var date = new Date();\n\nfunction toLocal(date) {\n  var local = new Date(date);\n  local.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n  return local.toJSON();\n}\n\nfunction toJSONLocal(date) {\n  var local = new Date(date);\n  local.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n  return local.toJSON().slice(0, 10);\n}\n\n// check out your devtools console\nconsole.log(date.toJSON());\nconsole.log(date.toISOString());\nconsole.log(toLocal(date));\n\nconsole.log(toJSONLocal(date));",
                "For fixed formats, a simple function make the job. The following example generates the international format YYYY-MM-DD:function dateToYMD(date) {\n    var d = date.getDate();\n    var m = date.getMonth() + 1; //Month from 0 to 11\n    var y = date.getFullYear();\n    return '' + y + '-' + (m<=9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);\n}\n\nconsole.log(dateToYMD(new Date(2017,10,5))); // Nov 5The OP format may be generated like:function dateToYMD(date) {\n    var strArray=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    var d = date.getDate();\n    var m = strArray[date.getMonth()];\n    var y = date.getFullYear();\n    return '' + (d <= 9 ? '0' + d : d) + '-' + m + '-' + y;\n}\nconsole.log(dateToYMD(new Date(2017,10,5))); // Nov 5Note: It is, however, usually not a good idea to extend the JavaScript standard libraries (e.g. by adding this function to the prototype of Date).A more advanced function could generate configurable output based on a format parameter.If to write a formatting function is too long, there are plenty of libraries around which does it. Some other answers already enumerate them. But increasing dependencies also has it counter-part.Since more recent versions of ECMAScript, the Date class has some specific formatting functions:toDateString: Implementation dependent, show only the date.https://262.ecma-international.org/#sec-date.prototype.todatestringtoISOString: Show ISO 8601 date and time.https://262.ecma-international.org/#sec-date.prototype.toisostringtoJSON: Stringifier for JSON.https://262.ecma-international.org/#sec-date.prototype.tojsontoLocaleDateString: Implementation dependent, a date in locale format.https://262.ecma-international.org/#sec-date.prototype.tolocaledatestringtoLocaleString: Implementation dependent, a date&time in locale format.https://262.ecma-international.org/#sec-date.prototype.tolocalestringtoLocaleTimeString: Implementation dependent, a time in locale format.https://262.ecma-international.org/#sec-date.prototype.tolocaletimestringtoString: Generic toString for Date.https://262.ecma-international.org/#sec-date.prototype.tostringNote: it is possible to generate custom output out of those formatting >Examples snippets:\n\n\nconsole.log(\"1) \"+  new Date().toDateString());\nconsole.log(\"2) \"+  new Date().toISOString());\nconsole.log(\"3) \"+  new Date().toJSON());\nconsole.log(\"4) \"+  new Date().toLocaleDateString());\nconsole.log(\"5) \"+  new Date().toLocaleString());\nconsole.log(\"6) \"+  new Date().toLocaleTimeString());\nconsole.log(\"7) \"+  new Date().toString());\nconsole.log(\"8) \"+  new Date().toISOString().slice(0,10));Some of the standard functions listed above are dependent on the locale:This is because different cultures make uses of different formats, and express their date or time in different ways.\nThe function by default will return the format configured on the device it runs, but this can be specified by setting the arguments (ECMA-402).The option second parameter, allow for configuring more specific format inside the selected locale. For instance, the month can be show as full-text or abreviation.Examples snippets:\n\n\nconsole.log(\"1) \"+  new Date().toLocaleString('en-US'));\nconsole.log(\"2) \"+  new Date().toLocaleString('ko-KR'));\nconsole.log(\"3) \"+  new Date().toLocaleString('de-CH'));\n\nconsole.log(\"4) \"+  new Date().toLocaleString('en-GB', { hour12: false }));\nconsole.log(\"5) \"+  new Date().toLocaleString('en-GB', { hour12: true }));Some good practices regarding locales:",
                "If you are already using jQuery UI in your project you could do it this way:Some datepicker date format options to play with are available here.",
                "I think you can just use the non-standard Date method toLocaleFormat(formatString)formatString: A format string in the same format expected by the strftime() function in C.References:",
                "Plain JavaScript is the best pick for small onetimers.On the other hand, if you need more date stuff, MomentJS is a great solution.For example:",
                "In modern browsers (*), you can just do this:Output if executed today (january 24\u1d57\u02b0, 2016):(*) According to MDN, \"modern browsers\" means Chrome\u00a024+, Firefox 29+, Internet\u00a0Explorer\u00a011, Edge\u00a012+, Opera\u00a015+ & Safari nightly build.",
                "Requested format in one line - no libraries and no Date methods, just regex:In my testing, this works reliably in the major browsers (Chrome, Safari, Firefox and IE.) As @RobG pointed out, the output of Date.prototype.toString() is implementation-dependent, so for international or non-browser implementations, just test the output to be sure it works right in your JavaScript engine. You can even add some code to test the string output and make sure it's matching what you expect before you do the regex replace.",
                "Packaged Solution: Luxon or date-fnsIf you want to use a one solution to fit all, I recommend using date-fns or Luxon.Luxon is hosted on the Moment.js website and developed by a Moment.js developer because Moment.js has limitations that the developer wanted to address but couldn't.To install:npm install luxon or yarn add luxon (visit link for other installation methods)Example:luxon.DateTime.fromISO('2010-08-10').toFormat('yyyy-LLL-dd');Yields:10-Aug-2010Manual SolutionUsing similar formatting as Moment.js, Class DateTimeFormatter (Java), and Class SimpleDateFormat (Java), I implemented a comprehensive solution formatDate(date, patternStr) where the code is easy to read and modify. You can display date, time, AM/PM, etc. See code for more examples.Example:formatDate(new Date(), 'EEEE, MMMM d, yyyy HH:mm:ss:S')(formatDate is implemented in the code snippet below)Yields:Friday, October 12, 2018 18:11:23:445Try the code out by clicking \"Run code snippet.\"Date and Time Patternsyy = 2-digit year; yyyy = full yearM = digit month; MM = 2-digit month; MMM = short month name; MMMM = full month nameEEEE = full weekday name; EEE = short weekday named = digit day; dd = 2-digit dayh = hours am/pm; hh = 2-digit hours am/pm; H = hours; HH = 2-digit hoursm = minutes; mm = 2-digit minutes; aaa = AM/PMs = seconds; ss = 2-digit secondsS = milisecondsvar monthNames = [\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n  \"August\", \"September\", \"October\", \"November\", \"December\"\n];\nvar dayOfWeekNames = [\n  \"Sunday\", \"Monday\", \"Tuesday\",\n  \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n];\nfunction formatDate(date, patternStr){\n    if (!patternStr) {\n        patternStr = 'M/d/yyyy';\n    }\n    var day = date.getDate(),\n        month = date.getMonth(),\n        year = date.getFullYear(),\n        hour = date.getHours(),\n        minute = date.getMinutes(),\n        second = date.getSeconds(),\n        miliseconds = date.getMilliseconds(),\n        h = hour % 12,\n        hh = twoDigitPad(h),\n        HH = twoDigitPad(hour),\n        mm = twoDigitPad(minute),\n        ss = twoDigitPad(second),\n        aaa = hour < 12 ? 'AM' : 'PM',\n        EEEE = dayOfWeekNames[date.getDay()],\n        EEE = EEEE.substr(0, 3),\n        dd = twoDigitPad(day),\n        M = month + 1,\n        MM = twoDigitPad(M),\n        MMMM = monthNames[month],\n        MMM = MMMM.substr(0, 3),\n        yyyy = year + \"\",\n        yy = yyyy.substr(2, 2)\n    ;\n    // checks to see if month name will be used\n    patternStr = patternStr\n      .replace('hh', hh).replace('h', h)\n      .replace('HH', HH).replace('H', hour)\n      .replace('mm', mm).replace('m', minute)\n      .replace('ss', ss).replace('s', second)\n      .replace('S', miliseconds)\n      .replace('dd', dd).replace('d', day)\n      \n      .replace('EEEE', EEEE).replace('EEE', EEE)\n      .replace('yyyy', yyyy)\n      .replace('yy', yy)\n      .replace('aaa', aaa);\n    if (patternStr.indexOf('MMM') > -1) {\n        patternStr = patternStr\n          .replace('MMMM', MMMM)\n          .replace('MMM', MMM);\n    }\n    else {\n        patternStr = patternStr\n          .replace('MM', MM)\n          .replace('M', M);\n    }\n    return patternStr;\n}\nfunction twoDigitPad(num) {\n    return num < 10 ? \"0\" + num : num;\n}\nconsole.log(formatDate(new Date()));\nconsole.log(formatDate(new Date(), 'dd-MMM-yyyy')); //OP's request\nconsole.log(formatDate(new Date(), 'EEEE, MMMM d, yyyy HH:mm:ss.S aaa'));\nconsole.log(formatDate(new Date(), 'EEE, MMM d, yyyy HH:mm'));\nconsole.log(formatDate(new Date(), 'yyyy-MM-dd HH:mm:ss.S'));\nconsole.log(formatDate(new Date(), 'M/dd/yyyy h:mmaaa'));Thank you @Gerry for bringing up Luxon.",
                "@S\u00e9bastien  -- alternative all browser supportDocumentation:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateStringHigh-order tagged template literal example based on Date.toLocaleDateString:",
                "OK, we have got something called Intl which is very useful for formatting a date in JavaScript these days:Your date as below:And you change to Date by using new Date() like below:And now you can format it any way you like using a list of locales like below:If you exactly want the format you mentioned above, you can do:And the result is going to be:For more see the Intl API and Intl.DateTimeFormat documentation.",
                "Using an ECMAScript Edition 6 (ES6/ES2015) string template:If you need to change the delimiters:",
                "The Date constructor (and Date.parse()) only accepts one format as a parameter when constructing a date and that is ISO 8601:But parsing a from a string is strongly discouraged (MDN recommends against creating date with date strings) due to browser differences and inconsistencies.The recommended alternative would be building your Date instance directly from the numeric data like this:That is parsing. Now, to format your date to the string you desire you have several options that are native of the Date object (although I believe none is compliant to the format you require):For other formatting options I'm afraid you'll have to turn to libraries such as Moment.js, day.js and the like.Credit to Zell Liew from this article for the date formatting tips.",
                "Here's is some code I just wrote to handle the date formatting for a project I'm working on. It mimics the PHP date formatting functionality to suit my needs. Feel free to use it, it's just extending the already existing Date() object. This may not be the most elegant solution but it's working for my needs.",
                "This may help with the problem:var d = new Date();\n\nvar options = {   \n    day: 'numeric',\n    month: 'long', \n    year: 'numeric'\n};\n\nconsole.log(d.toLocaleDateString('en-ZA', options));",
                "A useful and flexible way for formatting the DateTimes in JavaScript is Intl.DateTimeFormat:Result Is:  \"12-Oct-2017\"The date and time formats can be customized using the options argument.The Intl.DateTimeFormat object is a constructor for objects that enable language sensitive date and time formatting.SyntaxParameterslocalesOptional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the Intl page. The following Unicode extension keys are allowed:OptionsOptional. An object with some or all of the following properties:localeMatcherThe locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the Intl page.timeZoneThe time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the IANA time zone database, such as \"Asia/Shanghai\", \"Asia/Kolkata\", \"America/New_York\".hour12Whether to use 12-hour time (as opposed to 24-hour time). Possible values are true and false; the default is locale dependent.formatMatcherThe format matching algorithm to use. Possible values are \"basic\" and \"best fit\"; the default is \"best fit\". See the following paragraphs for information about the use of this property.The following properties describe the date-time components to use in formatted output and their desired representations. Implementations are required to support at least the following subsets:Implementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. Two algorithms are available for this negotiation and selected by the formatMatcher property: A fully specified \"basic\" algorithm and an implementation dependent \"best fit\" algorithm.weekdayThe representation of the weekday. Possible values are \"narrow\", \"short\", \"long\".eraThe representation of the era. Possible values are \"narrow\", \"short\", \"long\".yearThe representation of the year. Possible values are \"numeric\", \"2-digit\".monthThe representation of the month. Possible values are \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\".dayThe representation of the day. Possible values are \"numeric\", \"2-digit\".hourThe representation of the hour. Possible values are \"numeric\", \"2-digit\".minuteThe representation of the minute. Possible values are \"numeric\", \"2-digit\".secondThe representation of the second. Possible values are \"numeric\", \"2-digit\".timeZoneNameThe representation of the time zone name. Possible values are \"short\", \"long\".\nThe default value for each date-time component property is undefined, but if all component properties are undefined, then the year, month and day are assumed to be \"numeric\".Check OnlineMore Details",
                "A JavaScript solution without using any external libraries:",
                "new Date().toLocaleDateString()\r\n\r\n// \"3/21/2018\"More documentation at developer.mozilla.org",
                "We have lots of solutions for this, but I think the best of them is Moment.js. So I personally suggest to use Moment.js for date and time operations.console.log(moment().format('DD-MMM-YYYY'));\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/moment.js/2.14.1/moment.min.js\"></script>",
                "If you are using jQuery UI in your code, there is an inbuilt function called formatDate(). I am using it this way to format today's date:You can see  many other examples of formatting date in the jQuery UI documentation.",
                "This is how I implemented for my npm plugins",
                "You should have a look at DayJs  It's a remake of momentJs but modular architecture oriented so lighter.Fast 2kB alternative to Moment.js with the same modern APIDay.js is a minimalist JavaScript library that parses, validates, manipulates, and displays dates and times for modern browsers with a largely Moment.js-compatible API. If you use Moment.js, you already know how to use Day.js.var date = Date.now();\r\nconst formatedDate = dayjs(date).format(\"YYYY-MM-DD\")\r\nconsole.log(formatedDate);\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.8.16/dayjs.min.js\" crossorigin=\"anonymous\"></script>",
                "Inspired by JD Smith's marvellous regular expression solution, I suddenly had this head-splitting idea:var D = Date().toString().split(\" \");\r\nconsole.log(D[2] + \"-\" + D[1] + \"-\" + D[3]);",
                "For any one looking for a really simple ES6 solution to copy, paste and adopt:const dateToString = d => `${d.getFullYear()}-${('00' + (d.getMonth() + 1)).slice(-2)}-${('00' + d.getDate()).slice(-2)}` \r\n\r\n// how to use:\r\nconst myDate = new Date(Date.parse('04 Dec 1995 00:12:00 GMT'))\r\nconsole.log(dateToString(myDate)) // 1995-12-04",
                "As of 2019, it looks like you can get toLocaleDateString to return only certain parts and then you can join them as you wish:",
                "It works same in Internet Explorer 11, Firefox, and Chrome (Chrome 80.x shows 12 hours format when en-UK selected).const d = new Date('2010/08/05 23:45') // 26.3.2020\nconst dtfUK = new Intl.DateTimeFormat('UK', { year: 'numeric', month: '2-digit', day: '2-digit',\n        hour: '2-digit',minute: '2-digit', second: '2-digit' }); //\nconst dtfUS = new Intl.DateTimeFormat('en', { year: 'numeric', month: '2-digit', day: '2-digit',\n        hour: '2-digit',minute: '2-digit', second: '2-digit' }); //\nconsole.log(dtfUS.format(d)); // 08/05/2010 11:45:00 PM\nconsole.log(dtfUK.format(d)); // 05.08.2010 23:45:00\n/* node.js:\n08/05/2010, 11:45:00 PM\n2010-08-05 23:45:00\n*/What about something more general?var d = new Date('2010-08-10T10:34:56.789Z');\nvar str = d.toDateString() + // Tue Aug 10 2010\n    ' ' + d.toTimeString().split(' ')[0] + // 12:34:56, GMT+0x00 (GMT+0x:00)\n    ' ' + (d.getMonth() + 101) + // 108\n    ' ' + d.getMilliseconds(); // 789\nconsole.log(str); // Tue Aug 10 2010 12:34:56 108 789\nconsole.log(//   $1 Tue  $2 Aug  $3 11     $4 2020 $5 12   $6 34   $7 56    $8 108  $9 789\n    str.replace(/(\\S{3}) (\\S{3}) (\\d{1,2}) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2}) 1(\\d{2}) (\\d{1,3})/, '$3-$2-$4 $5:$6.$9 ($1)')\n); // 10-Aug-2010 12:34.789 (Tue)\n/*\n$1: Tue  Week Day string\n$2: Aug  Month short text\n$3: 11   Day\n$4: 2010 Year\n$5: 12   Hour\n$6: 34   Minute\n$7: 56   Seconds\n$8: 08   Month\n$9: 789  Milliseconds\n*/Or for example 1-line IIFE \"library\" ;-)console.log(\n    (function (frm, d) { return [d.toDateString(), d.toTimeString().split(' ')[0], (d.getMonth() + 101), d.getMilliseconds()].join(' ').replace(/(\\S{3}) (\\S{3}) (\\d{1,2}) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2}) 1(\\d{2}) (\\d{1,3})/, frm); })\n    ('$4/$8/$3 $5:$6 ($1)', new Date())\n);You can remove useless parts and / or change indexes if you do not need them."
            ]
        },
        {
            "tag": "javascript_array",
            "patterns": [
                "How can I check if an object is an array?",
                "Check an object in array",
                "Is this object in the array"
            ],
            "responses": [
                "The method given in the ECMAScript standard to find the class of Object is to use the toString method from Object.prototype.Or you could use typeof to test if it is a string:Or if you're not concerned about performance, you could just do a concat to a new empty Array.There's also the constructor which you can query directly:Check out a thorough treatment from T.J. Crowder's blog, as posted in his comment below.Check out this benchmark to get an idea which method performs better: http://jsben.ch/#/QgYAVFrom @Bharath, convert a string to an array using ES6 for the question asked:Suppose:",
                "In modern browsers you can do:(Supported by Chrome 5, Firefox 4.0, Internet\u00a0Explorer\u00a09, Opera 10.5 and Safari 5)For backward compatibility you can add the following:If you use jQuery you can use jQuery.isArray(obj) or $.isArray(obj). If you use Underscore.js you can use _.isArray(obj).If you don't need to detect arrays created in different frames you can also just use instanceof:",
                "I would first check if your implementation supports isArray:You could also try using the instanceof operator",
                "jQuery also offers an $.isArray() method:var a = [\"A\", \"AA\", \"AAA\"];\r\n\r\nif($.isArray(a)) {\r\n  alert(\"a is an array!\");\r\n} else {\r\n  alert(\"a is not an array!\");\r\n}\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>",
                "This is the fastest among all methods (all browsers supported):",
                "Imagine you have this array below:JavaScript (new and older browsers):ororThen call it like this:JavaScript (Internet\u00a0Explorer\u00a09+, Chrome\u00a05+, Firefox\u00a04+, Safari\u00a05+, and Opera\u00a010.5+)jQuery:Angular:Underscore.js and Lodash:",
                "Array.isArray works fast, but it isn't supported by all versions of browsers.So you could make an exception for others and use a universal method:",
                "A simple function to check this:",
                "You can use Array.isArray(). Here is a polyfill:",
                "As MDN says in here:use Array.isArray or Object.prototype.toString.call to differentiate\n  regular objects from arraysLike this:Object.prototype.toString.call(arr) === '[object Array]', orArray.isArray(arr)",
                "There's just one line solution for this questionwhere x is the variable it will return true if x is an array and false if it is not.",
                "I would make a function to test the type of object you are dealing with...function whatAmI(me){ return Object.prototype.toString.call(me).split(/\\W/)[2]; }\r\n\r\n// tests\r\nconsole.log(\r\n  whatAmI([\"aiming\",\"@\"]),\r\n  whatAmI({living:4,breathing:4}),\r\n  whatAmI(function(ing){ return ing+\" to the global window\" }),\r\n  whatAmI(\"going to do with you?\")\r\n);\r\n\r\n// output: Array Object Function Stringthen you can write a simple if statement...",
                "You can check the type of your variable whether it is an array with;",
                "I do this in a very simple way. It works for me.",
                "This is my attempt to improve on this answer taking into account the comments:It gets rid of the if/else, and accounts for the possibility of the array being null or undefined",
                "I have updated the jsperf fiddle with two alternative methods as well as error checking.It turns out that the method defining a constant value in the 'Object' and 'Array' prototypes is faster than any of the other methods.  It is a somewhat surprising result./* Initialisation */\r\nObject.prototype.isArray = function() {\r\n  return false;\r\n};\r\nArray.prototype.isArray = function() {\r\n  return true;\r\n};\r\nObject.prototype._isArray = false;\r\nArray.prototype._isArray = true;\r\n\r\nvar arr = [\"1\", \"2\"];\r\nvar noarr = \"1\";\r\n\r\n/* Method 1 (function) */\r\nif (arr.isArray()) document.write(\"arr is an array according to function<br/>\");\r\nif (!noarr.isArray()) document.write(\"noarr is not an array according to function<br/>\");\r\n/* Method 2 (value) - **** FASTEST ***** */\r\nif (arr._isArray) document.write(\"arr is an array according to member value<br/>\");\r\nif (!noarr._isArray) document.write(\"noarr is not an array according to member value<br/>\");These two methods do not work if the variable takes the undefined value, but they do work if you are certain that they have a value.  With regards to checking with performance in mind if a value is an array or a single value, the second method looks like a valid fast method.  It is slightly faster than 'instanceof' on Chrome, twice as fast as the second best method in Internet Explorer, Opera and Safari (on my machine).",
                "I know, that people are looking for some kind of raw JavaScript approach. But if you want think less about it, take a look at Underscore.js' isArray:It returns true if object is an Array.",
                "The best practice is to compare it using constructor, something like thisYou can use other methods too, like typeOf, converting it to a string and then comparing, but comparing it with dataType is always a better approach.",
                "The best solution I've seen is a cross-browser replacement for typeof. Check Angus Croll's solution.The TL;DR version is below, but the article is a great discussion of the issue so you should read it if you have time.",
                "If the only two kinds of values that could be passed to this function are a string or an array of strings, keep it simple and use a typeof check for the string possibility:",
                "Here's my lazy approach:I know it's sacrilege to \"mess with\" the prototype, but it appears to perform significantly better than the recommended toString method.Note: A pitfall of this approach is that it wont work across iframe boundaries, but for my use case this is not an issue.",
                "This function will turn almost anything into an array:It uses some newer browser features so you may want to polyfill this for maximum support.Examples:N.B. strings will be converted into an array with a single element instead of an array of chars. Delete the isString check if you would prefer it the other way around.I've used Array.isArray here because it's the most robust and also simplest.",
                "The following could be used if you know that your object doesn't have a concat method.var arr = [];\r\nif (typeof arr.concat === 'function') {\r\n    console.log(\"It's an array\");\r\n}",
                "There is a nice example in Stoyan Stefanov's book JavaScript Patterns which is supposed to handle all possible problems as well as use the ECMAScript 5 method Array.isArray().So here it is:By the way, if you are using jQuery, you can use its method $.isArray().",
                "You could use the isArray method, but I would prefer to check with:Object.getPrototypeOf(yourvariable) === Array.prototype",
                "A simple function for testing if an input value is an array is the following:This works cross browser, and with older browsers. This is pulled from T.J. Crowders' blog post",
                "You can try this:",
                "In your case you may use concat method of Array which can accept single objects as well as array (and even combined):concat seems to be one of the oldest methods of Array (even IE 5.5 knows it well)."
            ]
        },
        {
            "tag": "pretty",
            "patterns": [
                "pretty-print JSON using JavaScript",
                "What is pretty print",
                "JSON pretty print"
            ],
            "responses": [
                "Pretty-printing is implemented natively in JSON.stringify(). The third argument enables pretty printing and sets the spacing to use:If you need syntax highlighting, you might use some regex magic like so:See in action here: jsfiddleOr a full snippet provided below:function output(inp) {\r\n    document.body.appendChild(document.createElement('pre')).innerHTML = inp;\r\n}\r\n\r\nfunction syntaxHighlight(json) {\r\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\r\n        var cls = 'number';\r\n        if (/^\"/.test(match)) {\r\n            if (/:$/.test(match)) {\r\n                cls = 'key';\r\n            } else {\r\n                cls = 'string';\r\n            }\r\n        } else if (/true|false/.test(match)) {\r\n            cls = 'boolean';\r\n        } else if (/null/.test(match)) {\r\n            cls = 'null';\r\n        }\r\n        return '<span class=\"' + cls + '\">' + match + '</span>';\r\n    });\r\n}\r\n\r\nvar obj = {a:1, 'b':'foo', c:[false,'false',null, 'null', {d:{e:1.3e5,f:'1.3e5'}}]};\r\nvar str = JSON.stringify(obj, undefined, 4);\r\n\r\noutput(str);\r\noutput(syntaxHighlight(str));\npre {outline: 1px solid #ccc; padding: 5px; margin: 5px; }\r\n.string { color: green; }\r\n.number { color: darkorange; }\r\n.boolean { color: blue; }\r\n.null { color: magenta; }\r\n.key { color: red; }",
                "User Pumbaa80's answer is great if you have an object you want pretty printed. If you're starting from a valid JSON string that you want to pretty printed, you need to convert it to an object first:This builds a JSON object from the string, and then converts it back to a string using JSON stringify's pretty print.",
                "Better way.Prettify JSON Array in Javascript",
                "In case of displaying in HTML, you should to add a balise <pre></pre>Example:var jsonObj = {\"streetLabel\": \"Avenue Anatole France\", \"city\": \"Paris 07\",  \"postalCode\": \"75007\", \"countryCode\": \"FRA\",  \"countryLabel\": \"France\" };\r\n\r\ndocument.getElementById(\"result-before\").innerHTML = JSON.stringify(jsonObj);\r\n\r\ndocument.getElementById(\"result-after\").innerHTML = \"<pre>\"+JSON.stringify(jsonObj,undefined, 2) +\"</pre>\"\ndiv { float:left; clear:both; margin: 1em 0; }\n<div id=\"result-before\"></div>\r\n<div id=\"result-after\"></div>",
                "Based on Pumbaa80's answer I have modified the code to use the console.log colours (working on Chrome for sure) and not HTML. Output can be seen inside console. You can edit the _variables inside the function adding some more styling.Here is a bookmarklet you can use:Usage:Edit: I just tried to escape the % symbol with this line, after the variables declaration:But I find out that Chrome is not supporting % escaping in the console. Strange... Maybe this will work in the future.Cheers!",
                "You can use console.dir(), which is a shortcut for console.log(util.inspect()).\n(The only difference is that it bypasses any custom inspect() function defined on an object.)It uses syntax-highlighting, smart indentation, removes quotes from keys and just makes the output as pretty as it gets.and for the command line:cat package.json | node -e \"process.stdin.pipe(new stream.Writable({write: chunk => console.dir(JSON.parse(chunk), {depth: null, colors: true})}))\"",
                "I use the JSONView Chrome extension (it is as pretty as it gets :):Edit: added jsonreport.jsI've also released an online stand-alone JSON pretty print viewer, jsonreport.js, that provides a human readable HTML5 report you can use to view any JSON data.You can read more about the format in New JavaScript HTML5 Report Format.",
                "I think you're looking for something like this :This \"pretty-prints\" your JSON string, using a tab for indentation.If you prefer to use spaces instead of tabs, you could also use a number for the number of spaces you'd like :",
                "If you are using ES5, simply call JSON.stringify with:Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",
                "Here's user123444555621's awesome HTML one adapted for terminals. Handy for debugging Node scripts:Usage:",
                "For debugging purpose I use:",
                "You can use JSON.stringify(your object, null, 2)\nThe second parameter can be used as a replacer function which takes key and Val as parameters.This can be used in case you want to modify something within your JSON object.more reference : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",
                "Unsatisfied with other pretty printers for Ruby, I wrote my own (NeatJSON) and then ported it to JavaScript including a free online formatter. The code is free under MIT license (quite permissive).Features (all optional):I'll copy the source code here so that this is not just a link to a library, but I encourage you to go to the GitHub project page, as that will be kept up-to-date and the code below will not.",
                "Thanks a lot @all!\nBased on the previous answers, here is another variant method providing custom replacement rules as parameter:",
                "It works well:Read more here: https://developer.mozilla.org/pt-BR/docs/Web/API/Console/table",
                "Here is a simple JSON format/color component written in React:See it working in this CodePen:\nhttps://codepen.io/benshope/pen/BxVpjoHope that helps!",
                "Couldn't find any solution that had good syntax highlighting for the console, so here's my 2p",
                "I'd like to show my jsonAnalyze method here, it does a pretty print of the JSON structure only, but in some cases can be more usefull that printing the whole JSON.Say you have a complex JSON like this:Then the method will return the structure like this:So this is the jsonAnalyze() code:",
                "Douglas Crockford's JSON in JavaScript library will pretty print JSON via the stringify method.You may also find the answers to this older question useful: How can I pretty-print JSON in (unix) shell script?",
                "I ran into an issue today with @Pumbaa80's code. I'm trying to apply JSON syntax highlighting to data that I'm rendering in a Mithril view, so I need to create DOM nodes for everything in the JSON.stringify output.I split the really long regex into its component parts as well.Code in context on Github here",
                "If you're looking for a nice library to prettify json on a web page...Prism.js is pretty good.http://prismjs.com/I found using JSON.stringify(obj, undefined, 2) to get the indentation, and then using prism to add a theme was a good approach.If you're loading in JSON via an ajax call, then you can run one of Prism's utility methods to prettifyFor example:",
                "If you need this to work in a textarea the accepted solution will not work.<textarea id='textarea'></textarea>$(\"#textarea\").append(formatJSON(JSON.stringify(jsonobject),true));",
                "Quick pretty human-readable JSON output in 1 line code (without colors):",
                "This is nice:https://github.com/mafintosh/json-markup from mafintoshHTMLExample stylesheet can be found here",
                "To highlight and beautify it in HTML using Bootstrap:",
                "based on @user123444555621, just slightly more modern.you can also specify the colors inside js (no CSS needed)and a version with less regex",
                "it's for Laravel, Codeigniter\nHtml:\n<pre class=\"jsonPre\"> </pre>Controller: Return the JSON value from the controller as like asreturn json_encode($data, JSON_PRETTY_PRINT);In script:\n<script> $('.jsonPre').html(result); </script>result will be",
                "Here is how you can print without using native function.",
                "The simplest way to display an object for debugging purposes:If you want to display the object in the DOM, you should consider that it could contain strings that would be interpreted as HTML.  Therefore, you need to do some escaping..."
            ]
        },
        {
            "tag": "preventDefault",
            "patterns": [
                "event.preventDefault() vs. return false",
                "What is event.preventDefault()",
                "event.preventDefault()"
            ],
            "responses": [
                "return false from within a jQuery event handler is effectively the same as calling both  e.preventDefault and e.stopPropagation on the passed jQuery.Event object.e.preventDefault() will prevent the default event from occuring, e.stopPropagation() will prevent the event from bubbling up and return false will do both. Note that this behaviour differs from normal (non-jQuery) event handlers, in which, notably, return false does not stop the event from bubbling up.Source: John ResigAny benefit to using event.preventDefault() over \"return false\" to cancel out an href click?",
                "From my experience, there is at least one clear advantage when using event.preventDefault() over using return false. Suppose you are capturing the click event on an anchor tag, otherwise which it would be a big problem if the user were to be navigated away from the current page. If your click handler uses return false to prevent browser navigation, it opens the possibility that the interpreter will not reach the return statement and the browser will proceed to execute the anchor tag's default behavior.The benefit to using event.preventDefault() is that you can add this as the first line in the handler, thereby guaranteeing that the anchor's default behavior will not fire, regardless if the last line of the function is not reached (eg. runtime error).",
                "This is not, as you've titled it, a \"JavaScript\" question; it is a question regarding the design of jQuery.jQuery and the previously linked citation from John Resig (in karim79's message) seem to be the source misunderstanding of how event handlers in general work.Fact: An event handler that returns false prevents the default action for that event. It does not stop the event propagation. Event handlers have always worked this way, since the old days of Netscape Navigator.Event handler content attributes and event handler IDL attributes that returns false prevents the default action for that event handler.What happens in jQuery is not the same as what happens with event handlers. DOM event listeners and MSIE \"attached\" events are a different matter altogether.For further reading, see the[ [W3C DOM 2 Events documentation]][1].",
                "Generally, your first option (preventDefault()) is the one to take, but you have to know what context you're in and what your goals are.Fuel Your Coding has a great article on return false; vs event.preventDefault() vs event.stopPropagation() vs event.stopImmediatePropagation().",
                "When using jQuery, return false is doing 3 separate things when you call it:See jQuery Events: Stop (Mis)Using Return False for more information and examples.",
                "You can hang a lot of functions on the onClick event for one element. How can you be sure the false one will be the last one to fire? preventDefault on the other hand will definitely prevent only the default behavior of the element.",
                "I thinkevent.preventDefault()is the w3c specified way of canceling events.You can read this in the W3C spec on Event cancelation.Also you can't use return false in every situation. When giving a javascript function in the href attribute and if you return false then the user will be redirected to a page with false string written.",
                "I think the best way to do this is to use event.preventDefault() because if some exception is raised in the handler, then the return false statement will be skipped and the behavior will be opposite to what you want.But if you are sure that the code won't trigger any exceptions, then you can go with any of the method you wish.If you still want to go with the return false, then you can put your entire handler code in a try catch block like below:",
                "The main difference between return false and event.preventDefault() is that your code below return false will not be executed and in event.preventDefault() case your code will execute after this statement.When you write return false it do the following things for you behind the scenes.",
                "e.preventDefault();It simply stops the default action of an element.Instance Ex.:-prevents the hyperlink from following the URL, prevents the submit button to submit the form. When you have many event handlers and you just want to prevent default event from occuring, & occuring from many times,\nfor that we need to  use  in the top of the function().Reason:-The reason to use e.preventDefault(); is that in our code so something goes wrong in the code, then it will allow to execute the link or form to get submitted or allow to execute or allow whatever action you need to do. & link or submit button will get submitted & still allow further propagation of the event.<!DOCTYPE html>\r\n<html lang=\"en\" dir=\"ltr\">\r\n   <head>\r\n      <meta charset=\"utf-8\">\r\n      <title></title>\r\n   </head>\r\n   <body>\r\n      <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n      <a href=\"https://www.google.com\" onclick=\"doSomethingElse()\">Preventsss page from redirect</a>\r\n      <script type=\"text/javascript\">\r\n         function doSomethingElse(){\r\n           console.log(\"This is Test...\");\r\n         }\r\n         $(\"a\").click(function(e){\r\n          e.preventDefault(); \r\n         });\r\n      </script>\r\n   </body>\r\n</html>return False;It simply stops the execution of the function().\"return false;\" will end the whole execution of process.Reason:-The reason to use return false; is that you don't want to execute the function any more in strictly mode.<!DOCTYPE html>\r\n<html lang=\"en\" dir=\"ltr\">\r\n   <head>\r\n      <meta charset=\"utf-8\">\r\n      <title></title>\r\n   </head>\r\n   <body>\r\n      <a href=\"#\" onclick=\"returnFalse();\">Blah</a>\r\n      <script type=\"text/javascript\">\r\n         function returnFalse(){\r\n         console.log(\"returns false without location redirection....\")\r\n             return false;\r\n             location.href = \"http://www.google.com/\";\r\n         \r\n         }\r\n      </script>\r\n   </body>\r\n</html>",
                "Basically, this way you combine things because jQuery is a framework which mostly focuses on HTML elements, you basically preventing the default, but at the same time, you stop propagation to bubble up.So we can simply say, return false in jQuery is equal to:return false is e.preventDefault AND e.stopPropagationBut also don't forget it's all in jQuery or DOM related functions, when you run it on the element, basically, it prevents everything from firing including the default behaviour and propagation of the event.Basically before starting using return false;, first understand what e.preventDefault(); and e.stopPropagation(); do, then if you think you need both at the same time, then simply use it.So basically this code below:is equal to this code:",
                "From my experience event.stopPropagation() is mostly used in CSS effect or animation works, for instance when you have hover effect for both card and button element, when you hover on the button both card and buttons hover effect will be triggered in this case, you can use event.stopPropagation() stop bubbling actions, and event.preventDefault() is for prevent default behaviour of browser actions. For instance, you have form but you only defined click event for the submit action, if the user submits the form by pressing enter, the browser triggered by keypress event, not your click event here you should use event.preventDefault() to avoid inappropriate behavior. I don't know what the hell is return false; sorry.For more clarification visit this link and play around with line #33 https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv",
                "My opinion from my experience saying, that it is always better to usePractically\n        to stop or prevent submit event, whenever we required rather than return false\nevent.preventDefault() works fine.",
                "preventDefault() and return false are different ways to prevent the default event from happening.For example, when a user clicks on an external link, we should display a confirmation modal that asks the user for redirecting to the external website or not:Or we don't want to submit the form when clicking its submit button. Instead, we want to validate the form first:It's recommended to use the preventDefault method instead of return false inside an event handler. Because the latter only works with using the onclick attribute which will remove other handlers for the same event.If you're using jQuery to manage the events, then you're able to use return false within the event handler:Before returning the value of false, the handler would do something else. The problem is that if there's any runtime error occurring in the handler, we will not reach the return false statement at the end.In that case, the default behavior will be taken:We can avoid this situation by using the preventDefault method before performing any custom handler:If you're using jQuery to manage the event, then return false will behave the same as the preventDefault() and stopPropagation() methods:"
            ]
        },
        {
            "tag": "javascript_closure",
            "patterns": [
                "JavaScript closure inside loops \u2013 simple practical example",
                "JavaScript closures",
                "Closure inside loops",
                "JavaScript closures"
            ],
            "responses": [
                "Well, the problem is that the variable i, within each of your anonymous functions, is bound to the same variable outside of the function.ECMAScript 6 (ES6) introduces new let and const keywords that are scoped differently than var-based variables. For example, in a loop with a let-based index, each iteration through the loop will have a new variable i with loop scope, so your code would work as you expect. There are many resources, but I'd recommend 2ality's block-scoping post as a great source of information.Beware, though, that IE9-IE11 and Edge prior to Edge 14 support let but get the above wrong (they don't create a new i each time, so all the functions above would log 3 like they would if we used var). Edge 14 finally gets it right.With the relatively widespread availability of the Array.prototype.forEach function (in 2015), it's worth noting that in those situations involving iteration primarily over an array of values, .forEach() provides a clean, natural way to get a distinct closure for every iteration. That is, assuming you've got some sort of array containing values (DOM references, objects, whatever), and the problem arises of setting up callbacks specific to each element, you can do this:The idea is that each invocation of the callback function used with the .forEach loop will be its own closure. The parameter passed in to that handler is the array element specific to that particular step of the iteration. If it's used in an asynchronous callback, it won't collide with any of the other callbacks established at other steps of the iteration.If you happen to be working in jQuery, the $.each() function gives you a similar capability.What you want to do is bind the variable within each function to a separate, unchanging value outside of the function:var funcs = [];\n\nfunction createfunc(i) {\n  return function() {\n    console.log(\"My value: \" + i);\n  };\n}\n\nfor (var i = 0; i < 3; i++) {\n  funcs[i] = createfunc(i);\n}\n\nfor (var j = 0; j < 3; j++) {\n  // and now let's run each one to see\n  funcs[j]();\n}Since there is no block scope in JavaScript - only function scope - by wrapping the function creation in a new function, you ensure that the value of \"i\" remains as you intended.",
                "Try:var funcs = [];\r\n    \r\nfor (var i = 0; i < 3; i++) {\r\n    funcs[i] = (function(index) {\r\n        return function() {\r\n            console.log(\"My value: \" + index);\r\n        };\r\n    }(i));\r\n}\r\n\r\nfor (var j = 0; j < 3; j++) {\r\n    funcs[j]();\r\n}Edit (2014):Personally I think @Aust's more recent answer about using .bind is the best way to do this kind of thing now. There's also lo-dash/underscore's _.partial when you don't need or want to mess with bind's thisArg.",
                "Another way that hasn't been mentioned yet is the use of Function.prototype.bindvar funcs = {};\r\nfor (var i = 0; i < 3; i++) {\r\n  funcs[i] = function(x) {\r\n    console.log('My value: ' + x);\r\n  }.bind(this, i);\r\n}\r\nfor (var j = 0; j < 3; j++) {\r\n  funcs[j]();\r\n}UPDATEAs pointed out by @squint and @mekdev, you get better performance by creating the function outside the loop first and then binding the results within the loop.function log(x) {\r\n  console.log('My value: ' + x);\r\n}\r\n\r\nvar funcs = [];\r\n\r\nfor (var i = 0; i < 3; i++) {\r\n  funcs[i] = log.bind(this, i);\r\n}\r\n\r\nfor (var j = 0; j < 3; j++) {\r\n  funcs[j]();\r\n}",
                "Using an Immediately-Invoked Function Expression, the simplest and most readable way to enclose an index variable:for (var i = 0; i < 3; i++) {\r\n\r\n    (function(index) {\r\n\r\n        console.log('iterator: ' + index);\r\n        //now you can also loop an ajax call here \r\n        //without losing track of the iterator value:   $.ajax({});\r\n    \r\n    })(i);\r\n\r\n}This sends the iterator i into the anonymous function of which we define as index.  This creates a closure, where the variable i gets saved for later use in any asynchronous functionality within the IIFE.",
                "Bit late to the party, but I was exploring this issue today and noticed that many of the answers don't completely address how Javascript treats scopes, which is essentially what this boils down to.So as many others mentioned, the problem is that the inner function is referencing the same i variable. So why don't we just create a new local variable each iteration, and have the inner function reference that instead?//overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (var i = 0; i < 3; i++) {\n    var ilocal = i; //create a new local variable\n    funcs[i] = function() {\n        console.log(\"My value: \" + ilocal); //each should reference its own local variable\n    };\n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();\n}Just like before, where each inner function outputted the last value assigned to i, now each inner function just outputs the last value assigned to ilocal. But shouldn't each iteration have it's own ilocal?Turns out, that's the issue. Each iteration is sharing the same scope, so every iteration after the first is just overwriting ilocal. From MDN:Important: JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although \"standalone\" blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java.Reiterated for emphasis:We can see this by checking ilocal before we declare it in each iteration://overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (var i = 0; i < 3; i++) {\n  console.log(ilocal);\n  var ilocal = i;\n}This is exactly why this bug is so tricky. Even though you are redeclaring a variable, Javascript won't throw an error, and JSLint won't even throw a warning. This is also why the best way to solve this is to take advantage of closures, which is essentially the idea that in Javascript, inner functions have access to outer variables because inner scopes \"enclose\" outer scopes.This also means that inner functions \"hold onto\" outer variables and keep them alive, even if the outer function returns. To utilize this, we create and call a wrapper function purely to make a new scope, declare ilocal in the new scope, and return an inner function that uses ilocal (more explanation below)://overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (var i = 0; i < 3; i++) {\n    funcs[i] = (function() { //create a new scope using a wrapper function\n        var ilocal = i; //capture i into a local var\n        return function() { //return the inner function\n            console.log(\"My value: \" + ilocal);\n        };\n    })(); //remember to run the wrapper function\n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();\n}Creating the inner function inside a wrapper function gives the inner function a private environment that only it can access, a \"closure\". Thus, every time we call the wrapper function we create a new inner function with it's own separate environment, ensuring that the ilocal variables don't collide and overwrite each other. A few minor optimizations gives the final answer that many other SO users gave://overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (var i = 0; i < 3; i++) {\n    funcs[i] = wrapper(i);\n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();\n}\n//creates a separate environment for the inner function\nfunction wrapper(ilocal) {\n    return function() { //return the inner function\n        console.log(\"My value: \" + ilocal);\n    };\n}UpdateWith ES6 now mainstream, we can now use the new let keyword to create block-scoped variables://overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (let i = 0; i < 3; i++) { // use \"let\" to declare \"i\"\n    funcs[i] = function() {\n        console.log(\"My value: \" + i); //each should reference its own local variable\n    };\n}\nfor (var j = 0; j < 3; j++) { // we can use \"var\" here without issue\n    funcs[j]();\n}Look how easy it is now! For more information see this answer, which my info is based off of.",
                "With ES6 now widely supported, the best answer to this question has changed.  ES6 provides the let and const keywords for this exact circumstance.  Instead of messing around with closures, we can just use let to set a loop scope variable like this:var funcs = [];\r\n\r\nfor (let i = 0; i < 3; i++) {          \r\n    funcs[i] = function() {            \r\n      console.log(\"My value: \" + i); \r\n    };\r\n}val will then point to an object that is specific to that particular turn of the loop, and will return the correct value without the additional closure notation.  This obviously significantly simplifies this problem.const is similar to let with the additional restriction that the variable name can't be rebound to a new reference after initial assignment.Browser support is now here for those targeting the latest versions of browsers. const/let are currently supported in the latest Firefox, Safari, Edge and Chrome. It also is supported in Node, and you can use it anywhere by taking advantage of build tools like Babel.  You can see a working example here: http://jsfiddle.net/ben336/rbU4t/2/Docs here:Beware, though, that IE9-IE11 and Edge prior to Edge 14 support let but get the above wrong (they don't create a new i each time, so all the functions above would log 3 like they would if we used var). Edge 14 finally gets it right.",
                "Another way of saying it is that the i in your function is bound at the time of executing the function, not the time of creating the function.When you create the closure, i is a reference to the variable defined in the outside scope, not a copy of it as it was when you created the closure. It will be evaluated at the time of execution.Most of the other answers provide ways to work around by creating another variable that won't change the value for you.Just thought I'd add an explanation for clarity. For a solution, personally, I'd go with Harto's since it is the most self-explanatory way of doing it from the answers here. Any of the code posted will work, but I'd opt for a closure factory over having to write a pile of comments to explain why I'm declaring a new variable(Freddy and 1800's) or have weird embedded closure syntax(apphacker).",
                "What you need to understand is the scope of the variables in javascript is based on the function. This is an important difference than say c# where you have block scope, and just copying the variable to one inside the for will work.Wrapping it in a function that evaluates returning the function like apphacker's answer will do the trick, as the variable now has the function scope.There is also a let keyword instead of var, that would allow using the block scope rule. In that case defining a variable inside the for would do the trick. That said, the let keyword isn't a practical solution because of compatibility.var funcs = {};\r\n\r\nfor (var i = 0; i < 3; i++) {\r\n  let index = i; //add this\r\n  funcs[i] = function() {\r\n    console.log(\"My value: \" + index); //change to the copy\r\n  };\r\n}\r\n\r\nfor (var j = 0; j < 3; j++) {\r\n  funcs[j]();\r\n}",
                "Here's another variation on the technique, similar to Bjorn's (apphacker), which lets you assign the variable value inside the function rather than passing it as a parameter, which might be clearer sometimes:var funcs = [];\r\nfor (var i = 0; i < 3; i++) {\r\n    funcs[i] = (function() {\r\n        var index = i;\r\n        return function() {\r\n            console.log(\"My value: \" + index);\r\n        }\r\n    })();\r\n}Note that whatever technique you use, the index variable becomes a sort of static variable, bound to the returned copy of the inner function. I.e., changes to its value are preserved between calls. It can be very handy.",
                "This describes the common mistake with using closures in JavaScript.Consider:For each time makeCounter is invoked, {counter: 0} results in a new object being created. Also, a new copy of obj \nis created as well to reference the new object. Thus, counter1 and counter2 are independent of each other.Using a closure in a loop is tricky.Consider:Notice that counters[0] and counters[1] are not independent. In fact, they operate on the same obj!This is because there is only one copy of obj shared across all iterations of the loop, perhaps for performance reasons.\nEven though {counter: 0} creates a new object in each iteration, the same copy of obj will just get updated with a\nreference to the newest object.Solution is to use another helper function:This works because local variables in the function scope directly, as well as function argument variables, are allocated \nnew copies upon entry.",
                "The most simple solution would be,Instead of using:which alerts \"2\", for 3 times. This is because anonymous functions created in for loop, shares same closure, and in that closure, the value of i is the same. Use this to prevent shared closure:The idea behind this is, encapsulating the entire body of the for loop with an IIFE (Immediately-Invoked Function Expression) and passing new_i as a parameter and capturing it as i. Since the anonymous function is executed immediately, the i value is different for each function defined inside the anonymous function.This solution seems to fit any such problem since it will require minimal changes to the original code suffering from this issue. In fact, this is by design, it should not be an issue at all!",
                "Here's a simple solution that uses forEach (works back to IE9):var funcs = [];\r\n[0,1,2].forEach(function(i) {          // let's create 3 functions\r\n    funcs[i] = function() {            // and store them in funcs\r\n        console.log(\"My value: \" + i); // each should log its value.\r\n    };\r\n})\r\nfor (var j = 0; j < 3; j++) {\r\n    funcs[j]();                        // and now let's run each one to see\r\n}Prints:",
                "no arrayno extra for loophttp://jsfiddle.net/7P6EN/",
                "The main issue with the code shown by the OP is that i is never read until the second loop. To demonstrate, imagine seeing an error inside of the codeThe error actually does not occur until funcs[someIndex] is executed (). Using this same logic, it should be apparent that the value of i is also not collected until this point either. Once the original loop finishes, i++ brings i to the value of 3 which results in the condition i < 3 failing and the loop ending. At this point, i is 3 and so when funcs[someIndex]() is used, and i is evaluated, it is 3 - every time.To get past this, you must evaluate i as it is encountered. Note that this has already happened in the form of funcs[i] (where there are 3 unique indexes). There are several ways to capture this value. One is to pass it in as a parameter to a function which is shown in several ways already here.Another option is to construct a function object which will be able to close over the variable. That can be accomplished thuslyjsFiddle Demo",
                "JavaScript functions \"close over\" the scope they have access to upon declaration, and retain access to that scope even as variables in that scope change.var funcs = []\r\n\r\nfor (var i = 0; i < 3; i += 1) {\r\n  funcs[i] = function () {\r\n    console.log(i)\r\n  }\r\n}\r\n\r\nfor (var k = 0; k < 3; k += 1) {\r\n  funcs[k]()\r\n}Each function in the array above closes over the global scope (global, simply because that happens to be the scope they're declared in).Later those functions are invoked logging the most current value of i in the global scope. That's the magic, and frustration, of closure.\"JavaScript Functions close over the scope they are declared in, and retain access to that scope even as variable values inside of that scope change.\"Using let instead of var solves this by creating a new scope each time the for loop runs, creating a separated scope for each function to close over. Various other techniques do the same thing with extra functions.var funcs = []\r\n\r\nfor (let i = 0; i < 3; i += 1) {\r\n  funcs[i] = function () {\r\n    console.log(i)\r\n  }\r\n}\r\n\r\nfor (var k = 0; k < 3; k += 1) {\r\n  funcs[k]()\r\n}(let makes variables block scoped. Blocks are denoted by curly braces, but in the case of the for loop the initialization variable, i in our case, is considered to be declared in the braces.)",
                "After reading through various solutions, I'd like to add that the reason those solutions work is to rely on the concept of scope chain. It's the way JavaScript resolve a variable during execution.In the initial code:When funcs gets executed, the scope chain will be function inner -> global. Since the variable i cannot be found in function inner (neither declared using var nor passed as arguments), it continues to search, until the value of i is eventually found in the global scope which is window.i.By wrapping it in an outer function either explicitly define a helper function like harto did or use an anonymous function like Bjorn did:When funcs gets executed, now the scope chain will be function inner -> function outer. This time i can be found in the outer function's scope which is executed 3 times in the for loop, each time has value i bound correctly. It won't use the value of window.i when inner executed.More detail can be found here\nIt includes the common mistake in creating closure in the loop as what we have here, as well as why we need closure and the performance consideration.",
                "With new features of ES6 block level scoping is managed:The code in OP's question is replaced with let instead of var.",
                "I'm surprised no one yet has suggested using the forEach function to better avoid (re)using local variables. In fact, I'm not using for(var i ...) at all anymore for this reason.// edited to use forEach instead of map.",
                "We will check , what actually happens when you declare var and let\none by one.Now open your chrome console window by pressing F12 and refresh the page.\nExpend every 3 functions inside the array.You will see an property called [[Scopes]].Expand that one. You will see one\narray object called \"Global\",expand that one. You will find a property 'i' declared into the object which having value 3.Conclusion:Now replace the 'var' with 'let'Do the same thing, Go to the scopes . Now you will see two objects \"Block\" and \"Global\". Now expand Block object , you\nwill see 'i' is defined there , and the strange thing is that , for every functions , the value if i is different (0 , 1, 2).Conclusion:When you declare variable using 'let' even outside the function but inside the loop , this variable will not be a Global\nvariable , it will become a Block level variable which is only available for the same function only.That is the reason , we\nare getting value of i different for each function when we invoke the functions.For more detail about how closer works , please go through the awesome video tutorial https://youtu.be/71AtaJpJHw0",
                "The reason your original example did not work is that all the closures you created in the loop referenced the same frame. In effect, having 3 methods on one object with only a single i variable. They all printed out the same value.",
                "This question really shows the history of JavaScript! Now we can avoid block scoping with arrow functions and handle loops directly from DOM nodes using Object methods.const funcs = [1, 2, 3].map(i => () => console.log(i));\r\nfuncs.map(fn => fn())const buttons = document.getElementsByTagName(\"button\");\r\nObject\r\n  .keys(buttons)\r\n  .map(i => buttons[i].addEventListener('click', () => console.log(i)));\n<button>0</button><br>\r\n<button>1</button><br>\r\n<button>2</button>",
                "First of all, understand what's wrong with this code:Here when the funcs[] array is being initialized, i is being incremented, the funcs array is initialized and the size of func array becomes 3,  so i = 3,. \nNow when the funcs[j]() is called, it is again using the variable i, which has already been incremented to 3.Now to solve this, we have many options. Below are two of them:We can initialize i with let or initialize a new variable index with let and make it equal to i. So when the call is being made, index will be used and its scope will end after initialization. And for calling, index will be initialized again:Other Option can be to introduce a tempFunc which returns the actual function:",
                "Use closure structure, this would reduce your extra for loop. You can do it in a single for loop:",
                "Till ES5, This problem can only be solved using closure.But now in ES6, we have block level scope variables. Changing var to let in first for loop will solve the problem.var funcs = [];\r\nfor (let i = 0; i < 3; i++) {      // let's create 3 functions\r\n  funcs[i] = function() {          // and store them in funcs\r\n    console.log(\"My value: \" + i); // each should log its value.\r\n  };\r\n}\r\nfor (var j = 0; j < 3; j++) {\r\n  funcs[j]();                      // and now let's run each one to see\r\n}",
                "If you're having this sort of problem with a while loop, rather than a for loop, for example:var i = 0;\nwhile (i < 5) {\n  setTimeout(function() {\n    console.log(i);\n  }, i * 1000);\n  i++;\n}The technique to close over the current value is a bit different. Declare a block-scoped variable with const inside the while block, and assign the current i to it. Then, wherever the variable is being used asynchronously, replace i with the new block-scoped variable:var i = 0;\nwhile (i < 5) {\n  const thisIterationI = i;\n  setTimeout(function() {\n    console.log(thisIterationI);\n  }, i * 1000);\n  i++;\n}For older browsers that don't support block-scoped variables, you can use an IIFE called with i:var i = 0;\nwhile (i < 5) {\n  (function(innerI) {\n    setTimeout(function() {\n      console.log(innerI);\n    }, innerI * 1000);\n  })(i);\n  i++;\n}If the asynchronous action to be invoked happens to be setTimeout like the above, you can also call setTimeout with a third parameter to indicate the argument to call the passed function with:var i = 0;\nwhile (i < 5) {\n  setTimeout(\n    (thisIterationI) => { // Callback\n      console.log(thisIterationI);\n    },\n    i * 1000, // Delay\n    i // Gets passed to the callback; becomes thisIterationI\n  );\n  i++;\n}",
                "You could use a declarative module for lists of data such as query-js(*). In these situations I personally find a declarative approach less surprisingYou could then use your second loop and get the expected result or you could do(*) I'm the author of query-js and therefor biased towards using it, so don't take my words as a recommendation for said library only for the declarative approach :)",
                "I prefer to use forEach function, which has its own closure with creating a pseudo range:That looks uglier than ranges in other languages, but IMHO less monstrous than other solutions.",
                "And yet another solution: instead of creating another loop, just bind the this to the return function.var funcs = [];\r\n\r\nfunction createFunc(i) {\r\n  return function() {\r\n    console.log('My value: ' + i); //log value of i.\r\n  }.call(this);\r\n}\r\n\r\nfor (var i = 1; i <= 5; i++) {  //5 functions\r\n  funcs[i] = createFunc(i);     // call createFunc() i=5 times\r\n}By binding this, solves the problem as well.",
                "Your code doesn't work, because what it does is:Now the question is, what is the value of variable i when the function is called? Because the first loop is created with the condition of i < 3, it stops immediately when the condition is false, so it is i = 3.You need to understand that, in time when your functions are created, none of their code is executed, it is only saved for later. And so when they are called later, the interpreter executes them and asks: \"What is the current value of i?\"So, your goal is to first save the value of i to function and only after that save the function to funcs. This could be done for example this way:This way, each function will have it's own variable x and we set this x to the value of i in each iteration.This is only one of the multiple ways to solve this problem."
            ]
        },
        {
            "tag": "undefined_property",
            "patterns": [
                "Detecting an undefined object property",
                "Find an undefined object property",
                "Undefined object property",
                "Detect undefined object"
            ],
            "responses": [
                "The usual way to check if the value of a property is the special value undefined, is:To check if an object does not actually have such a property, and will therefore return undefined by default when you try to access it:To check if the value associated with an identifier is the special value undefined, or if that identifier has not been declared:Note: this last method is the only way to refer to an undeclared identifier without an early error, which is different from having a value of undefined.In versions of JavaScript prior to ECMAScript 5, the property named \"undefined\" on the global object was writeable, and therefore a simple check foo === undefined might behave unexpectedly if it had accidentally been redefined. In modern JavaScript, the property is read-only.However, in modern JavaScript, \"undefined\" is not a keyword, and so variables inside functions can be named \"undefined\" and shadow the global property.If you are worried about this (unlikely) edge case, you can use the void operator to get at the special undefined value itself:",
                "I believe there are a number of incorrect answers to this topic. Contrary to common belief, \"undefined\" is not a keyword in JavaScript and can in fact have a value assigned to it.The most robust way to perform this test is:This will always return the correct result, and even handles the situation where myVar is not declared.Additionally, myVar === undefined will raise an error in the situation where myVar is undeclared.",
                "Despite being vehemently recommended by many other answers here, typeof is a bad choice. It should never be used for checking whether variables have the value undefined, because it acts as a combined check for the value undefined and for whether a variable exists. In the vast majority of cases, you know when a variable exists, and typeof will just introduce the potential for a silent failure if you make a typo in the variable name or in the string literal 'undefined'.So unless you\u2019re doing feature detection\u00b2, where there\u2019s uncertainty whether a given name will be in scope (like checking typeof module !== 'undefined' as a step in code specific to a CommonJS environment), typeof is a harmful choice when used on a variable, and the correct option is to compare the value directly:Some common misconceptions about this include:that reading an \u201cuninitialized\u201d variable (var foo) or parameter (function bar(foo) { \u2026 }, called as bar()) will fail. This is simply not true \u2013 variables without explicit initialization and parameters that weren\u2019t given values always become undefined, and are always in scope.that undefined can be overwritten. It\u2019s true that undefined isn\u2019t a keyword, but it is read-only and non-configurable. There are other built-ins you probably don\u2019t avoid despite their non-keyword status (Object, Math, NaN\u2026) and practical code usually isn\u2019t written in an actively malicious environment, so this isn\u2019t a good reason to be worried about undefined. (But if you are writing a code generator, feel free to use void 0.)With how variables work out of the way, it\u2019s time to address the actual question: object properties. There is no reason to ever use typeof for object properties. The earlier exception regarding feature detection doesn\u2019t apply here \u2013 typeof only has special behaviour on variables, and expressions that reference object properties are not variables.This:is always exactly equivalent to this\u00b3:and taking into account the advice above, to avoid confusing readers as to why you\u2019re using typeof, because it makes the most sense to use === to check for equality, because it could be refactored to checking a variable\u2019s value later, and because it just plain looks better, you should always use === undefined\u00b3 here as well.Something else to consider when it comes to object properties is whether you really want to check for undefined at all. A given property name can be absent on an object (producing the value undefined when read), present on the object itself with the value undefined, present on the object\u2019s prototype with the value undefined, or present on either of those with a non-undefined value. 'key' in obj will tell you whether a key is anywhere on an object\u2019s prototype chain, and Object.prototype.hasOwnProperty.call(obj, 'key') will tell you whether it\u2019s directly on the object. I won\u2019t go into detail in this answer about prototypes and using objects as string-keyed maps, though, because it\u2019s mostly intended to counter all the bad advice in other answers irrespective of the possible interpretations of the original question. Read up on object prototypes on MDN for more!\u00b9 unusual choice of example variable name? this is real dead code from the NoScript extension for Firefox.\n\u00b2 don\u2019t assume that not knowing what\u2019s in scope is okay in general, though. bonus vulnerability caused by abuse of dynamic scope: Project Zero 1225\n\u00b3 once again assuming an ES5+ environment and that undefined refers to the undefined property of the global object.",
                "In JavaScript there is null and there is undefined.  They have different meanings.Marijn Haverbeke states, in his free, online book \"Eloquent JavaScript\" (emphasis mine):There is also a similar value, null, whose meaning is 'this value is defined, but it does not have a value'. The difference in meaning between undefined and null is mostly academic, and usually not very interesting. In practical programs, it is often necessary to check whether something 'has a value'. In these cases, the expression something == undefined may be used, because, even though they are not exactly the same value, null == undefined will produce true.So, I guess the best way to check if something was undefined would be:Object properties should work the same way.",
                "What does this mean: \"undefined object property\"?Actually it can mean two quite different things! First, it can mean the property that has never been defined in the object and, second, it can mean the property that has an undefined value. Let's look at this code:Is o.a undefined? Yes! Its value is undefined. Is o.b undefined? Sure! There is no property 'b' at all! OK, see now how different approaches behave in both situations:We can clearly see that typeof obj.prop == 'undefined' and obj.prop === undefined are equivalent, and they do not distinguish those different situations. And 'prop' in obj can detect the situation when a property hasn't been defined at all and doesn't pay attention to the property value which may be undefined.1) You want to know if a property is undefined by either the first or second meaning (the most typical situation).2) You want to just know if object has some property and don't care about its value.Pluses of obj.prop === undefined:Minuses of obj.prop === undefined:Pluses of typeof obj.prop == 'undefined':Minuses of typeof obj.prop == 'undefined':Node.js supports the global variable undefined as global.undefined (it can also be used without the 'global' prefix). I don't know about other implementations of server-side JavaScript.",
                "The issue boils down to three cases:This tells us something I consider important:There is a difference between an undefined member and a defined member with an undefined value.But unhappily typeof obj.foo does not tell us which of the three cases we have. However we can combine this with \"foo\" in obj to distinguish the cases.Its worth noting that these tests are the same for null entries tooI'd argue that in some cases it makes more sense (and is clearer) to check whether the property is there, than checking whether it is undefined, and the only case where this check will be different is case 2, the rare case of an actual entry in the object with an undefined value.For example: I've just been refactoring a bunch of code that had a bunch of checks whether an object had a given property.Which was clearer when written without a check for undefined.But as has been mentioned these are not exactly the same (but are more than good enough for my needs).",
                "This worked for me while the others didn't.",
                "I'm not sure where the origin of using === with typeof came from, and as a convention I see it used in many libraries, but the typeof operator returns a string literal, and we know that up front, so why would you also want to type check it too?",
                "I didn't see (hope I didn't miss it) anyone checking the object before the property. So, this is the shortest and most effective (though not necessarily the most clear):If the obj or obj.prop is undefined, null, or \"falsy\", the if statement will not execute the code block. This is usually the desired behavior in most code block statements (in JavaScript).The latest version of JavaScript introduces a new operator for\noptional chaining: ?.This is probably going to be the most explicit and efficient method of checking for the existence of object properties, moving forward.Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",
                "Crossposting my answer from related question How can I check for \"undefined\" in JavaScript?.Specific to this question, see test cases with someObject.<whatever>.Some scenarios illustrating the results of the various answers:\nhttp://jsfiddle.net/drzaus/UVjM4/(Note that the use of var for in tests make a difference when in a scoped wrapper)Code for reference:And results:",
                "If you doit will fail when the variable myvar does not exists, because myvar is not defined, so the script is broken and the test has no effect.Because the window object has a global scope (default object) outside a function, a declaration will be 'attached' to the window object.For example:The global variable myvar is the same as window.myvar or window['myvar']To avoid errors to test when a global variable exists, you better use:The question if a variable really exists doesn't matter, its value is incorrect. Otherwise, it is silly to initialize variables with undefined, and it is better use the value false to initialize. When you know that all variables that you declare are initialized with false, you can simply check its type or rely on !window.myvar to check if it has a proper/valid value. So even when the variable is not defined then !window.myvar is the same for myvar = undefined or myvar = false or myvar = 0.When you expect a specific type, test the type of the variable. To speed up testing a condition you better do:When the first and simple condition is true, the interpreter skips the next tests.It is always better to use the instance/object of the variable to check if it got a valid value. It is more stable and is a better way of programming.(y)",
                "In the article Exploring the Abyss of Null and Undefined in JavaScript  I read that frameworks like Underscore.js use this function:",
                "Simply anything is not defined in JavaScript, is undefined, doesn't matter if it's a property inside an Object/Array or as just a simple variable...JavaScript has typeof which make it very easy to detect an undefined variable.Simply check if typeof whatever === 'undefined' and it will return a boolean.That's how the famous function isUndefined() in AngularJs v.1x is written:So as you see the function receive a value, if that value is defined, it will return false, otherwise for undefined values, return true.So let's have a look what gonna be the results when we passing values, including object properties like below, this is the list of variables we have:and we check them as below, you can see the results in front of them as a comment:As you see we can check anything with using something like this in our code, as mentioned you can simply use typeof in your code, but if you are using it over and over, create a function like the angular sample which I share and keep reusing as following DRY code pattern.Also one more thing, for checking property on an object in a real application which you not sure even the object exists or not, check if the object exists first.If you check a property on an object and the object doesn't exist, will throw an error and stop the whole application running.So simple you can wrap inside an if statement like below:Which also equal to isDefined in Angular 1.x...Also other javascript frameworks like underscore has similar defining check, but I recommend you use typeof if you already not using any frameworks.I also add this section from MDN which has got useful information about typeof, undefined and void(0).Strict equality and undefined  You can use undefined and the strict equality and inequality operators to determine whether a variable has\n  a value. In the following code, the variable x is not defined, and the\n  if statement evaluates to true.Note: The strict equality operator rather than the standard equality\n  operator must be used here, because x == undefined also checks whether\n  x is null, while strict equality doesn't. null is not equivalent to\n  undefined. See comparison operators for details.Typeof operator and undefined \n  Alternatively, typeof can be used:One reason to use typeof is that it does not throw an error if the\n  variable has not been declared.However, this kind of technique should be avoided. JavaScript is a\n  statically scoped language, so knowing if a variable is declared can\n  be read by seeing whether it is declared in an enclosing context. The\n  only exception is the global scope, but the global scope is bound to\n  the global object, so checking the existence of a variable in the\n  global context can be done by checking the existence of a property on\n  the global object (using the in operator, for instance).Void operator and undefinedThe void operator is a third alternative.more > here",
                "ECMAScript\u00a010 introduced a new feature - optional chaining which you can use to use a property of an object only when an object is defined like this:It will reference to the phone property only when user and contactDetails are defined.Ref. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",
                "Most likely you want if (window.x). This check is safe even if x hasn't been declared (var x;) - browser doesn't throw an error.window is an object which holds all global variables as its members, and it is legal to try to access a non-existing member. If x hasn't been declared or hasn't been set then window.x returns undefined. undefined leads to false when if() evaluates it.",
                "Reading through this, I'm amazed I didn't see this. I have found multiple algorithms that would work for this.If the value of an object was never defined, this will prevent from returning true if it is defined as null or undefined. This is helpful if you want true to be returned for values set as undefinedIf you want it to result as true for values defined with the value of undefined, or never defined, you can simply use === undefinedCommonly, people have asked me for an algorithm to figure out if a value is either falsy, undefined, or null. The following works.",
                "The solution is incorrect. In JavaScript,will return true, because they both are \"casted\" to a boolean and are false. The correct way would be to checkwhich is the identity operator...",
                "Compare with void 0, for terseness.It's not as verbose as if (typeof foo !== 'undefined')",
                "You can get an array all undefined with path using the following code.jsFiddle link",
                "There is a nice and elegant way to assign a defined property to a new variable if it is defined or assign a default value to it as a fallback if it\u2019s undefined.It\u2019s suitable if you have a function, which receives an additional configuration property:Now executing",
                "Here is my situation:I am using the result of a REST call. The result should be parsed from JSON to a JavaScript object.There is one error I need to defend. If the arguments to the REST call were incorrect as far as the user specifying the arguments wrong, the REST call comes back basically empty.While using this post to help me defend against this, I tried this:For my situation, if restResult.data[0] === \"object\", then I can safely start inspecting the rest of the members. If undefined then throw the error as above.What I am saying is that for my situation, all the previous suggestions in this post did not work. I'm not saying I'm right and everyone is wrong. I am not a JavaScript master at all, but hopefully this will help someone.",
                "All the answers are incomplete. This is the right way of knowing that there is a property 'defined as undefined':Example:Too bad that this been the right answer and is buried in wrong answers >_<So, for anyone who pass by, I will give you undefined's for free!!",
                "Going through the comments, for those who want to check both is it undefined or its value is null:If you are using jQuery Library then jQuery.isEmptyObject() will suffice for both cases,",
                "If you are using Angular:Underscore.js:",
                "I provide three ways here for those who expect weird answers:function isUndefined1(val) {\n    try {\n        val.a;\n    } catch (e) {\n        return /undefined/.test(e.message);\n    }\n    return false;\n}\n\nfunction isUndefined2(val) {\n    return !val && val+'' === 'undefined';\n}\n\nfunction isUndefined3(val) {\n    const defaultVal = {};\n    return ((input = defaultVal) => input === defaultVal)(val);\n}\n\nfunction test(func){\n    console.group(`test start :`+func.name);\n    console.log(func(undefined));\n    console.log(func(null));\n    console.log(func(1));\n    console.log(func(\"1\"));\n    console.log(func(0));\n    console.log(func({}));\n    console.log(func(function () { }));\n    console.groupEnd();\n}\ntest(isUndefined1);\ntest(isUndefined2);\ntest(isUndefined3);Try to get a property of the input value, and check the error message if it exists. If the input value is undefined, the error message would be Uncaught TypeError: Cannot read property 'b' of undefined.Convert the input value to a string to compare with \"undefined\" and ensure it's a negative value.In JavaScript, an optional parameter works when the input value is exactly undefined.",
                "There is a very easy and simple way.You can use optional chaining:orYou can use optional chaining even for functions or arrays.As of mid-2020 this is not universally implemented. Check the documentation at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",
                "I use if (this.variable) to test if it is defined. A simple if (variable), recommended in a previous answer, fails for me.It turns out that it works only when a variable is a field of some object, obj.someField to check if it is defined in the dictionary. But we can use this or window as the dictionary object since any variable is a field in the current window, as I understand it. Therefore here is a test:if (this.abc) \n    alert(\"defined\"); \nelse \n    alert(\"undefined\");\n\nabc = \"abc\";\nif (this.abc) \n    alert(\"defined\"); \nelse \n    alert(\"undefined\");It first detects that variable abc is undefined and it is defined after initialization.",
                "Returns false if variable is set, and true if is undefined.Then use:",
                "I would like to show you something I'm using in order to protect the undefined variable:This forbids anyone to change the window.undefined value therefore destroying the code based on that variable. If using \"use strict\", anything trying to change its value will end in error, otherwise it would be silently ignored."
            ]
        },
        {
            "tag": "Access_Control",
            "patterns": [
                "Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?",
                "What is the No 'Access-Control-Allow-Origin' header",
                "Access-Control-Allow-Origin"
            ],
            "responses": [
                "If I understood it right you are doing an XMLHttpRequest to a different domain than your page is on. So the browser is blocking it as it usually allows a request in the same origin for security reasons. You need to do something different when you want to do a cross-domain request.When you are using Postman they are not restricted by this policy. Quoted from Cross-Origin XMLHttpRequest:Regular web pages can use the XMLHttpRequest object to send and receive data from remote servers, but they're limited by the same origin policy. Extensions aren't so limited. An extension can talk to remote servers outside of its origin, as long as it first requests cross-origin permissions.",
                "WARNING: Using Access-Control-Allow-Origin: * can make your API/website vulnerable to cross-site request forgery (CSRF) attacks. Make certain you understand the risks before using this code.It's very simple to solve if you are using PHP. Just add the following script in the beginning of your PHP page which handles the request:If you are using Node-red you have to allow CORS in the node-red/settings.js file by un-commenting the following lines:If you are using Flask same as the question; you have first to install flask-corsThen include the Flask cors package in your application.A simple application will look like:For more details, you can check the Flask documentation.",
                "Because \n$.ajax({type: \"POST\" - calls OPTIONS \n$.post( - calls POSTBoth are different. Postman calls \"POST\" properly, but when we call it, it will be \"OPTIONS\".For C# web services - Web APIPlease add the following code in your web.config file under the <system.webServer> tag. This will work:Please make sure you are not doing any mistake in the Ajax call.Note: If you are looking for downloading content from a third-party website then this will not help you.  You can try the following code, but not JavaScript.",
                "In the below investigation as API, I use http://example.com instead of http://myApiUrl/login from your question, because this first one working. I assume that your page is on http://my-site.local:8088.NOTE: The API and your page have different domains!The reason why you see different results is that Postman:This is similar to browsers' way of sending requests when the site and API has the same domain (browsers also set the header item Referer=http://my-site.local:8088, however I don't see it in Postman). When Origin header is not set, usually servers allow such requests by default.This is the standard way how Postman sends requests. But a browser sends requests differently when your site and API have different domains, and then CORS occurs and the browser automatically:(The header Referer has the same value as Origin). And now in Chrome's Console & Networks tab you will see:When you have Host != Origin this is CORS, and when the server detects such a request, it usually blocks it by default.Origin=null is set when you open HTML content from a local directory, and it sends a request. The same situation is when you send a request inside an <iframe>, like in the below snippet (but here the Host header is not set at all) - in general, everywhere the HTML specification says opaque origin, you can translate that to Origin=null. More information about this you can find here.fetch('http://example.com/api', {method: 'POST'});\nLook on chrome-console > network tabIf you do not use a simple CORS request, usually the browser automatically also sends an OPTIONS request before sending the main request - more information is here. The snippet below shows it:fetch('http://example.com/api', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json'}\n});\nLook in chrome-console -> network tab to 'api' request.\nThis is the OPTIONS request (the server does not allow sending a POST request)You can change the configuration of your server to allow CORS requests.Here is an example configuration which turns on CORS on nginx (nginx.conf file) - be very careful with setting always/\"$http_origin\" for nginx and \"*\" for Apache - this will unblock CORS from any domain (in production instead of stars use your concrete page adres which consume your api)location ~ ^/index\\.php(/|$) {\n   ...\n    add_header 'Access-Control-Allow-Origin' \"$http_origin\" always;\n    add_header 'Access-Control-Allow-Credentials' 'true' always;\n    if ($request_method = OPTIONS) {\n        add_header 'Access-Control-Allow-Origin' \"$http_origin\"; # DO NOT remove THIS LINES (doubled with outside 'if' above)\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        add_header 'Access-Control-Max-Age' 1728000; # cache preflight value for 20 days\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'My-First-Header,My-Second-Header,Authorization,Content-Type,Accept,Origin';\n        add_header 'Content-Length' 0;\n        add_header 'Content-Type' 'text/plain charset=UTF-8';\n        return 204;\n    }\n}Here is an example configuration which turns on CORS on Apache (.htaccess file)# ------------------------------------------------------------------------------\n# | Cross-domain Ajax requests                                                 |\n# ------------------------------------------------------------------------------\n\n# Enable cross-origin Ajax requests.\n# http://code.google.com/p/html5security/wiki/CrossOriginRequestSecurity\n# http://enable-cors.org/\n\n# <IfModule mod_headers.c>\n#    Header set Access-Control-Allow-Origin \"*\"\n# </IfModule>\n\n# Header set Header set Access-Control-Allow-Origin \"*\"\n# Header always set Access-Control-Allow-Credentials \"true\"\n\nAccess-Control-Allow-Origin \"http://your-page.com:80\"\nHeader always set Access-Control-Allow-Methods \"POST, GET, OPTIONS, DELETE, PUT\"\nHeader always set Access-Control-Allow-Headers \"My-First-Header,My-Second-Header,Authorization, content-type, csrf-token\"",
                "Applying a CORS restriction is a security feature defined by a server and implemented by a browser.The browser looks at the CORS policy of the server and respects it.However, the Postman tool does not bother about the CORS policy of the server.That is why the CORS error appears in the browser, but not in Postman.",
                "The error you get is due to the CORS standard, which sets some restrictions on how JavaScript can perform ajax requests.The CORS standard is a client-side standard, implemented in the browser. So it is the browser which prevent the call from completing and generates the error message - not the server.Postman does not implement the CORS restrictions, which is why you don't see the same error when making the same call from Postman.Why doesn't Postman implement CORS? CORS defines the restrictions relative to the origin (URL domain) of the page which initiates the request. But in Postman the requests doesn't originate from a page with an URL so CORS does not apply.",
                "You are making a XMLHttpRequest to different domains, example:This difference in domain names triggers CORS (Cross-Origin Resource Sharing) policy called SOP (Same-Origin Policy) that enforces the use of same domains (hence Origin) in Ajax, XMLHttpRequest and other HTTP requests.Why did it work when I made the request via the Chrome extension\nPostman?A client (most Browsers and Development Tools) has a choice to enforce the Same-Origin Policy.Most browsers enforce the policy of Same-Origin Policy to prevent issues related to CSRF (Cross-Site Request Forgery) attack.Postman as a development tool chooses not to enforce SOP while some browsers enforce, this is why you can send requests via Postman that you cannot send with XMLHttpRequest via JS using the browser.",
                "For browser testing purposes:Windows - Run:The command above will disable chrome web security. So for example if you work on a local project and encounter CORS policy issue when trying to make a request, you can skip this type of error with the above command. Basically it will open a new chrome session.",
                "You might also get this error if your gateway timeout is too short and the resource you are accessing takes longer to process than the timeout. This may be the case for complex database queries etc. Thus, the above error code can be disguishing this problem. Just check if the error code is 504 instead of 404 as in Kamil's answer or something else. If it is 504, then increasing the gateway timeout might fix the problem.In my case the CORS error could be removed by disabling the same origin policy (CORS) in the Internet\u00a0Explorer browser, see How to disable same origin policy Internet Explorer. After doing this, it was a pure 504 error in the log.",
                "To resolve this issue, write this line of code in your doGet() or doPost() function whichever you are using in backendresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");Instead of \"*\" you can type in the website or API URL endpoint which is accessing the website else it will be public.",
                "Your IP address is not whitelisted, so you are getting this error.\nAsk the backend staff to whitelist your IP address for the service you are accessing.Access-Control-Allow-Headers",
                "For me I got this issue for different reason, the remote domain was added to origins the deployed app works perfectly except one end point I got this issue:andI discovered that my Heroku database table does not contains all the columns of my local table after updating Heroku database table everything worked well.",
                "It works for me by applying this middleware in globally:"
            ]
        },
        {
            "tag": "merge_dynamically",
            "patterns": [
                "How can I merge properties of two JavaScript objects dynamically?",
                "How to merge two objects dynamically",
                "How to merge objects"
            ],
            "responses": [
                "ECMAScript 2018 Standard MethodYou would use object spread:merged is now the union of obj1 and obj2. Properties in obj2 will overwrite those in obj1.Here is also the MDN documentation for this syntax. If you're using babel you'll need the @babel/plugin-proposal-object-rest-spread plugin for it to work (This plugin is included in @babel/preset-env, in ES2018).ECMAScript 2015 (ES6) Standard Method(see MDN JavaScript Reference)Method for ES5 and EarlierNote that this will simply add all attributes of obj2 to obj1 which might not be what you want if you still want to use the unmodified obj1.If you're using a framework that craps all over your prototypes then you have to get fancier with checks like hasOwnProperty, but that code will work for 99% of cases.Example function:",
                "jQuery also has a utility for this: http://api.jquery.com/jQuery.extend/.Taken from the jQuery documentation:The above code will mutate the existing object named settings.If you want to create a new object without modifying either argument, use this:",
                "The Harmony ECMAScript 2015 (ES6) specifies Object.assign which will do this.Current browser support is getting better, but if you're developing for browsers that don't have support, you can use a polyfill.",
                "I googled for code to merge object properties and ended up here. However since there wasn't any code for recursive merge I wrote it myself. (Maybe jQuery extend is recursive BTW?) Anyhow, hopefully someone else will find it useful as well.(Now the code does not use Object.prototype :)Produces object o3 like",
                "Note that underscore.js's extend-method does this in a one-liner:",
                "Similar to jQuery extend(), you have the same function in AngularJS:",
                "I need to merge objects today, and this question (and answers) helped me a lot. I tried some of the answers, but none of them fit my needs, so I combined some of the answers, added something myself and came up with a new merge function. Here it is:Some example usages:",
                "You can use the object spread syntax to achieve this. It's a part of ES2018 and beyond.const obj1 = { food: 'pizza', car: 'ford' };\nconst obj2 = { animal: 'dog' };\n\nconst obj3 = { ...obj1, ...obj2 };\nconsole.log(obj3);",
                "The given solutions should be modified to check source.hasOwnProperty(property) in the for..in loops before assigning - otherwise, you end up copying the properties of the whole prototype chain, which is rarely desired...",
                "An Object.assign method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need. (IE not supported)The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.Read more...The polyfill to support older browsers:",
                "The following two are probably a good starting point. lodash also has a customizer function for those special needs!_.extend (http://underscorejs.org/#extend) \n_.merge (https://lodash.com/docs#merge)",
                "Here's my stab whichIs short :)Example:",
                "Just by the way, what you're all doing is overwriting properties, not merging...This is how JavaScript objects area really merged: Only keys in the to object which are not objects themselves will be overwritten by from. Everything else will be really merged. Of course you can change this behaviour to not overwrite anything which exists like only if to[n] is undefined, etc...:Usage:",
                "Object.assign()ECMAScript 2015 (ES6)This is a new technology, part of the ECMAScript 2015 (ES6) standard.\nThis technology's specification has been finalized, but check the compatibility table for usage and implementation status in various browsers.The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.",
                "For not-too-complicated objects you could use JSON:Mind you that in this example \"}{\" must not occur within a string!",
                "There's a library called deepmerge on GitHub: That seems to be getting some traction. It's a standalone, available through both the npm and bower package managers.I would be inclined to use or improve on this instead of copy-pasting code from answers.",
                "The best way for you to do this is to add a proper property that is non-enumerable using Object.defineProperty.This way you will still be able to iterate over your objects properties without having the newly created \"extend\" that you would get if you were to create the property with Object.prototype.extend.Hopefully this helps:Once you have that working, you can do:I just wrote a blog post about it here: http://onemoredigit.com/post/1527191998/extending-objects-in-node-js",
                "You can simply use jQuery extendNow obj1 contains all the values of obj1 and obj2",
                "Prototype has this:obj1.extend(obj2) will do what you want.",
                "Wow.. this is the first StackOverflow post I've seen with multiple pages. Apologies for adding another \"answer\"This method is for ES5 & Earlier - there are plenty of other answers addressing ES6.I did not see any \"deep\" object merging utilizing the arguments property. Here is my answer - compact & recursive, allowing unlimited object arguments to be passed:/**\n * Extend objects\n */\nfunction extend() {\n    for (var o = {}, i = 0; i < arguments.length; i++) {\n        for (var k in arguments[i]) {\n            if (arguments[i].hasOwnProperty(k)) {\n                o[k] = arguments[i][k].constructor === Object\n                    ? extend(o[k] || {}, arguments[i][k])\n                    : arguments[i][k];\n            }\n        }\n    }\n    return o;\n}\n\n/**\n * Example\n */\ndocument.write(JSON.stringify(extend({\n    api: 1,\n    params: {\n        query: 'hello'\n    }\n}, {\n    params: {\n        query: 'there'\n    }\n})));\n// outputs {\"api\": 1, \"params\": {\"query\": \"there\"}}This answer is now but a drop in the ocean ...",
                "Just if anyone is using Google Closure Library:Similar helper function exists for array:",
                "**Merging objects is simple using Object.assign or the spread ... operator **var obj1 = { food: 'pizza', car: 'ford' }\r\nvar obj2 = { animal: 'dog', car: 'BMW' }\r\nvar obj3 = {a: \"A\"}\r\n\r\n\r\nvar mergedObj = Object.assign(obj1,obj2,obj3)\r\n // or using the Spread operator (...)\r\nvar mergedObj = {...obj1,...obj2,...obj3}\r\n\r\nconsole.log(mergedObj);The objects are merged from right to left, this means that objects which have identical properties as the objects to their right will be overriden.In this example obj2.car overrides obj1.car",
                "I extended David Coallier's method:If override is false, no property gets overridden but new properties will be added.Usage:\nobj.merge(merges... [, override]);Here is my code:Examples and TestCases:My equals method can be found here: Object comparison in JavaScript",
                "In MooTools, there's Object.merge():",
                "In Ext\u00a0JS 4 it can be done as follows:See merge( object ) : Object.",
                "Using jQuery.extend() - LinkUsing _.merge() - LinkUsing _.extend() - LinkUsing Object.assign() ECMAScript 2015 (ES6) - LinkOutput of all",
                "Based on Markus' and vsync' answer, this is an expanded version. The function takes any number of arguments. It can be used to set properties on DOM nodes and makes deep copies of values. However, the first argument is given by reference.To detect a DOM node, the isDOMNode() function is used (see Stack\u00a0Overflow question JavaScript isDOM \u2014 How do you check if a JavaScript Object is a DOM Object?)It was tested in Opera 11, Firefox 6, Internet\u00a0Explorer\u00a08 and Google Chrome 16.Set innerHTML and style of a HTML ElementMerge arrays and objects. Note that undefined can be used to preserv values in the lefthand array/object.Any argument not beeing a JavaScript object (including null) will be ignored. Except for the first argument, also DOM nodes are discarded. Beware that i.e. strings, created like new String() are in fact objects.If you want to merge two objects into a new (without affecting any of the two) supply {} as first argumentEdit (by ReaperSoon):To also merge arrays",
                "It seems like this should be all you need:After that obj3 should now have the following value:Try it out here:var obj1 = { food: 'pizza', car: 'ford' }\nvar obj2 = { animal: 'dog' }\n\nvar obj3 = { ...obj1, ...obj2 }\n\nconsole.log(obj3);",
                "You should use lodash's defaultsDeep"
            ]
        },
        {
            "tag": "yield_question",
            "patterns": [
                "What does the yield keyword do?",
                "What does yield mean?",
                "Tell me about yield",
                "yield"
            ],
            "responses": [
                "To understand what yield does, you must understand what generators are. And before you can understand generators, you must understand iterables. When you create a list, you can read its items one by one. Reading its items one by one is called iteration. When you use a list comprehension, you create a list, and so an iterable: Everything you can use for... in... on is an iterable; lists, strings, files... These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values. Generators are iterators, a kind of iterable you can only iterate over once. Generators do not store all the values in memory, they generate the values on the fly:It is just the same except you used () instead of []. BUT, you cannot perform for i in mygenerator a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.yield is a keyword that is used like return, except the function will return a generator.Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.To master yield, you must understand that when you call the function, the code you have written in the function body does not run. The function only returns the generator object, this is a bit tricky. Then, your code will continue from where it left off each time for uses the generator.Now the hard part:The first time the for calls the generator object created from your function, it will run the code in your function from the beginning until it hits yield, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting yield. That can be because the loop has come to an end, or because you no longer satisfy an if/else. The extend() method is a list object method that expects an iterable and adds its values to the list. Usually, we pass a list to it: Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool",
                "When you see a function with yield statements, apply this easy trick to understand what will happen:This trick may give you an idea of the logic behind the function, but what actually happens with yield is significantly different than what happens in the list-based approach. In many cases, the yield approach will be a lot more memory efficient and faster too. In other cases, this trick will get you stuck in an infinite loop, even though the original function works just fine. Read on to learn more...First, the iterator protocol - when you writePython performs the following two steps:Gets an iterator for mylist:Call iter(mylist) -> this returns an object with a next() method (or __next__() in Python 3).[This is the step most people forget to tell you about]Uses the iterator to loop over items:Keep calling the next() method on the iterator returned from step 1. The return value from next() is assigned to x and the loop body is executed. If an exception StopIteration is raised from within next(), it means there are no more values in the iterator and the loop is exited.The truth is Python performs the above two steps anytime it wants to loop over the contents of an object - so it could be a for loop, but it could also be code like otherlist.extend(mylist) (where otherlist is a Python list).Here mylist is an iterable because it implements the iterator protocol. In a user-defined class, you can implement the __iter__() method to make instances of your class iterable. This method should return an iterator. An iterator is an object with a next() method. It is possible to implement both __iter__() and next() on the same class, and have __iter__() return self. This will work for simple cases, but not when you want two iterators looping over the same object at the same time.So that's the iterator protocol, many objects implement this protocol:Note that a for loop doesn't know what kind of object it's dealing with - it just follows the iterator protocol, and is happy to get item after item as it calls next(). Built-in lists return their items one by one, dictionaries return the keys one by one, files return the lines one by one, etc. And generators return... well that's where yield comes in:Instead of yield statements, if you had three return statements in f123() only the first would get executed, and the function would exit. But f123() is no ordinary function. When f123() is called, it does not return any of the values in the yield statements! It returns a generator object. Also, the function does not really exit - it goes into a suspended state. When the for loop tries to loop over the generator object, the function resumes from its suspended state at the very next line after the yield it previously returned from, executes the next line of code, in this case, a yield statement, and returns that as the next item. This happens until the function exits, at which point the generator raises StopIteration, and the loop exits.So the generator object is sort of like an adapter - at one end it exhibits the iterator protocol, by exposing __iter__() and next() methods to keep the for loop happy. At the other end, however, it runs the function just enough to get the next value out of it, and puts it back in suspended mode.Usually, you can write code that doesn't use generators but implements the same logic. One option is to use the temporary list 'trick' I mentioned before. That will not work in all cases, for e.g. if you have infinite loops, or it may make inefficient use of memory when you have a really long list. The other approach is to implement a new iterable class SomethingIter that keeps the state in instance members and performs the next logical step in its next() (or __next__() in Python 3) method. Depending on the logic, the code inside the next() method may end up looking very complex and prone to bugs. Here generators provide a clean and easy solution.",
                "Think of it this way:An iterator is just a fancy sounding term for an object that has a next() method.  So a yield-ed function ends up being something like this:Original version:This is basically what the Python interpreter does with the above code:For more insight as to what's happening behind the scenes, the for loop can be rewritten to this:Does that make more sense or just confuse you more?  :)I should note that this is an oversimplification for illustrative purposes. :)",
                "The yield keyword is reduced to two simple facts:In a nutshell: Most commonly, a generator is a lazy, incrementally-pending list, and yield statements allow you to use function notation to program the list values the generator should incrementally spit out. Furthermore, advanced usage lets you use generators as coroutines (see below).Basically, whenever the yield statement is encountered, the function pauses and saves its state, then emits the next return value in the 'list' according to the python iterator protocol (to some syntactic construct like a for-loop that repeatedly calls next() and catches a StopIteration exception, etc.). You might have encountered generators with generator expressions; generator functions are more powerful because you can pass arguments back into the paused generator function, using them to implement coroutines. More on that later.Let's define a function makeRange that's just like Python's range. Calling makeRange(n) RETURNS A GENERATOR:To force the generator to immediately return its pending values, you can pass it into list() (just like you could any iterable):The above example can be thought of as merely creating a list which you append to and return:There is one major difference, though; see the last section.An iterable is the last part of a list comprehension, and all generators are iterable, so they're often used like so:To get a better feel for generators, you can play around with the itertools module (be sure to use chain.from_iterable rather than chain when warranted). For example, you might even use generators to implement infinitely-long lazy lists like itertools.count(). You could implement your own def enumerate(iterable): zip(count(), iterable), or alternatively do so with the yield keyword in a while-loop.Please note: generators can actually be used for many more things, such as implementing coroutines or non-deterministic programming or other elegant things. However, the lazy lists viewpoint I present here is the most common use you will find.This is how the Python iteration protocol works. That is, what is going on when you do list(makeRange(5)). This is what I describe earlier as a lazy, incremental list.The built-in function next() just calls the objects .__next__() function, which is a part of the iteration protocol and is found on all iterators. You can manually use the next() function (and other parts of the iteration protocol) to implement fancy things, usually at the expense of readability, so try to avoid doing that...Coroutine example:A coroutine (generators which generally accept input via the yield keyword e.g. nextInput = yield nextOutput, as a form of two-way communication) is basically a computation which is allowed to pause itself and request input (e.g. to what it should do next). When the coroutine pauses itself (when the running coroutine eventually hits a yield keyword), the computation is paused and control is inverted (yielded) back to the 'calling' function (the frame which requested the next value of the computation). The paused generator/coroutine remains paused until another invoking function (possibly a different function/context) requests the next value to unpause it (usually passing input data to direct the paused logic interior to the coroutine's code).You can think of python coroutines as lazy incrementally-pending lists, where the next element doesn't just depend on the previous computation, but also on input you may opt to inject during the generation process.Normally, most people would not care about the following distinctions and probably want to stop reading here.In Python-speak, an iterable is any object which understands the concept of a for-loop like a list [1,2,3], and an iterator is a specific instance of the requested for-loop like [1,2,3].__iter__(). A generator is exactly the same as any iterator, except for the way it was written (with function syntax).When you request an iterator from a list, it creates a new iterator. However, when you request an iterator from an iterator (which you would rarely do), it just gives you a copy of itself.Thus, in the unlikely event that you are failing to do something like this...... then remember that a generator is an iterator; that is, it is one-time-use. If you want to reuse it, you should call myRange(...) again. If you need to use the result twice, convert the result to a list and store it in a variable x = list(myRange(5)). Those who absolutely need to clone a generator (for example, who are doing terrifyingly hackish metaprogramming) can use itertools.tee (still works in Python 3) if absolutely necessary, since the copyable iterator Python PEP standards proposal has been deferred.",
                "What does the yield keyword do in Python? yield is only legal inside of a function definition, and the inclusion of yield in a function definition makes it return a generator.The idea for generators comes from other languages (see footnote 1) with varying implementations. In Python's Generators, the execution of the code is frozen at the point of the yield. When the generator is called (methods are discussed below) execution resumes and then freezes at the next yield.yield provides an\neasy way of implementing the iterator protocol, defined by the following two methods:\n__iter__ and __next__.  Both of those methods\nmake an object an iterator that you could type-check with the Iterator Abstract Base\nClass from the collections module.Let's do some introspection:The generator type is a sub-type of iterator:And if necessary, we can type-check like this:A feature of an Iterator is that once exhausted, you can't reuse or reset it:You'll have to make another if you want to use its functionality again (see footnote 2):One can yield data programmatically, for example:The above simple generator is also equivalent to the below - as of Python 3.3 you can use yield from:However, yield from also allows for delegation to subgenerators,\nwhich will be explained in the following section on cooperative delegation with sub-coroutines.yield forms an expression that allows data to be sent into the generator (see footnote 3)Here is an example, take note of the received variable, which will point to the data that is sent to the generator:First, we must queue up the generator with the builtin function, next. It will\ncall the appropriate next or __next__ method, depending on the version of\nPython you are using:And now we can send data into the generator. (Sending None is\nthe same as calling next.) :Now, recall that yield from is available in Python 3. This allows us to delegate coroutines to a subcoroutine:And now we can delegate functionality to a sub-generator and it can be used\nby a generator just as above:Now simulate adding another 1,000 to the account plus the return on the account (60.0):You can read more about the precise semantics of yield from in PEP 380.The close method raises GeneratorExit at the point the function\nexecution was frozen. This will also be called by __del__ so you\ncan put any cleanup code where you handle the GeneratorExit:You can also throw an exception which can be handled in the generator\nor propagated back to the user:Raises:I believe I have covered all aspects of the following question:What does the yield keyword do in Python?It turns out that yield does a lot. I'm sure I could add even more\nthorough examples to this. If you want more or have some constructive criticism, let me know by commenting\nbelow.The top/accepted answer is a very incomplete answer.The grammar currently allows any expression in a list comprehension.Since yield is an expression, it has been touted by some as interesting to use it in comprehensions or generator expression - in spite of citing no particularly good use-case.The CPython core developers are discussing deprecating its allowance.\nHere's a relevant post from the mailing list:On 30 January 2017 at 19:05, Brett Cannon  wrote:On Sun, 29 Jan 2017 at 16:39 Craig Rodrigues  wrote:I'm OK with either approach.  Leaving things the way they are in Python 3\nis no good, IMHO.My vote is it be a SyntaxError since you're not getting what you expect from\nthe syntax.I'd agree that's a sensible place for us to end up, as any code\nrelying on the current behaviour is really too clever to be\nmaintainable.In terms of getting there, we'll likely want:Cheers, Nick.--  Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, AustraliaFurther, there is an outstanding issue (10544) which seems to be pointing in the direction of this never being a good idea (PyPy, a Python implementation written in Python, is already raising syntax warnings.)Bottom line, until the developers of CPython tell us otherwise: Don't put yield in a generator expression or comprehension.In Python 3:In a generator function, the return statement indicates that the generator is done and will cause StopIteration to be raised. The returned value (if any) is used as an argument to construct StopIteration and becomes the StopIteration.value attribute.Historical note, in Python 2:\n In a generator function, the return statement is not allowed to include an expression_list. In that context, a bare return indicates that the generator is done and will cause StopIteration to be raised. \nAn expression_list is basically any number of expressions separated by commas - essentially, in Python 2, you can stop the generator with return, but you can't return a value.The languages CLU, Sather, and Icon were referenced in the proposal\nto introduce the concept of generators to Python. The general idea is\nthat a function can maintain internal state and yield intermediate\ndata points on demand by the user. This promised to be superior in performance\nto other approaches, including Python threading, which isn't even available on some systems.This means, for example, that range objects aren't Iterators, even though they are iterable, because they can be reused. Like lists, their __iter__ methods return iterator objects.yield was originally introduced as a statement, meaning that it\ncould only appear at the beginning of a line in a code block.\nNow yield creates a yield expression.\nhttps://docs.python.org/2/reference/simple_stmts.html#grammar-token-yield_stmt\nThis change was proposed to allow a user to send data into the generator just as\none might receive it. To send data, one must be able to assign it to something, and\nfor that, a statement just won't work.",
                "Yield is just like return - it returns whatever you tell it to (as a generator). The difference is that the next time you call the generator, execution starts from the last call to the yield statement. Unlike return, the stack frame is not cleaned up when a yield occurs, however control is transferred back to the caller, so its state will resume the next time the function is called.In the case of your code, the function get_child_candidates is acting like an iterator so that when you extend your list, it adds one element at a time to the new list.list.extend calls an iterator until it's exhausted. In the case of the code sample you posted, it would be much clearer to just return a tuple and append that to the list.",
                "There's one extra thing to mention: a function that yields doesn't actually have to terminate. I've written code like this:Then I can use it in other code like this:It really helps simplify some problems, and makes some things easier to work with.",
                "Whenever you find yourself building a list from scratch, yield each piece instead.This was my first  aha  moment with yield.yield is a sugary way to saybuild a series of stuffSame behavior:Different behavior:Yield is single-pass: you can only iterate through once. When a function has a yield in it we call it a generator function. And an iterator is what it returns. Those terms are revealing. We lose the convenience of a container, but gain the power of a series that's computed as needed, and arbitrarily long.Yield is lazy, it puts off computation. A function with a yield in it doesn't actually execute at all when you call it. It returns an iterator object that remembers where it left off. Each time you call next() on the iterator (this happens in a for-loop) execution inches forward to the next yield. return raises StopIteration and ends the series (this is the natural end of a for-loop).Yield is versatile. Data doesn't have to be stored all together, it can be made available one at a time. It can be infinite.If you need multiple passes and the series isn't too long, just call list() on it:Brilliant choice of the word yield because both meanings apply:yield \u2014 produce or provide (as in agriculture)...provide the next data in the series.yield \u2014 give way or relinquish (as in political power)...relinquish CPU execution until the iterator advances.",
                "Yield gives you a generator.As you can see, in the first case foo holds the entire list in memory at once. It's not a big deal for a list with 5 elements, but what if you want a list of 5 million? Not only is this a huge memory eater, it also costs a lot of time to build at the time that the function is called.In the second case, bar just gives you a generator. A generator is an iterable--which means you can use it in a for loop, etc, but each value can only be accessed once. All the values are also not stored in memory at the same time; the generator object  remembers  where it was in the looping the last time you called it--this way, if you're using an iterable to (say) count to 50 billion, you don't have to count to 50 billion all at once and store the 50 billion numbers to count through.Again, this is a pretty contrived example, you probably would use itertools if you really wanted to count to 50 billion. :)This is the most simple use case of generators. As you said, it can be used to write efficient permutations, using yield to push things up through the call stack instead of using some sort of stack variable. Generators can also be used for specialized tree traversal, and all manner of other things.",
                "It's returning a generator. The key idea is that the compiler/interpreter/whatever does some trickery so that as far as the caller is concerned, they can keep calling next() and it will keep returning values - as if the generator method was paused. Now obviously you can't really  pause  a method, so the compiler builds a state machine for you to remember where you currently are and what the local variables etc look like. This is much easier than writing an iterator yourself.",
                "Here is the programming language theory answer:The yield statement in Python returns a generator. A generator in Python is a function that returns continuations (and specifically a type of coroutine, but continuations represent the more general mechanism to understand what is going on).Continuations in programming languages theory are a much more fundamental kind of computation, but they are not often used, because they are extremely hard to reason about and also very difficult to implement. But the idea of what a continuation is, is straightforward: it is the state of a computation that has not yet finished. In this state, the current values of variables, the operations that have yet to be performed, and so on, are saved. Then at some point later in the program the continuation can be invoked, such that the program's variables are reset to that state and the operations that were saved are carried out.Continuations, in this more general form, can be implemented in two ways. In the call/cc way, the program's stack is literally saved and then when the continuation is invoked, the stack is restored.In continuation passing style (CPS), continuations are just normal functions (only in languages where functions are first class) which the programmer explicitly manages and passes around to subroutines. In this style, program state is represented by closures (and the variables that happen to be encoded in them) rather than variables that reside somewhere on the stack. Functions that manage control flow accept continuation as arguments (in some variations of CPS, functions may accept multiple continuations) and manipulate control flow by invoking them by simply calling them and returning afterwards. A very simple example of continuation passing style is as follows:In this (very simplistic) example, the programmer saves the operation of actually writing the file into a continuation (which can potentially be a very complex operation with many details to write out), and then passes that continuation (i.e, as a first-class closure) to another operator which does some more processing, and then calls it if necessary. (I use this design pattern a lot in actual GUI programming, either because it saves me lines of code or, more importantly, to manage control flow after GUI events trigger.)The rest of this post will, without loss of generality, conceptualize continuations as CPS, because it is a hell of a lot easier to understand and read.Now let's talk about generators in Python. Generators are a specific subtype of continuation. Whereas continuations are able in general to save the state of a computation (i.e., the program's call stack), generators are only able to save the state of iteration over an iterator. Although, this definition is slightly misleading for certain use cases of generators. For instance:This is clearly a reasonable iterable whose behavior is well defined -- each time the generator iterates over it, it returns 4 (and does so forever). But it isn't probably the prototypical type of iterable that comes to mind when thinking of iterators (i.e., for x in collection: do_something(x)). This example illustrates the power of generators: if anything is an iterator, a generator can save the state of its iteration.To reiterate: Continuations can save the state of a program's stack and generators can save the state of iteration. This means that continuations are more a lot powerful than generators, but also that generators are a lot, lot easier. They are easier for the language designer to implement, and they are easier for the programmer to use (if you have some time to burn, try to read and understand this page about continuations and call/cc).But you could easily implement (and conceptualize) generators as a simple, specific case of continuation passing style:Whenever yield is called, it tells the function to return a continuation.  When the function is called again, it starts from wherever it left off. So, in pseudo-pseudocode (i.e., not pseudocode, but not code) the generator's next method is basically as follows:where the yield keyword is actually syntactic sugar for the real generator function, basically something like:Remember that this is just pseudocode and the actual implementation of generators in Python is more complex. But as an exercise to understand what is going on, try to use continuation passing style to implement generator objects without use of the yield keyword.",
                "Here is an example in plain language. I will provide a correspondence between high-level human concepts to low-level Python concepts.I want to operate on a sequence of numbers, but I don't want to bother my self with the creation of that sequence, I want only to focus on the operation I want to do. So, I do the following:This is what a generator does (a function that contains a yield); it starts executing on the first next(), pauses whenever it does a yield, and when asked for the next() value it continues from the point it was last. It fits perfectly by design with the iterator protocol of Python, which describes how to sequentially request values.The most famous user of the iterator protocol is the for command in Python. So, whenever you do a:it doesn't matter if sequence is a list, a string, a dictionary or a generator object like described above; the result is the same: you read items off a sequence one by one.Note that defining a function which contains a yield keyword is not the only way to create a generator; it's just the easiest way to create one.For more accurate information, read about iterator types, the yield statement and generators in the Python documentation.",
                "It's quite easy to make a coroutine, which enables the passing of information between two blocks of code.  I won't repeat any of the fine examples that have already been given about using yield to create a generator.To help understand what a yield does in the following code, you can use your finger to trace the cycle through any code that has a yield.  Every time your finger hits the yield, you have to wait for a next or a send to be entered.  When a next is called, you trace through the code until you hit the yield\u2026 the code on the right of the yield is evaluated and returned to the caller\u2026 then you wait.  When next is called again, you perform another loop through the code.  However, you'll note that in a coroutine, yield can also be used with a send\u2026 which will send a value from the caller into the yielding function. If a send is given, then yield receives the value sent, and spits it out the left hand side\u2026 then the trace through the code progresses until you hit the yield again (returning the value at the end, as if next was called).For example:",
                "There is another yield use and meaning (since Python 3.3):From PEP 380 -- Syntax for Delegating to a Subgenerator:A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing 'yield' to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.The new syntax also opens up some opportunities for optimisation when one generator re-yields values produced by another.Moreover this will introduce (since Python 3.5):to avoid coroutines being confused with a regular generator (today yield is used in both).",
                "I assume you have learned the return statement.As an analogy, return and yield are twins. return means 'return and stop' whereas 'yield` means 'return, but continue'Run it:See, you get only a single number rather than a list of them. return never allows you prevail happily, just implements once and quit.Replace return with yield:Now, you win to get all the numbers.Comparing to return which runs once and stops, yield runs times you planed.\nYou can interpret return as return one of them, and yield as return all of them. This is called iterable.It's the core about yield.The difference between a list return outputs and the object yield output is:You will always get [0, 1, 2] from a list object but only could retrieve them from 'the object yield output' once. So, it has a new name generator object as displayed in Out[11]: <generator object num_list at 0x10327c990>.In conclusion, as a metaphor to grok it:",
                "From a programming viewpoint, the iterators are implemented as thunks.To implement iterators, generators, and thread pools for concurrent execution, etc. as thunks, one uses messages sent to a closure object, which has a dispatcher, and the dispatcher answers to  messages . next  is a message sent to a closure, created by the  iter  call.There are lots of ways to implement this computation. I used mutation, but it is possible to do this kind of computation without mutation, by returning the current value and the next yielder (making it referential transparent).  Racket uses a sequence of transformations of the initial program in some intermediary languages, one of such rewriting making the yield operator to be transformed in some language with simpler operators.Here is a demonstration of how yield could be rewritten, which uses the structure of R6RS, but the semantics is identical to Python's. It's the same model of computation, and only a change in syntax is required to rewrite it using yield of Python.",
                "Here are some Python examples of how to actually implement generators as if Python did not provide syntactic sugar for them:As a Python generator:Using lexical closures instead of generatorsUsing object closures instead of generators (because ClosuresAndObjectsAreEquivalent)",
                "Note that yield can be used in coroutines as the dual of their use in generator functions.  Although it isn't the same use as your code snippet, (yield) can be used as an expression in a function.  When a caller sends a value to the method using the send() method, then the coroutine will execute until the next (yield) statement is encountered.Generators and coroutines are a cool way to set up data-flow type applications.  I thought it would be worthwhile knowing about the other use of the yield statement in functions.",
                "Here is a simple example:Output:I am not a Python developer, but it looks to me yield holds the position of program flow and the next loop start from  yield  position. It seems like it is waiting at that position, and just before that, returning a value outside, and next time continues to work.It seems to be an interesting and nice ability :D",
                "Here is a mental image of what yield does.I like to think of a thread as having a stack (even when it's not implemented that way).When a normal function is called, it puts its local variables on the stack, does some computation, then clears the stack and returns. The values of its local variables are never seen again.With a yield function, when its code begins to run (i.e. after the function is called, returning a generator object, whose next() method is then invoked), it similarly puts its local variables onto the stack and computes for a while. But then, when it hits the yield statement, before clearing its part of the stack and returning, it takes a snapshot of its local variables and stores them in the generator object. It also writes down the place where it's currently up to in its code (i.e. the particular yield statement).So it's a kind of a frozen function that the generator is hanging onto.When next() is called subsequently, it retrieves the function's belongings onto the stack and re-animates it. The function continues to compute from where it left off, oblivious to the fact that it had just spent an eternity in cold storage.Compare the following examples:When we call the second function, it behaves very differently to the first. The yield statement might be unreachable, but if it's present anywhere, it changes the nature of what we're dealing with.Calling yielderFunction() doesn't run its code, but makes a generator out of the code. (Maybe it's a good idea to name such things with the yielder prefix for readability.)The gi_code and gi_frame fields are where the frozen state is stored. Exploring them with dir(..), we can confirm that our mental model above is credible.",
                "Imagine that you have created a remarkable machine that is capable of generating thousands and thousands of lightbulbs per day. The machine generates these lightbulbs in boxes with a unique serial number. You don't have enough space to store all of these lightbulbs at the same time, so you would like to adjust it to generate lightbulbs on-demand.Python generators don't differ much from this concept. Imagine that you have a function called barcode_generator that generates unique serial numbers for the boxes. Obviously, you can have a huge number of such barcodes returned by the function, subject to the hardware (RAM) limitations. A wiser, and space efficient, option is to generate those serial numbers on-demand.Machine's code:Note the next(barcode) bit.As you can see, we have a self-contained \u201cfunction\u201d to generate the next unique serial number each time. This function returns a generator! As you can see, we are not calling the function each time we need a new serial number, but instead we are using next() given the generator to obtain the next serial number.To be more precise, this generator is a lazy iterator! An iterator is an object that helps us traverse a sequence of objects. It's called lazy because it does not load all the items of the sequence in memory until they are needed. The use of next in the previous example is the explicit way to obtain the next item from the iterator. The implicit way is using for loops:This will print barcodes infinitely, yet you will not run out of memory.In other words, a generator looks like a function but behaves like an iterator.Finally, real-world applications? They are usually useful when you work with big sequences. Imagine reading a huge file from disk with billions of records. Reading the entire file in memory, before you can work with its content, will probably be infeasible (i.e., you will run out of memory).",
                "Yield is used for creating a sequence generator. It's used for generating some sequence dynamically. For example, while reading a file line by line on a network, you can use the yield function as follows:You can use it in your code as follows:Execution Control Transfer gotchaThe execution control will be transferred from getNextLines() to the for loop when yield is executed. Thus, every time getNextLines() is invoked, execution begins from the point where it was paused last time.Thus in short, a function with the following codewill print",
                "When yield is used instead of a return in a python function, that function is turned into something special called generator function. That function will return an object of generator type. The yield keyword is a flag to notify the python compiler to treat such function specially. Normal functions will terminate once some value is returned from it. But with the help of the compiler, the generator function can be thought of as resumable. That is, the execution context will be restored and the execution will continue from last run. Until you explicitly call return, which will raise a StopIteration exception (which is also part of the iterator protocol), or reach the end of the function. I found a lot of references about generator but this one from the functional programming perspective is the most digestable.(Now I want to talk about the rationale behind generator, and the iterator based on my own understanding. I hope this can help you grasp the essential motivation of iterator and generator. Such concept shows up in other languages as well such as C#.)As I understand, when we want to process a bunch of data, we usually first store the data somewhere and then process it one by one. But this naive approach is problematic. If the data volume is huge, it's expensive to store them as a whole beforehand. So instead of storing the data itself directly, why not store some kind of metadata indirectly, i.e. the logic how the data is computed.There are 2 approaches to wrap such metadata.Either way, an iterator is created, i.e. some object that can give you the data you want. The OO approach may be a bit complex. Anyway, which one to use is up to you.",
                "In summary, the yield statement transforms your function into a factory that produces a special object called a generator which wraps around the body of your original function. When the generator is iterated, it executes your function  until it reaches the next yield then suspends execution and evaluates to the value passed to yield. It repeats this process on each iteration until the path of execution exits the function. For instance,simply outputsThe power comes from using the generator with a loop that calculates a sequence, the generator executes the loop stopping each time to 'yield' the next result of the calculation, in this way it calculates a list on the fly, the benefit being the memory saved for especially large calculationsSay you wanted to create a your own range function that produces an iterable range of numbers, you could do it like so,and use it like this;But this is inefficient becauseLuckily Guido and his team were generous enough to develop generators so we could just do this;Now upon each iteration a function on the generator called next() executes the function until it either reaches a 'yield' statement in which it stops and  'yields' the value or reaches the end of the function. In this case on the first call, next() executes up to the yield statement and yield 'n', on the next call it will execute the  increment statement, jump back to the 'while', evaluate it, and if true, it will stop and yield 'n' again, it will continue that way until the while condition returns false and the generator jumps to the end of the function.",
                "Yield is an objectA return in a function will return a single value.If you want a function to return a huge set of values, use yield.More importantly, yield is a barrier.like barrier in the CUDA language, it will not transfer control until it gets\n  completed.That is, it will run the code in your function from the beginning until it hits yield. Then, it\u2019ll return the first value of the loop.Then, every other call will run the loop you have written in the function one more time, returning the next value until there isn't any value to return.",
                "Many people use return rather than yield, but in some cases yield can be more efficient and easier to work with.Here is an example which yield is definitely best for:return (in function)yield (in function)Calling functionsBoth functions do the same thing, but yield uses three lines instead of five and has one less variable to worry about.This is the result from the code:As you can see both functions do the same thing. The only difference is return_dates() gives a list and yield_dates() gives a generator.A real life example would be something like reading a file line by line or if you just want to make a generator.",
                "The yield keyword simply collects returning results. Think of yield like return +=",
                "Yield is like a return element for a function. The difference is, that the yield element turns a function into a generator. A generator behaves just like a function until something is 'yielded'. The generator stops until it is next called, and continues from exactly the same point as it started. You can get a sequence of all the 'yielded' values in one, by calling list(generator())."
            ]
        },
        {
            "tag": "if_name_question",
            "patterns": [
                "What does if __name__ ==  __main__ : do?",
                "What does if __name__ ==  __main__ : mean?",
                "if __name__ ==  __main__ :"
            ],
            "responses": [
                "It's boilerplate code that protects users from accidentally invoking the script when they didn't intend to. Here are some common problems when the guard is omitted from a script:If you import the guardless script in another script (e.g. import my_script_without_a_name_eq_main_guard), then the latter script will trigger the former to run at import time and using the second script's command line arguments. This is almost always a mistake.If you have a custom class in the guardless script and save it to a pickle file, then unpickling it in another script will trigger an import of the guardless script, with the same problems outlined in the previous bullet.To better understand why and how this matters, we need to take a step back to understand how Python initializes scripts and how this interacts with its module import mechanism.Whenever the Python interpreter reads a source file, it does two things:it sets a few special variables like __name__, and thenit executes all of the code found in the file.Let's see how this works and how it relates to your question about the __name__ checks we always see in Python scripts.Let's use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called foo.py.When the Python interpreter reads a source file, it first defines a few special variables. In this case, we care about the __name__ variable.When Your Module Is the Main ProgramIf you are running your module (the source file) as the main program, e.g.the interpreter will assign the hard-coded string  __main__  to the __name__ variable, i.e.When Your Module Is Imported By AnotherOn the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:The interpreter will search for your foo.py file (along with searching for a few other variants), and prior to executing that module, it will assign the name  foo  from the import statement to the __name__ variable, i.e.After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.AlwaysIt prints the string  before import  (without quotes).It loads the math module and assigns it to a variable called math. This is equivalent to replacing import math with the following (note that __import__ is a low-level function in Python that takes a string and triggers the actual import):It prints the string  before function_a .It executes the def block, creating a function object, then assigning that function object to a variable called function_a.It prints the string  before function_b .It executes the second def block, creating another function object, then assigning it to a variable called function_b.It prints the string  before __name__ guard .Only When Your Module Is the Main ProgramOnly When Your Module Is Imported by AnotherAlwaysSummaryIn summary, here's what'd be printed in the two cases:You might naturally wonder why anybody would want this.  Well, sometimes you want to write a .py file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing .py files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script.  Running  the script is a side effect of importing the script's module.Question: Can I have multiple __name__ checking blocks?  Answer: it's strange to do so, but the language won't stop you.Suppose the following is in foo2.py.  What happens if you say python foo2.py on the command-line? Why?",
                "When your script is run by passing it as a command to the Python interpreter,all of the code that is at indentation level 0 gets executed.  Functions and classes that are defined are, well, defined, but none of their code gets run.  Unlike other languages, there's no main() function that gets run automatically - the main() function is implicitly all the code at the top level.In this case, the top-level code is an if block.  __name__ is a built-in variable which evaluates to the name of the current module.  However, if a module is being run directly (as in myscript.py above), then __name__ instead is set to the string  __main__ .  Thus, you can test whether your script is being run directly or being imported by something else by testingIf your script is being imported into another module, its various function and class definitions will be imported and its top-level code will be executed, but the code in the then-body of the if clause above won't get run as the condition is not met. As a basic example, consider the following two scripts:Now, if you invoke the interpreter asThe output will beIf you run two.py instead:You getThus, when module one gets loaded, its __name__ equals  one  instead of  __main__ .",
                "To outline the basics: The global variable, __name__, in the module that is the entry point to your program, is '__main__'. Otherwise, it's the name you import the module by.So, code under the if block will only run if the module is the entry point to your program.It allows the code in the module to be importable by other modules, without executing the code block beneath on import.Why do we need this?Say you're writing a Python script designed to be used as a module:You could test the module by adding this call of the function to the bottom:and running it (on a command prompt) with something like:However, if you want to import the module to another script:On import, the do_important function would be called, so you'd probably comment out your function call, do_important(), at the bottom.And then you'll have to remember whether or not you've commented out your test function call. And this extra complexity would mean you're likely to forget, making your development process more troublesome.The __name__ variable points to the namespace wherever the Python interpreter happens to be at the moment.Inside an imported module, it's the name of that module.But inside the primary module (or an interactive Python session, i.e. the interpreter's Read, Eval, Print Loop, or REPL) you are running everything from its  __main__ .So if you check before executing:With the above, your code will only execute when you're running it as the primary module (or intentionally call it from another script).There's a Pythonic way to improve on this, though.What if we want to run this business process from outside the module?If we put the code we want to exercise as we develop and test in a function like this and then do our check for '__main__' immediately after:We now have a final function for the end of our module that will run if we run the module as the primary module.It will allow the module and its functions and classes to be imported into other scripts without running the main function, and will also allow the module (and its functions and classes) to be called when running from a different '__main__' module, i.e.This idiom can also be found in the Python documentation in an explanation of the __main__ module. That text states:This module represents the (otherwise anonymous) scope in which the\n  interpreter\u2019s main program executes \u2014 commands read either from\n  standard input, from a script file, or from an interactive prompt. It\n  is this environment in which the idiomatic \u201cconditional script\u201d stanza\n  causes a script to run:",
                "if __name__ ==  __main__  is the part that runs when the script is run from (say) the command line using a command like python myscript.py.",
                "__name__ is a global variable (in Python, global actually means on the module level) that exists in all namespaces. It is typically the module's name (as a str type).As the only special case, however, in whatever Python process you run, as in mycode.py:the otherwise anonymous global namespace is assigned the value of '__main__' to its __name__.Thus, including the final lineswill cause your script's uniquely defined main function to run.Another benefit of using this construct: you can also import your code as a module in another script and then run the main function if and when your program decides:",
                "There are lots of different takes here on the mechanics of the code in question, the  How , but for me none of it made sense until I understood the  Why . This should be especially helpful for new programmers.Take file  ab.py :And a second file  xy.py :What is this code actually doing?When you execute xy.py, you import ab. The import statement runs the module immediately on import, so ab's operations get executed before the remainder of xy's. Once finished with ab, it continues with xy.The interpreter keeps track of which scripts are running with __name__. When you run a script - no matter what you've named it - the interpreter calls it  __main__ , making it the master or 'home' script that gets returned to after running an external script.Any other script that's called from this  __main__  script is assigned its filename as its __name__ (e.g., __name__ ==  ab.py ). Hence, the line if __name__ ==  __main__ : is the interpreter's test to determine if it's interpreting/parsing the 'home' script that was initially executed, or if it's temporarily peeking into another (external) script. This gives the programmer flexibility to have the script behave differently if it's executed directly vs. called externally.Let's step through the above code to understand what's happening, focusing first on the unindented lines and the order they appear in the scripts. Remember that function - or def - blocks don't do anything by themselves until they're called. What the interpreter might say if mumbled to itself:The bottom two lines mean:  If this is the  __main__  or 'home' script, execute the function called main() . That's why you'll see a def main(): block up top, which contains the main flow of the script's functionality.Why implement this?Remember what I said earlier about import statements? When you import a module it doesn't just 'recognize' it and wait for further instructions - it actually runs all the executable operations contained within the script. So, putting the meat of your script into the main() function effectively quarantines it, putting it in isolation so that it won't immediately run when imported by another script.Again, there will be exceptions, but common practice is that main() doesn't usually get called externally. So you may be wondering one more thing: if we're not calling main(), why are we calling the script at all? It's because many people structure their scripts with standalone functions that are built to be run independent of the rest of the code in the file. They're then later called somewhere else in the body of the script. Which brings me to this:But the code works without itYes, that's right. These separate functions can be called from an in-line script that's not contained inside a main() function. If you're accustomed (as I am, in my early learning stages of programming) to building in-line scripts that do exactly what you need, and you'll try to figure it out again if you ever need that operation again ... well, you're not used to this kind of internal structure to your code, because it's more complicated to build and it's not as intuitive to read.But that's a script that probably can't have its functions called externally, because if it did it would immediately start calculating and assigning variables. And chances are if you're trying to re-use a function, your new script is related closely enough to the old one that there will be conflicting variables.In splitting out independent functions, you gain the ability to re-use your previous work by calling them into another script. For example,  example.py  might import  xy.py  and call x(), making use of the 'x' function from  xy.py . (Maybe it's capitalizing the third word of a given text string; creating a NumPy array from a list of numbers and squaring them; or detrending a 3D surface. The possibilities are limitless.)(As an aside, this question contains an answer by @kindall that finally helped me to understand - the why, not the how. Unfortunately it's been marked as a duplicate of this one, which I think is a mistake.)",
                "The code under if __name__ == '__main__': will only be executed if the module is invoked as a script.As an example, consider the following module my_test_module.py:First possibility: Import my_test_module.py in another moduleNow if you invoke main.py:Note that only the top-level print() statement in my_test_module is executed.Second possibility: Invoke my_test_module.py as a scriptNow if you run my_test_module.py as a Python script, both print() statements will be executed:For a more comprehensive explanation, you can read What does if __name__ == '__main__' do in Python.",
                "When there are certain statements in our module (M.py) we want to be executed when it'll be running as main (not imported), we can place those statements (test-cases, print statements) under this if block.As by default (when module running as main, not imported) the __name__ variable is set to  __main__ , and when it'll be imported the __name__ variable will get a different value, most probably the name of the module ('M').\nThis is helpful in running different variants of a modules together, and separating their specific input & output statements and also if there are any test-cases.In short, use this 'if __name__ ==  main  ' block to prevent (certain) code from being run when the module is imported.",
                "Put simply, __name__ is a variable defined for each script that defines whether the script is being run as the main module or it is being run as an imported module.So if we have two scripts;andThe output from executing script1 isAnd the output from executing script2 is:As you can see, __name__ tells us which code is the 'main' module.\nThis is great, because you can just write code and not have to worry about structural issues like in C/C++, where, if a file does not implement a 'main' function then it cannot be compiled as an executable and if it does, it cannot then be used as a library.Say you write a Python script that does something great and you implement a boatload of functions that are useful for other purposes. If I want to use them I can just import your script and use them without executing your program (given that your code only executes within the  if __name__ ==  __main__ : context). Whereas in C/C++ you would have to portion out those pieces into a separate module that then includes the file. Picture the situation below;The arrows are import links. For three modules each trying to include the previous modules code there are six files (nine, counting the implementation files) and five links. This makes it difficult to include other code into a C project unless it is compiled specifically as a library. Now picture it for Python:You write a module, and if someone wants to use your code they just import it and the __name__ variable can help to separate the executable portion of the program from the library part.",
                "To be short, you need to know several points:import a action actually runs all that can be run in a.py, meaning each line in a.pyBecause of point 1, you may not want everything to be run in a.py when importing itTo solve the problem in point 2, Python allows you to use a condition check__name__ is an implicit variable in all .py modules:The important thing that Python is special at is point 4! The rest is just basic logic.I've been reading so much throughout the answers on this page. I would say, if you know the thing, for sure you will understand those answers, otherwise, you are still confused.",
                "Let's look at the answer in a more abstract way:Suppose we have this code in x.py:Blocks A and B are run when we are running x.py.But just block A (and not B) is run when we are running another module, y.py for example, in which x.py is imported and the code is run from there (like when a function in x.py is called from y.py).",
                "When you run Python interactively the local __name__ variable is assigned a value of __main__. Likewise, when you execute a Python module from the command line, rather than importing it into another module, its __name__ attribute is assigned a value of __main__, rather than the actual name of the module. In this way, modules can look at their own __name__ value to determine for themselves how they are being used, whether as support for another program or as the main application executed from the command line. Thus, the following idiom is quite common in Python modules:",
                "Consider:It checks if the __name__ attribute of the Python script is  __main__ . In other words, if the program itself is executed, the attribute will be __main__, so the program will be executed (in this case the main() function).However, if your Python script is used by a module, any code outside of the if statement will be executed, so if __name__ ==  __main__  is used just to check if the program is used as a module or not, and therefore decides whether to run the code.",
                "Before explaining anything about if __name__ == '__main__' it is important to understand what __name__ is and what it does.__name__ is a DunderAlias - can be thought of as a global variable (accessible from modules) and works in a similar way to global.It is a string (global as mentioned above) as indicated by type(__name__) (yielding <class 'str'>), and is an inbuilt standard for both Python 3 and Python 2 versions.It can not only be used in scripts but can also be found in both the interpreter and modules/packages.test_file.py:Resulting in __main__somefile.py:test_file.py:Resulting in somefileNotice that when used in a package or module, __name__ takes the name of the file.  The path of the actual module or package path is not given, but has its own DunderAlias __file__, that allows for this.You should see that, where __name__, where it is the main file (or program) will always return __main__, and if it is a module/package, or anything that is running off some other Python script, will return the name of the file where it has originated from.Being a variable means that it's value can be overwritten ( can  does not mean  should ), overwriting the value of __name__ will result in a lack of readability.  So do not do it, for any reason.  If you need a variable define a new variable.It is always assumed that the value of __name__ to be __main__ or the name of the file.  Once again changing this default value will cause more confusion that it will do good, causing problems further down the line.It is considered good practice in general to include the if __name__ == '__main__' in scripts.Now we know the behaviour of __name__ things become clearer:An if is a flow control statement that contains the block of code will execute if the value given is true. We have seen that __name__ can take either\n__main__ or the file name it has been imported from.This means that if __name__ is equal to __main__ then the file must be the main file and must actually be running (or it is the interpreter), not a module or package imported into the script.If indeed __name__ does take the value of __main__ then whatever is in that block of code will execute.This tells us that if the file running is the main file (or you are running from the interpreter directly) then that condition must execute.  If it is a package then it should not, and the value will not be __main__.__name__ can also be used in modules to define the name of a moduleIt is also possible to do other, less common but useful things with __name__, some I will show here:You can also use it to provide runnable help functions/utilities on packages and modules without the elaborate use of libraries.It also allows modules to be run from the command line as main scripts, which can be also very useful.",
                "I think it's best to break the answer in depth and in simple words:__name__: Every module in Python has a special attribute called __name__.\nIt is a built-in variable that returns the name of the module.__main__: Like other programming languages, Python too has an execution entry point, i.e., main. '__main__' is the name of the scope in which top-level code executes. Basically you have two ways of using a Python module: Run it directly as a script, or import it. When a module is run as a script, its __name__ is set to __main__.Thus, the value of the __name__ attribute is set to __main__ when the module is run as the main program. Otherwise the value of __name__  is set to contain the name of the module.",
                "It is a special for when a Python file is called from the command line. This is typically used to call a  main()  function or execute other appropriate startup code, like commandline arguments handling for instance.It could be written in several ways. Another is:I am not saying you should use this in production code, but it serves to illustrate that there is nothing  magical  about if __name__ == '__main__'.It just a convention for invoking a main function in Python files.",
                "There are a number of variables that the system (Python interpreter) provides for source files (modules).  You can get their values anytime you want, so, let us focus on the __name__ variable/attribute:When Python loads a source code file, it executes all of the code found in it. (Note that it doesn't call all of the methods and functions defined in the file, but it does define them.)Before the interpreter executes the source code file though, it defines a few special variables for that file; __name__ is one of those special variables that Python automatically defines for each source code file.If Python is loading this source code file as the main program (i.e. the file you run), then it sets the special __name__ variable for this file to have a value  __main__ .If this is being imported from another module, __name__ will be set to that module's name.So, in your example in part:means that the code block:will be executed only when you run the module directly; the code block will not execute if another module is calling/importing it because the value of __name__ will not equal to  main  in that particular instance.Hope this helps out.",
                "if __name__ ==  __main__ : is basically the top-level script environment, and it specifies the interpreter that ('I have the highest priority to be executed first').'__main__' is the name of the scope in which top-level code executes. A module\u2019s __name__ is set equal to '__main__' when read from standard input, a script, or from an interactive prompt.",
                "Consider:The output for the above is __main__.The above statement is true and prints  direct method . Suppose if they imported this class in another class it doesn't print  direct method  because, while importing, it will set __name__ equal to  first model name .",
                "In simple words:The code you see under if __name__ ==  __main__ : will only get called upon when your Python file is executed as python example1.pyHowever, if you wish to import your Python file example1.py as a module to work with another Python file, say example2.py, the code under if __name__ ==  __main__ : will not run or take any effect.",
                "You can make the file usable as a script as well as an importable module.fibo.py (a module named fibo)Reference: https://docs.python.org/3.5/tutorial/modules.html",
                "The reason foris primarily to avoid the import lock problems that would arise from having code directly imported. You want main() to run if your file was directly invoked (that's the __name__ ==  __main__  case), but if your code was imported then the importer has to enter your code from the true main module to avoid import lock problems.A side-effect is that you automatically sign on to a methodology that supports multiple entry points. You can run your program using main() as the entry point, but you don't have to. While setup.py expects main(), other tools use alternate entry points. For example, to run your file as a gunicorn process, you define an app() function instead of a main(). Just as with setup.py, gunicorn imports your code so you don't want it do do anything while it's being imported (because of the import lock issue).",
                "If you are a beginner, probably the only answer you need right now is that this code is unnecessary for a simple script. It is only useful if you want to be able to import your script (or unpickle etc; see the other answers here for some other non-beginner scenarios).In slightly different words, the if __name__ guard is a mechanism for hiding code from other code. If you don't have a specific reason to hide something, don't: If you don't need to hide some code from import, don't put it behind this guard, and if you do, hide as little as possible.In slightly more detail, let's say you have a simple script fib.py (adapted from this answer):Now, if you simply run python fib.py it works fine. But __name__ will always be  __main__  in this scenario, so the condition is actually unnecessary. The script could be simplified to justNow, you can't import fib with the new version, but if you didn't plan to do that in the first place, this version is actually better, because it's simpler and clearer.If you do want to be able to import fib, the first version is useless, too, because the useful code is in a section which will not run when you import this file (in which case __name__ will not be  __main__ ). The proper design in that case would be to refactor the code so that the useful parts are in a function you can run when you want to after you have imported it.Now, if you import fib, the call to main() will not be executed; but when you run python fib.py, it will.Actually, a better design still would be to isolate the reusable part (the actual calculation) from the user-visible input/output:Now, you can from fib import fibn and call the fibn() function from the code which performs this import.(I called the function fibn() just to make it clearer what is what in this example. In real life, you might call it fib() and do from fib import fib.)Similarly, you could import and call the main function if you wanted to reuse it.Returning to the code in the question, I would similarly move the code from the if into a function as well, so that callers can invoke that function if they want to.This changes the scope of the lock variable; if the surrounding code needs access to it, you will need to make it global (or, perhaps, better, refactor main to return lock, and have the caller capture the value in a local variable of its own).(Unlike in languages like C, the name main has no specific meaning to Python; but it's a common convention to use it as the name of the thing which will be run. You still have to actually explicitly call it, like main(), unlike in C.)",
                "Every module in Python has an attribute called __name__. The value of __name__  attribute is  __main__ when the module is run directly, like python my_module.py. Otherwise (like when you say import my_module) the value of __name__  is the name of the module.Small example to explain in short.We can execute this directly asOutputNow suppose we call the above script from another script:When you execute this,OutputSo, the above is self-explanatory that when you call test from another script, if loop __name__ in test.py will not execute.",
                "This answer is for Java programmers learning Python.\nEvery Java file typically contains one public class. You can use that class in two ways:Call the class from other files. You just have to import it in the calling program.Run the class stand alone, for testing purposes.For the latter case, the class should contain a public static void main() method. In Python this purpose is served by the globally defined label '__main__'.",
                "If this .py file are imported by other .py files, the code under the if statement will not be executed.If this .py are run by python this_py.py under shell, or double clicked in Windows. the code under the if statement will be executed.It is usually written for testing.",
                "We see if __name__ == '__main__': quite often.It checks if a module is being imported or not.In other words, the code within the if block will be executed only when the code runs directly. Here directly means not imported.Let's see what it does using a simple code that prints the name of the module:If we run the code directly via python test.py, the module name is __main__:",
                "If the Python interpreter is running a particular module then the __name__ global variable will have the value  __main__ :When you run this script, it prints:If you import this file, say A to file B, and execute the file B then if __name__ ==  __main__  in file A becomes False, so it prints:",
                "All the answers have pretty much explained the functionality. But I will provide one example of its usage which might help clearing out the concept further.Assume that you have two Python files, a.py and b.py. Now, a.py imports b.py. We run the a.py file, where the import b.py code is executed first. Before the rest of the a.py code runs, the code in the file b.py must run completely.In the b.py code, there is some code that is exclusive to that file b.py and we don't want any other file (other than the b.py file), that has imported the b.py file, to run it.So that is what this line of code checks. If it is the main file (i.e., b.py) running the code, which in this case it is not (a.py is the main file running), then only the code gets executed."
            ]
        },
        {
            "tag": "ternary_conditions",
            "patterns": [
                "Does Python have a ternary conditional operator?",
                "What is a ternary condition?",
                "ternary conditional operator",
                "ternary conditions"
            ],
            "responses": [
                "Yes, it was added in version 2.5. The expression syntax is:First condition is evaluated, then exactly one of either a or b is evaluated and returned based on the Boolean value of condition. If condition evaluates to True, then a is evaluated and returned but b is ignored, or else when b is evaluated and returned but a is ignored.This allows short-circuiting because when condition is true only a is evaluated and b is not evaluated at all, but when condition is false only b is evaluated and a is not evaluated at all.For example:Note that conditionals are an expression, not a statement. This means you can't use statements such as pass, or assignments with = (or  augmented  assignments like +=), within a conditional expression:(In 3.8 and above, the :=  walrus  operator allows simple assignment of values as an expression, which is then compatible with this syntax. But please don't write code like that; it will quickly become very difficult to understand.)Similarly, because it is an expression, the else part is mandatory:You can, however, use conditional expressions to assign a variable like so:Or for example to return a value:Think of the conditional expression as switching between two values. We can use it when we are in a 'one value or another' situation, where we will do the same thing with the result, regardless of whether the condition is met. We use the expression to compute the value, and then do something with it. If you need to do something different depending on the condition, then use a normal if statement instead.Keep in mind that it's frowned upon by some Pythonistas for several reasons:If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, x = 4 if b > 8 else 9 is read aloud as x will be 4 if b is greater than 8 otherwise 9.Official documentation:",
                "You can index into a tuple:test needs to return True or False.\nIt might be safer to always implement it as:or you can use the built-in bool() to assure a Boolean value:",
                "For versions prior to 2.5, there's the trick:It can give wrong results when on_true has a false Boolean value.1Although it does have the benefit of evaluating expressions left to right, which is clearer in my opinion.1. Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?",
                "From the documentation:Conditional expressions (sometimes called a \u201cternary operator\u201d) have the lowest priority of all Python operations.The expression x if C else y first evaluates the condition, C (not x); if C is true, x is evaluated and its value is returned; otherwise, y is evaluated and its value is returned.See PEP 308 for more details about conditional expressions.New since version 2.5.",
                "An operator for a conditional expression in Python was added in 2006 as part of Python Enhancement Proposal 308. Its form differ from common ?: operator and it's:which is equivalent to:Here is an example:Another syntax which can be used (compatible with versions before 2.5):where operands are lazily evaluated.Another way is by indexing a tuple (which isn't consistent with the conditional operator of most other languages):or explicitly constructed dictionary:Another (less reliable), but simpler method is to use and and or operators:however this won't work if x would be False.A possible workaround is to make x and y lists or tuples as in the following:or:If you're working with dictionaries, instead of using a ternary conditional, you can take advantage of get(key, default), for example:Source: ?: in Python at Wikipedia",
                "Unfortunately, thesolution doesn't have short-circuit behaviour; thus both falseValue and trueValue are evaluated regardless of the condition. This could be suboptimal or even buggy (i.e. both trueValue and falseValue could be methods and have side effects).One solution to this would be(execution delayed until the winner is known ;)), but it introduces inconsistency between callable and non-callable objects. In addition, it doesn't solve the case when using properties.And so the story goes - choosing between three mentioned solutions is a trade-off between having the short-circuit feature, using at least Python 2.5 (IMHO, not a problem anymore) and not being prone to  trueValue-evaluates-to-false  errors.",
                "Here I just try to show some important differences in the ternary operator between a couple of programming languages.",
                "For Python 2.5 and newer there is a specific syntax:In older Pythons a ternary operator is not implemented but it's possible to simulate it.Though, there is a potential problem, which if cond evaluates to True and on_true evaluates to False then on_false is returned instead of on_true. If you want this behavior the method is OK, otherwise use this:which can be wrapped by:and used this way:It is compatible with all Python versions.",
                "You might often findbut this leads to a problem when on_true == 0Where you would expect this result for a normal ternary operator:",
                "One of the alternatives to Python's conditional expressionis the following:which has the following nice extension:The shortest alternative remainswhich works because issubclass(bool, int).Careful, though: the alternative tois notbutThis works fine as long as no and yes are to be called with exactly the same parameters. If they are not, like inor inthen a similar alternative either does not exist (1) or is hardly viable (2). (In rare cases, depending on the context, something likecould make sense.)Thanks to Radek Roj\u00edk for his comment",
                "As already answered, yes, there is a ternary operator in Python:In many cases <expression 1> is also used as Boolean evaluated <condition>. Then you can use short-circuit evaluation.One big pro of short-circuit evaluation is the possibility of chaining more than two expressions:When working with functions it is more different in detail:PS: Of course, a short-circuit evaluation is not a ternary operator, but often the ternary is used in cases where the short circuit would be enough. It has a better readability and can be chained.",
                "Simulating the Python ternary operator.For exampleOutput:",
                "Just memorize this pyramid if you have trouble remembering:",
                "The ternary conditional operator simply allows testing a condition in a single line replacing the multiline if-else making the code compact.[on_true] if [expression] else [on_false]Above approach can be written as:",
                "Vinko Vrsalovic's answer is good enough. There is only one more thing:Note that conditionals are an expression, not a statement. This means you can't use assignment statements or pass or other statements within a conditional expressionAfter the walrus operator was introduced in Python 3.8, something changed.gives a = 3 and b is not defined,gives a is not defined and b = 5, andgives c = 5, a is not defined and b = 5.Even if this may be ugly, assignments can be done inside conditional expressions after Python 3.8. Anyway, it is still better to use normal if statement instead in this case.",
                "More a tip than an answer (I don't need to repeat the obvious for the hundredth time), but I sometimes use it as a one-liner shortcut in such constructs:, becomes:Some (many :) may frown upon it as unpythonic (even, Ruby-ish :), but I personally find it more natural - i.e., how you'd express it normally, plus a bit more visually appealing in large blocks of code.",
                "You can do this:Example:This would print  odd  if the number is odd or  even  if the number is even.The result: If condition is true, exp_1 is executed, else exp_2 is executed.Note: 0, None, False, emptylist, and emptyString evaluates as False.And any data other than 0 evaluates to True.If the condition [condition] becomes  True , then expression_1 will be evaluated, but not expression_2.If we  and  something with 0 (zero), the result will always to be false. So in the below statement,The expression exp won't be evaluated at all since  and  with 0 will always evaluate to zero and there is no need to evaluate the expression. This is how the compiler itself works, in all languages.Inthe expression exp won't be evaluated at all since  or  with 1 will always be 1. So it won't bother to evaluate the expression exp since the result will be 1 anyway (compiler optimization methods).But in case ofThe second expression exp2 won't be evaluated since True and exp1 would be True when exp1 isn't false.Similarly inThe expression exp1 won't be evaluated since False is equivalent to writing 0 and doing  and  with 0 would be 0 itself, but after exp1 since  or  is used, it will evaluate the expression exp2 after  or .Note:- This kind of branching using  or  and  and  can only be used when the expression_1 doesn't have a Truth value of False (or 0 or None or emptylist [ ] or emptystring ' '.) since if expression_1 becomes False, then the expression_2 will be evaluated because of the presence  or  between exp_1 and exp_2.In case you still want to make it work for all the cases regardless of what exp_1 and exp_2 truth values are, do this:",
                "Many programming languages derived from C usually have the following syntax of the ternary conditional operator:At first, the Python's benevolent dictator for life (I mean Guido van Rossum, of course) rejected it (as non-Pythonic style), since it's quite hard to understand for people not used to C language. Also, the colon sign : already has many uses in Python. After PEP 308 was approved, Python finally received its own shortcut conditional expression (what we use now):So, firstly it evaluates the condition. If it returns True, expression1 will be evaluated to give the result, otherwise expression2 will be evaluated. Due to lazy evaluation mechanics \u2013 only one expression will be executed.Here are some examples (conditions will be evaluated from left to right):Ternary operators can be chained in series:The following one is the same as previous one:",
                "Yes, Python have a ternary operator, here is the syntax and an example code to demonstrate the same :)",
                "Other answers correctly talk about the Python ternary operator. I would like to complement by mentioning a scenario for which the ternary operator is often used, but for which there is a better idiom. This is the scenario of using a default value.Suppose we want to use option_value with a default value if it is not set:or, if option_value is never set to a falsy value (0,   , etc.), simplyHowever, in this case an ever better solution is simply to write",
                "The syntax for the ternary operator in Python is:[on_true] if [expression] else [on_false]Using that syntax, here is how we would rewrite the code above using Python\u2019s ternary operator:It's still pretty clear, but much shorter. Note that the expression could be any type of expression, including a function call, that returns a value that evaluates to True or False.",
                "Python has a ternary form for assignments; however there may be even a shorter form that people should be aware of.It's very common to need to assign to a variable one value or another depending on a condition.^ This is the long form for doing such assignments.Below is the ternary form. But this isn't the most succinct way - see the last example.With Python, you can simply use or for alternative assignments.The above works since li1 is None and the interpreter treats that as False in logic expressions. The interpreter then moves on and evaluates the second expression, which is not None and it's not an empty list - so it gets assigned to a.This also works with empty lists. For instance, if you want to assign a whichever list has items.Knowing this, you can simply such assignments whenever you encounter them. This also works with strings and other iterables. You could assign a whichever string isn't empty.I always liked the C ternary syntax, but Python takes it a step further!I understand that some may say this isn't a good stylistic choice, because it relies on mechanics that aren't immediately apparent to all developers. I personally disagree with that viewpoint. Python is a syntax-rich language with lots of idiomatic tricks that aren't immediately apparent to the dabbler. But the more you learn and understand the mechanics of the underlying system, the more you appreciate it.",
                "Pythonic way of doing the things:But there always exists a different way of doing a ternary condition too:",
                "There are multiple ways. The simplest one is to use the condition inside the  print  method.You can useWhich is equivalent to:In this way, more than two statements are also possible to print. For example:can be written as:",
                "It's different from C-syntax-like programming languages (which is condition ? value_if_true : value_if_falseIn Python, it goes like this: value_if_true if condition else value_if_falseExample: even_or_odd =  even  if x % 2 == 0 else  odd ",
                "I find the default Python syntax val = a if cond else b cumbersome, so sometimes I do this:Of course, it has the downside of always evaluating both sides (a and b), but the syntax is way clearer to me."
            ]
        },
        {
            "tag": "metaclasses",
            "patterns": [
                "What are metaclasses in Python?",
                "metaclasses",
                "metaclass"
            ],
            "responses": [
                "Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.In most languages, classes are just pieces of code that describe how to produce an object. That's kinda true in Python too:But classes are more than that in Python. Classes are objects too.Yes, objects.As soon as you use the keyword class, Python executes it and creates\nan object. The instructioncreates in memory an object with the name ObjectCreator.This object (the class) is itself capable of creating objects (the instances),\nand this is why it's a class.But still, it's an object, and therefore:e.g.:Since classes are objects, you can create them on the fly, like any object.First, you can create a class in a function using class:But it's not so dynamic, since you still have to write the whole class yourself.Since classes are objects, they must be generated by something.When you use the class keyword, Python creates this object automatically. But as\nwith most things in Python, it gives you a way to do it manually.Remember the function type? The good old function that lets you know what\ntype an object is:Well, type has also a completely different ability: it can create classes on the fly. type can take the description of a class as parameters,\nand return a class.(I  know, it's silly that the same function can have two completely different uses according to the parameters you pass to it. It's an issue due to backward\ncompatibility in Python)type works this way:Where:e.g.:can be created manually this way:You'll notice that we use MyShinyClass as the name of the class\nand as the variable to hold the class reference. They can be different,\nbut there is no reason to complicate things.type accepts a dictionary to define the attributes of the class. So:Can be translated to:And used as a normal class:And of course, you can inherit from it, so:would be:Eventually, you'll want to add methods to your class. Just define a function\nwith the proper signature and assign it as an attribute.And you can add even more methods after you dynamically create the class, just like adding methods to a normally created class object.You see where we are going: in Python, classes are objects, and you can create a class on the fly, dynamically.This is what Python does when you use the keyword class, and it does so by using a metaclass.Metaclasses are the 'stuff' that creates classes.You define classes in order to create objects, right?But we learned that Python classes are objects.Well, metaclasses are what create these objects. They are the classes' classes,\nyou can picture them this way:You've seen that type lets you do something like this:It's because the function type is in fact a metaclass. type is the\nmetaclass Python uses to create all classes behind the scenes.Now you wonder  why the heck is it written in lowercase, and not Type? Well, I guess it's a matter of consistency with str, the class that creates\nstrings objects, and int the class that creates integer objects. type is\njust the class that creates class objects.You see that by checking the __class__ attribute.Everything, and I mean everything, is an object in Python. That includes integers,\nstrings, functions and classes. All of them are objects. And all of them have\nbeen created from a class:Now, what is the __class__ of any __class__ ?So, a metaclass is just the stuff that creates class objects.You can call it a 'class factory' if you wish.type is the built-in metaclass Python uses, but of course, you can create your\nown metaclass.In Python 2, you can add a __metaclass__ attribute when you write a class (see next section for the Python 3 syntax):If you do so, Python will use the metaclass to create the class Foo.Careful, it's tricky.You write class Foo(object) first, but the class object Foo is not created\nin memory yet.Python will look for __metaclass__ in the class definition. If it finds it,\nit will use it to create the object class Foo. If it doesn't, it will use\ntype to create the class.Read that several times.When you do:Python does the following:Is there a __metaclass__ attribute in Foo?If yes, create in-memory a class object (I said a class object, stay with me here), with the name Foo by using what is in __metaclass__.If Python can't find __metaclass__, it will look for a __metaclass__ at the MODULE level, and try to do the same (but only for classes that don't inherit anything, basically old-style classes).Then if it can't find any __metaclass__ at all, it will use the Bar's (the first parent) own metaclass (which might be the default type) to create the class object.Be careful here that the __metaclass__ attribute will not be inherited, the metaclass of the parent (Bar.__class__) will be. If Bar used a __metaclass__ attribute that created Bar with type() (and not type.__new__()), the subclasses will not inherit that behavior.Now the big question is, what can you put in __metaclass__?The answer is something that can create a class.And what can create a class? type, or anything that subclasses or uses it.The syntax to set the metaclass has been changed in Python 3:i.e. the __metaclass__ attribute is no longer used, in favor of a keyword argument in the list of base classes.The behavior of metaclasses however stays largely the same.One thing added to metaclasses in Python 3 is that you can also pass attributes as keyword-arguments into a metaclass, like so:Read the section below for how Python handles this.The main purpose of a metaclass is to change the class automatically,\nwhen it's created.You usually do this for APIs, where you want to create classes matching the\ncurrent context.Imagine a stupid example, where you decide that all classes in your module\nshould have their attributes written in uppercase. There are several ways to\ndo this, but one way is to set __metaclass__ at the module level.This way, all classes of this module will be created using this metaclass,\nand we just have to tell the metaclass to turn all attributes to uppercase.Luckily, __metaclass__ can actually be any callable, it doesn't need to be a\nformal class (I know, something with 'class' in its name doesn't need to be\na class, go figure... but it's helpful).So we will start with a simple example, by using a function.Let's check:Now, let's do exactly the same, but using a real class for a metaclass:Let's rewrite the above, but with shorter and more realistic variable names now that we know what they mean:You may have noticed the extra argument cls. There is\nnothing special about it: __new__ always receives the class it's defined in, as the first parameter. Just like you have self for ordinary methods which receive the instance as the first parameter, or the defining class for class methods.But this is not proper OOP. We are calling type directly and we aren't overriding or calling the parent's __new__. Let's do that instead:We can make it even cleaner by using super, which will ease inheritance (because yes, you can have metaclasses, inheriting from metaclasses, inheriting from type):Oh, and in Python 3 if you do this call with keyword arguments, like this:It translates to this in the metaclass to use it:That's it. There is really nothing more about metaclasses.The reason behind the complexity of the code using metaclasses is not because\nof metaclasses, it's because you usually use metaclasses to do twisted stuff\nrelying on introspection, manipulating inheritance, vars such as __dict__, etc.Indeed, metaclasses are especially useful to do black magic, and therefore\ncomplicated stuff. But by themselves, they are simple:Since __metaclass__ can accept any callable, why would you use a class\nsince it's obviously more complicated?There are several reasons to do so:Now the big question. Why would you use some obscure error-prone feature?Well, usually you don't:Metaclasses are deeper magic that\n99% of users should never worry about it.\nIf you wonder whether you need them,\nyou don't (the people who actually\nneed them know with certainty that\nthey need them, and don't need an\nexplanation about why).Python Guru Tim PetersThe main use case for a metaclass is creating an API. A typical example of this is the Django ORM. It allows you to define something like this:But if you do this:It won't return an IntegerField object. It will return an int, and can even take it directly from the database.This is possible because models.Model defines __metaclass__ and\nit uses some magic that will turn the Person you just defined with simple statements\ninto a complex hook to a database field.Django makes something complex look simple by exposing a simple API\nand using metaclasses, recreating code from this API to do the real job\nbehind the scenes.First, you know that classes are objects that can create instances.Well, in fact, classes are themselves instances. Of metaclasses.Everything is an object in Python, and they are all either instance of classes\nor instances of metaclasses.Except for type.type is actually its own metaclass. This is not something you could\nreproduce in pure Python, and is done by cheating a little bit at the implementation\nlevel.Secondly, metaclasses are complicated. You may not want to use them for\nvery simple class alterations. You can change classes by using two different techniques:99% of the time you need class alteration, you are better off using these.But 98% of the time, you don't need class alteration at all.",
                "A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.While in Python you can use arbitrary callables for metaclasses (like Jerub shows), the better approach is to make it an actual class itself. type is the usual metaclass in Python. type is itself a class, and it is its own type. You won't be able to recreate something like type purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass type.A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal __init__ and __new__ methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry or replace the class with something else entirely.When the class statement is executed, Python first executes the body of the class statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the __metaclass__ attribute of the class-to-be (if any) or the __metaclass__ global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.However, metaclasses actually define the type of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. type.__subclasses__() is an example of a method on the type metaclass. You can also define the normal 'magic' methods, like __add__, __iter__ and __getattr__, to implement or change how the class behaves.Here's an aggregated example of the bits and pieces:",
                "Note, this answer is for Python 2.x as it was written in 2008, metaclasses are slightly different in 3.x.Metaclasses are the secret sauce that make 'class' work. The default metaclass for a new style object is called 'type'.Metaclasses take 3 args. 'name', 'bases' and 'dict'Here is where the secret starts. Look for where name, bases and the dict come from in this example class definition.Lets define a metaclass that will demonstrate how 'class:' calls it.And now, an example that actually means something, this will automatically make the variables in the list  attributes  set on the class, and set to None.Note that the magic behaviour that Initialised gains by having the metaclass init_attributes is not passed onto a subclass of Initialised.Here is an even more concrete example, showing how you can subclass 'type' to make a metaclass that performs an action when the class is created. This is quite tricky:",
                "Others have explained how metaclasses work and how they fit into the Python type system. Here's an example of what they can be used for. In a testing framework I wrote, I wanted to keep track of the order in which classes were defined, so that I could later instantiate them in this order. I found it easiest to do this using a metaclass.Anything that's a subclass of MyType then gets a class attribute _order that records the order in which the classes were defined.",
                "One use for metaclasses is adding new properties and methods to an instance automatically.For example, if you look at Django models, their definition looks a bit confusing. It looks as if you are only defining class properties:However, at runtime the Person objects are filled with all sorts of useful methods. See the source for some amazing metaclassery.",
                "I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already.http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html (archived at https://web.archive.org/web/20080206005253/http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html)In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior.I've never written one myself, but I think one of the nicest uses of metaclasses can be seen in the Django framework. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself.The thing that's left to say is: If you don't know what metaclasses are, the probability that you will not need them is 99%.",
                "TLDR: A metaclass instantiates and defines behavior for a class just like a class instantiates and defines behavior for an instance.Pseudocode:The above should look familiar. Well, where does Class come from? It's an instance of a metaclass (also pseudocode):In real code, we can pass the default metaclass, type, everything we need to instantiate a class and we get a class:A class is to an instance as a metaclass is to a class.When we instantiate an object, we get an instance:Likewise, when we define a class explicitly with the default metaclass, type, we instantiate it:Put another way, a class is an instance of a metaclass:Put a third way, a metaclass is a class's class.When you write a class definition and Python executes it, it uses a metaclass to instantiate the class object (which will, in turn, be used to instantiate instances of that class).Just as we can use class definitions to change how custom object instances behave, we can use a metaclass class definition to change the way a class object behaves.What can they be used for? From the docs:The potential uses for metaclasses are boundless. Some ideas that have been explored include logging, interface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource locking/synchronization.Nevertheless, it is usually encouraged for users to avoid using metaclasses unless absolutely necessary.When you write a class definition, for example, like this,You instantiate a class object.It is the same as functionally calling type with the appropriate arguments and assigning the result to a variable of that name:Note, some things automatically get added to the __dict__, i.e., the namespace:The metaclass of the object we created, in both cases, is type.(A side-note on the contents of the class __dict__: __module__ is there because classes must know where they are defined, and  __dict__ and __weakref__ are there because we don't define __slots__ - if we define __slots__ we'll save a bit of space in the instances, as we can disallow __dict__ and __weakref__ by excluding them. For example:... but I digress.)Here's the default __repr__ of classes:One of the most valuable things we can do by default in writing a Python object is to provide it with a good __repr__. When we call help(repr) we learn that there's a good test for a __repr__ that also requires a test for equality - obj == eval(repr(obj)). The following simple implementation of __repr__ and __eq__ for class instances of our type class provides us with a demonstration that may improve on the default __repr__ of classes:So now when we create an object with this metaclass, the __repr__ echoed on the command line provides a much less ugly sight than the default:With a nice __repr__ defined for the class instance, we have a stronger ability to debug our code. However, much further checking with eval(repr(Class)) is unlikely (as functions would be rather impossible to eval from their default __repr__'s).If, for example, we want to know in what order a class's methods are created in, we could provide an ordered dict as the namespace of the class. We would do this with __prepare__ which returns the namespace dict for the class if it is implemented in Python 3:And usage:And now we have a record of the order in which these methods (and other class attributes) were created:Note, this example was adapted from the documentation - the new enum in the standard library does this.So what we did was instantiate a metaclass by creating a class. We can also treat the metaclass as we would any other class. It has a method resolution order:And it has approximately the correct repr (which we can no longer eval unless we can find a way to represent our functions.):",
                "Python 3 updateThere are (at this point) two key methods in a metaclass:__prepare__ lets you supply a custom mapping (such as an OrderedDict) to be used as the namespace while the class is being created.  You must return an instance of whatever namespace you choose.  If you don't implement __prepare__ a normal dict is used.__new__ is responsible for the actual creation/modification of the final class.A bare-bones, do-nothing-extra metaclass would like:A simple example:Say you want some simple validation code to run on your attributes -- like it must always be an int or a str.  Without a metaclass, your class would look something like:As you can see, you have to repeat the name of the attribute twice.  This makes typos possible along with irritating bugs.A simple metaclass can address that problem:This is what the metaclass would look like (not using __prepare__ since it is not needed):A sample run of:produces:Note:  This example is simple enough it could have also been accomplished with a class decorator, but presumably an actual metaclass would be doing much more.The 'ValidateType' class for reference:",
                "If you've done Python programming for more than a few months you'll eventually stumble upon code that looks like this:The latter is possible when you implement the __call__() magic method on the class.The __call__() method is invoked when an instance of a class is used as a callable. But as we've seen from previous answers a class itself is an instance of a metaclass, so when we use the class as a callable (i.e. when we create an instance of it) we're actually calling its metaclass' __call__() method. At this point most Python programmers are a bit confused because they've been told that when creating an instance like this instance = SomeClass() you're calling its __init__() method. Some who've dug a bit deeper know that before __init__() there's __new__(). Well, today another layer of truth is being revealed, before __new__() there's the metaclass' __call__().Let's study the method call chain from specifically the perspective of creating an instance of a class.This is a metaclass that logs exactly the moment before an instance is created and the moment it's about to return it.This is a class that uses that metaclassAnd now let's create an instance of Class_1Observe that the code above doesn't actually do anything more than logging the tasks. Each method delegates the actual work to its parent's implementation, thus keeping the default behavior. Since type is Meta_1's parent class (type being the default parent metaclass) and considering the ordering sequence of the output above, we now have a clue as to what would be the pseudo implementation of type.__call__():We can see that the metaclass' __call__() method is the one that's called first. It then delegates creation of the instance to the class's __new__() method and initialization to the instance's __init__(). It's also the one that ultimately returns the instance.From the above it stems that the metaclass' __call__() is also given the opportunity to decide whether or not a call to Class_1.__new__() or Class_1.__init__() will eventually be made. Over the course of its execution it could actually return an object that hasn't been touched by either of these methods. Take for example this approach to the singleton pattern:Let's observe what happens when repeatedly trying to create an object of type Class_2",
                "A metaclass is a class that tells how (some) other class should be created.This is a case where I saw metaclass as a solution to my problem:\nI had a really complicated problem, that probably could have been solved differently, but I chose to solve it using a metaclass.  Because of the complexity, it is one of the few modules I have written where the comments in the module surpass the amount of code that has been written.  Here it is...",
                "The type(obj) function gets you the type of an object.The type() of a class is its metaclass.To use a metaclass:type is its own metaclass. The class of a class is a metaclass-- the body of a class is the arguments passed to the metaclass that is used to construct the class.Here you can read about how to use metaclasses to customize class construction.",
                "type is actually a metaclass -- a class that creates another classes.\nMost metaclass are the subclasses of type. The metaclass receives the new class as its first argument and provide access to class object with details as mentioned below:Note:Notice that the class was not instantiated at any time; the simple act of creating the class triggered execution of the metaclass.",
                "Python classes are themselves objects - as in instance - of their meta-class.The default metaclass, which is applied when when you determine classes as:meta class are used to apply some rule to an entire set of classes. For example, suppose you're building an ORM to access a database, and you want records from each table to be of a class mapped to that table (based on fields, business rules, etc..,), a possible use of metaclass is for instance, connection pool logic, which is share by all classes of record from all tables. Another use is logic to to support foreign keys, which involves multiple classes of records.when you define metaclass, you subclass type, and can overrided the following magic methods to insert your logic.anyhow, those two are the most commonly used hooks. metaclassing is powerful, and above is nowhere near and exhaustive list of uses for metaclassing.",
                "The type() function can return the type of an object or create a new type,for example, we can create a Hi class with the type() function and do not  need to use this way with class Hi(object):In addition to using type() to create classes dynamically, you can control creation behavior of class and use metaclass.According to the Python object model, the class is the object, so the class must be an instance of another certain class.\nBy default, a Python class is instance of the type class. That is, type is metaclass of most of the built-in classes and metaclass of user-defined classes.Magic will take effect when we passed keyword arguments in metaclass, it indicates the Python interpreter to create the CustomList through ListMetaclass. new (), at this point, we can modify the class definition, for example, and add a new method and then return the revised definition.",
                "In addition to the published answers I can say that a metaclass defines the behaviour for a class. So, you can explicitly set your metaclass. Whenever Python gets a keyword class then it starts searching for the metaclass. If it's not found \u2013 the default metaclass type is used to create the class's object. Using the __metaclass__ attribute, you can set metaclass of your class:It'll produce the output like this:And, of course, you can create your own metaclass to define the behaviour of any class that are created using your class.For doing that, your default metaclass type class must be inherited as this is the main metaclass:The output will be:",
                "Note that in python 3.6 a new dunder method __init_subclass__(cls, **kwargs) was introduced to replace a lot of common use cases for metaclasses. Is is called when a subclass of the defining class is created. See python docs.",
                "Here's another example of what it can be used for:The metaclass is powerful, there are many things (such as monkey magic) you can do with it, but be careful this may only be known to you.",
                "The top answer is correct.But readers may be coming here searching answers about similarly named inner classes. They are present in popular libraries, such as Django and WTForms.As DavidW points out in the comments beneath this answer, these are library-specific features and are not to be confused with the advanced, unrelated Python language feature with a similar name.Rather, these are namespaces within classes' dicts. They are constructed using inner classes for sake of readability.In this example special field, abstract is visibly separate from fields of Author model.Another example is from the documentation for WTForms:This syntax does not get special treatment in the python programming language. Meta is not a keyword here, and does not trigger metaclass behavior. Rather, third-party library code in packages like Django and WTForms reads this property in the constructors of certain classes, and elsewhere.The presence of these declarations modifies the behavior of the classes that have these declarations. For example, WTForms reads self.Meta.csrf to determine if the form needs a csrf field.",
                "In object-oriented programming, a metaclass is a class whose instances are classes. Just as an ordinary class defines the behavior of certain objects, a metaclass defines the behavior of certain class and their instances\nThe term metaclass simply means something used to create classes. In other words, it is the class of a class. The metaclass is used to create the class so like the object being an instance of a class, a class is an instance of a metaclass. In python classes are also considered objects.",
                "A class, in Python, is an object, and just like any other object, it is an instance of  something . This  something  is what is termed as a Metaclass. This metaclass is a special type of class that creates other class's objects. Hence, metaclass is responsible for making new classes. This allows the programmer to customize the way classes are generated.To create a metaclass, overriding of new() and init() methods is usually done. new() can be overridden to change the way objects are created, while init() can be overridden to change the way of initializing the object. Metaclass can be created by a number of ways. One of the ways is to use type() function. type() function, when called with 3 parameters, creates a metaclass. The parameters are :-Another way of creating a metaclass comprises of 'metaclass' keyword. Define the metaclass as a simple class. In the parameters of inherited class, pass metaclass=metaclass_nameMetaclass can be specifically used in the following situations :-",
                "I saw an interesting use case for metaclasses in a package called classutilities. It checks if all class variables are in upper case format (it is convenient to have unified logic for configuration classes), and checks if there are no instance level methods in class.\nAnother interesting example for metaclases was deactivation of unittests based on complex conditions (checking values of multiple environmental variables).",
                "In Python, a metaclass is a subclass of a subclass that determines how a subclass behaves. A class is an instance of another metaclass. In Python, a class specifies how the class's instance will behave.Since metaclasses are in charge of class generation, you can\u00a0write your own custom metaclasses to change how classes are created by performing additional actions or injecting code. Custom metaclasses aren't always important, but they can be.",
                "look this:In other words, when an object was not created (type of object), we looking MetaClass."
            ]
        },
        {
            "tag": "file_exceptions",
            "patterns": [
                "How do I check whether a file exists without exceptions?",
                "file exceptions",
                "Check if file exists",
                "Check for file exceptions"
            ],
            "responses": [
                "If the reason you're checking is so you can do something like if file_exists: open_it(), it's safer to use a try around the attempt to open it. Checking and then opening risks the file being deleted or moved or something between when you check and when you try to open it.If you're not planning to open the file immediately, you can use os.path.isfileReturn True if path is an existing regular file. This follows symbolic links, so both islink() and isfile() can be true for the same path.if you need to be sure it's a file.Starting with Python 3.4, the pathlib module offers an object-oriented approach (backported to pathlib2 in Python 2.7):To check a directory, do:To check whether a Path object exists independently of whether is it a file or directory, use exists():You can also use resolve(strict=True) in a try block:",
                "Use os.path.exists to check both files and directories:Use os.path.isfile to check only files (note: follows symbolic links):",
                "Unlike isfile(), exists() will return True for directories. So depending on if you want only plain files or also directories, you'll use isfile() or exists(). Here is some simple REPL output:",
                "Use os.path.isfile() with os.access():",
                "Although almost every possible way has been listed in (at least one of) the existing answers (e.g. Python 3.4 specific stuff was added), I'll try to group everything together.Note: every piece of Python standard library code that I'm going to post, belongs to version 3.5.3.Problem statement:Check file (arguable: also folder ( special  file) ?) existenceDon't use try / except / else / finally blocksPossible solutions:Also check other function family members like os.path.isfile, os.path.isdir, os.path.lexists for slightly different behaviors:Return True if path refers to an existing path or an open file descriptor. Returns False for broken symbolic links. On some platforms, this function may return False if permission is not granted to execute os.stat() on the requested file, even if the path physically exists.All good, but if following the import tree:os.path - posixpath.py (ntpath.py)genericpath.py - line ~20+it's just a try / except block around [Python.Docs]: os.stat(path, *, dir_fd=None, follow_symlinks=True). So, your code is try / except free, but lower in the framestack there's (at least) one such block. This also applies to other functions (including os.path.isfile).It's a fancier (and more [Wiktionary]: Pythonic) way of handling paths, butUnder the hood, it does exactly the same thing (pathlib.py - line ~1330):Either:Create one:And its usage - I'll replicate the os.path.isfile behavior (note that this is just for demonstrating purposes, do not attempt to write such code for production):Use [Python.Docs]: contextlib.suppress(*exceptions) - which was specifically designed for selectively suppressing exceptionsBut, they seem to be wrappers over try / except / else / finally blocks, as [Python.Docs]: Compound statements - The with statement states:This allows common try...except...finally usage patterns to be encapsulated for convenient reuse.Search the results for matching item(s):[Python.Docs]: os.listdir(path='.') (or [Python.Docs]: os.scandir(path='.') on Python v3.5+, backport: [PyPI]: scandir)Under the hood, both use:Nix: [Man7]: OPENDIR(3) / [Man7]: READDIR(3) / [Man7]: CLOSEDIR(3)Win: [MS.Learn]: FindFirstFileW function (fileapi.h) / [MS.Learn]: FindNextFileW function (fileapi.h) / [MS.Learn]: FindClose function (fileapi.h)via [GitHub]: python/cpython - (main) cpython/Modules/posixmodule.cUsing scandir() instead of listdir() can significantly increase the performance of code that also needs file type or file attribute information, because os.DirEntry objects expose this information if the operating system provides it when scanning a directory. All os.DirEntry methods may perform a system call, but is_dir() and is_file() usually only require a system call for symbolic links; os.DirEntry.stat() always requires a system call on Unix, but only requires one for symbolic links on Windows.[Python.Docs]: os.walk(top, topdown=True, onerror=None, followlinks=False)[Python.Docs]: glob.iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False) (or its predecessor: glob.glob)Since these iterate over folders, (in most of the cases) they are inefficient for our problem (there are exceptions, like non wildcarded globbing - as @ShadowRanger pointed out), so I'm not going to insist on them. Not to mention that in some cases, filename processing might be required.Its behavior is close to os.path.exists (actually it's wider, mainly because of the 2nd argument).User permissions might restrict the file  visibility  as the doc states:... test if the invoking user has the specified access to path. mode should be F_OK to test the existence of path...Security considerations:Using access() to check if a user is authorized to e.g. open a file before actually doing so using open() creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it.Since I also work in C, I use this method as well because under the hood, it calls native APIs (again, via  ${PYTHON_SRC_DIR}/Modules/posixmodule.c ), but it also opens a gate for possible user errors, and it's not as Pythonic as other variants. So, don't use it unless you know what you're doing:Nix: [Man7]: ACCESS(2)Warning: Using these calls to check if a user is authorized to, for example, open a file before actually doing so using open(2) creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. For this reason, the use of this system call should be avoided.Win: [MS.Learn]: GetFileAttributesW function (fileapi.h)As seen, this approach is highly discouraged (especially on Nix).Note: calling native APIs is also possible via [Python.Docs]: ctypes - A foreign function library for Python, but in most cases it's more complicated. Before working with CTypes, check [SO]: C function called from Python via ctypes returns incorrect value (@CristiFati's answer) out.(Win specific): since vcruntime###.dll (msvcr###.dll for older VStudio versions - I'm going to refer to it as UCRT) exports a [MS.Learn]: _access, _waccess function family as well, here's an example (note that the recommended [Python.Docs]: msvcrt - Useful routines from the MS VC++ runtime doesn't export them):Notes:Although it's not a good practice, I'm using os.F_OK in the call, but that's just for clarity (its value is 0)I'm using _waccess so that the same code works on Python 3 and Python 2 (in spite of [Wikipedia]: Unicode related differences between them - [SO]: Passing utf-16 string to a Windows function (@CristiFati's answer))Although this targets a very specific area, it was not mentioned in any of the previous answersThe Linux (Ubuntu ([Wikipedia]: Ubuntu version history) 16 x86_64 (pc064)) counterpart as well:Notes:Instead hardcoding libc.so (LibC)'s path ( /lib/x86_64-linux-gnu/libc.so.6 ) which may (and most likely, will) vary across systems, None (or the empty string) can be passed to CDLL constructor (ctypes.CDLL(None).access(b /tmp , os.F_OK)). According to [Man7]: DLOPEN(3):If filename is NULL, then the returned handle is for the main\nprogram.  When given to dlsym(3), this handle causes a search for a\nsymbol in the main program, followed by all shared objects loaded at\nprogram startup, and then all shared objects loaded by dlopen() with\nthe flag RTLD_GLOBAL.Main (current) program (python) is linked against LibC, so its symbols (including access) will be loadedThis has to be handled with care, since functions like main, Py_Main and (all the) others are available; calling them could have disastrous effects (on the current program)This doesn't also apply to Windows (but that's not such a big deal, since UCRT is located in  %SystemRoot%\\System32  which is in %PATH% by default). I wanted to take things further and replicate this behavior on Windows (and submit a patch), but as it turns out, [MS.Learn]: GetProcAddress function (libloaderapi.h) only  sees  exported symbols, so unless someone declares the functions in the main executable as __declspec(dllexport) (why on Earth the common person would do that?), the main program is loadable, but it is pretty much unusableMost likely, will rely on one of the ways above (maybe with slight customizations). One example would be (again, Win specific) [GitHub]: mhammond/pywin32 - Python for Windows (pywin32) Extensions, which is a Python wrapper over WinAPIs.But, since this is more like a workaround, I'm stopping here.I consider this a (lame) workaround (gainarie): use Python as a wrapper to execute shell commands:Win:Nix ([Wikipedia]: Unix-like) - Ubuntu:Do use try / except / else / finally blocks, because they can prevent you running into a series of nasty problemsA possible counterexample that I can think of, is performance: such blocks are costly, so try not to place them in code that it's supposed to run hundreds of thousands times per second (but since (in most cases) it involves disk access, it won't be the case)",
                "Python 3.4+ has an object-oriented path module: pathlib.  Using this new module, you can check whether a file exists like this:You can (and usually should) still use a try/except block when opening files:The pathlib module has lots of cool stuff in it: convenient globbing, checking file's owner, easier path joining, etc.  It's worth checking out.  If you're on an older Python (version 2.6 or later), you can still install pathlib with pip:Then import it as follows:",
                "This is the simplest way to check if a file exists. Just because the file existed when you checked doesn't guarantee that it will be there when you need to open it.",
                "Now available since Python 3.4, import and instantiate a Path object with the file name, and check the is_file method (note that this returns True for symlinks pointing to regular files as well):If you're on Python 2, you can backport the pathlib module from pypi, pathlib2, or otherwise check isfile from the os.path module:Now the above is probably the best pragmatic direct answer here, but there's the possibility of a race condition (depending on what you're trying to accomplish), and the fact that the underlying implementation uses a try, but Python uses try everywhere in its implementation.Because Python uses try everywhere, there's really no reason to avoid an implementation that uses it.But the rest of this answer attempts to consider these caveats.Available since Python 3.4, use the new Path object in pathlib. Note that .exists is not quite right, because directories are not files (except in the unix sense that everything is a file).So we need to use is_file:Here's the help on is_file:So let's get a file that we know is a file:By default, NamedTemporaryFile deletes the file when closed (and will automatically close when no more references exist to it).If you dig into the implementation, though, you'll see that is_file uses try:We like try because it avoids race conditions. With try, you simply attempt to read your file, expecting it to be there, and if not, you catch the exception and perform whatever fallback behavior makes sense.If you want to check that a file exists before you attempt to read it, and you might be deleting it and then you might be using multiple threads or processes, or another program knows about that file and could delete it - you risk the chance of a race condition if you check it exists, because you are then racing to open it before its condition (its existence) changes.Race conditions are very hard to debug because there's a very small window in which they can cause your program to fail.But if this is your motivation, you can get the value of a try statement by using the suppress context manager.Python 3.4 gives us the suppress context manager (previously the ignore context manager), which does semantically exactly the same thing in fewer lines, while also (at least superficially) meeting the original ask to avoid a try statement:Usage:For earlier Pythons, you could roll your own suppress, but without a try will be more verbose than with. I do believe this actually is the only answer that doesn't use try at any level in the Python that can be applied to prior to Python 3.4 because it uses a context manager instead:Perhaps easier with a try:isfilefrom the docs:os.path.isfile(path)Return True if path is an existing regular file. This follows symbolic\n  links, so both islink() and isfile() can be true for the same path.But if you examine the source of this function, you'll see it actually does use a try statement:All it's doing is using the given path to see if it can get stats on it,  catching OSError and then checking if it's a file if it didn't raise the exception.If you intend to do something with the file, I would suggest directly attempting it with a try-except to avoid a race condition:os.accessAvailable for Unix and Windows is os.access, but to use you must pass flags, and it does not differentiate between files and directories. This is more used to test if the real invoking user has access in an elevated privilege environment:It also suffers from the same race condition problems as isfile. From the docs:Note:\n  Using access() to check if a user is authorized to e.g. open a file\n  before actually doing so using open() creates a security hole, because\n  the user might exploit the short time interval between checking and\n  opening the file to manipulate it. It\u2019s preferable to use EAFP\n  techniques. For example:is better written as:Avoid using os.access. It is a low level function that has more opportunities for user error than the higher level objects and functions discussed above.Another answer says this about os.access:Personally, I prefer this one because under the hood, it calls native APIs (via  ${PYTHON_SRC_DIR}/Modules/posixmodule.c ), but it also opens a gate for possible user errors, and it's not as Pythonic as other variants:This answer says it prefers a non-Pythonic, error-prone method, with no justification. It seems to encourage users to use low-level APIs without understanding them.It also creates a context manager which, by unconditionally returning True, allows all Exceptions (including KeyboardInterrupt and SystemExit!) to pass silently, which is a good way to hide bugs.This seems to encourage users to adopt poor practices.",
                "Prefer the try statement. It's considered better style and avoids race conditions.Don't take my word for it. There's plenty of support for this theory. Here's a couple:",
                "Use:Importing os makes it easier to navigate and perform standard actions with your operating system.For reference, also see How do I check whether a file exists without exceptions?.If you need high-level operations, use shutil.",
                "Testing for files and folders with os.path.isfile(), os.path.isdir() and os.path.exists()Assuming that the  path  is a valid path, this table shows what is returned by each function for files and folders:You can also test if a file is a certain type of file using os.path.splitext() to get the extension (if you don't already know it)",
                "The answer is: use the pathlib modulePathlib is probably the most modern and convenient way for almost all of the file operations. For the existence of a file or a folder a single line of code is enough. If file is not exists, it will not throw any exception.The pathlib module was introduced in Python 3.4, so you need to have Python 3.4+. This library makes your life much easier while working with files and folders, and it is pretty to use. Here is more documentation about it: pathlib \u2014 Object-oriented filesystem paths.BTW, if you are going to reuse the path, then it is better to assign it to a variable.So it will become:",
                "In 2016 the best way is still using os.path.isfile:Or in Python 3 you can use pathlib:",
                "It doesn't seem like there's a meaningful functional difference between try/except and isfile(), so you should use which one makes sense.If you want to read a file, if it exists, doBut if you just wanted to rename a file if it exists, and therefore don't need to open it, doIf you want to write to a file, if it doesn't exist, doIf you need file locking, that's a different matter.",
                "You could try this (safer):The ouput would be:([Errno 2] No such file or directory:\n  'whatever.txt')Then, depending on the result, your program can just keep running from there or you can code to stop it if you want.",
                "Date: 2017-12-04Every possible solution has been listed in other answers.An intuitive and arguable way to check if a file exists is the following:I made an exhaustive cheat sheet for your reference:",
                "Although I always recommend using try and except statements, here are a few possibilities for you (my personal favourite is using os.access):Try opening the file:Opening the file will always verify the existence of the file. You can make a function just like so:If it's False, it will stop execution with an unhanded IOError\nor OSError in later versions of Python. To catch the exception,\nyou have to use a try except clause. Of course, you can always\nuse a try except` statement like so (thanks to hsandt\nfor making me think):Use os.path.exists(path):This will check the existence of what you specify. However, it checks for files and directories so beware about how you use it.Use os.access(path, mode):This will check whether you have access to the file. It will check for permissions. Based on the os.py documentation, typing in os.F_OK, it will check the existence of the path. However, using this will create a security hole, as someone can attack your file using the time between checking the permissions and opening the file. You should instead go directly to opening the file instead of checking its permissions. (EAFP vs LBYP). If you're not going to open the file afterwards, and only checking its existence, then you can use this.Anyway, here:I should also mention that there are two ways that you will not be able to verify the existence of a file. Either the issue will be permission denied or no such file or directory. If you catch an IOError, set the IOError as e (like my first option), and then type in print(e.args) so that you can hopefully determine your issue. I hope it helps! :)",
                "If the file is for opening you could use one of the following techniques:Note: This finds either a file or a directory with the given name.",
                "Additionally, os.access():Being R_OK, W_OK, and X_OK the flags to test for permissions (doc).",
                "Raising exceptions is considered to be an acceptable, and Pythonic,\napproach for flow control in your program. Consider handling missing\nfiles with IOErrors. In this situation, an IOError exception will be\nraised if the file exists but the user does not have read permissions.Source: Using Python: How To Check If A File Exists",
                "If you imported NumPy already for other purposes then there is no need to import other libraries like pathlib, os, paths, etc.This will return true or false based on its existence.",
                "You can follow these three ways:Note 1: The os.path.isfile used only for filesNote 2: The os.path.exists is used for both files and directories",
                "You can write Brian's suggestion without the try:.suppress is part of Python 3.4. In older releases you can quickly write your own suppress:",
                "Adding one more slight variation which isn't exactly reflected in the other answers.This will handle the case of the file_path being None or empty string.Adding a variant based on suggestion from ShahbazAdding a variant based on suggestion from Peter Wood",
                "I'm the author of a package that's been around for about 10 years, and it has a function that addresses this question directly. Basically, if you are on a non-Windows system, it uses Popen to access find.  However, if you are on Windows, it replicates find with an efficient filesystem walker.The code itself does not use a try block\u2026 except in determining the operating system and thus steering you to the  Unix -style find or the hand-buillt find. Timing tests showed that the try was faster in determining the OS, so I did use one there (but nowhere else).And the doc\u2026The implementation, if you care to look, is here:\nhttps://github.com/uqfoundation/pox/blob/89f90fb308f285ca7a62eabe2c38acb87e89dad9/pox/shutils.py#L190",
                "Here's a one-line Python command for the Linux command line environment. I find this very handy since I'm not such a hot Bash guy.",
                "You can use the  OS  library of Python:",
                "How do I check whether a file exists, without using the try statement?In 2016, this is still arguably the easiest way to check if both a file exists and if it is a file:isfile is actually just a helper method that internally uses os.stat and stat.S_ISREG(mode) underneath. This os.stat is a lower-level method that will provide you with detailed information about files, directories, sockets, buffers, and more. More about os.stat hereNote: However, this approach will not lock the file in any way and therefore your code can become vulnerable to  time of check to time of use  (TOCTTOU) bugs.So raising exceptions is considered to be an acceptable, and Pythonic, approach for flow control in your program. And one should consider handling missing files with IOErrors, rather than if statements (just an advice)."
            ]
        },
        {
            "tag": "merge_dictionaries",
            "patterns": [
                "How do I merge two dictionaries in a single expression?",
                "Merge dictionaries",
                "How to merge dictionaries"
            ],
            "responses": [
                "For dictionaries x and y, their shallowly-merged dictionary z takes values from y, replacing those from x.In Python 3.9.0 or greater (released 17 October 2020, PEP-584, discussed here):In Python 3.5 or greater:In Python 2, (or 3.4 or lower) write a function:and now:Say you have two dictionaries and you want to merge them into a new dictionary without altering the original dictionaries:The desired result is to get a new dictionary (z) with the values merged, and the second dictionary's values overwriting those from the first.A new syntax for this, proposed in PEP 448 and available as of Python 3.5, isAnd it is indeed a single expression.Note that we can merge in with literal notation as well:and now:It is now showing as implemented in the release schedule for 3.5, PEP 478, and it has now made its way into the What's New in Python 3.5 document.However, since many organizations are still on Python 2, you may wish to do this in a backward-compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:In both approaches, y will come second and its values will replace x's values, thus b will point to 3 in our final result.If you are not yet on Python 3.5 or need to write backward-compatible code, and you want this in a single expression, the most performant while the correct approach is to put it in a function:and then you have a single expression:You can also make a function to merge an arbitrary number of dictionaries, from zero to a very large number:This function will work in Python 2 and 3 for all dictionaries. e.g. given dictionaries a to g:and key-value pairs in g will take precedence over dictionaries a to f, and so on.Don't use what you see in the formerly accepted answer:In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. In Python 3, this will fail because you're adding two dict_items objects together, not two lists -and you would have to explicitly create them as lists, e.g. z = dict(list(x.items()) + list(y.items())). This is a waste of resources and computation power.Similarly, taking the union of items() in Python 3 (viewitems() in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:This example demonstrates what happens when values are unhashable:Here's an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:Another hack you should not use:This uses the dict constructor and is very fast and memory-efficient (even slightly more so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic.Here's an example of the usage being remediated in django.Dictionaries are intended to take hashable keys (e.g. frozensets or tuples), but this method fails in Python 3 when keys are not strings.From the mailing list, Guido van Rossum, the creator of the language, wrote:I am fine with\ndeclaring dict({}, **{1:3}) illegal, since after all it is abuse of\nthe ** mechanism.andApparently dict(x, **y) is going around as  cool hack  for  call\nx.update(y) and return x . Personally, I find it more despicable than\ncool.It is my understanding (as well as the understanding of the creator of the language) that the intended usage for dict(**y) is for creating dictionaries for readability purposes, e.g.:instead ofDespite what Guido says, dict(x, **y) is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-coming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact, ** was designed precisely to pass dictionaries as keywords.Again, it doesn't work for 3 when keys are not strings. The implicit calling contract is that namespaces take ordinary dictionaries, while users must only pass keyword arguments that are strings. All other callables enforced it. dict broke this consistency in Python 2:This inconsistency was bad given other implementations of Python (PyPy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.More comments:dict(x.items() + y.items()) is still the most readable solution for Python 2. Readability counts.My response: merge_two_dicts(x, y) actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.{**x, **y} does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word  merging  these answers describe  updating one dict with another , and not merging.Yes. I must refer you back to the question, which is asking for a shallow merge of two dictionaries, with the first's values being overwritten by the second's - in a single expression.Assuming two dictionaries of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dictionaries from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:Usage:Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at my answer to the canonical question on a  Dictionaries of dictionaries merge .These approaches are less performant, but they will provide correct behavior.\nThey will be much less performant than copy and update or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they do respect the order of precedence (latter dictionaries have precedence)You can also chain the dictionaries manually inside a dict comprehension:or in Python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):itertools.chain will chain the iterators over the key-value pairs in the correct order:I'm only going to do the performance analysis of the usages known to behave correctly. (Self-contained so you can copy and paste yourself.)In Python 3.8.1, NixOS:",
                "If you want a copy that's a merge, then use copy (or deepcopy, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit.In addition, when you use .items() (pre Python 3.0), you're creating a new list that contains the items from the dict.  If your dictionaries are large, then that is quite a lot of overhead (two large lists that will be thrown away as soon as the merged dict is created).  update() can work more efficiently, because it can run through the second dict item-by-item.In terms of time:IMO the tiny slowdown between the first two is worth it for the readability.  In addition, keyword arguments for dictionary creation was only added in Python 2.3, whereas copy() and update() will work in older versions.",
                "In Python 3.0 and later, you can use collections.ChainMap which groups multiple dicts or other mappings together to create a single, updateable view:Update for Python 3.5 and later: You can use PEP 448 extended dictionary packing and unpacking.  This is fast and easy:Update for Python 3.9 and later:  You can use the PEP 584 union operator:",
                "Python 3.5 (PEP 448) allows a nicer syntax option:Or evenIn Python 3.9 you also use | and |= with the below example from PEP 584",
                "For items with keys in both dictionaries ('b'), you can control which one ends up in the output by putting that one last.",
                "The best version I could think while not using copy would be:It's faster than dict(x.items() + y.items()) but not as fast as n = copy(a); n.update(b), at least on CPython. This version also works in Python 3 if you change iteritems() to items(), which is automatically done by the 2to3 tool.Personally I like this version best because it describes fairly good what I want in a single  functional syntax. The only minor problem is that it doesn't make completely obvious that values from y takes precedence over values from x, but I don't believe it's difficult to figure that out.",
                "I benchmarked the suggested with perfplot and found that the good oldis the fastest solution together with the good oldandCode to reproduce the plot:",
                "Be Pythonic. Use a comprehension:",
                "In python3, the items method no longer returns a list, but rather a view, which acts like a set. In this case you'll need to take the set union since concatenating with + won't work:For python3-like behavior in version 2.7, the viewitems method should work in place of items:I prefer this notation anyways since it seems more natural to think of it as a set union operation rather than concatenation (as the title shows).Edit:A couple more points for python 3. First, note that the dict(x, **y) trick won't work in python 3 unless the keys in y are strings.Also, Raymond Hettinger's Chainmap answer is pretty elegant, since it can take an arbitrary number of dicts as arguments, but from the docs it looks like it sequentially looks through a list of all the dicts for each lookup:Lookups search the underlying mappings successively until a key is found.This can slow you down if you have a lot of lookups in your application:So about an order of magnitude slower for lookups. I'm a fan of Chainmap, but looks less practical where there may be many lookups.",
                "Two dictionariesn dictionariessum has bad performance. See https://mathieularose.com/how-not-to-flatten-a-list-of-lists-in-python/",
                "Abuse leading to a one-expression solution for Matthew's answer:You said you wanted one expression, so I abused lambda to bind a name, and tuples to override lambda's one-expression limit. Feel free to cringe.You could also do this of course if you don't care about copying it:",
                "If you don't mind mutating x,Simple, readable, performant. You know update() always returns None, which is a false value. So the above expression will always evaluate to x, after updating it.Most mutating methods in the standard library (like .update()) return None by convention, so this kind of pattern will work on those too. However, if you're using a dict subclass or some other method that doesn't follow this convention, then or may return its left operand, which may not be what you want. Instead, you can use a tuple display and index, which works regardless of what the first element evaluates to (although it's not quite as pretty):If you don't have x in a variable yet, you can use lambda to make a local without using an assignment statement. This amounts to using lambda as a let expression, which is a common technique in functional languages, but is maybe unpythonic.Although it's not that different from the following use of the new walrus operator (Python 3.8+ only),especially if you use a default argument:If you do want a copy, PEP 584 style x | y is the most Pythonic on 3.9+. If you must support older versions, PEP 448 style {**x, **y} is easiest for 3.5+. But if that's not available in your (even older) Python version, the let expression pattern works here too.(That is, of course, nearly equivalent to (z := x.copy()).update(y) or z, but if your Python version is new enough for that, then the PEP 448 style will be available.)",
                "Drawing on ideas here and elsewhere I've comprehended a function:Usage (tested in python 3):You could use a lambda instead.",
                "New in Python 3.9: Use the union operator (|) to merge dicts similar to sets:For matching keys, the right dict takes precedence.This also works for |= to modify a dict in-place:",
                "(For Python\u00a02.7* only; there are simpler solutions for Python\u00a03*.)If you're not averse to importing a standard library module, you can do(The or a bit in the lambda is necessary because dict.update always returns None on success.)",
                "The problem I have with solutions listed to date is that, in the merged dictionary, the value for key  b  is 10 but, to my way of thinking, it should be 12.\nIn that light, I present the following:",
                "There will be a new option when Python 3.8 releases (scheduled for 20 October, 2019), thanks to PEP 572: Assignment Expressions. The new assignment expression operator := allows you to assign the result of the copy and still use it to call update, leaving the combined code a single expression, rather than two statements, changing:to:while behaving identically in every way. If you must also return the resulting dict (you asked for an expression returning the dict; the above creates and assigns to newdict, but doesn't return it, so you couldn't use it to pass an argument to a function as is, a la myfunc((newdict := dict1.copy()).update(dict2))), then just add or newdict to the end (since update returns None, which is falsy, it will then evaluate and return newdict as the result of the expression):Important caveat: In general, I'd discourage this approach in favor of:The unpacking approach is clearer (to anyone who knows about generalized unpacking in the first place, which you should), doesn't require a name for the result at all (so it's much more concise when constructing a temporary that is immediately passed to a function or included in a list/tuple literal or the like), and is almost certainly faster as well, being (on CPython) roughly equivalent to:but done at the C layer, using the concrete dict API, so no dynamic method lookup/binding or function call dispatch overhead is involved (where (newdict := dict1.copy()).update(dict2) is unavoidably identical to the original two-liner in behavior, performing the work in discrete steps, with dynamic lookup/binding/invocation of methods.It's also more extensible, as merging three dicts is obvious:where using assignment expressions won't scale like that; the closest you could get would be:or without the temporary tuple of Nones, but with truthiness testing of each None result:either of which is obviously much uglier, and includes further inefficiencies (either a wasted temporary tuple of Nones for comma separation, or pointless truthiness testing of each update's None return for or separation).The only real advantage to the assignment expression approach occurs if:",
                "This can be done with a single dict comprehension:In my view the best answer for the 'single expression' part as no extra functions are needed, and it is short."
            ]
        },
        {
            "tag": "execution",
            "patterns": [
                "How do I execute a program or call a system command?",
                "execute program",
                "program call"
            ],
            "responses": [
                "Use the subprocess module in the standard library:The advantage of subprocess.run over os.system is that it is more flexible (you can get the stdout, stderr, the  real  status code, better error handling, etc...).Even the documentation for os.system recommends using subprocess instead:The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the Replacing Older Functions with the subprocess Module section in the subprocess documentation for some helpful recipes.On Python 3.4 and earlier, use subprocess.call instead of .run:",
                "Here is a summary of ways to call external programs, including their advantages and disadvantages:os.system passes the command and arguments to your system's shell. This is nice because you can actually run multiple commands at once in this manner and set up pipes and input/output redirection. For example:However, while this is convenient, you have to manually handle the escaping of shell characters such as spaces, et cetera. On the other hand, this also lets you run commands which are simply shell commands and not actually external programs.os.popen will do the same thing as os.system except that it gives you a file-like object that you can use to access standard input/output for that process. There are 3 other variants of popen that all handle the i/o slightly differently. If you pass everything as a string, then your command is passed to the shell; if you pass them as a list then you don't need to worry about escaping anything. Example:subprocess.Popen. This is intended as a replacement for os.popen, but has the downside of being slightly more complicated by virtue of being so comprehensive. For example, you'd say:instead ofbut it is nice to have all of the options there in one unified class instead of 4 different popen functions. See the documentation.subprocess.call. This is basically just like the Popen class and takes all of the same arguments, but it simply waits until the command completes and gives you the return code. For example:subprocess.run. Python 3.5+ only. Similar to the above but even more flexible and returns a CompletedProcess object when the command finishes executing.os.fork, os.exec, os.spawn are similar to their C language counterparts, but I don't recommend using them directly.The subprocess module should probably be what you use.Finally, please be aware that for all methods where you pass the final command to be executed by the shell as a string and you are responsible for escaping it. There are serious security implications if any part of the string that you pass can not be fully trusted. For example, if a user is entering some/any part of the string. If you are unsure, only use these methods with constants. To give you a hint of the implications consider this code:and imagine that the user enters something  my mama didnt love me && rm -rf /  which could erase the whole filesystem.",
                "Typical implementation:You are free to do what you want with the stdout data in the pipe.  In fact, you can simply omit those parameters (stdout= and stderr=) and it'll behave like os.system().",
                "Some hints on detaching the child process from the calling one (starting the child process in background).Suppose you want to start a long task from a CGI script. That is, the child process should live longer than the CGI script execution process.The classical example from the subprocess module documentation is:The idea here is that you do not want to wait in the line 'call subprocess' until the longtask.py is finished. But it is not clear what happens after the line 'some more code here' from the example.My target platform was FreeBSD, but the development was on Windows, so I faced the problem on Windows first.On Windows (Windows\u00a0XP), the parent process will not finish until the longtask.py has finished its work. It is not what you want in a CGI script. The problem is not specific to Python; in the PHP community the problems are the same.The solution is to pass DETACHED_PROCESS Process Creation Flag to the underlying CreateProcess function in Windows API.\nIf you happen to have installed pywin32, you can import the flag from the win32process module, otherwise you should define it yourself:/* UPD 2015.10.27 @eryksun in a comment below notes, that the semantically correct flag is CREATE_NEW_CONSOLE (0x00000010) */On FreeBSD we have another problem: when the parent process is finished, it finishes the child processes as well. And that is not what you want in a CGI script either. Some experiments showed that the problem seemed to be in sharing sys.stdout. And the working solution was the following:I have not checked the code on other platforms and do not know the reasons of the behaviour on FreeBSD. If anyone knows, please share your ideas. Googling on starting background processes in Python does not shed any light yet.",
                "Note that this is dangerous, since the command isn't cleaned. I leave it up to you to google for the relevant documentation on the 'os' and 'sys' modules. There are a bunch of functions (exec* and spawn*) that will do similar things.",
                "I'd recommend using the subprocess module instead of os.system because it does shell escaping for you and is therefore much safer.",
                "If you want to return the results of the command, you can use os.popen. However, this is deprecated since version 2.6 in favor of the subprocess module, which other answers have covered well.",
                "There are lots of different libraries which allow you to call external commands with Python. For each library I've given a description and shown an example of calling an external command. The command I used as the example is ls -l (list all files). If you want to find out more about any of the libraries I've listed and linked the documentation for each of them.Hopefully this will help you make a decision on which library to use :)Subprocess allows you to call external commands and connect them to their input/output/error pipes (stdin, stdout, and stderr). Subprocess is the default choice for running commands, but sometimes other modules are better.os is used for  operating system dependent functionality . It can also be used to call external commands with os.system and os.popen (Note: There is also a subprocess.popen). os will always run the shell and is a simple alternative for people who don't need to, or don't know how to use subprocess.run.sh is a subprocess interface which lets you call programs as if they were functions. This is useful if you want to run a command multiple times.plumbum is a library for  script-like  Python programs. You can call programs like functions as in sh. Plumbum is useful if you want to run a pipeline without the shell.pexpect lets you spawn child applications, control them and find patterns in their output. This is a better alternative to subprocess for commands that expect a tty on Unix.fabric is a Python 2.5 and 2.7 library. It allows you to execute local and remote shell commands. Fabric is simple alternative for running commands in a secure shell (SSH)envoy is known as  subprocess for humans . It is used as a convenience wrapper around the subprocess module.commands contains wrapper functions for os.popen, but it has been removed from Python 3 since subprocess is a better alternative.",
                "Use the subprocess module (Python 3):It is the recommended standard way. However, more complicated tasks (pipes, output, input, etc.) can be tedious to construct and write.Note on Python version: If you are still using Python 2, subprocess.call works in a similar way.ProTip: shlex.split can help you to parse the command for run, call, and other subprocess functions in case you don't want (or you can't!) provide them in form of lists:If you do not mind external dependencies, use plumbum:It is the best subprocess wrapper. It's cross-platform, i.e. it works on both Windows and Unix-like systems. Install by pip install plumbum.Another popular library is sh:However, sh dropped Windows support, so it's not as awesome as it used to be. Install by pip install sh.",
                "I always use fabric for this things like:But this seem to be a good tool: sh (Python subprocess interface).Look at an example:",
                "Check the  pexpect  Python library, too.It allows for interactive controlling of external programs/commands, even ssh, ftp, telnet, etc. You can just type something like:",
                "If you need the output from the command you are calling,\nthen you can use subprocess.check_output (Python 2.7+).Also note the shell parameter.If shell is True, the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a user\u2019s home directory. However, note that Python itself offers implementations of many shell-like features (in particular, glob, fnmatch, os.walk(), os.path.expandvars(), os.path.expanduser(), and shutil).",
                "subprocess.run is the recommended approach as of Python 3.5 if your code does not need to maintain compatibility with earlier Python versions. It's more consistent and offers similar ease-of-use as Envoy. (Piping isn't as straightforward though. See this question for how.)Here's some examples from the documentation.Run a process:Raise on failed run:Capture output:I recommend trying Envoy. It's a wrapper for subprocess, which in turn aims to replace the older modules and functions. Envoy is subprocess for humans.Example usage from the README:Pipe stuff around too:",
                "This is how I run my commands. This code has everything you need pretty much",
                "Simple, use subprocess.run, which returns a CompletedProcess object:(run wants a list of lexically parsed shell arguments - this is what you'd type in a shell, separated by spaces, but not where the spaces are quoted, so use a specialized function, split, to split up what you would literally type into your shell)As of Python 3.5, the documentation recommends subprocess.run:The recommended approach to invoking subprocesses is to use the run() function for all use cases it can handle. For more advanced use cases, the underlying Popen interface can be used directly.Here's an example of the simplest possible usage - and it does exactly as asked:run waits for the command to successfully finish, then returns a CompletedProcess object. It may instead raise TimeoutExpired (if you give it a timeout= argument) or CalledProcessError (if it fails and you pass check=True).As you might infer from the above example, stdout and stderr both get piped to your own stdout and stderr by default.We can inspect the returned object and see the command that was given and the returncode:If you want to capture the output, you can pass subprocess.PIPE to the appropriate stderr or stdout:And those respective attributes return bytes.One might easily move from manually providing a command string (like the question suggests) to providing a string built programmatically. Don't build strings programmatically. This is a potential security issue. It's better to assume you don't trust the input.Note, only args should be passed positionally.Here's the actual signature in the source and as shown by help(run):The popenargs and kwargs are given to the Popen constructor. input can be a string of bytes (or unicode, if specify encoding or universal_newlines=True) that will be piped to the subprocess's stdin.The documentation describes timeout= and check=True better than I could:The timeout argument is passed to Popen.communicate(). If the timeout\nexpires, the child process will be killed and waited for. The\nTimeoutExpired exception will be re-raised after the child process has\nterminated.If check is true, and the process exits with a non-zero exit code, a\nCalledProcessError exception will be raised. Attributes of that\nexception hold the arguments, the exit code, and stdout and stderr if\nthey were captured.and this example for check=True is better than one I could come up with:Here's an expanded signature, as given in the documentation:Note that this indicates that only the args list should be passed positionally. So pass the remaining arguments as keyword arguments.When use Popen instead? I would struggle to find use-case based on the arguments alone. Direct usage of Popen would, however, give you access to its methods, including poll, 'send_signal', 'terminate', and 'wait'.Here's the Popen signature as given in the source. I think this is the most precise encapsulation of the information (as opposed to help(Popen)):But more informative is the Popen documentation:Execute a child program in a new process. On POSIX, the class uses\nos.execvp()-like behavior to execute the child program. On Windows,\nthe class uses the Windows CreateProcess() function. The arguments to\nPopen are as follows.Understanding the remaining documentation on Popen will be left as an exercise for the reader.",
                "Use subprocess....or for a very simple command:",
                "As of Python 3.7.0 released on June 27th 2018 (https://docs.python.org/3/whatsnew/3.7.html), you can achieve your desired result in the most powerful while equally simple way. This answer intends to show you the essential summary of various options in a short manner. For in-depth answers, please see the other ones.The big advantage of os.system(...) was its simplicity. subprocess is better and still easy to use, especially as of Python 3.5.Note: This is the exact answer to your question - running a commandlike in a shellIf possible, remove the shell overhead and run the command directly (requires a list).Pass program arguments in a list. Don't include \\ -escaping for arguments containing spaces.The following code speaks for itself:result.stdout is all normal program output excluding errors. Read result.stderr to get them.capture_output=True - turns capturing on. Otherwise result.stderr and result.stdout would be None. Available from Python 3.7.text=True - a convenience argument added in Python 3.7 which converts the received binary data to Python strings you can easily work with.DoIf you just want to check if the program succeeded (returncode == 0) and otherwise throw an Exception, there is a more convenient function:But it's Python, so there's an even more convenient argument check which does the same thing automatically for you:You might want to have all program output inside stdout, even errors. To accomplish this, runresult.stderr will then be None and result.stdout will contain everything.shell=False expects a list of arguments. You might however, split an argument string on your own using shlex.That's it.Chances are high you just started using Python when you come across this question. Let's look at some common problems.FileNotFoundError: [Errno 2] No such file or directory: 'ls -a': 'ls -a'You're running a subprocess without shell=True . Either use a list ([ ls ,  -a ]) or set shell=True.TypeError: [...] NoneType [...]Check that you've set capture_output=True.TypeError: a bytes-like object is required, not [...]You always receive byte results from your program. If you want to work with it like a normal string, set text=True.subprocess.CalledProcessError: Command '[...]' returned non-zero exit status 1.Your command didn't run successfully. You could disable returncode checking or check your actual program's validity.TypeError: init() got an unexpected keyword argument [...]You're likely using a version of Python older than 3.7.0; update it to the most recent one available. Otherwise there are other answers in this Stack Overflow post showing you older alternative solutions.",
                "os.system is OK, but kind of dated.  It's also not very secure.  Instead, try subprocess.  subprocess does not call sh directly and is therefore more secure than os.system.Get more information here.",
                "There is also Plumbum",
                "Use:os - This module provides a portable way of using operating system-dependent functionality.For the more os functions, here is the documentation.",
                "It can be this simple:",
                "There is another difference here which is not mentioned previously.subprocess.Popen executes the <command> as a subprocess. In my case, I need to execute file <a> which needs to communicate with another program, <b>.I tried subprocess, and execution was successful. However <b> could not communicate with <a>.\nEverything is normal when I run both from the terminal.One more: \n(NOTE: kwrite behaves different from other applications. If you try the below with Firefox, the results will not be the same.)If you try os.system( kwrite ), program flow freezes until the user closes kwrite. To overcome that I tried instead os.system(konsole -e kwrite). This time program continued to flow, but kwrite became the subprocess of the console.Anyone runs the kwrite not being a subprocess (i.e. in the system monitor it must appear at the leftmost edge of the tree).",
                "os.system does not allow you to store results, so if you want to store results in some list or something, a subprocess.call works.",
                "subprocess.check_call is convenient if you don't want to test return values. It throws an exception on any error.",
                "I tend to use subprocess together with shlex (to handle escaping of quoted strings):",
                "I wrote a library for this, shell.py.It's basically a wrapper for popen and shlex for now. It also supports piping commands, so you can chain commands easier in Python. So you can do things like:",
                "In Windows you can just import the subprocess module and run external commands by calling subprocess.Popen(), subprocess.Popen().communicate() and subprocess.Popen().wait() as below:Output:",
                "Under Linux, in case you would like to call an external command that will execute independently (will keep running after the Python script terminates), you can use a simple queue as task spooler or the at command.An example with task spooler:Notes about task spooler (ts):You could set the number of concurrent processes to be run ( slots ) with:ts -S <number-of-slots>Installing ts doesn't requires admin privileges. You can download and compile it from source with a simple make, add it to your path and you're done.",
                "Invoke is a Python (2.7 and 3.4+) task execution tool and library. It provides a clean, high-level API for running shell commands:",
                "You can use Popen, and then you can check the procedure's status:Check out subprocess.Popen."
            ]
        },
        {
            "tag": "nested_directory",
            "patterns": [
                "How can I safely create a nested directory?",
                "nested directories"
            ],
            "responses": [
                "On Python \u2265 3.5, use pathlib.Path.mkdir:For older versions of Python, I see two answers with good qualities, each with a small flaw, so I will give my take on it:Try os.path.exists, and consider os.makedirs for the creation.As noted in comments and elsewhere, there's a race condition \u2013 if the directory is created between the os.path.exists and the os.makedirs calls, the os.makedirs will fail with an OSError. Unfortunately, blanket-catching OSError and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.One option would be to trap the OSError and examine the embedded error code (see Is there a cross-platform way of getting information from Python\u2019s OSError):Alternatively, there could be a second os.path.exists, but suppose another created the directory after the first check, then removed it before the second one \u2013 we could still be fooled.Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.Modern versions of Python improve this code quite a bit, both by exposing FileExistsError (in 3.3+)......and by allowing a keyword argument to os.makedirs called exist_ok (in 3.2+).",
                "pathlib.Path.mkdir as used above recursively creates the directory and does not raise an exception if the directory already exists. If you don't need or want the parents to be created, skip the parents argument.Using pathlib:If you can, install the current pathlib backport named pathlib2. Do not install the older unmaintained backport named pathlib. Next, refer to the Python 3.5+ section above and use it the same.If using Python 3.4, even though it comes with pathlib, it is missing the useful exist_ok option. The backport is intended to offer a newer and superior implementation of mkdir which includes this missing option.Using os:os.makedirs as used above recursively creates the directory and does not raise an exception if the directory already exists. It has the optional exist_ok argument only if using Python 3.2+, with a default value of False. This argument does not exist in Python 2.x up to 2.7. As such, there is no need for manual exception handling as with Python 2.7.Using pathlib:If you can, install the current pathlib backport named pathlib2. Do not install the older unmaintained backport named pathlib. Next, refer to the Python 3.5+ section above and use it the same.Using os:While a naive solution may first use os.path.isdir followed by os.makedirs, the solution above reverses the order of the two operations. In doing so, it prevents a common race condition having to do with a duplicated attempt at creating the directory, and also disambiguates files from directories.Note that capturing the exception and using errno is of limited usefulness because OSError: [Errno 17] File exists, i.e. errno.EEXIST, is raised for both files and directories. It is more reliable simply to check if the directory exists.mkpath creates the nested directory, and does nothing if the directory already exists. This works in both Python 2 and 3.Per Bug 10948, a severe limitation of this alternative is that it works only once per python process for a given path. In other words, if you use it to create a directory, then delete the directory from inside or outside Python, then use mkpath again to recreate the same directory, mkpath will simply silently use its invalid cached info of having previously created the directory, and will not actually make the directory again. In contrast, os.makedirs doesn't rely on any such cache. This limitation may be okay for some applications.With regard to the directory's mode, please refer to the documentation if you care about it.",
                "Using try except and the right error code from errno module gets rid of the race condition and is cross-platform:In other words, we try to create the directories, but if they already exist we ignore the error. On the other hand, any other error gets reported. For example, if you create dir 'a' beforehand and remove all permissions from it, you will get an OSError raised with errno.EACCES (Permission denied, error 13).",
                "Starting from Python 3.5, pathlib.Path.mkdir has an exist_ok flag:This recursively creates the directory and does not raise an exception if the directory already exists.(just as os.makedirs got an exist_ok flag starting from python 3.2 e.g os.makedirs(path, exist_ok=True))Note: when i posted this answer none of the other answers mentioned exist_ok...",
                "I would personally recommend that you use os.path.isdir() to test instead of os.path.exists().If you have:And a foolish user input:... You're going to end up with a directory named filename.etc when you pass that argument to os.makedirs() if you test with os.path.exists().",
                "Check os.makedirs:  (It makes sure the complete path exists.)\n To handle the fact the directory might exist, catch OSError.\n(If exist_ok is False (the default), an OSError is raised if the target directory already exists.)",
                "Try the os.path.exists function",
                "You give a particular file at a certain path and you pull the directory from the file path. Then after making sure you have the directory, you attempt to open a file for reading. To comment on this code:We want to avoid overwriting the builtin function, dir. Also, filepath or perhaps fullfilepath is probably a better semantic name than filename so this would be better written:Your end goal is to open this file, you initially state, for writing, but you're essentially approaching this goal (based on your code) like this, which opens the file for reading:Why would you make a directory for a file that you expect to be there and be able to read?Just attempt to open the file.If the directory or file isn't there, you'll get an IOError with an associated error number: errno.ENOENT will point to the correct error number regardless of your platform. You can catch it if you want, for example:This is probably what you're wanting.In this case, we probably aren't facing any race conditions. So just do as you were, but note that for writing, you need to open with the w mode (or a to append). It's also a Python best practice to use the context manager for opening files.However, say we have several Python processes that attempt to put all their data into the same directory. Then we may have contention over creation of the directory. In that case it's best to wrap the makedirs call in a try-except block.",
                "I have put the following down. It's not totally foolproof though.Now as I say, this is not really foolproof, because we have the possiblity of failing to create the directory, and another process creating it during that period.",
                "Check if a directory exists and create it if necessary?The direct answer to this is, assuming a simple situation where you don't expect other users or processes to be messing with your directory:or if making the directory is subject to race conditions (i.e. if after checking the path exists, something else may have already made it) do this:But perhaps an even better approach is to sidestep the resource contention issue, by using temporary directories via tempfile:Here's the essentials from the online doc:There's a new Path object (as of 3.4) with lots of methods one would want to use with paths - one of which is mkdir.(For context, I'm tracking my weekly rep with a script. Here's the relevant parts of code from the script that allow me to avoid hitting Stack Overflow more than once a day for the same data.)First the relevant imports:We don't have to deal with os.path.join now - just join path parts with a /:Then I idempotently ensure the directory exists - the exist_ok argument shows up in Python 3.5:Here's the relevant part of the documentation:If exist_ok is true, FileExistsError exceptions will be ignored (same behavior as the POSIX mkdir -p command), but only if the last path component is not an existing non-directory file.Here's a little more of the script - in my case, I'm not subject to a race condition, I only have one process that expects the directory (or contained files) to be there, and I don't have anything trying to remove the directory.Path objects have to be coerced to str before other APIs that expect str paths can use them.Perhaps Pandas should be updated to accept instances of the abstract base class, os.PathLike.",
                "In Python 3.4 you can also use the brand new pathlib module:",
                "fastest safest way to do it is:\nit will create if not exists and skip if exists:",
                "For a one-liner solution, you can use IPython.utils.path.ensure_dir_exists():From the documentation: Ensure that a directory exists. If it doesn\u2019t exist, try to create it and protect against a race condition if another process is doing the same.IPython is an extension package, not part of the standard library.",
                "In Python3, os.makedirs supports setting exist_ok. The default setting is False, which means an OSError will be raised if the target directory already exists. By setting exist_ok to True, OSError (directory exists) will be ignored and the directory will not be created.In Python2, os.makedirs doesn't support setting exist_ok. You can use the approach in heikki-toivonen's answer:",
                "The relevant Python documentation suggests the use of the EAFP coding style (Easier to Ask for Forgiveness than Permission). This means that the codeis better than the alternativeThe documentation suggests this exactly because of the race condition discussed in this question. In addition, as others mention here, there is a performance advantage in querying once instead of twice the OS. Finally, the argument placed forward, potentially, in favour of the second code in some cases --when the developer knows the environment the application is running-- can only be advocated in the special case that the program has set up a private environment for itself (and other instances of the same program).Even in that case, this is a bad practice and can lead to long useless debugging. For example, the fact we set the permissions for a directory should not leave us with the impression permissions are set appropriately for our purposes. A parent directory could be mounted with other permissions. In general, a program should always work correctly and the programmer should not expect one specific environment.",
                "I found this Q/A after I was puzzled by some of the failures and errors I was getting while working with directories in Python. I am working in Python 3 (v.3.5 in an Anaconda virtual environment on an Arch Linux x86_64 system).Consider this directory structure:Here are my experiments/notes, which provides clarification:Conclusion: in my opinion,  Method 2  is more robust.[1] How can I safely create a nested directory?[2] https://docs.python.org/3/library/os.html#os.makedirs",
                "You can use mkpathNote that it will create the ancestor directories as well.It works for Python 2 and 3.",
                "In case you're writing a file to a variable path, you can use this on the file's path to make sure that the parent directories are created.Works even if path_to_file is file.ext (zero directories deep).See pathlib.PurePath.parent and pathlib.Path.mkdir.",
                "Why not use subprocess module if running on a machine that supports command \nmkdir with -p option ? \nWorks on python 2.7 and python 3.6Should do the trick on most systems.In situations where portability doesn't matter (ex, using docker) the solution is a clean 2 lines. You also don't have to add logic to check if directories exist or not. Finally, it is safe to re-run without any side effectsIf you need error handling:",
                "You have to set the full path before creating the directory:This works for me and hopefully, it will works for you as well",
                "I saw Heikki Toivonen and A-B-B's answers and thought of this variation.",
                "I use os.path.exists(), here is a Python 3 script that can be used to check if a directory exists, create one if it does not exist, and delete it if it does exist (if desired).It prompts users for input of the directory and can be easily modified.",
                "Call the function create_dir() at the entry point of your program/project.",
                "If you consider the following:means a directory (path) exists AND is a directory. So for me this way does what I need. So I can make sure it is folder (not a file) and exists.",
                "You can use os.listdir for this:",
                "This may not exactly answer the question. But I guess your real intention is to create a file and its parent directories, given its content all in 1 command.You can do that with fastcore extension to pathlib: path.mk_write(data)See more in fastcore documentation"
            ]
        },
        {
            "tag": "for_loop_index",
            "patterns": [
                "Accessing the index in 'for' loops",
                "for loop index",
                "index",
                "indices"
            ],
            "responses": [
                "Use the built-in function enumerate():It is non-pythonic to manually index via for i in range(len(xs)): x = xs[i] or manually manage an additional state variable.Check out PEP 279 for more.",
                "Use enumerate to get the index with the element as you iterate:And note that Python's indexes start at zero, so you would get 0 to 4 with the above. If you want the count, 1 to 5, do this:What you are asking for is the Pythonic equivalent of the following, which is the algorithm most programmers of lower-level languages would use:Or in languages that do not have a for-each loop:or sometimes more commonly (but unidiomatically) found in Python:Python's enumerate function reduces the visual clutter by hiding the accounting for the indexes, and encapsulating the iterable into another iterable (an enumerate object) that yields a two-item tuple of the index and the item that the original iterable would provide. That looks like this:This code sample is fairly well the canonical example of the difference between code that is idiomatic of Python and code that is not. Idiomatic code is sophisticated (but not complicated) Python, written in the way that it was intended to be used. Idiomatic code is expected by the designers of the language, which means that usually this code is not just more readable, but also more efficient.Even if you don't need indexes as you go, but you need a count of the iterations (sometimes desirable) you can start with 1 and the final number will be your count.The count seems to be more what you intend to ask for (as opposed to index) when you said you wanted from 1 to 5.To break these examples down, say we have a list of items that we want to iterate over with an index:Now we pass this iterable to enumerate, creating an enumerate object:We can pull the first item out of this iterable that we would get in a loop with the next function:And we see we get a tuple of 0, the first index, and 'a', the first item:we can use what is referred to as  sequence unpacking  to extract the elements from this two-tuple:and when we inspect index, we find it refers to the first index, 0, and item refers to the first item, 'a'.So do this:",
                "It's pretty simple to start it from 1 other than 0:",
                "Here's how you can access the indices and array's elements using for-in loops.Result:Result:Result:Result:Result:Result:Result:Result:Result:",
                "As is the norm in Python, there are several ways to do this. In all examples assume: lst = [1, 2, 3, 4, 5]This is also the safest option in my opinion because the chance of going into infinite recursion has been eliminated. Both the item and its index are held in variables and there is no need to write any further code to access the item.As explained before, there are other ways to do this that have not been explained here and they may even apply more in other situations. For example, using itertools.chain with for. It handles nested loops better than the other examples.",
                "Old fashioned way:List comprehension:",
                "The fastest way to access indexes of list within loop in Python 3.7 is to use the enumerate method for small, medium and huge lists.Please see different approaches which can be used to iterate over list and access index value and their performance metrics (which I suppose would be useful for you) in code samples below:See performance metrics for each method below:As the result, using enumerate method is the fastest method for iteration when the index needed.Adding some useful links below:What is the difference between range and xrange functions in Python 2.X?What is faster for loop using enumerate or for loop using xrange in Python?range(len(list)) or enumerate(list)?",
                "You can use enumerate and embed expressions inside string literals to obtain the solution.This is a simple way:",
                "First of all, the indexes will be from 0 to 4. Programming languages start counting from 0; don't forget that or you will come across an index-out-of-bounds exception. All you need in the for loop is a variable counting from 0 to 4 like so:Keep in mind that I wrote 0 to 5 because the loop stops one number before the maximum. :)To get the value of an index, use",
                "You can do it with this code:Use this code if you need to reset the index value at the end of the loop:",
                "According to this discussion: object's list indexLoop counter iterationThe current idiom for looping over the indices makes use of the built-in range function:Looping over both elements and indices can be achieved either by the old idiom or by using the new zip built-in function:orvia PEP 212 \u2013 Loop Counter Iteration.",
                "In your question, you write  how do I access the loop index, from 1 to 5 in this case? However, the index for a list runs from zero.  So, then we need to know if what you actually want is the index and item for each item in a list, or whether you really want numbers starting from 1.  Fortunately, in Python, it is easy to do either or both.First, to clarify, the enumerate function iteratively returns the index and corresponding item for each item in a list.The output for the above is then,Notice that the index runs from 0. This kind of indexing is common among modern programming languages including Python and C.If you want your loop to span a part of the list, you can use the standard Python syntax for a part of the list. For example, to loop from the second item in a list up to but not including the last item, you could useNote that once again, the output index runs from 0,That brings us to the start=n switch for enumerate().  This simply offsets the index, you can equivalently simply add a number to the index inside the loop.for which the output is",
                "If I were to iterate nums = [1, 2, 3, 4, 5] I would doOr get the length as l = len(nums)",
                "If there is no duplicate value in the list:",
                "You can also try this:The output is",
                "You can use the index method:It is highlighted in a comment that this method doesn\u2019t work if there are duplicates in ints. The method below should work for any values in ints:Or alternativelyif you want to get both the index and the value in ints as a list of tuples.It uses the method of enumerate in the selected answer to this question, but with list comprehension, making it faster with less code.",
                "A simple answer using a while loop:Output:",
                "You can simply use a variable such as count to count the number of elements in the list:",
                "To print a tuple of (index, value) in a list comprehension using a for loop:Output:",
                "In addition to all the excellent answers above, here is a solution to this problem when working with pandas Series objects. In many cases, pandas Series have custom/unique indices (for example, unique identifier strings) that can't be accessed with the enumerate() function.Output:We can see below that enumerate() doesn't give us the desired result:Output:We can access the indices of a pandas Series in a for loop using .items():Output:",
                "One-liner lovers:Explaination:Points to take:Thanks. Keep me in your prayers.",
                "You can use range(len(some_list)) and then lookup the index like thisOr use the Python\u2019s built-in enumerate function which allows you to loop over a list and retrieve the index and the value of each item in the list",
                "It can be achieved with the following code:Here, range(1, len(xs)+1); If you expect the output to start from 1 instead of 0, you need to start the range from 1 and add 1 to the total length estimated since python starts indexing the number from 0 by default.",
                "A loop with a  counter  variable set as an initialiser that will be a parameter, in formatting the string, as the item number.The for loop accesses the  listos  variable which is the list. As we access the list by  i ,  i  is formatted as the item price (or whatever it is).Output:",
                "This serves the purpose well enough:"
            ]
        },
        {
            "tag": "flatten_list",
            "patterns": [
                "How do I make a flat list out of a list of lists?",
                "flatten list",
                "flat list"
            ],
            "responses": [
                "Given a list of lists l,which means:is faster than the shortcuts posted so far. (l is the list to flatten.)Here is the corresponding function:As evidence, you can use the timeit module in the standard library:Explanation: the shortcuts based on + (including the implied use in sum) are, of necessity, O(L**2) when there are L sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., I * (L**2)/2.The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.",
                "You can use itertools.chain():Or you can use itertools.chain.from_iterable() which doesn't require unpacking the list with the * operator:This approach is arguably more readable than [item for sublist in l for item in sublist] and appears to be faster too:",
                "Note from the author: This is very inefficient. But fun, because monoids are awesome.sum sums the elements of the iterable xss, and uses the second argument as the initial value [] for the sum. (The default initial value is 0, which is not a list.)Because you are summing nested lists, you actually get [1,3]+[2,4] as a result of sum([[1,3],[2,4]],[]), which is equal to [1,3,2,4].Note that only works on lists of lists. For lists of lists of lists, you'll need another solution.",
                "I tested most suggested solutions with perfplot (a pet project of mine, essentially a wrapper around timeit), and foundto be the fastest solution, both when many small lists and few long lists are concatenated. (operator.iadd is equally fast.)A simpler and also acceptable variant isIf the number of sublists is large, this performs a little worse than the above suggestion.Code to reproduce the plot:",
                "Using functools.reduce, which adds an accumulated list xs to the next list ys:Output:A faster way using operator.concat:Output:",
                "Here is a general approach that applies to numbers, strings, nested lists and mixed containers.  This can flatten both simple and complicated containers (see also Demo).CodeNotes:DemoReference",
                "To flatten a data-structure that is deeply nested, use iteration_utilities.deepflatten1:It's a generator so you need to cast the result to a list or explicitly iterate over it.To flatten only one level and if each of the items is itself iterable you can also use iteration_utilities.flatten which itself is just a thin wrapper around itertools.chain.from_iterable:Just to add some timings (based on Nico Schl\u00f6mer's answer that didn't include the function presented in this answer):It's a log-log plot to accommodate for the huge range of values spanned. For qualitative reasoning: Lower is better.The results show that if the iterable contains only a few inner iterables then sum will be fastest, however for long iterables only the itertools.chain.from_iterable, iteration_utilities.deepflatten or the nested comprehension have reasonable performance with itertools.chain.from_iterable being the fastest (as already noticed by Nico Schl\u00f6mer).1 Disclaimer: I'm the author of that library",
                "The following seems simplest to me:",
                "Consider installing the more_itertools package.It ships with an implementation for flatten (source, from the itertools recipes):Note: as mentioned in the docs, flatten requires a list of lists.  See below on flattening more irregular inputs.As of version 2.4, you can flatten more complicated, nested iterables with more_itertools.collapse (source, contributed by  abarnet).",
                "The reason your function didn't work is because the extend extends an array in-place and doesn't return it. You can still return x from lambda, using something like this:Note: extend is more efficient than + on lists.",
                "matplotlib.cbook.flatten() will work for nested lists even if they nest more deeply than the example.Result:This is 18x faster than underscore._.flatten:",
                "According your list [[1, 2, 3], [4, 5, 6], [7], [8, 9]] which is 1 list level, we can simply use sum(list,[]) without using any librariesTo extend the advantage of this method when there is a tuple or number existing inside. Simply adding a mapping function for each element by map to the listIn here, there is a clear explanation of the drawback in terms of memory for this approach. In short, it recursively creates list objects, which should be avoided :(",
                "One can also use NumPy's flat:It only works when sublists have identical dimensions.",
                "You can use the list extend method. It shows to be the fastest:Performance:Output:",
                "There are several answers with the same recursive appending scheme as below, but none makes use of try, which makes the solution more robust and Pythonic.Usage: this is a generator, and you typically want to enclose it in an iterable builder like list() or tuple() or use it in a for loop.Advantages of this solution are:N.B.: Since all iterables are flattened, strings are decomposed into sequences of single characters. If you don't like/want such behavior, you can use the following version which filters out from flattening iterables like strings and bytes:",
                "Note: Below applies to Python 3.3+ because it uses yield_from.  six is also a third-party package, though it is stable.  Alternately, you could use sys.version.In the case of obj = [[1, 2,], [3, 4], [5, 6]], all of the solutions here are good, including list comprehension and itertools.chain.from_iterable.However, consider this slightly more complex case:There are several problems here:You can remedy this as follows:Here, you check that the sub-element (1) is iterable with Iterable, an ABC from itertools, but also want to ensure that (2) the element is not  string-like. ",
                "If you are willing to give up a tiny amount of speed for a cleaner look, then you could use numpy.concatenate().tolist() or numpy.concatenate().ravel().tolist():You can find out more here in the documentation, numpy.concatenate and numpy.ravel.",
                "I wanted a solution which can deal with multiple nesting ([[1], [[[2]], [3]]], [1, 2, 3] for example), but would also not be recursive (I had a big level of recursion and I got a recursion error.This is what I came up with:and tests:",
                "This may not be the most efficient way, but I thought to put a one-liner (actually a two-liner). Both versions will work on arbitrary hierarchy nested lists, and exploits language features (Python\u00a03.5) and recursion.The output isThis works in a depth first manner. The recursion goes down until it finds a non-list element, then extends the local variable flist and then rolls back it to the parent. Whenever flist is returned, it is extended to the parent's flist in the list comprehension. Therefore, at the root, a flat list is returned.The above one creates several local lists and returns them which are used to extend the parent's list. I think the way around for this may be creating a gloabl flist, like below.The output is againAlthough I am not sure at this time about the efficiency.",
                "If you have a numpy array a:produces:np.flatten also accepts other parameters:More details about parameters are available here.",
                "For a list containing multiple list here a recursive solution that work for me and that i hope is correct:Output:",
                "I would suggest using generators with yield statement and yield from.\nHere's an example:",
                "If I want to add something to the great previous answers, here is my recursive flatten function which can flatten not only nested lists, but also any given container or any generally any object which can throw out items. This does also work for any depth of nesting and it is a lazy iterator which yields the items as requested:This way, you can exclude types you don't want to be flattened, like str or what else.The idea is if an object can pass the iter() it's ready to yield items. So the iterable can have even generator expressions as an item.Someone could argue: Why did you write this that generic when the OP didn't ask for it? OK, you're right. I just felt like this might help someone (like it did for myself).Test cases:Output:",
                "Simplest Way to do in python without any libraryThis function will work for even multidimensional list alsousing recursion we can achieve any combination of list inside list, we can flatten it without using any library.",
                "Considering the list has just integers:"
            ]
        },
        {
            "tag": "methods",
            "patterns": [
                "Difference between @staticmethod and @classmethod",
                "static method",
                "class method"
            ],
            "responses": [
                "Maybe a bit of example code will help: Notice the difference in the call signatures of foo, class_foo and static_foo:Below is the usual way an object instance calls a method. The object instance, a, is implicitly passed as the first argument.With classmethods, the class of the object instance is implicitly passed as the first argument instead of self.You can also call class_foo using the class. In fact, if you define something to be\na classmethod, it is probably because you intend to call it from the class rather than from a class instance. A.foo(1) would have raised a TypeError, but A.class_foo(1) works just fine:One use people have found for class methods is to create inheritable alternative constructors.With staticmethods, neither self (the object instance) nor  cls (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:Staticmethods are used to group functions which have some logical connection with a class to the class.foo is just a function, but when you call a.foo you don't just get the function,\nyou get a  partially applied  version of the function with the object instance a bound as the first argument to the function. foo expects 2 arguments, while a.foo only expects 1 argument.a is bound to foo. That is what is meant by the term  bound  below:With a.class_foo, a is not bound to class_foo, rather the class A is bound to class_foo.Here, with a staticmethod, even though it is a method, a.static_foo just returns\na good 'ole function with no arguments bound. static_foo expects 1 argument, and\na.static_foo expects 1 argument too.And of course the same thing happens when you call static_foo with the class A instead.",
                "A staticmethod is a method that knows nothing about the class or instance it was called on. It just gets the arguments that were passed, no implicit first argument. It is basically useless in Python -- you can just use a module function instead of a staticmethod.A classmethod, on the other hand, is a method that gets passed the class it was called on, or the class of the instance it was called on, as first argument. This is useful when you want the method to be a factory for the class: since it gets the actual class it was called on as first argument, you can always instantiate the right class, even when subclasses are involved. Observe for instance how dict.fromkeys(), a classmethod, returns an instance of the subclass when called on a subclass:",
                "Basically @classmethod makes a method whose first argument is the class it's called from (rather than the class instance), @staticmethod does not have any implicit arguments.",
                "To decide whether to use @staticmethod or @classmethod you have to look inside your method. If your method accesses other variables/methods in your class then use @classmethod. On the other hand, if your method does not touches any other parts of the class then use @staticmethod.",
                "Official python docs:@classmethodA class method receives the class as\n  implicit first argument, just like an\n  instance method receives the instance.\n  To declare a class method, use this\n  idiom:The @classmethod form is a function\n  decorator \u2013 see the description of\n  function definitions in Function\n  definitions for details.It can be called either on the class\n  (such as C.f()) or on an instance\n  (such as C().f()). The instance is\n  ignored except for its class. If a\n  class method is called for a derived\n  class, the derived class object is\n  passed as the implied first argument.Class methods are different than C++\n  or Java static methods. If you want\n  those, see staticmethod() in this\n  section.@staticmethodA static method does not receive an\n  implicit first argument. To declare a\n  static method, use this idiom:The @staticmethod form is a function\n  decorator \u2013 see the description of\n  function definitions in Function\n  definitions for details.It can be called either on the class\n  (such as C.f()) or on an instance\n  (such as C().f()). The instance is\n  ignored except for its class.Static methods in Python are similar\n  to those found in Java or C++. For a\n  more advanced concept, see\n  classmethod() in this section.",
                "Here is a short article on this question@staticmethod function is nothing more than a function defined inside a class. It is callable without instantiating the class first. It\u2019s definition is immutable via inheritance.@classmethod function also callable without instantiating the class, but its definition follows Sub class, not Parent class, via inheritance. That\u2019s because the first argument for @classmethod function must always be cls (class).",
                "You may have seen Python code like this pseudocode, which demonstrates the signatures of the various method types and provides a docstring to explain each:First I'll explain a_normal_instance_method. This is precisely called an  instance method . When an instance method is used, it is used as a partial function (as opposed to a total function, defined for all values when viewed in source code) that is, when used, the first of the arguments is predefined as the instance of the object, with all of its given attributes. It has the instance of the object bound to it, and it must be called from an instance of the object. Typically, it will access various attributes of the instance.For example, this is an instance of a string:if we use the instance method, join on this string, to join another iterable,\nit quite obviously is a function of the instance, in addition to being a function of the iterable list, ['a', 'b', 'c']:Instance methods can be bound via a dotted lookup for use later.For example, this binds the str.join method to the ':' instance:And later we can use this as a function that already has the first argument bound to it. In this way, it works like a partial function on the instance:The static method does not take the instance as an argument.It is very similar to a module level function.However, a module level function must live in the module and be specially imported to other places where it is used.If it is attached to the object, however, it will follow the object conveniently through importing and inheritance as well.An example of a static method is str.maketrans, moved from the string module in Python 3.  It makes a translation table suitable for consumption by str.translate. It does seem rather silly when used from an instance of a string, as demonstrated below, but importing the function from the string module is rather clumsy, and it's nice to be able to call it from the class, as in str.maketransIn python 2, you have to import this function from the increasingly less useful string module:A class method is a similar to an instance method in that it takes an implicit first argument, but instead of taking the instance, it takes the class. Frequently these are used as alternative constructors for better semantic usage and it will support inheritance.The most canonical example of a builtin classmethod is dict.fromkeys. It is used as an alternative constructor of dict, (well suited for when you know what your keys are and want a default value for them.)When we subclass dict, we can use the same constructor, which creates an instance of the subclass.See the pandas source code for other similar examples of alternative constructors, and see also the official Python documentation on classmethod and staticmethod.",
                "I started learning programming language with C++ and then Java and then Python and so this question bothered me a lot as well, until I understood the simple usage of each.Class Method: Python unlike Java and C++ doesn't have constructor overloading.  And so to achieve this you could use classmethod. Following example will explain thisLet's consider we have a Person class which takes two arguments first_name and last_name and creates the instance of Person.Now, if the requirement comes where you need to create a class using a single name only, just a first_name, you can't do something like this in Python.This will give you an error when you will try to create an object (instance).However, you could achieve the same thing using @classmethod as mentioned belowStatic Method: This is rather simple, it's not bound to instance or class and you can simply call that using class name.So let's say in above example you need a validation that first_name should not exceed 20 characters, you can simply do this.and you could simply call using class name",
                "Only the first argument differs:In more detail...The  standard  method, as in every object oriented language. When an object's method is called, it is automatically given an extra argument self as its first argument. That is, methodmust be called with 2 arguments. self is automatically passed, and it is the object itself. Similar to the this that magically appears in eg. java/c++, only in python it is shown explicitly.actually, the first argument does not have to be called self, but it's the standard convention, so keep itWhen the method is decoratedthe automatically provided argument is not self, but the class of self.When the method is decoratedthe method is not given any automatic argument at all. It is only given the parameters that it is called with.",
                "I think a better question is  When would you use @classmethod vs @staticmethod? @classmethod allows you easy access to private members that are associated to the class definition. this is a great way to do singletons, or factory classes that control the number of instances of the created objects exist.@staticmethod provides marginal performance gains, but I have yet to see a productive use of a static method within a class that couldn't be achieved as a standalone function outside the class.",
                "Static Methods:Benefits of Static Methods:More convenient to import versus module-level functions since each method does not have to be specially importedClass Methods:These are created with classmethod in-built function.",
                "@decorators were added in python 2.4 If you're using python < 2.4 you can use the classmethod() and staticmethod() function.For example, if you want to create a factory method (A function returning an instance of a different implementation of a class depending on what argument it gets) you can do something like:Also observe that this is a good example for using a classmethod and a static method,\nThe static method clearly belongs to the class, since it uses the class Cluster internally.\nThe classmethod only needs information about the class, and no instance of the object.Another benefit of making the _is_cluster_for method a classmethod is so a subclass can decide to change it's implementation, maybe because it is pretty generic and can handle more than one type of cluster, so just checking the name of the class would not be enough.",
                "Let me tell the similarity between a method decorated with @classmethod vs @staticmethod first.Similarity: Both of them can be called on the Class itself, rather than just the instance of the class. So, both of them in a sense are Class's methods.Difference: A classmethod will receive the class itself as the first argument, while a staticmethod does not.So a static method is, in a sense, not bound to the Class itself and is just hanging in there just because it may have a related functionality.",
                "@staticmethod just disables the default function as method descriptor.  classmethod wraps your function in a container callable that passes a reference to the owning class as first argument:As a matter of fact, classmethod has a runtime overhead but makes it possible to access the owning class.  Alternatively I recommend using a metaclass and putting the class methods on that metaclass:",
                "The definitive guide on how to use static, class or abstract methods in Python is one good link for this topic, and summary it as following.@staticmethod function is nothing more than a function defined inside a class. It is callable without instantiating the class first. It\u2019s definition is immutable via inheritance.@classmethod function also callable without instantiating the class, but its definition follows Sub class, not Parent class, via inheritance, can be overridden by subclass. That\u2019s because the first argument for @classmethod function must always be cls (class).",
                "Another consideration with respect to staticmethod vs classmethod comes up with inheritance.  Say you have the following class:And you then want to override bar() in a child class:This works, but note that now the bar() implementation in the child class (Foo2) can no longer take advantage of anything specific to that class.  For example, say Foo2 had a method called magic() that you want to use in the Foo2 implementation of bar():The workaround here would be to call Foo2.magic() in bar(), but then you're repeating yourself (if the name of Foo2 changes, you'll have to remember to update that bar() method).To me, this is a slight violation of the open/closed principle, since a decision made in Foo is impacting your ability to refactor common code in a derived class (ie it's less open to extension).  If bar() were a classmethod we'd be fine:Gives: In Foo2 MAGICAlso: historical note: Guido Van Rossum (Python's creator) once referred to staticmethod's as  an accident : https://mail.python.org/pipermail/python-ideas/2012-May/014969.htmlwe all know how limited static methods are. (They're basically an accident -- back in the Python 2.2 days when I was inventing new-style classes and descriptors, I meant to implement class methods but at first I didn't understand them and accidentally implemented static methods first. Then it was too late to remove them and only provide class methods.Also: https://mail.python.org/pipermail/python-ideas/2016-July/041189.htmlHonestly, staticmethod was something of a mistake -- I was trying to do something like Java class methods but once it was released I found what was really needed was classmethod. But it was too late to get rid of staticmethod.",
                "I will try to explain the basic difference using an example.1 - we can directly call static and classmethods without initializing2- Static method cannot call self method but can call other static and classmethod3- Static method belong to class and will not use object at all.4- Class method are not bound to an object but to a class.",
                "Python comes with several built-in decorators. The big three are:First let's note that any function of a class can be called with instance of this class (after we initialized this class).@classmethod is the way to call function not only as an instance of a class but also directly by the class itself as its first argument.@staticmethod is a way of putting a function into a class (because it logically belongs there), while indicating that it does not require access to the class (so we don't need to use self in function definition).Let's consider the following class:Let's see how it works:Here you can see some use cases for those methods.Bonus: you can read about @property decorator here",
                "The difference occurs when there is inheritance.Suppose that there are two classes-- Parent and Child. If one wants to use @staticmethod, print_name method should be written twice because the name of the class should be written in the print line.However, for @classmethod, it is not required to write print_name method twice.",
                "Instance Method:+ Can modify object instance state+ Can modify class stateClass Method:- Can't modify object instance state+ Can modify class stateStatic Method:- Can't modify object instance state- Can't modify class stateoutput:The instance method we actually had access to the object instance , right so this was an instance off a my class object whereas with the class method we have access to the class itself. But not to any of the objects,  because the class method doesn't really care about an object existing. However you can both call a class method and static method on an object instance. This is going to work it doesn't really make a difference, so again when you call static method here it's going to work and it's going to know which method you want to call.The Static methods are used to do some utility tasks, and class methods are used for factory methods. The factory methods can return class objects for different use cases.And finally, a short example for better understanding:",
                "@classmethod : can be used to create a shared global access to all the instances created of that class..... like updating a record by multiple users....\nI particulary found it use ful when creating singletons as well..:)@static method:  has nothing to do with the class or instance being associated with ...but for readability can use static method",
                "My contribution demonstrates the difference amongst @classmethod, @staticmethod, and instance methods, including how an instance can indirectly call a @staticmethod. But instead of indirectly calling a @staticmethod from an instance, making it private may be more  pythonic.  Getting something from a private method isn't demonstrated here but it's basically the same concept.",
                "A class method receives the class as implicit first argument, just like an instance method receives the instance. It is a method which is bound to the class and not the object of the class.It has access to the state of the class as it takes a class parameter that points to the class and not the object instance. It can modify a class state that would apply across all the instances of the class. For example it can modify a class variable that will be applicable to all the instances.On the other hand, a static method does not receive an implicit first argument, compared to class methods or instance methods. And can\u2019t access or modify class state. It only belongs to the class because from design point of view that is the correct way. But in terms of functionality is not bound, at runtime, to the class.as a guideline, use static methods as utilities, use class methods for example as factory . Or maybe to define a singleton. And use instance methods to model the state and behavior of instances.Hope I was clear !",
                "You might want to consider the difference between:andThis has changed between python2 and python3:python2:python3:So using  @staticmethod for methods only called directly from the class has become optional in python3. If you want to call them from both class and instance, you still need to use the @staticmethod decorator.The other cases have been well covered by unutbus answer.",
                "Class methods, as the name suggests, are used to make changes to classes and not the objects. To make changes to classes, they will modify the class attributes(not object attributes), since that is how you update classes.\nThis is the reason that class methods take the class(conventionally denoted by 'cls') as the first argument.Static methods on the other hand, are used to perform functionalities that are not bound to the class i.e. they will not read or write class variables. Hence, static methods do not take classes as arguments. They are used so that classes can perform functionalities that are not directly related to the purpose of the class.",
                "I think giving a purely Python version of staticmethod and classmethod would help to understand the difference between them at language level (Refers to Descriptor Howto Guide).Both of them are non-data descriptors (It would be easier to understand them if you are familiar with descriptors first).",
                "Analyze @staticmethod literally providing different insights.A normal method of a class is an implicit dynamic method which takes the instance as first argument.\nIn contrast, a staticmethod does not take the instance as first argument, so is called 'static'.A staticmethod is indeed such a normal function the same as those outside a class definition.\nIt is luckily grouped into the class just in order to stand closer where it is applied, or you might scroll around to find it.",
                "One pretty important practical difference occurs when subclassing. If you don't mind, I'll hijack @unutbu's example:In class_foo, the method knows which class it is called on:In static_foo, there is no way to determine whether it is called on A or B:Note that this doesn't mean you can't use other methods in a staticmethod, you just have to reference the class directly, which means subclasses' staticmethods will still reference the parent class:",
                "tldr;A staticmethod is essentially a function bound to a class (and consequently its instances)A classmethod is essentially an inheritable staticmethod.For details, see the excellent answers by others.",
                "First let's start with an example code that we'll use to understand both concepts:Class methodA class method accepts the class itself as an implicit argument and -optionally- any other arguments specified in the definition. It\u2019s important to understand that a class method, does not have access to object instances (like instance methods do). Therefore, class methods cannot be used to alter the state of an instantiated object but instead, they are capable of changing the class state which is shared amongst all the instances of that class.\nClass methods are typically useful when we need to access the class itself \u2014 for example, when we want to create a factory method, that is a method that creates instances of the class. In other words, class methods can serve as alternative constructors.In our example code, an instance of Employee can be constructed by providing three arguments; first_name , last_name and salary.Now let\u2019s assume that there\u2019s a chance that the name of an Employee can be provided in a single field in which the first and last names are separated by a whitespace. In this case, we could possibly use our class method called employee_from_full_name that accepts three arguments in total. The first one, is the class itself, which is an implicit argument which means that it won\u2019t be provided when calling the method \u2014 Python will automatically do this for us:Note that it is also possible to call employee_from_full_name from object instances although in this context it doesn\u2019t make a lot of sense:Another reason why we might want to create a class method, is when we need to change the state of the class. In our example, the class variable NO_OF_EMPLOYEES keeps track of the number of employees currently working for the company. This method is called every time a new instance of Employee is created and it updates the count accordingly:Static methodsOn the other hand, in static methods neither the instance (i.e. self) nor the class itself (i.e. cls) is passed as an implicit argument. This means that such methods, are not capable of accessing the class itself or its instances.\nNow one could argue that static methods are not useful in the context of classes as they can also be placed in helper modules instead of adding them as members of the class. In object oriented programming, it is important to structure your classes into logical chunks and thus, static methods are quite useful when we need to add a method under a class simply because it logically belongs to the class.\nIn our example, the static method named get_employee_legal_obligations_txt simply returns a string that contains the legal obligations of every single employee of a company. This function, does not interact with the class itself nor with any instance. It could have been placed into a different helper module however, it is only relevant to this class and therefore we have to place it under the Employee class.A static method can be access directly from the class itselfor from an instance of the class:References"
            ]
        },
        {
            "tag": "slice",
            "patterns": [
                "Understanding slicing",
                "Slicing",
                "Slice"
            ],
            "responses": [
                "The syntax is:There is also the step value, which can be used with any of the above:The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:Similarly, step may be a negative number:Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.A slice object can represent a slicing operation, i.e.:is equivalent to:Slice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported.\nTo skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].While the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.",
                "The Python tutorial talks about it (scroll down a bit until you get to the part about slicing).The ASCII art diagram is helpful too for remembering how slices work:One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of n characters has index n.",
                "Enumerating the possibilities allowed by the grammar for the sequence x:Of course, if (high-low)%stride != 0, then the end point will be a little lower than high-1.If stride is negative, the ordering is changed a bit since we're counting down:Extended slicing (with commas and ellipses) are mostly used only by special data structures (like NumPy); the basic sequences don't support them.",
                "The answers above don't discuss slice assignment. To understand slice assignment, it's helpful to add another concept to the ASCII art:One heuristic is, for a slice from zero to n, think:  zero is the beginning, start at the beginning and take n items in a list .Another heuristic is,  for any slice, replace the start by zero, apply the previous heuristic to get the end of the list, then count the first number back up to chop items off the beginning The first rule of slice assignment is that since slicing returns a list, slice assignment requires a list (or other iterable):The second rule of slice assignment, which you can also see above, is that whatever portion of the list is returned by slice indexing, that's the same portion that is changed by slice assignment:The third rule of slice assignment is, the assigned list (iterable) doesn't have to have the same length; the indexed slice is simply sliced out and replaced en masse by whatever is being assigned:The trickiest part to get used to is assignment to empty slices. Using heuristic 1 and 2 it's easy to get your head around indexing an empty slice:And then once you've seen that, slice assignment to the empty slice makes sense too:Note that, since we are not changing the second number of the slice (4), the inserted items always stack right up against the 'o', even when we're assigning to the empty slice. So the position for the empty slice assignment is the logical extension of the positions for the non-empty slice assignments.Backing up a little bit, what happens when you keep going with our procession of counting up the slice beginning?With slicing, once you're done, you're done; it doesn't start slicing backwards. In Python you don't get negative strides unless you explicitly ask for them by using a negative number.There are some weird consequences to the  once you're done, you're done  rule:In fact, compared to indexing, Python slicing is bizarrely error-proof:This can come in handy sometimes, but it can also lead to somewhat strange behavior:Depending on your application, that might... or might not... be what you were hoping for there!Below is the text of my original answer. It has been useful to many people, so I didn't want to delete it.This may also clarify the difference between slicing and indexing.",
                "In short, the colons (:) in subscript notation (subscriptable[subscriptarg]) make slice notation, which has the optional arguments start, stop, and step:Python slicing is a computationally fast way to methodically access parts of your data. In my opinion, to be even an intermediate Python programmer, it's one aspect of the language that it is necessary to be familiar with.To begin with, let's define a few terms:start: the beginning index of the slice, it will include the element at this index unless it is the same as stop, defaults to 0, i.e. the first index. If it's negative, it means to start n items from the end.stop: the ending index of the slice, it does not include the element at this index, defaults to length of the sequence being sliced, that is, up to and including the end.step: the amount by which the index increases, defaults to 1. If it's negative, you're slicing over the iterable in reverse.You can make any of these positive or negative numbers. The meaning of the positive numbers is straightforward, but for negative numbers, just like indexes in Python, you count backwards from the end for the start and stop, and for the step, you simply decrement your index. This example is from the documentation's tutorial, but I've modified it slightly to indicate which item in a sequence each index references:To use slice notation with a sequence that supports it, you must include at least one colon in the square brackets that follow the sequence (which actually implement the __getitem__ method of the sequence, according to the Python data model.)Slice notation works like this:And recall that there are defaults for start, stop, and step, so to access the defaults, simply leave out the argument.Slice notation to get the last nine elements from a list (or any other sequence that supports it, like a string) would look like this:When I see this, I read the part in the brackets as  9th from the end, to the end.  (Actually, I abbreviate it mentally as  -9, on )The full notation isand to substitute the defaults (actually when step is negative, stop's default is -len(my_list) - 1, so None for stop really just means it goes to whichever end step takes it to):The colon, :,  is what tells Python you're giving it a slice and not a regular index. That's why the idiomatic way of making a shallow copy of lists in Python 2 isAnd clearing them is with:(Python 3 gets a list.copy and list.clear method.)By default, when the step argument is empty (or None), it is assigned to +1.But you can pass in a negative integer, and the list (or most other standard sliceables) will be sliced from the end to the beginning.Thus a negative slice will change the defaults for start and stop!I like to encourage users to read the source as well as the documentation. The source code for slice objects and this logic is found here. First we determine if step is negative:If so, the lower bound is -1  meaning we slice all the way up to and including the beginning, and the upper bound is the length minus 1, meaning we start at the end. (Note that the semantics of this -1 is different from a -1 that users may pass indexes in Python indicating the last item.)Otherwise step is positive, and the lower bound will be zero and the upper bound (which we go up to but not including) the length of the sliced list.Then, we may need to apply the defaults for start and stop\u2014the default then for start is calculated as the upper bound when step is negative:and stop, the lower bound:You may find it useful to separate forming the slice from passing it to the list.__getitem__ method (that's what the square brackets do). Even if you're not new to it, it keeps your code more readable so that others that may have to read your code can more readily understand what you're doing.However, you can't just assign some integers separated by colons to a variable. You need to use the slice object:The second argument, None, is required, so that the first argument is interpreted as the start argument otherwise it would be the stop argument.You can then pass the slice object to your sequence:It's interesting that ranges also take slices:Since slices of Python lists create new objects in memory, another important function to be aware of is itertools.islice. Typically you'll want to iterate over a slice, not just have it created statically in memory. islice is perfect for this. A caveat, it doesn't support negative arguments to start, stop, or step, so if that's an issue you may need to calculate indices or reverse the iterable in advance.and now:The fact that list slices make a copy is a feature of lists themselves. If you're slicing advanced objects like a Pandas DataFrame, it may return a view on the original, and not a copy.",
                "And a couple of things that weren't immediately obvious to me when I first saw the slicing syntax:Easy way to reverse sequences!And if you wanted, for some reason, every second item in the reversed sequence:",
                "In Python 2.7Slicing in PythonUnderstanding index assignment is very important.When you say [a:b:c], you are saying depending on the sign of c (forward or backward), start at a and end at b (excluding element at bth index). Use the indexing rule above and remember you will only find elements in this range:But this range continues in both directions infinitely:For example:If your choice of a, b, and c allows overlap with the range above as you traverse using rules for a,b,c above you will either get a list with elements (touched during traversal) or you will get an empty list.One last thing: if a and b are equal, then also you get an empty list:",
                "Found this great table at http://wiki.python.org/moin/MovingToPythonFromOtherLanguages",
                "After using it a bit I realise that the simplest description is that it is exactly the same as the arguments in a for loop...Any of them are optional:Then the negative indexing just needs you to add the length of the string to the negative indices to understand it.This works for me anyway...",
                "I find it easier to remember how it works, and then I can figure out any specific start/stop/step combination.It's instructive to understand range() first:Begin from start, increment by step, do not reach stop.  Very simple.The thing to remember about negative step is that stop is always the excluded end, whether it's higher or lower. If you want same slice in opposite order, it's much cleaner to do the reversal separately: e.g. 'abcde'[1:-2][::-1] slices off one char from left, two from right, then reverses. (See also reversed().)Sequence slicing is same, except it first normalizes negative indexes, and it can never go outside the sequence:TODO: The code below had a bug with  never go outside the sequence  when abs(step)>1; I think I patched it to be correct, but it's hard to understand.Don't worry about the is None details - just remember that omitting start and/or stop always does the right thing to give you the whole sequence.Normalizing negative indexes first allows start and/or stop to be counted from the end independently: 'abcde'[1:-2] == 'abcde'[1:3] == 'bc' despite range(1,-2) == [].\nThe normalization is sometimes thought of as  modulo the length , but note it adds the length just once: e.g. 'abcde'[-53:42] is just the whole string.",
                "I use the  an index points between elements  method of thinking about it myself, but one way of describing it which sometimes helps others get it is this:X is the index of the first element you want.\nY is the index of the first element you don't want.",
                "I hope this will help you to model the list in Python.Reference: http://wiki.python.org/moin/MovingToPythonFromOtherLanguages",
                "This is how I teach slices to newbies:Understanding the difference between indexing and slicing:Wiki Python has this amazing picture which clearly distinguishes indexing and slicing.It is a list with six elements in it. To understand slicing better, consider that list as a set of six boxes placed together. Each box has an alphabet in it.Indexing is like dealing with the contents of box. You can check contents of any box. But you can't check the contents of multiple boxes at once. You can even replace the contents of the box. But you can't place two balls in one box or replace two balls at a time.Slicing is like dealing with boxes themselves. You can pick up the first box and place it on another table. To pick up the box, all you need to know is the position of beginning and ending of the box.You can even pick up the first three boxes or the last two boxes or all boxes between 1 and 4. So, you can pick any set of boxes if you know the beginning and ending. These positions are called start and stop positions.The interesting thing is that you can replace multiple boxes at once. Also you can place multiple boxes wherever you like.Slicing With Step:Till now you have picked boxes continuously. But sometimes you need to pick up discretely. For example, you can pick up every second box. You can even pick up every third box from the end. This value is called step size. This represents the gap between your successive pickups. The step size should be positive if You are picking boxes from the beginning to end and vice versa.How Python Figures Out Missing Parameters:When slicing, if you leave out any parameter, Python tries to figure it out automatically.If you check the source code of CPython, you will find a function called PySlice_GetIndicesEx() which figures out indices to a slice for any given parameters. Here is the logical equivalent code in Python.This function takes a Python object and optional parameters for slicing and returns the start, stop, step, and slice length for the requested slice.This is the intelligence that is present behind slices. Since Python has an built-in function called slice, you can pass some parameters and check how smartly it calculates missing parameters.Note: This post was originally written in my blog, The Intelligence Behind Python Slices.",
                "Python slicing notation:The notation extends to (numpy) matrices and multidimensional arrays.  For example, to slice entire columns you can use:Slices hold references, not copies, of the array elements.  If you want to make a separate copy an array, you can use deepcopy().",
                "You can also use slice assignment to remove one or more elements from a list:",
                "This is just for some extra info...\nConsider the list belowFew other tricks for reversing the list:",
                "To make it simple, remember slice has only one form\uff1aand here is how it works:Another import thing: all start,end, step can be omitted! And if they are omitted, their default value will be used: 0,len(s),1 accordingly.So possible variations are:NOTE: If start >= end (considering only when step>0), Python will return a empty slice [].The above part explains the core features on how slice works, and it will work on most occasions. However, there can be pitfalls you should watch out, and this part explains them.The very first thing that confuses Python learners is that an index can be negative!\nDon't panic: a negative index means count backwards.For example:Making things more confusing is that step can be negative too!A negative step means iterate the array backwards: from the end to start, with the end index included, and the start index excluded from the result.NOTE: when step is negative, the default value for start is len(s) (while end does not equal to 0, because s[::-1] contains s[0]). For example:Be surprised: slice does not raise an IndexError when the index is out of range!If the index is out of range, Python will try its best to set the index to 0 or len(s) according to the situation. For example:Let's finish this answer with examples, explaining everything we have discussed:",
                "As a general rule, writing code with a lot of hardcoded index values leads to a readability\nand maintenance mess. For example, if you come back to the code a year later, you\u2019ll\nlook at it and wonder what you were thinking when you wrote it. The solution shown\nis simply a way of more clearly stating what your code is actually doing.\nIn general, the built-in slice() creates a slice object that can be used anywhere a slice\nis allowed. For example:If you have a slice instance s, you can get more information about it by looking at its\ns.start, s.stop, and s.step attributes, respectively. For example:",
                "The previous answers don't discuss multi-dimensional array slicing which is possible using the famous NumPy package:Slicing can also be applied to multi-dimensional arrays.The  :2  before the comma operates on the first dimension and the  0:3:2  after the comma operates on the second dimension.",
                "I- Convert upper bound  and lower bound into common signs.II- Then check if the step size is a positive or a negative value.(i) If the step size is a positive value, upper bound should be greater than lower bound, otherwise empty string is printed. For example:The output:However if we run the following code:It will return an empty string.(ii) If the step size if a negative value, upper bound should be lesser than lower bound, otherwise empty string will be printed. For example:The output:But if we run the following code:The output will be an empty string.Thus in the code:In the first str2=str[l-1:0:-1], the upper bound is lesser than the lower bound, thus dcb is printed.However in str2=str[l-1:-1:-1], the upper bound is not less than the lower bound (upon converting lower bound into negative value which is -1: since index of last element is -1 as well as 3).",
                "In my opinion, you will understand and memorize better the Python string slicing notation if you look at it the following way (read on).Let's work with the following string ...For those who don't know, you can create any substring from azString using the notation azString[x:y]Coming from other programming languages, that's when the common sense gets compromised. What are x and y?I had to sit down and run several scenarios in my quest for a memorization technique that will help me remember what x and y are and help me slice strings properly at the first attempt.My conclusion is that x and y should be seen as the boundary indexes that are surrounding the strings that we want to extra. So we should see the expression as azString[index1, index2] or even more clearer as azString[index_of_first_character, index_after_the_last_character].Here is an example visualization of that ...So all you have to do is setting index1 and index2 to the values that will surround the desired substring. For instance, to get the substring  cdefgh , you can use azString[2:8], because the index on the left side of  c  is 2 and the one on the right size of  h  is 8.Remember that we are setting the boundaries. And those boundaries are the positions where you could place some brackets that will be wrapped around the substring like this ...a b [ c d e f g h ] i jThat trick works all the time and is easy to memorize.",
                "I personally think about it like a for loop:Also, note that negative values for start and end are relative to the end of the list and computed in the example above by given_index + a.shape[0].",
                "You can run this script and experiment with it, below is some samples that I got from the script.When using a negative step, notice that the answer is shifted to the right by 1.",
                "My brain seems happy to accept that lst[start:end] contains the start-th item. I might even say that it is a 'natural assumption'.But occasionally a doubt creeps in and my brain asks for reassurance that it does not contain the end-th element.In these moments I rely on this simple theorem:This pretty property tells me that lst[start:end] does not contain the end-th item because it is in lst[end:].Note that this theorem is true for any n at all. For example, you can check thatreturns True.",
                "In Python, the most basic form for slicing is the following:where l is some collection, start is an inclusive index, and end is an exclusive index.When slicing from the start, you can omit the zero index, and when slicing to the end, you can omit the final index since it is redundant, so do not be verbose:Negative integers are useful when doing offsets relative to the end of a collection:It is possible to provide indices that are out of bounds when slicing such as:Keep in mind that the result of slicing a collection is a whole new collection. In addition, when using slice notation in assignments, the length of the slice assignments do not need to be the same. The values before and after the assigned slice will be kept, and the collection will shrink or grow to contain the new values:If you omit the start and end index, you will make a copy of the collection:If the start and end indexes are omitted when performing an assignment operation, the entire content of the collection will be replaced with a copy of what is referenced:Besides basic slicing, it is also possible to apply the following notation:where l is a collection, start is an inclusive index, end is an exclusive index, and step is a stride that can be used to take every nth item in l.Using step provides a useful trick to reverse a collection in Python:It is also possible to use negative integers for step as the following example:However, using a negative value for step could become very confusing. Moreover, in order to be Pythonic, you should avoid using start, end, and step in a single slice. In case this is required, consider doing this in two assignments (one to slice, and the other to stride).",
                "I want to add one Hello, World! example that explains the basics of slices for the very beginners. It helped me a lot.Let's have a list with six values ['P', 'Y', 'T', 'H', 'O', 'N']:Now the simplest slices of that list are its sublists. The notation is [<index>:<index>] and the key is to read it like this:Now if you make a slice [2:5] of the list above, this will happen:You made a cut before the element with index 2 and another cut before the element with index 5. So the result will be a slice between those two cuts, a list ['T', 'H', 'O'].",
                "Most of the previous answers clears up questions about slice notation.The extended indexing syntax used for slicing is aList[start:stop:step], and basic examples are::More slicing examples: 15 Extended Slices",
                "The below is the example of an index of a string:Slicing example: [start:end:step]Below is the example usage:",
                "If you feel negative indices in slicing is confusing, here's a very easy way to think about it: just replace the negative index with len - index. So for example, replace -3 with len(list) - 3.The best way to illustrate what slicing does internally is just show it in code that implements this operation:",
                "I don't think that the Python tutorial diagram (cited in various other answers) is good as this suggestion works for positive stride, but does not for a negative stride.This is the diagram:From the diagram, I expect a[-4,-6,-1] to be yP but it is ty.What always work is to think in characters or slots and use indexing as a half-open interval -- right-open if positive stride, left-open if negative stride.This way, I can think of a[-4:-6:-1] as a(-6,-4] in interval terminology."
            ]
        },
        {
            "tag": "index",
            "patterns": [
                "Finding the index of an item in a list",
                "List index",
                "index"
            ],
            "responses": [
                "The simplest case is handled by the built-in .index method of the list:Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no such item.The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.Thus, we can do:An index call checks every element of the list in order, until it finds a match. If the list is long, and if there is no guarantee that the value will be near the beginning, this can slow down the code.This problem can only be completely avoided by using a different data structure. However, if the element is known to be within a certain part of the list, the start and end parameters can be used to narrow the search.For example:The second call is orders of magnitude faster, because it only has to search through 10 elements, rather than all 1 million.A call to index searches through the list in order until it finds a match, and stops there. If there could be more than one occurrence of the value, and all indices are needed, index cannot solve the problem:Instead, use a list comprehension or generator expression to do the search, with enumerate to get indices:The list comprehension and generator expression techniques still work if there is only one match, and are more generalizable.As noted in the documentation above, using .index will raise an exception if the searched-for value is not in the list:If this is a concern, either explicitly check first using item in my_list, or handle the exception with try/except as appropriate.The explicit check is simple and readable, but it must iterate the list a second time. See What is the EAFP principle in Python? for more guidance on this choice.",
                "The majority of answers explain how to find a single index, but their methods do not return multiple indexes if the item is in the list multiple times. Use enumerate():The index() function only returns the first occurrence, while enumerate() returns all occurrences.As a list comprehension:Here's also another small solution with itertools.count() (which is pretty much the same approach as enumerate):This is more efficient for larger lists than using enumerate():",
                "To get all indexes:",
                "index() returns the first index of value!|  index(...)\n   |      L.index(value, [start, [stop]]) -> integer -- return first index of value",
                "A problem will arise if the element is not in the list. This function handles the issue:",
                "You have to set a condition to check if the element you're searching is in the list",
                "If you want all indexes, then you can use NumPy:It is clear, readable solution.",
                "All of the proposed functions here reproduce inherent language behavior but obscure what's going on.Why write a function with exception handling if the language provides the methods to do what you want itself?",
                "For a list [ foo ,  bar ,  baz ] and an item in the list  bar , what's the cleanest way to get its index (1) in Python?Well, sure, there's the index method, which returns the index of the first occurrence:There are a couple of issues with this method:If the value could be missing, you need to catch the ValueError.You can do so with a reusable definition like this:And use it like this:And the downside of this is that you will probably have a check for if the returned value is or is not None:If you could have more occurrences, you'll not get complete information with list.index:You might enumerate into a list comprehension the indexes:If you have no occurrences, you can check for that with boolean check of the result, or just do nothing if you loop over the results:If you have pandas, you can easily get this information with a Series object:A comparison check will return a series of booleans:Pass that series of booleans to the series via subscript notation, and you get just the matching members:If you want just the indexes, the index attribute returns a series of integers:And if you want them in a list or tuple, just pass them to the constructor:Yes, you could use a list comprehension with enumerate too, but that's just not as elegant, in my opinion - you're doing tests for equality in Python, instead of letting builtin code written in C handle it:The XY problem is asking about your attempted solution rather than your actual problem.Why do you think you need the index given an element in a list?If you already know the value, why do you care where it is in a list?If the value isn't there, catching the ValueError is rather verbose - and I prefer to avoid that.I'm usually iterating over the list anyways, so I'll usually keep a pointer to any interesting information, getting the index with enumerate.If you're munging data, you should probably be using pandas - which has far more elegant tools than the pure Python workarounds I've shown.I do not recall needing list.index, myself. However, I have looked through the Python standard library, and I see some excellent uses for it.There are many, many uses for it in idlelib, for GUI and text parsing.The keyword module uses it to find comment markers in the module to automatically regenerate the list of keywords in it via metaprogramming.In Lib/mailbox.py it seems to be using it like an ordered mapping:andIn Lib/http/cookiejar.py, seems to be used to get the next month:In Lib/tarfile.py similar to distutils to get a slice up to an item:In Lib/pickletools.py:What these usages seem to have in common is that they seem to operate on lists of constrained sizes (important because of O(n) lookup time for list.index), and they're mostly used in parsing (and UI in the case of Idle).While there are use-cases for it, they are fairly uncommon. If you find yourself looking for this answer, ask yourself if what you're doing is the most direct usage of the tools provided by the language for your use-case.",
                "With enumerate(alist) you can store the first element (n) that is the index of the list when the element x is equal to what you look for.This function takes the item and the list as arguments and return the position of the item in the list, like we saw before.OutputOutput:",
                "You can apply this for any member of the list to get their index",
                "All indexes with the zip function:",
                "Simply you can go with",
                "Another option",
                "... like confirming the existence of the item before getting the index.  The nice thing about this approach is the function always returns a list of indices -- even if it is an empty list.  It works with strings as well.When pasted into an interactive python window:After another year of heads-down python development, I'm a bit embarrassed by my original answer, so to set the record straight, one can certainly use the above code; however, the much more idiomatic way to get the same behavior would be to use list comprehension, along with the enumerate() function.Something like this:Which, when pasted into an interactive python window yields:And now, after reviewing this question and all the answers, I realize that this is exactly what FMc suggested in his earlier answer.  At the time I originally answered this question, I didn't even see that answer, because I didn't understand it.  I hope that my somewhat more verbose example will aid understanding.If the single line of code above still doesn't make sense to you, I highly recommend you Google 'python list comprehension' and take a few minutes to familiarize yourself.  It's just one of the many powerful features that make it a joy to use Python to develop code.",
                "My friend, I have made the easiest code to solve your question. While you were receiving gigantic lines of codes, I am here to cater you a two line code which is all due to the help of index() function in python.Output:I Hope I have given you the best and the simplest answer which might help you greatly.",
                "A variant on the answer from FMc and user7177 will give a dict that can return all indices for any entry:You could also use this as a one liner to get all indices for a single entry. There are no guarantees for efficiency, though I did use set(a) to reduce the number of times the lambda is called.",
                "Finding index of item x in list L:",
                "This solution is not as powerful as others, but if you're a beginner and only know about forloops it's still possible to find the first index of an item while avoiding the ValueError:",
                "There is a chance that that value may not be present so to avoid this ValueError, we can check if that actually exists in the list .",
                "List comprehension would be the best option to acquire a compact implementation in finding the index of an item in a list.",
                "It just uses the python function array.index() and with a simple Try / Except it returns the position of the record if it is found in the list and return -1 if it is not found in the list (like on JavaScript with the function indexOf()).In this case  mango  is not present in the list fruits so the pos variable is -1, if I had searched for  cherry  the pos variable would be 2.",
                "There is a more functional answer to this.More generic form:",
                "Python index() method throws an error if the item was not found. So instead you can make it similar to the indexOf() function of JavaScript which returns -1 if the item was not found:",
                "This accounts for if the string is not in the list too, if it isn't in the list then location = -1",
                "If you are going to find an index once then using  index  method is fine. However, if you are going to search your data more than once then I recommend using bisect module. Keep in mind that using bisect module data must be sorted. So you sort data once and then you can use bisect.\nUsing bisect module on my machine is about 20 times faster than using index method.Here is an example of code using Python 3.8 and above syntax:Output:",
                "Since Python lists are zero-based, we can use the zip built-in function as follows:where  haystack  is the list in question and  needle  is the item to look for.(Note: Here we are iterating using i to get the indexes, but if we need rather to focus on the items we can switch to j.)",
                "It is mentioned in numerous answers that the built-in method of list.index(item) method is an O(n) algorithm. It is fine if you need to perform this once. But if you need to access the indices of elements a number of times, it makes more sense to first create a dictionary (O(n)) of item-index pairs, and then access the index at O(1) every time you need it.If you are sure that the items in your list are never repeated, you can easily:If you may have duplicate elements, and need to return all of their indices:"
            ]
        },
        {
            "tag": "dictionary_for_loop",
            "patterns": [
                "Iterating over dictionaries using 'for' loops",
                "Dictionary for loops",
                "For loops in dictionaries"
            ],
            "responses": [
                "key is just a variable name.will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:For Python 3.x:For Python 2.x:To test for yourself, change the word key to poop.In Python 3.x, iteritems() was replaced with simply items(), which returns a set-like view backed by the dict, like iteritems() but even better. \nThis is also available in 2.7 as viewitems().The operation items() will work for both 2 and 3, but in 2 it will return a list of the dictionary's (key, value) pairs, which will not reflect changes to the dict that happen after the items() call. If you want the 2.x behavior in 3.x, you can call list(d.items()).",
                "It's not that key is a special word, but that dictionaries implement the iterator protocol.  You could do this in your class, e.g. see this question for how to build class iterators.In the case of dictionaries, it's implemented at the C level.  The details are available in PEP 234.  In particular, the section titled  Dictionary Iterators :Dictionaries implement a tp_iter slot that returns an efficient\n  iterator that iterates over the keys of the dictionary. [...] This \n  means that we can writewhich is equivalent to, but much faster thanas long as the restriction on modifications to the dictionary\n  (either by the loop or by another thread) are not violated.Add methods to dictionaries that return different kinds of\n  iterators explicitly:This means that for x in dict is shorthand for for x in\n   dict.iterkeys().In Python 3, dict.iterkeys(), dict.itervalues() and dict.iteritems() are no longer supported. Use dict.keys(), dict.values() and dict.items() instead.",
                "Iterating over a dict iterates through its keys in no particular order, as you can see here:(This is no longer the case in Python 3.6, but note that it's not guaranteed behaviour yet.)For your example, it is a better idea to use dict.items():This gives you a list of tuples. When you loop over them like this, each tuple is unpacked into k and v automatically:Using k and v as variable names when looping over a dict is quite common if the body of the loop is only a few lines. For more complicated loops it may be a good idea to use more descriptive names:It's a good idea to get into the habit of using format strings:",
                "key is simply a variable.For Python2.X:... or better,For Python3.X:",
                "When you iterate through dictionaries using the for .. in ..-syntax, it always iterates over the keys (the values are accessible using dictionary[key]).To iterate over key-value pairs, use the following:",
                "This is a very common looping idiom. in is an operator. For when to use for key in dict and when it must be for key in dict.keys() see David Goodger's Idiomatic Python article (archived copy).",
                "I have a use case where I have to iterate through the dict to get the key, value pair, also the index indicating where I am. This is how I do it:Note that the parentheses around the key, value are important, without them, you'd get an ValueError  not enough values to unpack .",
                "How does Python recognize that it needs only to read the key from the\n  dictionary? Is key a special word in Python? Or is it simply a\n  variable?It's not just for loops. The important word here is  iterating .A dictionary is a mapping of keys to values:Any time we iterate over it, we iterate over the keys. The variable name key is only intended to be descriptive - and it is quite apt for the purpose.This happens in a list comprehension:It happens when we pass the dictionary to list (or any other collection type object):The way Python iterates is, in a context where it needs to, it calls the __iter__ method of the object (in this case the dictionary) which returns an iterator (in this case, a keyiterator object):We shouldn't use these special methods ourselves, instead, use the respective builtin function to call it, iter:Iterators have a __next__ method - but we call it with the builtin function, next:When an iterator is exhausted, it raises StopIteration. This is how Python knows to exit a for loop, or a list comprehension, or a generator expression, or any other iterative context. Once an iterator raises StopIteration it will always raise it - if you want to iterate again, you need a new one.We've seen dicts iterating in many contexts. What we've seen is that any time we iterate over a dict, we get the keys. Back to the original example:If we change the variable name, we still get the keys. Let's try it:If we want to iterate over the values, we need to use the .values method of dicts, or for both together, .items:In the example given, it would be more efficient to iterate over the items like this:But for academic purposes, the question's example is just fine.",
                "For Iterating through dictionaries, The below code can be used.",
                "You can check the implementation of CPython's dicttype on GitHub. This is the signature of method that implements the dict iterator:CPython dictobject.c",
                "To iterate over keys, it is slower but better to use my_dict.keys(). If you tried to do something like this:it would create a runtime error because you are changing the keys while the program is running. If you are absolutely set on reducing time, use the for key in my_dict way, but you have been warned.",
                "If you are looking for a clear and visual example:Result:",
                "This will print the output in sorted order by values in ascending order.Output:",
                "Let's get straight to the point. If the word key is just a variable, as you have mentioned then the main thing to note is that when you run a 'FOR LOOP' over a dictionary it runs through only the 'keys' and ignores the 'values'.rather try this:but if you use a function like:in the above case 'keys' is just not a variable, its a function.",
                "A dictionary in Python is a collection of key-value pairs. Each key is connected to a value, and you can use a key to access the value associated with that key. A key's value can be a number, a string, a list, or even another dictionary. In this case, threat each  key-value pair  as a separate row in the table: d is your table with two columns. the key is the first column, key[value] is your second column. Your for loop is a standard way to iterate over a table."
            ]
        },
        {
            "tag": "global_variables",
            "patterns": [
                "Using global variables in a function",
                "global",
                "variables",
                "Global variables"
            ],
            "responses": [
                "You can use a global variable within other functions by declaring it as global within each function that assigns a value to it:Since it's unclear whether globvar = 1 is creating a local variable or changing a global variable, Python defaults to creating a local variable, and makes you explicitly choose the other behavior with the global keyword.See other answers if you want to share a global variable across modules.",
                "If I'm understanding your situation correctly, what you're seeing is the result of how Python handles local (function) and global (module) namespaces.Say you've got a module like this:You might expecting this to print 42, but instead it prints 5.  As has already been mentioned, if you add a 'global' declaration to func1(), then func2() will print 42.What's going on here is that Python assumes that any name that is assigned to, anywhere within a function, is local to that function unless explicitly told otherwise.  If it is only reading from a name, and the name doesn't exist locally, it will try to look up the name in any containing scopes (e.g. the module's global scope).When you assign 42 to the name _my_global, therefore, Python creates a local variable that shadows the global variable of the same name.  That local goes out of scope and is garbage-collected when func1() returns; meanwhile, func2() can never see anything other than the (unmodified) global name.  Note that this namespace decision happens at compile time, not at runtime -- if you were to read the value of _my_global inside func1() before you assign to it, you'd get an UnboundLocalError, because Python has already decided that it must be a local variable but it has not had any value associated with it yet.  But by using the 'global' statement, you tell Python that it should look elsewhere for the name instead of assigning to it locally.(I believe that this behavior originated largely through an optimization of local namespaces -- without this behavior,  Python's VM would need to perform at least three name lookups each time a new name is assigned to inside a function (to ensure that the name didn't already exist at module/builtin level), which would significantly slow down a very common operation.)",
                "You may want to explore the notion of namespaces. In Python, the module is the natural place for global data:Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user\u2019s global variables. On the other hand, if you know what you are doing you can touch a module\u2019s global variables with the same notation used to refer to its functions, modname.itemname.A specific use of global-in-a-module is described here - How do I share global variables across modules?, and for completeness the contents are shared here:The canonical way to share information across modules within a single program is to create a special configuration module (often called config or cfg). Just import the configuration module in all modules of your application; the module then becomes available as a global name. Because there is only one instance of each module, any changes made to the module object get reflected everywhere. For example:File: config.pyFile: mod.pyFile: main.py",
                "Python uses a simple heuristic to decide which scope it should load a variable from, between local and global.  If a variable name appears on the left hand side of an assignment, but is not declared global, it is assumed to be local.  If it does not appear on the left hand side of an assignment, it is assumed to be global.See how baz, which appears on the left side of an assignment in foo(), is the only LOAD_FAST variable.",
                "If you want to refer to a global variable in a function, you can use the global keyword to declare which variables are global. You don't have to use it in all cases (as someone here incorrectly claims) - if the name referenced in an expression cannot be found in local scope or scopes in the functions in which this function is defined, it is looked up among global variables.However, if you assign to a new variable not declared as global in the function, it is implicitly declared as local, and it can overshadow any existing global variable with the same name.Also, global variables are useful, contrary to some OOP zealots who claim otherwise - especially for smaller scripts, where OOP is overkill.",
                "We can create a global with the following function:Writing a function does not actually run its code. So we call the create_global_variable function:You can just use it, so long as you don't expect to change which object it points to:For example,and now we can use the global variable:To point the global variable at a different object, you are required to use the global keyword again:Note that after writing this function, the code actually changing it has still not run:So after calling the function:we can see that the global variable has been changed. The global_variable name now points to 'Bar':Note that  global  in Python is not truly global - it's only global to the module level. So it is only available to functions written in the modules in which it is global. Functions remember the module in which they are written, so when they are exported into other modules, they still look in the module in which they were created to find global variables.If you create a local variable with the same name, it will overshadow a global variable:But using that misnamed local variable does not change the global variable:Note that you should avoid using the local variables with the same names as globals unless you know precisely what you are doing and have a very good reason to do so. I have not yet encountered such a reason.A follow on comment asks:what to do if I want to create a global variable inside a function inside a class and want to use that variable inside another function inside another class?Here I demonstrate we get the same behavior in methods as we do in regular functions:And now:But I would suggest instead of using global variables you use class attributes, to avoid cluttering the module namespace. Also note we don't use self arguments here - these could be class methods (handy if mutating the class attribute from the usual cls argument) or static methods (no self or cls).",
                "In addition to already existing answers and to make this more confusing:In Python, variables that are only referenced inside a function are\n  implicitly global. If a variable is assigned a new value anywhere\n  within the function\u2019s body, it\u2019s assumed to be a local. If a variable\n  is ever assigned a new value inside the function, the variable is\n  implicitly local, and you need to explicitly declare it as \u2018global\u2019.Though a bit surprising at first, a moment\u2019s consideration explains\n  this. On one hand, requiring global for assigned variables provides a\n  bar against unintended side-effects. On the other hand, if global was\n  required for all global references, you\u2019d be using global all the\n  time. You\u2019d have to declare as global every reference to a built-in\n  function or to a component of an imported module. This clutter would\n  defeat the usefulness of the global declaration for identifying\n  side-effects.Source: What are the rules for local and global variables in Python?.",
                "With parallel execution, global variables can cause unexpected results if you don't understand what is happening. Here is an example of using a global variable within multiprocessing. We can clearly see that each process works with its own copy of the variable:Output:",
                "As it turns out the answer is always simple.Here is a small sample module with a simple way to show it in a main definition:Here is how to show it in a main definition:This simple code works just like that, and it will execute. I hope it helps.",
                "What you are saying is to use the method like this:But the better way is to use the global variable like this:Both give the same output.",
                "You need to reference the global variable in every function you want to use.As follows:",
                "Try this:",
                "You're not actually storing the global in a local variable, just creating a local reference to the same object that your original global reference refers to. Remember that pretty much everything in Python is a name referring to an object, and nothing gets copied in usual operation.If you didn't have to explicitly specify when an identifier was to refer to a predefined global, then you'd presumably have to explicitly specify when an identifier is a new local variable instead (for example, with something like the 'var' command seen in JavaScript). Since local variables are more common than global variables in any serious and non-trivial system, Python's system makes more sense in most cases.You could have a language which attempted to guess, using a global variable if it existed or creating a local variable if it didn't. However, that would be very error-prone. For example, importing another module could inadvertently introduce a global variable by that name, changing the behaviour of your program.",
                "In case you have a local variable with the same name, you might want to use the globals() function.",
                "Following on and as an add on, use a file to contain all global variables all declared locally and then import as:File initval.py:File getstocks.py:",
                "Writing to explicit elements of a global array does not apparently need the global declaration, though writing to it  wholesale  does have that requirement:",
                "I'm adding this as I haven't seen it in any of the other answers and it might be useful for someone struggling with something similar. The globals() function returns a mutable global symbol dictionary where you can  magically  make data available for the rest of your code. \nFor example:andWill just let you dump/load variables out of and into the global namespace. Super convenient, no muss, no fuss. Pretty sure it's Python 3 only.",
                "Reference the class namespace where you want the change to show up.In this example, runner is using max from the file config. I want my test to change the value of max when runner is using it.main/config.pymain/runner.pytests/runner_test.py",
                "Explanation:global_var is a global variable and all functions and classes can access that variable.The func_1() accessed that global variable using the keyword global which points to the variable which is written in the global scope. If I didn't write the global keyword the variable global_var inside func_1 is considered a local variable that is only usable inside the function. Then inside func_1, I have incremented that global variable by 1.The same happened in func_2().After calling func_1 and func_2, you'll see the global_var is changed",
                "Globals in connection with multiprocessing on different platforms/envrionments \nas Windows/Mac OS on the one side and Linux on the other are troublesome.I will show you this with a simple example pointing out a problem which I run into some time ago.If you want to understand, why things are different on Windows/MacOs and Linux you \nneed to know that, the default mechanism to start a new process on ...They are different in Memory allocation an initialisation ... (but I don't go into this\nhere).Let's have a look at the problem/example ...If you run this on Windows (And I suppose on MacOS too), you get the following output ...If you run this on Linux, you get the following instead.",
                "There are 2 ways to declare a variable as global:1. assign variable inside functions and use global line2. assign variable outside functions:Now we can use these declared global variables in the other functions:Note 1:If you want to change a global variable inside another function like update_variables() you should use global line in that function before assigning the variable:Note 2:There is a exception for note 1 for list and dictionary variables while not using global line inside a function:",
                "Though this has been answered, I am giving solution again as I prefer single line\nThis is if you wish to create global variable within function",
                "Like this code:Key:If you declare a variable outside the strings, it become global.If you declare a variable inside the strings, it become local.If you want to declare a global variable inside the strings, use the keyword global before the variable you want to declare:and then you have 100 in the document.",
                "Here we are comparing global variable Initialized that 0, so while loop condition got trueFunction will get called.Loop will be infinite",
                "if you want to access global var you just add global keyword inside your function\nex:\nglobal_var = 'yeah'"
            ]
        },
        {
            "tag": "DataFrame",
            "patterns": [
                "How to iterate over rows in a DataFrame in Pandas",
                "Panda DataFrames",
                "Rows in Pandas",
                "Dataframe rows"
            ],
            "responses": [
                "DataFrame.iterrows is a generator which yields both the index and row (as a Series):",
                "Iteration in Pandas is an anti-pattern and is something you should only do when you have exhausted every other option. You should not use any function with  iter  in its name for more than a few thousand rows or you will have to get used to a lot of waiting.Do you want to print a DataFrame? Use DataFrame.to_string().Do you want to compute something? In that case, search for methods in this order (list modified from here):iterrows and itertuples (both receiving many votes in answers to this question) should be used in very rare circumstances, such as generating row objects/nametuples for sequential processing, which is really the only thing these functions are useful for.Appeal to AuthorityThe documentation page on iteration has a huge red warning box that says:Iterating through pandas objects is generally slow. In many cases, iterating manually over the rows is not needed [...].* It's actually a little more complicated than  don't . df.iterrows() is the correct answer to this question, but  vectorize your ops  is the better one. I will concede that there are circumstances where iteration cannot be avoided (for example, some operations where the result depends on the value computed for the previous row). However, it takes some familiarity with the library to know when. If you're not sure whether you need an iterative solution, you probably don't. PS: To know more about my rationale for writing this answer, skip to the very bottom.A good number of basic operations and computations are  vectorised  by pandas (either through NumPy, or through Cythonized functions). This includes arithmetic, comparisons, (most) reductions, reshaping (such as pivoting), joins, and groupby operations. Look through the documentation on Essential Basic Functionality to find a suitable vectorised method for your problem.If none exists, feel free to write your own using custom Cython extensions.List comprehensions should be your next port of call if 1) there is no vectorized solution available, 2) performance is important, but not important enough to go through the hassle of cythonizing your code, and 3) you're trying to perform elementwise transformation on your code. There is a good amount of evidence to suggest that list comprehensions are sufficiently fast (and even sometimes faster) for many common Pandas tasks.The formula is simple,If you can encapsulate your business logic into a function, you can use a list comprehension that calls it. You can make arbitrarily complex things work through the simplicity and speed of raw Python code.CaveatsList comprehensions assume that your data is easy to work with - what that means is your data types are consistent and you don't have NaNs, but this cannot always be guaranteed.*Your mileage may vary for the reasons outlined in the Caveats section above.Let's demonstrate the difference with a simple example of adding two pandas columns A + B. This is a vectorizable operation, so it will be easy to contrast the performance of the methods discussed above.Benchmarking code, for your reference. The line at the bottom measures a function written in numpandas, a style of Pandas that mixes heavily with NumPy to squeeze out maximum performance. Writing numpandas code should be avoided unless you know what you're doing. Stick to the API where you can (i.e., prefer vec over vec_numpy).I should mention, however, that it isn't always this cut and dry. Sometimes the answer to  what is the best method for an operation  is  it depends on your data . My advice is to test out different approaches on your data before settling on one.Most of the analyses performed on the various alternatives to the iter family has been through the lens of performance. However, in most situations you will typically be working on a reasonably sized dataset (nothing beyond a few thousand or 100K rows) and performance will come second to simplicity/readability of the solution.Here is my personal preference when selecting a method to use for a problem.For the novice:Vectorization (when possible); apply(); List Comprehensions; itertuples()/iteritems(); iterrows(); CythonFor the more experienced:Vectorization (when possible); apply(); List Comprehensions; Cython; itertuples()/iteritems(); iterrows()Vectorization prevails as the most idiomatic method for any problem that can be vectorized. Always seek to vectorize! When in doubt, consult the docs, or look on Stack Overflow for an existing question on your particular task.I do tend to go on about how bad apply is in a lot of my posts, but I do concede it is easier for a beginner to wrap their head around what it's doing. Additionally, there are quite a few use cases for apply has explained in this post of mine.Cython ranks lower down on the list because it takes more time and effort to pull off correctly. You will usually never need to write code with pandas that demands this level of performance that even a list comprehension cannot satisfy.* As with any personal opinion, please take with heaps of salt!10 Minutes to pandas, and Essential Basic Functionality - Useful links that introduce you to Pandas and its library of vectorized*/cythonized functions.Enhancing Performance - A primer from the documentation on enhancing standard Pandas operationsAre for-loops in pandas really bad? When should I care? - a detailed write-up by me on list comprehensions and their suitability for various operations (mainly ones involving non-numeric data)When should I (not) want to use pandas apply() in my code? - apply is slow (but not as slow as the iter* family. There are, however, situations where one can (or should) consider apply as a serious alternative, especially in some GroupBy operations).* Pandas string methods are  vectorized  in the sense that they are specified on the series but operate on each element. The underlying mechanisms are still iterative, because string operations are inherently hard to vectorize.A common trend I notice from new users is to ask questions of the form  How can I iterate over my df to do X? . Showing code that calls iterrows() while doing something inside a for loop. Here is why. A new user to the library who has not been introduced to the concept of vectorization will likely envision the code that solves their problem as iterating over their data to do something. Not knowing how to iterate over a DataFrame, the first thing they do is Google it and end up here, at this question. They then see the accepted answer telling them how to, and they close their eyes and run this code without ever first questioning if iteration is the right thing to do.The aim of this answer is to help new users understand that iteration is not necessarily the solution to every problem, and that better, faster and more idiomatic solutions could exist, and that it is worth investing time in exploring them. I'm not trying to start a war of iteration vs. vectorization, but I want new users to be informed when developing solutions to their problems with this library.",
                "First consider if you really need to iterate over rows in a DataFrame. See this answer for alternatives.If you still need to iterate over rows, you can use methods below. Note some  important caveats which are not mentioned in any of the other answers.DataFrame.iterrows()DataFrame.itertuples()itertuples() is supposed to be faster than iterrows()But be aware, according to the docs (pandas 0.24.2 at the moment):Because iterrows returns a Series for each row, it does not preserve dtypes across the rows (dtypes are preserved across columns for DataFrames). To preserve dtypes while iterating over the rows, it is better to use itertuples() which returns namedtuples of the values and which is generally much faster than iterrows()You should never modify something you are iterating over. This is not guaranteed to work in all cases. Depending on the data types, the iterator returns a copy and not a view, and writing to it will have no effect.Use DataFrame.apply() instead:The column names will be renamed to positional names if they are invalid Python identifiers, repeated, or start with an underscore. With a large number of columns (>255), regular tuples are returned.See pandas docs on iteration for more details.",
                "You should use df.iterrows(). Though iterating row-by-row is not especially efficient since Series objects have to be created.",
                "While iterrows() is a good option, sometimes itertuples() can be much faster:",
                "You can use the df.iloc function as follows:",
                "You can also use df.apply() to iterate over rows and access multiple columns for a function.docs: DataFrame.apply()",
                "If you really have to iterate a Pandas dataframe, you will probably want to avoid using iterrows(). There are different methods and the usual iterrows() is far from being the best. itertuples() can be 100 times faster.In short:Generate a random dataframe with a million rows and 4 columns:1) The usual iterrows() is convenient, but damn slow:2) The default itertuples() is already much faster, but it doesn't work with column names such as My Col-Name is very Strange (you should avoid this method if your columns are repeated or if a column name cannot be simply converted to a Python variable name).:3) The default itertuples() using name=None is even faster but not really convenient as you have to define a variable per column.4) Finally, the named itertuples() is slower than the previous point, but you do not have to define a variable per column and it works with column names such as My Col-Name is very Strange.Output:This article is a very interesting comparison between iterrows and itertuples",
                "I was looking for How to iterate on rows and columns and ended here so:",
                "We have multiple options to do the same, and lots of folks have shared their answers.I found the below two methods easy and efficient to do:Example:Note: itertuples() is supposed to be faster than iterrows()",
                "You can write your own iterator that implements namedtupleThis is directly comparable to pd.DataFrame.itertuples.  I'm aiming at performing the same task with more efficiency.For the given dataframe with my function:Or with pd.DataFrame.itertuples:A comprehensive test\nWe test making all columns available and subsetting the columns.",
                "To loop all rows in a dataframe you can use:",
                "Update: cs95 has updated his answer to include plain numpy vectorization. You can simply refer to his answer.cs95 shows that Pandas vectorization far outperforms other Pandas methods for computing stuff with dataframes.I wanted to add that if you first convert the dataframe to a NumPy array and then use vectorization, it's even faster than Pandas dataframe vectorization, (and that includes the time to turn it back into a dataframe series).If you add the following functions to cs95's benchmark code, this becomes pretty evident:",
                "Sometimes a useful pattern is:Which results in:",
                "To loop all rows in a dataframe and use values of each row conveniently, namedtuples can be converted to ndarrays. For example:Iterating over the rows:results in:Please note that if index=True, the index is added as the first element of the tuple, which may be undesirable for some applications.",
                "In short",
                "There is a way to iterate throw rows while getting a DataFrame in return, and not a Series. I don't see anyone mentioning that you can pass index as a list for the row to be returned as a DataFrame:Note the usage of double brackets. This returns a DataFrame with a single row.",
                "For both viewing and modifying values, I would use iterrows(). In a for loop and by using tuple unpacking (see the example: i, row), I use the row for only viewing the value and use i with the loc method when I want to modify values. As stated in previous answers, here you should not modify something you are iterating over.Here the row in the loop is a copy of that row, and not a view of it. Therefore, you should NOT write something like row['A'] = 'New_Value', it will not modify the DataFrame. However, you can use i and loc and specify the DataFrame to do the work.",
                "There are so many ways to iterate over the rows in Pandas dataframe. One very simple and intuitive way is:",
                "The easiest way, use the apply function",
                "As many answers here correctly point out, your default plan in Pandas should be to write vectorized code (with its implicit loops) rather than attempting an explicit loop yourself.  But the question remains whether you should ever write loops in Pandas, and if so what's the best way to loop in those situations.I believe there is at least one general situation where loops are appropriate: when you need to calculate some function that depends on values in other rows in a somewhat complex manner.  In this case, the looping code is often simpler, more readable, and less error prone than vectorized code.The looping code might even be faster too, as you'll see below, so loops might make sense in cases where speed is of utmost importance. But really, those are just going to be subsets of cases where you probably should have been working in numpy/numba (rather than Pandas) to begin with, because optimized numpy/numba will almost always be faster than Pandas.Let's show this with an example.  Suppose you want to take a cumulative sum of a column, but reset it whenever some other column equals zero:This is a good example where you could certainly write one line of Pandas to achieve this, although it's not especially readable, especially if you aren't fairly experienced with Pandas already:That's going to be fast enough for most situations, although you could also write faster code by avoiding the groupby, but it will likely be even less readable.Alternatively, what if we write this as a loop?  You could do something like the following with NumPy:Admittedly, there's a bit of overhead there required to convert DataFrame columns to NumPy arrays, but the core piece of code is just one line of code that you could read even if you didn't know anything about Pandas or NumPy:And this code is actually faster than the vectorized code.  In some quick tests with 100,000 rows, the above is about 10x faster than the groupby approach.  Note that one key to the speed there is numba, which is optional.  Without the  @nb.jit  line, the looping code is actually about 10x slower than the groupby approach.Clearly this example is simple enough that you would likely prefer the one line of pandas to writing a loop with its associated overhead.  However, there are more complex versions of this problem for which the readability or speed of the NumPy/numba loop approach likely makes sense.",
                "You can also do NumPy indexing for even greater speed ups. It's not really iterating but works much better than iteration for certain applications.You may also want to cast it to an array. These indexes/selections are supposed to act like NumPy arrays already, but I ran into issues and needed to cast",
                "df.iterrows() returns tuple(a, b) where a is the index and b is the row.",
                "Probably the most elegant solution (but certainly not the most efficient):Note that:Still, I think this option should be included here, as a straightforward solution to a (one should think) trivial problem.",
                "This example uses iloc to isolate each digit in the data frame.",
                "Disclaimer: Although here are so many answers which recommend not using an iterative (loop) approach (and I mostly agree), I would still see it as a reasonable approach for the following situation:Let's say you have a large dataframe which contains incomplete user data. Now you have to extend this data with additional columns, for example, the user's age and gender.Both values have to be fetched from a backend API. I'm assuming the API doesn't provide a  batch  endpoint (which would accept multiple user IDs at once). Otherwise, you should rather call the API only once.The costs (waiting time) for the network request surpass the iteration of the dataframe by far. We're talking about network round trip times of hundreds of milliseconds compared to the negligibly small gains in using alternative approaches to iterations.So in this case, I would absolutely prefer using an iterative approach. Although the network request is expensive, it is guaranteed being triggered only once for each row in the dataframe. Here is an example using DataFrame.iterrows:",
                "Some libraries (e.g. a Java interop library that I use) require values to be passed in a row at a time, for example, if streaming data. To replicate the streaming nature, I 'stream' my dataframe values one by one, I wrote the below, which comes in handy from time to time.Which can be used:And preserves the values/ name mapping for the rows being iterated. Obviously, is a lot slower than using apply and Cython as indicated above, but is necessary in some circumstances.",
                "As the accepted answer states, the fastest way to apply a function over rows is to use a vectorized function, the so-called NumPy ufuncs (universal functions).But what should you do when the function you want to apply isn't already implemented in NumPy?Well, using the vectorize decorator from numba, you can easily create ufuncs directly in Python like this:The documentation for this function is here: Creating NumPy universal functions",
                "Along with the great answers in this post I am going to propose Divide and Conquer approach, I am not writing this answer to abolish the other great answers but to fulfill them with another approach which was working efficiently for me. It has two steps of splitting and merging the pandas dataframe:PROS of Divide and Conquer:CONS of Divide and Conquer:===================    Divide and Conquer Approach    =================Step 1: Splitting/SlicingIn this step, we are going to divide the iteration over the entire dataframe. Think that you are going to read a CSV file into pandas df then iterate over it. In may case I have 5,000,000 records and I am going to split it into 100,000 records.NOTE: I need to reiterate as other runtime analysis explained in the other solutions in this page,  number of records  has exponential proportion of  runtime  on search on the df. Based on the benchmark on my data here are the results:Step 2: MergingThis is going to be an easy step, just merge all the written CSV files into one dataframe and write it into a bigger CSV file.Here is the sample code:Reference:Efficient way of iteration over datafreameConcatenate CSV files into one Pandas Dataframe"
            ]
        },
        {
            "tag": "time",
            "patterns": [
                "How do I get the current time?",
                "How can I get the time",
                "Current time",
                "Time"
            ],
            "responses": [
                "Use datetime:For just the clock time without the date:To save typing, you can import the datetime object from the datetime module:Then remove the prefix datetime. from all of the above.",
                "Use time.strftime():",
                "Example output: '2013-09-18 11:16:32'See list of strftime directives.",
                "Similar to Harley's answer, but use the str() function for a quick-n-dirty, slightly more human readable format:",
                "The time module provides functions that tell us the time in  seconds since the epoch  as well as other utilities.This is the format you should get timestamps in for saving in databases. It is a simple floating-point number that can be converted to an integer. It is also good for arithmetic in seconds, as it represents the number of seconds since Jan 1, 1970, 00:00:00, and it is memory light relative to the other representations of time we'll be looking at next:This timestamp does not account for leap-seconds, so it's not linear - leap seconds are ignored. So while it is not equivalent to the international UTC standard, it is close, and therefore quite good for most cases of record-keeping.This is not ideal for human scheduling, however. If you have a future event you wish to take place at a certain point in time, you'll want to store that time with a string that can be parsed into a datetime object or a serialized datetime object (these will be described later).You can also represent the current time in the way preferred by your operating system (which means it can change when you change your system preferences, so don't rely on this to be standard across all systems, as I've seen others expect). This is typically user friendly, but doesn't typically result in strings one can sort chronologically:You can hydrate timestamps into human readable form with ctime as well:This conversion is also not good for record-keeping (except in text that will only be parsed by humans - and with improved Optical Character Recognition and Artificial Intelligence, I think the number of these cases will diminish).The datetime module is also quite useful here:The datetime.now is a class method that returns the current time. It uses the time.localtime without the timezone info (if not given, otherwise see timezone aware below). It has a representation (which would allow you to recreate an equivalent object) echoed on the shell, but when printed (or coerced to a str), it is in human readable (and nearly ISO) format, and the lexicographic sort is equivalent to the chronological sort:You can get a datetime object in UTC time, a global standard, by doing this:UTC is a time standard that is nearly equivalent to the GMT timezone. (While GMT and UTC do not change for Daylight Savings Time, their users may switch to other timezones, like British Summer Time, during the Summer.)However, none of the datetime objects we've created so far can be easily converted to various timezones. We can solve that problem with the pytz module:Equivalently, in Python 3 we have the timezone class with a utc timezone instance attached, which also makes the object timezone aware (but to convert to another timezone without the handy pytz module is left as an exercise to the reader):And we see we can easily convert to timezones from the original UTC object.You can also make a naive datetime object aware with the pytz timezone localize method, or by replacing the tzinfo attribute (with replace, this is done blindly), but these are more last resorts than best practices:The pytz module allows us to make our datetime objects timezone aware and convert the times to the hundreds of timezones available in the pytz module.One could ostensibly serialize this object for UTC time and store that in a database, but it would require far more memory and be more prone to error than simply storing the Unix Epoch time, which I demonstrated first.The other ways of viewing times are much more error-prone, especially when dealing with data that may come from different time zones. You want there to be no confusion as to which timezone a string or serialized datetime object was intended for.If you're displaying the time with Python for the user, ctime works nicely, not in a table (it doesn't typically sort well), but perhaps in a clock. However, I personally recommend, when dealing with time in Python, either using Unix time, or a timezone aware UTC datetime object.",
                "DoThere is some difference for Unix and Windows platforms.",
                "That outputs the current GMT in the specified format. There is also a localtime() method.This page has more details.",
                "The previous answers are all good suggestions, but I find it easiest to use ctime():This gives a nicely formatted string representation of the current local time.",
                "The quickest way is:",
                "If you need current time as a time object:",
                "You can use the time module:The use of the capital Y gives the full year, and using y would give 06/02/15.You could also use the following code to give a more lengthy time:",
                ".isoformat() is in the documentation, but not yet here\n(this is mighty similar to @Ray Vega's answer):",
                "Why not ask the U.S. Naval Observatory, the official timekeeper of the United States Navy?If you live in the D.C. area (like me) the latency might not be too bad...",
                "Using pandas to get the current time, kind of overkilling the problem at hand:Output:",
                "if you are using numpy already then directly you can use numpy.datetime64() \nfunction.for only date:or, if you are using pandas already then you can use pandas.to_datetime() functionor,",
                "This is what I ended up going with:Also, this table is a necessary reference for choosing the appropriate format codes to get the date formatted just the way you want it (from Python  datetime  documentation here).",
                "datetime.now() returns the current time as a naive datetime object that represents time in the local timezone. That value may be ambiguous e.g., during DST transitions ( fall back ). To avoid ambiguity either UTC timezone should be used:Or a timezone-aware object that has the corresponding timezone info attached (Python 3.2+):",
                "Do dir(date) or any variables including the package. You can get all the attributes and methods associated with the variable.",
                "This question doesn't need a new answer just for the sake of it ... a shiny new-ish toy/module, however, is enough justification.  That being the Pendulum library, which appears to do the sort of things which arrow attempted, except without the inherent flaws and bugs which beset arrow.For instance, the answer to the original question:There's a lot of standards which need addressing, including multiple RFCs and ISOs, to worry about.  Ever get them mixed up; not to worry, take a little look into dir(pendulum.constants) There's a bit more than RFC and ISO formats there, though.When we say local, though what do we mean?  Well I mean:Presumably most of the rest of you mean somewhere else.And on it goes.  Long story short: Pendulum attempts to do for date and time what requests did for HTTP.  It's worth consideration, particularly for both its ease of use and extensive documentation.",
                "By default, now() function returns output in the YYYY-MM-DD HH:MM:SS:MS format. Use the below sample script to get the current date and time in a Python script and print results on the screen. Create file getDateTime1.py with the below content.The output looks like below:",
                "Try the arrow module from http://crsmithdev.com/arrow/:Or the UTC version:To change its output, add .format():For a specific timezone:An hour ago:Or if you want the gist.",
                "Current time of a timezone",
                "To get exactly 3 decimal points for milliseconds 11:34:23.751 run this:More context:I want to get the time with milliseconds. A simple way to get them:But I want only milliseconds, right? The shortest way to get them:Add or remove zeroes from the last multiplication to adjust number of decimal points, or just:",
                "If you just want the current timestamp in ms (for example, to measure execution time), you can also use the  timeit  module:",
                "You can use this function to get the time (unfortunately it doesn't say AM or PM):To get the hours, minutes, seconds and milliseconds to merge later, you can use these functions:Hour:Minute:Second:Millisecond:",
                "You can  try the followingor",
                "Because no one has mentioned it yet, and this is something I ran into recently... a pytz timezone's fromutc() method combined with datetime's utcnow() is the best way I've found to get a useful current time (and date) in any timezone.If all you want is the time, you can then get that with local_time.time().",
                "Method1: Getting Current Date and Time from system datetimeThe datetime module supplies classes for manipulating dates and times.CodeOutput will be likeMethod2: Getting Current Date and Time if Network is availableurllib package helps us to handle the url's that means webpages. Here we collects data from the webpage http://just-the-time.appspot.com/ and parses dateime from the webpage using the package dateparser.CodeOutput will be likeMethod3: Getting Current Date and Time from Local Time of the MachinePython's time module provides a function for getting local time from the number of seconds elapsed since the epoch called localtime(). ctime() function takes seconds passed since epoch as an argument and returns a string representing local time.CodeOutput will be like"
            ]
        },
        {
            "tag": "multiple_exceptions",
            "patterns": [
                "Catch multiple exceptions in one line (except block)",
                "Multiple exceptions",
                "Catch multiple exceptions"
            ],
            "responses": [
                "From Python Documentation:An except clause may name multiple exceptions as a parenthesized tuple, for exampleOr, for Python 2 only:Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using as.",
                "Do this:The parentheses are required due to older syntax that used the commas to assign the error object to a name. The as keyword is used for the assignment. You can use any name for the error object, I prefer error personally.To do this in a manner currently and forward compatible with Python, you need to separate the Exceptions with commas and wrap them with parentheses to differentiate from earlier syntax that assigned the exception instance to a variable name by following the Exception type to be caught with a comma.Here's an example of simple usage:I'm specifying only these exceptions to avoid hiding bugs, which if I encounter I expect the full stack trace from.This is documented here: https://docs.python.org/tutorial/errors.htmlYou can assign the exception to a variable, (e is common, but you might prefer a more verbose variable if you have long exception handling or your IDE only highlights selections larger than that, as mine does.) The instance has an args attribute. Here is an example:Note that in Python 3, the err object falls out of scope when the except block is concluded.You may see code that assigns the error with a comma. This usage, the only form available in Python 2.5 and earlier, is deprecated, and if you wish your code to be forward compatible in Python 3, you should update the syntax to use the new form:If you see the comma name assignment in your codebase, and you're using Python 2.5 or higher, switch to the new way of doing it so your code remains compatible when you upgrade.The accepted answer is really 4 lines of code, minimum:The try, except, pass lines can be handled in a single line with the suppress context manager, available in Python 3.4:So when you want to pass on certain exceptions, use suppress.",
                "From Python documentation -> 8.3 Handling Exceptions:A try statement may have more than one except clause, to specify\n  handlers for different exceptions. At most one handler will be\n  executed. Handlers only handle exceptions that occur in the\n  corresponding try clause, not in other handlers of the same try\n  statement. An except clause may name multiple exceptions as a\n  parenthesized tuple, for example:Note that the parentheses around this tuple are required, because\n  except ValueError, e: was the syntax used for what is normally\n  written as except ValueError as e: in modern Python (described\n  below). The old syntax is still supported for backwards compatibility.\n  This means except RuntimeError, TypeError is not equivalent to\n  except (RuntimeError, TypeError): but to except RuntimeError as\nTypeError: which is not what you want.",
                "If you frequently use a large number of exceptions, you can pre-define a tuple, so you don't have to re-type them many times.NOTES:If you, also, need to catch other exceptions than those in the\npre-defined tuple, you will need to define another except block.If you just cannot tolerate a global variable, define it in main()\nand pass it around where needed...",
                "One of the way to do this is..and another way is to create method which performs task executed by except block and call it through all of the except block that you write..I know that second one is not the best way to do this, but i'm just showing number of ways to do this thing.",
                "As of Python 3.11 you can take advantage of the except* clause that is used to handle multiple exceptions.PEP-654 introduced a new standard exception type called ExceptionGroup that corresponds to a group of exceptions that are being propagated together. The ExceptionGroup can be handled using a new except* syntax. The * symbol indicates that multiple exceptions can be handled by each except* clause.For example, you can handle multiple exceptionsFor more details see PEP-654."
            ]
        },
        {
            "tag": "substrings",
            "patterns": [
                "Does Python have a string 'contains' substring method?",
                "Contains method",
                "Substring contains"
            ],
            "responses": [
                "Use the in operator:",
                "If it's just a substring search you can use string.find( substring ).You do have to be a little careful with find, index, and in though, as they are substring searches. In other words, this:It would print Found 'is' in the string. Similarly, if  is  in s: would evaluate to True. This may or may not be what you want.",
                "99% of use cases will be covered using the keyword, in, which returns True or False:For the use case of getting the index, use str.find (which returns -1 on failure, and has optional positional arguments):or str.index (like find but raises ValueError on failure):Use the in comparison operator becauseThe opposite (complement), which the original question asked for, is not in:This is semantically the same as not 'foo' in '**foo**' but it's much more readable and explicitly provided for in the language as a readability improvement.The  contains  method implements the behavior for in. This example,returns True. You could also call this function from the instance of the superstring:But don't. Methods that start with underscores are considered semantically non-public. The only reason to use this is when implementing or extending the in and not in functionality (e.g. if subclassing str):and now:Don't use the following string methods to test for  contains :Other languages may have no methods to directly test for substrings, and so you would have to use these types of methods, but with Python, it is much more efficient to use the in comparison operator.Also, these are not drop-in replacements for in. You may have to handle the exception or -1 cases, and if they return 0 (because they found the substring at the beginning) the boolean interpretation is False instead of True.If you really mean not any_string.startswith(substring) then say it.We can compare various ways of accomplishing the same goal.And now we see that using in is much faster than the others.\nLess time to do an equivalent operation is better:This is a fine follow-on question.Let's disassemble functions with the methods of interest:so we see that the .__contains__ method has to be separately looked up and then called from the Python virtual machine - this should adequately explain the difference.",
                "if needle in haystack: is the normal use, as @Michael says -- it relies on the in operator, more readable and faster than a method call.If you truly need a method instead of an operator (e.g. to do some weird key= for a very peculiar sort...?), that would be 'haystack'.__contains__.  But since your example is for use in an if, I guess you don't really mean what you say;-).  It's not good form (nor readable, nor efficient) to use special methods directly -- they're meant to be used, instead, through the operators and builtins that delegate to them.",
                "Here are a few useful examples that speak for themselves concerning the in method:Caveat. Lists are iterables, and the in method acts on iterables, not just strings.If you want to compare strings in a more fuzzy way to measure how  alike  they are, consider using the Levenshtein packageHere's an answer that shows how it works.",
                "If you are happy with  blah  in somestring but want it to be a function/method call, you can probably do thisAll operators in Python can be more or less found in the operator module including in.",
                "So apparently there is nothing similar for vector-wise comparison. An obvious Python way to do so would be:",
                "You can use y.count().It will return the integer value of the number of times a sub string appears in a string.For example:",
                "Here is your answer:For checking if it is false:OR:",
                "You can use regular expressions to get the occurrences:"
            ]
        },
        {
            "tag": "bytes_to_string",
            "patterns": [
                "Convert bytes to a string",
                "Bytes to string",
                "Convert bytes"
            ],
            "responses": [
                "Decode the bytes object to produce a string:The above example assumes that the bytes object is in UTF-8, because it is a common encoding. However, you should use the encoding your data is actually in!",
                "Decode the byte string and turn it in to a character (Unicode) string.Python 3:orPython 2:or",
                "This joins together a list of bytes into a string:",
                "If you don't know the encoding, then to read binary input into string in Python 3 and Python 2 compatible way, use the ancient MS-DOS CP437 encoding:Because encoding is unknown, expect non-English symbols to translate to characters of cp437 (English characters are not translated, because they match in most single byte encodings and UTF-8).Decoding arbitrary binary input to UTF-8 is unsafe, because you may get this:The same applies to latin-1, which was popular (the default?) for Python 2. See the missing points in Codepage Layout - it is where Python chokes with infamous ordinal not in range.UPDATE 20150604: There are rumors that Python 3 has the surrogateescape error strategy for encoding stuff into binary data without data loss and crashes, but it needs conversion tests, [binary] -> [str] -> [binary], to validate both performance and reliability.UPDATE 20170116: Thanks to comment by Nearoo - there is also a possibility to slash escape all unknown bytes with backslashreplace error handler. That works only for Python 3, so even with this workaround you will still get inconsistent output from different Python versions:See Python\u2019s Unicode Support for details.UPDATE 20170119: I decided to implement slash escaping decode that works for both Python\u00a02 and Python\u00a03. It should be slower than the cp437 solution, but it should produce identical results on every Python version.",
                "In Python 3, the default encoding is  utf-8 , so you can directly use:which is equivalent toOn the other hand, in Python 2, encoding defaults to the default string encoding. Thus, you should use:where encoding is the encoding you want.Note: support for keyword arguments was added in Python\u00a02.7.",
                "I think you actually want this:Aaron's answer was correct, except that you need to know which encoding to use. And I believe that Windows uses 'windows-1252'. It will only matter if you have some unusual (non-ASCII) characters in your content, but then it will make a difference.By the way, the fact that it does matter is the reason that Python moved to using two different types for binary and text data: it can't convert magically between them, because it doesn't know the encoding unless you tell it! The only way YOU would know is to read the Windows documentation (or read it here).",
                "Since this question is actually asking about subprocess output, you have more direct approaches available. The most modern would be using subprocess.check_output and passing text=True (Python 3.7+) to automatically decode stdout using the system default coding:For Python 3.6, Popen accepts an encoding keyword:The general answer to the question in the title, if you're not dealing with subprocess output, is to decode bytes to text:With no argument, sys.getdefaultencoding() will be used.  If your data is not sys.getdefaultencoding(), then you must specify the encoding explicitly in the decode call:",
                "Set universal_newlines to True, i.e.",
                "To interpret a byte sequence as a text, you have to know the\ncorresponding character encoding:Example:ls command may produce output that can't be interpreted as text. File names\non Unix may be any sequence of bytes except slash b'/' and zero\nb'\\0':Trying to decode such byte soup using utf-8 encoding raises UnicodeDecodeError.It can be worse. The decoding may fail silently and produce mojibake\nif you use a wrong incompatible encoding:The data is corrupted but your program remains unaware that a failure\nhas occurred.In general, what character encoding to use is not embedded in the byte sequence itself. You have to communicate this info out-of-band. Some outcomes are more likely than others and therefore chardet module exists that can guess the character encoding. A single Python script may use multiple character encodings in different places.ls output can be converted to a Python string using os.fsdecode()\nfunction that succeeds even for undecodable\nfilenames (it uses\nsys.getfilesystemencoding() and surrogateescape error handler on\nUnix):To get the original bytes, you could use os.fsencode().If you pass universal_newlines=True parameter then subprocess uses\nlocale.getpreferredencoding(False) to decode bytes e.g., it can be\ncp1252 on Windows.To decode the byte stream on-the-fly,\nio.TextIOWrapper()\ncould be used: example.Different commands may use different character encodings for their\noutput e.g., dir internal command (cmd) may use cp437. To decode its\noutput, you could pass the encoding explicitly (Python 3.6+):The filenames may differ from os.listdir() (which uses Windows\nUnicode API) e.g., '\\xb6' can be substituted with '\\x14'\u2014Python's\ncp437 codec maps b'\\x14' to control character U+0014 instead of\nU+00B6 (\u00b6). To support filenames with arbitrary Unicode characters, see  Decode PowerShell output possibly containing non-ASCII Unicode characters into a Python string",
                "While @Aaron Maenpaa's answer just works, a user recently asked:Is there any more simply way? 'fhand.read().decode( ASCII )' [...] It's so long!You can use:decode() has a standard argument:codecs.decode(obj, encoding='utf-8', errors='strict')",
                "If you should get the following by trying decode():AttributeError: 'str' object has no attribute 'decode'You can also specify the encoding type straight in a cast:",
                "ororor",
                "If you have had this error:utf-8 codec can't decode byte 0x8a,then it is better to use the following code to convert bytes to a string:",
                "For Python 3, this is a much safer and Pythonic approach to convert from byte to string:Output:",
                "When working with data from Windows systems (with \\r\\n line endings), my answer isWhy? Try this with a multiline Input.txt:All your line endings will be doubled (to \\r\\r\\n), leading to extra empty lines. Python's text-read functions usually normalize line endings so that strings use only \\n. If you receive binary data from a Windows system, Python does not have a chance to do that. Thus,will replicate your original file.",
                "We can decode the bytes object to produce a string using bytes.decode(encoding='utf-8', errors='strict').\nFor documentation see bytes.decode.Python 3 example:Output:Note: In Python 3, by default the encoding type is UTF-8. So, <byte_string>.decode( utf-8 ) can be also written as <byte_string>.decode()",
                "For your specific case of  run a shell command and get its output as text instead of bytes , on Python 3.7, you should use subprocess.run and pass in text=True (as well as capture_output=True to capture the output)text used to be called universal_newlines, and was changed (well, aliased) in Python 3.7. If you want to support Python versions before 3.7, pass in universal_newlines=True instead of text=True",
                "From sys \u2014 System-specific parameters and functions:To write or read binary data from/to the standard streams, use the underlying binary buffer. For example, to write bytes to stdout, use sys.stdout.buffer.write(b'abc').",
                "Try this:",
                "Decode with .decode(). This will decode the string. Pass in 'utf-8') as the value in the inside.",
                "If you want to convert any bytes, not just string converted to bytes:This is not very efficient, however. It will turn a 2 MB picture into 9 MB.",
                "Try using this one; this function will ignore all the non-character sets (like UTF-8) binaries and return a clean string. It is tested for Python\u00a03.6 and above.Here, the function will take the binary and decode it (converts binary data to characters using the Python predefined character set and the ignore argument ignores all non-character set data from your binary and finally returns your desired string value.If you are not sure about the encoding, use sys.getdefaultencoding() to get the default encoding of your device."
            ]
        },
        {
            "tag": "str",
            "patterns": [
                "What is the difference between __str__ and __repr__?",
                "Str",
                "repr",
                "Str vs repr"
            ],
            "responses": [
                "Alex summarized well but, surprisingly, was too succinct.First, let me reiterate the main points in Alex\u2019s post:Default implementation is uselessThis is mostly a surprise because Python\u2019s defaults tend to be fairly useful. However, in this case, having a default for __repr__ which would act like:would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if __repr__ is defined, and __str__ is not, the object will behave as though __str__=__repr__.This means, in simple terms: almost every object you implement should have a functional __repr__ that\u2019s usable for understanding the object. Implementing __str__ is optional: do that if you need a \u201cpretty print\u201d functionality (for example, used by a report generator).The goal of __repr__ is to be unambiguousLet me come right out and say it \u2014 I do not believe in debuggers. I don\u2019t really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature \u2014 most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is aBut you have to do the last step \u2014 make sure every object you implement has a useful repr, so code like that can just work. This is why the \u201ceval\u201d thing comes up: if you have enough information so eval(repr(c))==c, that means you know everything there is to know about c. If that\u2019s easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about c anyway. I usually use an eval-like format:  MyClass(this=%r,that=%r)  % (self.this,self.that). It does not mean that you can actually construct MyClass, or that those are the right constructor arguments \u2014 but it is a useful form to express \u201cthis is everything you need to know about this instance\u201d.Note: I used %r above, not %s. You always want to use repr() [or %r formatting character, equivalently] inside __repr__ implementation, or you\u2019re defeating the goal of repr. You want to be able to differentiate MyClass(3) and MyClass( 3 ).The goal of __str__ is to be readableSpecifically, it is not intended to be unambiguous \u2014 notice that str(3)==str( 3 ). Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be  2010/4/12 15:35:22 , etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class \u2014 as long is it supports readability, it is an improvement.Container\u2019s __str__ uses contained objects\u2019 __repr__This seems surprising, doesn\u2019t it? It is a little, but how readable would it be if it used their __str__?Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when you\u2019re printing a list, just(you can probably also figure out what to do about dictionaries.SummaryImplement __repr__ for any class you implement. This should be second nature. Implement __str__ if you think it would be useful to have a string version which errs on the side of readability.",
                "My rule of thumb:  __repr__ is for developers, __str__ is for customers.",
                "Unless you specifically act to ensure otherwise, most classes don't have helpful results for either:As you see -- no difference, and no info beyond the class and object's id.  If you only override one of the two...:as you see, if you override __repr__, that's ALSO used for __str__, but not vice versa.Other crucial tidbits to know: __str__ on a built-on container uses the __repr__, NOT the __str__, for the items it contains. And, despite the words on the subject found in typical docs, hardly anybody bothers making the __repr__ of objects be a string that eval may use to build an equal object (it's just too hard, AND not knowing how the relevant module was actually imported makes it actually flat out impossible).So, my advice: focus on making __str__ reasonably human-readable, and __repr__ as unambiguous as you possibly can, even if that interferes with the fuzzy unattainable goal of making __repr__'s returned value acceptable as input to __eval__!",
                "__repr__: representation of python object usually eval will convert it back to that object__str__: is whatever you think is that object in text forme.g.",
                "In short, the goal of __repr__ is to be unambiguous and __str__ is to be\n  readable.Here is a good example:Read this documentation for repr:repr(object)Return a string containing a printable representation of an object. This is the same value yielded by conversions (reverse\n  quotes). It is sometimes useful to be able to access this operation as\n  an ordinary function. For many types, this function makes an attempt\n  to return a string that would yield an object with the same value when\n  passed to eval(), otherwise the representation is a string enclosed in\n  angle brackets that contains the name of the type of the object\n  together with additional information often including the name and\n  address of the object. A class can control what this function returns\n  for its instances by defining a __repr__() method.Here is the documentation for str:str(object='')Return a string containing a nicely printable\n  representation of an object. For strings, this returns the string\n  itself. The difference with repr(object) is that str(object) does not\n  always attempt to return a string that is acceptable to eval(); its\n  goal is to return a printable string. If no argument is given, returns\n  the empty string, ''.",
                "__str__ (read as  dunder (double-underscore) string ) and __repr__ (read as  dunder-repper  (for  representation )) are both special methods that return strings based on the state of the object.__repr__ provides backup behavior if __str__ is missing.So one should first write a __repr__ that allows you to reinstantiate an equivalent object from the string it returns e.g. using eval or by typing it in character-for-character in a Python shell.At any time later, one can write a __str__ for a user-readable string representation of the instance, when one believes it to be necessary.If you print an object, or pass it to format, str.format, or str, then if a __str__ method is defined, that method will be called, otherwise, __repr__ will be used.The __repr__ method is called by the builtin function repr and is what is echoed on your python shell when it evaluates an expression that returns an object.Since it provides a backup for __str__, if you can only write one, start with __repr__Here's the builtin help on repr:That is, for most objects, if you type in what is printed by repr, you should be able to create an equivalent object. But this is not the default implementation.The default object __repr__ is (C Python source) something like:That means by default you'll print the module the object is from, the class name, and the hexadecimal representation of its location in memory - for example:This information isn't very useful, but there's no way to derive how one might accurately create a canonical representation of any given instance, and it's better than nothing, at least telling us how we might uniquely identify it in memory.Let's look at how useful it can be, using the Python shell and datetime objects. First we need to import the datetime module:If we call datetime.now in the shell, we'll see everything we need to recreate an equivalent datetime object. This is created by the datetime __repr__:If we print a datetime object, we see a nice human readable (in fact, ISO) format. This is implemented by datetime's __str__:It is a simple matter to recreate the object we lost because we didn't assign it to a variable by copying and pasting from the __repr__ output, and then printing it, and we get it in the same human readable output as the other object:#How do I implement them?As you're developing, you'll want to be able to reproduce objects in the same state, if possible. This, for example, is how the datetime object defines __repr__ (Python source). It is fairly complex, because of all of the attributes needed to reproduce such an object:If you want your object to have a more human readable representation, you can implement __str__ next. Here's how the datetime object (Python source) implements __str__, which it easily does because it already has a function to display it in ISO format:This is a critique of another answer here that suggests setting __repr__ = __str__.Setting __repr__ = __str__ is silly - __repr__ is a fallback for __str__ and a __repr__, written for developers usage in debugging, should be written before you write a __str__.You need a __str__ only when you need a textual representation of the object.Define __repr__ for objects you write so you and other developers have a reproducible example when using it as you develop. Define __str__ when you need a human readable string representation of it.",
                "On page 358 of the book Python scripting for computational science by Hans Petter Langtangen, it clearly states thatSo, I prefer to understand them asfrom the user's point of view\nalthough this is a misunderstanding I made when learning python.A small but good example is also given on the same page as follows:",
                "Apart from all the answers given, I would like to add few points :-1) __repr__() is invoked when you simply write object's name on interactive python console and press enter.2) __str__() is invoked when you use object with print statement.3) In case, if __str__ is missing, then print and any function using str() invokes __repr__() of object.4) __str__() of containers, when invoked will execute __repr__() method of its contained elements.5) str() called within __str__() could potentially recurse without a base case, and error on maximum recursion depth.6) __repr__() can call repr() which will attempt to avoid infinite recursion automatically, replacing an already represented object with ....",
                "(2020 entry)Q: What's the difference between __str__() and __repr__()?TL;DR:LONGThis question has been around a long time, and there are a variety of answers of which most are correct (not to mention from several Python community legends[!]). However when it comes down to the nitty-gritty, this question is analogous to asking the difference between the str() and repr() built-in functions. I'm going to describe the differences in my own words (which means I may be  borrowing  liberally from Core Python Programming so pls forgive me).Both str() and repr() have the same basic job: their goal is to return a string representation of a Python object. What kind of string representation is what differentiates them.For example, let's assign a string to x and an int to y, and simply showing human-readable string versions of each:Can we take what is inside the quotes in both cases and enter them verbatim into the Python interpreter? Let's give it a try:Clearly you can for an int but not necessarily for a str. Similarly, while I can pass '123' to eval(), that doesn't work for 'foo':So this tells you the Python shell just eval()s what you give it. Got it? Now, let's repr() both expressions and see what we get. More specifically, take its output and dump those out in the interpreter (there's a point to this which we'll address afterwards):Wow, they both work? That's because 'foo', while a printable string representation of that string, it's not evaluatable, but  'foo'  is. 123 is a valid Python int called by either str() or repr(). What happens when we call eval() with these?It works because 123 and 'foo' are valid Python objects. Another key takeaway is that while sometimes both return the same thing (the same string representation), that's not always the case. (And yes, yes, I can go create a variable foo where the eval() works, but that's not the point.)More factoids about both pairs",
                "To put it simply:__str__ is used in to show a string representation of your object to be read easily by others.__repr__ is used to show a string representation of the object.Let's say I want to create a Fraction class where the string representation of a fraction is '(1/2)' and the object (Fraction class) is to be represented as 'Fraction (1,2)'So we can create a simple Fraction class:",
                "From an (An Unofficial) Python Reference Wiki (archive copy) by effbot:__str__  computes the  informal  string representation of an object. This differs from __repr__ in that it does not have to be a valid Python expression: a more convenient or concise representation may be used instead. ",
                "In all honesty, eval(repr(obj)) is never used. If you find yourself using it, you should stop, because eval is dangerous, and strings are a very inefficient way to serialize your objects (use pickle instead).Therefore, I would recommend setting __repr__ = __str__. The reason is that str(list) calls repr on the elements (I consider this to be one of the biggest design flaws of Python that was not addressed by Python 3). An actual repr will probably not be very helpful as the output of print([your, objects]).To qualify this, in my experience, the most useful use case of the repr function is to put a string inside another string (using string formatting). This way, you don't have to worry about escaping quotes or anything. But note that there is no eval happening here.",
                "str - Creates a new string object from the given object.repr - Returns the canonical string representation of the object.The differences:str():repr():",
                "One aspect that is missing in other answers. It's true that in general the pattern is:Unfortunately, this differentiation is flawed, because the Python REPL and also IPython use __repr__ for printing objects in a REPL console (see related questions for Python and IPython). Thus, projects which are targeted for interactive console work (e.g., Numpy or Pandas) have started to ignore above rules and provide a human-readable __repr__ implementation instead.",
                "From the book Fluent Python:A basic requirement for a Python object is to provide usable \n       string   representations of itself, one used for debugging and\n       logging, another for presentation to end users. That is why the\n       special methods __repr__ and __str__ exist in the data model.",
                "__str__ can be invoked on an object by calling str(obj) and should return a human readable string.__repr__ can be invoked on an object by calling repr(obj) and should return internal object (object fields/attributes)This example may help:",
                "You can get some insight from this code:",
                "Excellent answers already cover the difference between __str__ and __repr__, which for me boils down to the former being readable even by an end user, and the latter being as useful as possible to developers. Given that, I find that the default implementation of __repr__ often fails to achieve this goal because it omits information useful to developers.For this reason, if I have a simple enough __str__, I generally just try to get the best of both worlds with something like:",
                "When print() is called on the result of decimal.Decimal(23) / decimal.Decimal( 1.05 ) the raw number is printed; this output is in string form which can be achieved with __str__(). If we simply enter the expression we get a decimal.Decimal output \u2014 this output is in representational form which can be achieved with __repr__(). All Python objects have two output forms. String form is designed to be human-readable. The representational form is designed to produce output that if fed to a Python interpreter would (when possible) reproduce the represented object.",
                "One important thing to keep in mind is that container's __str__ uses contained objects' __repr__.Python favors unambiguity over readability, the __str__ call of a tuple calls the contained objects' __repr__, the  formal  representation of an object. Although the formal representation is harder to read than an informal one, it is unambiguous and more robust against bugs.",
                "In a nutshell:",
                "Understand __str__ and __repr__ intuitively and permanently distinguish them at all.__str__ return the string disguised body of a given object for readable of eyes\n__repr__ return the real flesh body of a given object (return itself) for unambiguity to identify.See it in an exampleAs to __repr__We can do arithmetic operation on __repr__ results conveniently.if apply the operation on __str__Returns nothing but error.Another example.Hope this help you build concrete grounds to explore more answers.",
                "Source: https://www.journaldev.com/22460/python-str-repr-functions",
                "__repr__ is used everywhere, except by print and str methods (when a __str__is defined !)",
                "Every object inherits __repr__  from the base class that all objects created.if you call repr(p) you will get this as default:But if you call str(p) you will get the same output. it is because when __str__ does not exist, Python calls __repr__Let's implement our own __str__print(p) and str(p)will returnlet's add __str__()if we call print(p) and str(p), it will call __str__() so it will returnrepr(p) will returnrepr called\n Person(name='ali, age=self.age') Let's omit __repr__ and just implement __str__.print(p) will look for the __str__ and will return:NOTE= if we had __repr__ and __str__ defined, f'name is {p}' would call __str__",
                "Programmers with prior experience in languages with a toString method tend to implement __str__ and not __repr__.\nIf you only implement one of these special methods in Python, choose __repr__.From Fluent Python book, by Ramalho, Luciano.",
                "Basically __str__ or str() is used for creating output that is human-readable are must be for end-users.\nOn the other hand, repr() or __repr__ mainly returns canonical string representation of objects which serve the purpose of debugging and development helps the programmers.",
                "repr() used when we debug or log.It is used for developers to understand code.\none the other hand str() user for non developer like(QA) or user."
            ]
        },
        {
            "tag": "copy_file",
            "patterns": [
                "How to copy files",
                "Copy a file",
                "Copy files"
            ],
            "responses": [
                "shutil has many methods you can use. One of which is:Another shutil method to look at is shutil.copy2(). It's similar but preserves more metadata (e.g. time stamps).If you use os.path operations, use copy rather than copyfile. copyfile will only accept strings.",
                "copy2(src,dst) is often more useful than copyfile(src,dst) because:Here is a short example:",
                "In Python, you can copy the files usingshutil.copyfile  signatureshutil.copy  signatureshutil.copy2  signatureshutil.copyfileobj  signatureos.popen  signatureos.system  signaturesubprocess.call  signaturesubprocess.check_output  signature",
                "You can use one of the copy functions from the shutil package:Example:",
                "Copying a file is a relatively straightforward operation as shown by the examples below, but you should instead use the shutil stdlib module for that.If you want to copy by filename you could do something like this:",
                "Use the shutil module.Copy the contents of the file named src to a file named dst. The destination location must be writable; otherwise, an IOError exception will be raised. If dst already exists, it will be replaced. Special files such as character or block devices and pipes cannot be copied with this function. src and dst are path names given as strings.Take a look at filesys for all the file and directory handling functions available in standard Python modules.",
                "Directory and File copy example, from Tim Golden's Python Stuff:",
                "For small files and using only Python built-ins, you can use the following one-liner:This is not optimal way for applications where the file is too large or when memory is critical, thus Swati's answer should be preferred.",
                "Firstly, I made an exhaustive cheat sheet of the shutil methods for your reference.Secondly, explaining methods of copy in examples:shutil.copyfileobj(fsrc, fdst[, length]) manipulate opened objectsshutil.copyfile(src, dst, *, follow_symlinks=True)  Copy and renameshutil.copy()  Copy without preseving the metadatashutil.copy2()  Copy with preserving the metadatashutil.copytree()Recursively copy an entire directory tree rooted at src, returning the destination directory.",
                "shutil module offers some high-level operations on files. It supports file copying and removal.Refer to the table below for your use case.",
                "As of Python 3.5 you can do the following for small files (ie: text files, small jpegs):write_bytes will overwrite whatever was at the destination's location",
                "You could use os.system('cp nameoffilegeneratedbyprogram /otherdirectory/').Or as I did it,where rawfile is the name that I had generated inside the program.This is a Linux-only solution.",
                "Use subprocess.call to copy the file",
                "For large files, I read the file line by line and read each line into an array. Then, once the array reached a certain size, append it to a new file.",
                "UseOpen the source file in read mode, and write to the destination file in write mode.",
                "In case you've come this far down. The answer is that you need the entire path and file name",
                "Here is a simple way to do it, without any module. It's similar to this answer, but has the benefit to also work if it's a big file that doesn't fit in RAM:Since we're writing a new file, it does not preserve the modification time, etc.\nWe can then use os.utime for this if needed.",
                "Similar to the accepted answer, the following code block might come in handy if you also want to make sure to create any (non-existent) folders in the path to the destination.As the accepted answers notes, these lines will overwrite any file which exists at the destination path, so sometimes it might be useful to also add: if not path.exists(destination_path): before this code block.",
                "There are two best ways to copy file in Python.Code Example:There are other methods available also other than copyfile, like copy, copy2, etc, but copyfile is best in terms of performance,Code Example:Another method is by the use of a subprocess, but it is not preferable as it\u2019s one of the call methods and is not secure.",
                "You can use system.For Unix-like systems:",
                "You can use os.link to create a hard link to a file:This is not an independent clone, but if you plan to only read (not modify) the new file and its content must remain the same as the original, this will work well. It also has a benefit that if you want to check whether the copy already exists, you can compare the hard links (with os.stat) instead of their content.In Linux, the command cp with keyscreates a hard link. Therefore a hard link may be considered a copy. Sometimes a person would need exactly this behaviour (access to file content from a different place), and not need a separate copy.",
                "Here is an answer utilizing  shutil.copyfileobj  and it is highly efficient. I used it in a tool I created some time ago. I didn't write this originally, but I tweaked it a little bit.",
                "Python provides in-built functions for easily copying files using the operating system shell utilities.The Following command is used to copy a file:The following command is used to copy a file with metadata information:",
                "shutil.copy(src, dst, *, follow_symlinks=True)"
            ]
        },
        {
            "tag": "files",
            "patterns": [
                "How do I list all files of a directory?",
                "List all the files",
                "All files of a directory"
            ],
            "responses": [
                "os.listdir() returns everything inside a directory -- including both files and directories.os.path's isfile() can be used to only list files:Alternatively, os.walk() yields two lists for each directory it visits -- one for files and one for dirs. If you only want the top directory you can break the first time it yields:or, shorter:",
                "I prefer using the glob module, as it does pattern matching and expansion.It does pattern matching intuitivelyIt will return a list with the queried files and directories:Note that glob ignores files and directories that begin with a dot ., as those are considered hidden files and directories, unless the pattern is something like .*.Use glob.escape to escape strings that are not meant to be patterns:",
                "list in the current directoryWith listdir in os module you get the files and the folders in the current dirLooking in a directorywith glob you can specify a type of file to list like thisorget the full path of only files in the current directoryGetting the full path name with os.path.abspathYou get the full path in returnWalk: going through sub directoriesos.walk returns the root, the directories list and the files list, that is why I unpacked them in r, d, f in the for loop; it, then, looks for other files and directories in the subfolders of the root and so on until there are no subfolders.To go up in the directory treeGet files of a particular subdirectory with os.listdir()os.walk('.') - current directorynext(os.walk('.')) and os.path.join('dir', 'file')next... walkos.walkos.listdir() - get only txt filesUsing glob to get the full path of the filesUsing os.path.isfile to avoid directories in the listUsing pathlib from Python 3.4With list comprehension:Use glob method in pathlib.Path()Get all and only files with os.walk: checks only in the third element returned, i.e. the list of the filesGet only files with next in a directory: returns only the file in the root folderGet only directories with next and walk in a directory, because in the [1] element there are the folders onlyGet all the subdir names with walkos.scandir() from Python 3.5 and greater",
                "will return a list of all files and directories in  somedirectory .",
                "A one-line solution to get only list of files (no subdirectories):or absolute pathnames:",
                "Getting Full File Paths From a Directory and All Its Subdirectoriesprint full_file_paths which will print the list:If you'd like, you can open and read the contents, or focus only on files with the extension  .dat  like in the code below:/Users/johnny/Desktop/TEST/SUBFOLDER/file3.dat",
                "Since version 3.4 there are builtin iterators for this which are a lot more efficient than os.listdir():pathlib: New in version 3.4.According to PEP 428, the aim of the pathlib library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.os.scandir(): New in version 3.5.Note that os.walk() uses os.scandir() instead of os.listdir() from version 3.5, and its speed got increased by 2-20 times according to PEP 471.Let me also recommend reading ShadowRanger's comment below.",
                "Although there's a clear differentiation between file and directory terms in the question text, some may argue that directories are actually special filesThe statement:  all files of a directory  can be interpreted in two ways:All direct (or level 1) descendants onlyAll descendants in the whole directory tree (including the ones in sub-directories)When the question was asked, I imagine that Python 2, was the LTS version, however the code samples will be run by Python 3(.5) (I'll keep them as Python 2 compliant as possible; also, any code belonging to Python that I'm going to post, is from v3.5.4 - unless otherwise specified).\nThat has consequences related to another keyword in the question:  add them into a list :In pre Python 2.2 versions, sequences (iterables) were mostly represented by lists (tuples, sets, ...)In Python 2.2, the concept of generator ([Python.Wiki]: Generators) - courtesy of [Python.Docs]: Simple statements - The yield statement) - was introduced. As time passed, generator counterparts started to appear for functions that returned / worked with listsIn Python 3, generator is the default behaviorNot sure if returning a list is still mandatory (or a generator would do as well), but passing a generator to the list constructor, will create a list out of it (and also consume it). The example below illustrates the differences on [Python.Docs]: Built-in functions - map(function, iterable, *iterables)The examples will be based on a directory called root_dir with the following structure (this example is for Win, but I'm using the same tree on Nix as well). Note that I'll be reusing the console:Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order, and does not include the special entries '.' and '..' ...A more elaborate example (code_os_listdir.py):Notes:There are two implementations:One that uses generators (of course here it seems useless, since I immediately convert the result to a list)The classic one (function names ending in _old)Recursion is used (to get into subdirectories)For each implementation there are two functions:One that starts with an underscore (_):  private  (should not be called directly) - that does all the workThe public one (wrapper over previous): it just strips off the initial path (if required) from the returned entries. It's an ugly implementation, but it's the only idea that I could come with at this pointIn terms of performance, generators are generally a little bit faster (considering both creation and  iteration times), but I didn't test them in recursive functions, and also I am iterating inside the function over inner generators - don't know how performance friendly is thatPlay with the arguments to get different resultsOutput:In Python 3.5+ only, backport: [PyPI]: scandir:Return an iterator of os.DirEntry objects corresponding to the entries in the directory given by path. The entries are yielded in arbitrary order, and the special entries '.' and '..' are not included.Using scandir() instead of listdir() can significantly increase the performance of code that also needs file type or file attribute information, because os.DirEntry objects expose this information if the operating system provides it when scanning a directory. All os.DirEntry methods may perform a system call, but is_dir() and is_file() usually only require a system call for symbolic links; os.DirEntry.stat() always requires a system call on Unix but only requires one for symbolic links on Windows.Notes:Similar to os.listdirBut it's also more flexible (and offers more functionality), more Pythonic (and in some cases, faster)Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple (dirpath, dirnames, filenames).Notes:Under the scenes, it uses os.scandir (os.listdir on older (Python) versions)It does the heavy lifting by recurring in subfoldersOr glob.iglob:Return a possibly-empty list of path names that match pathname, which must be a string containing a path specification. pathname can be either absolute (like /usr/src/Python-1.5/Makefile) or relative (like ../../Tools/*/*.gif), and can contain shell-style wildcards. Broken symlinks are included in the results (as in the shell)....Changed in version 3.5: Support for recursive globs using \u201c**\u201d.Notes:Uses os.listdirFor large trees (especially if recursive is on), iglob is preferredAllows advanced filtering based on name (due to the wildcard)Python 3.4+, backport: [PyPI]: pathlib2.Notes:This is one way of achieving our goalIt's the OOP style of handling pathsOffers lots of functionalitiesPython 2 onlyBut, according to [GitHub]: python/cpython - (2.7) cpython/Lib/dircache.py, it's just a (thin) wrapper over os.listdir with cachingPOSIX specific:[Man7]: OPENDIR(3)[Man7]: READDIR(3)[Man7]: CLOSEDIR(3)Available via [Python.Docs]: ctypes - A foreign function library for Python:ctypes is a foreign function library for Python. It provides C compatible data types, and allows calling functions in DLLs or shared libraries. It can be used to wrap these libraries in pure Python.Not directly related, but check [SO]: C function called from Python via ctypes returns incorrect value (@CristiFati's answer) out before working with CTypes.code_ctypes.py:Notes:It loads the three functions from LibC (libc.so - loaded in the current process) and calls them (for more details check [SO]: How do I check whether a file exists without exceptions? (@CristiFati's answer) - last notes from item #4.). That would place this approach very close to the Python / C edgeNixDirent64 is the CTypes representation of struct dirent64 from [Man7]: dirent.h(0P) (so are the DT_ constants) from my Ubuntu OS. On other flavors / versions, the structure definition might differ, and if so, the CTypes alias should be updated, otherwise it will yield Undefined BehaviorIt returns data in the os.walk's format. I didn't bother to make it recursive, but starting from the existing code, that would be a fairly trivial taskEverything is doable on Win as well, the data (libraries, functions, structs, constants, ...) differOutput:Win specific:Retrieves a list of matching filenames, using the Windows Unicode API. An interface to the API FindFirstFileW/FindNextFileW/Find close functions.Notes:Most likely, will rely on one (or more) of the above (maybe with slight customizations).Code is meant to be portable (except places that target a specific area - which are marked) or cross:OS (Nix, Win, )Python version (2, 3, )Multiple path styles (absolute, relatives) were used across the above variants, to illustrate the fact that the  tools  used are flexible in this directionos.listdir and os.scandir use opendir / readdir / closedir ([MS.Learn]: FindFirstFileW function (fileapi.h) / [MS.Learn]: FindNextFileW function (fileapi.h) / [MS.Learn]: FindClose function (fileapi.h)) (via [GitHub]: python/cpython - (main) cpython/Modules/posixmodule.c)win32file.FindFilesW uses those (Win specific) functions as well (via [GitHub]: mhammond/pywin32 - (main) pywin32/win32/src/win32file.i)_get_dir_content (from point #1.) can be implemented using any of these approaches (some will require more work and some less)Nota Bene! Since recursion is used, I must mention that I did some tests on my laptop (Win 10 pc064), totally unrelated to this problem, and when the recursion level was reaching values somewhere in the (990 .. 1000) range (recursionlimit - 1000 (default)), I got StackOverflow :). If the directory tree exceeds that limit (I am not an FS expert, so I don't know if that is even possible), that could be a problem.\nI must also mention that I didn't try to increase recursionlimit, but in theory there will always be the possibility for failure, if the dir depth is larger than the highest possible recursionlimit (on that machine).\nCheck [SO]: _csv.Error: field larger than field limit (131072) (@CristiFati's answer) for more details on the topicCode samples are for demonstrative purposes only. That means that I didn't take into account error handling (I don't think there's any try / except / else / finally block), so the code is not robust (the reason is: to keep it as simple and short as possible). For production, error handling should be added as wellEverything is done using another technologyThat technology is invoked from PythonThe most famous flavor that I know is what I call the SysAdmin approach:Use Python (or any programming language for that matter) in order to execute Shell commands (and parse their outputs)Some consider this a neat hackI consider it more like a lame workaround (gainarie), as the action per se is performed from Shell (Cmd in this case), and thus doesn't have anything to do with PythonFiltering (grep / findstr) or output formatting could be done on both sides, but I'm not going to insist on it. Also, I deliberately used os.system instead of [Python.Docs]: subprocess - Subprocess management routines (run, check_output, ...)In general, this approach is to be avoided, since if some command output format slightly differs between OS versions / flavors, the parsing code should be adapted as well - not to mention differences between locales.",
                "I really liked adamk's answer, suggesting that you use glob(), from the module of the same name. This allows you to have pattern matching with *s.But as other people pointed out in the comments, glob() can get tripped up over inconsistent slash directions. To help with that, I suggest you use the join() and expanduser() functions in the os.path module, and perhaps the getcwd() function in the os module, as well.As examples:The above is terrible - the path has been hardcoded and will only ever work on Windows between the drive name and the \\s being hardcoded into the path.The above works better, but it relies on the folder name Users which is often found on Windows and not so often found on other OSs. It also relies on the user having a specific name, admin.This works perfectly across all platforms.Another great example that works perfectly across platforms and does something a bit different:Hope these examples help you see the power of a few of the functions you can find in the standard Python library modules.",
                "If you are looking for a Python implementation of find, this is a recipe I use rather frequently:So I made a PyPI package out of it and there is also a GitHub repository. I hope that someone finds it potentially useful for this code.",
                "For greater results, you can use listdir() method of the os module along with a generator (a generator is a powerful iterator that keeps its state, remember?). The following code works fine with both versions: Python 2 and Python 3.Here's a code:The listdir() method returns the list of entries for the given directory. The method os.path.isfile() returns True if the given entry is a file. And the yield operator quits the func but keeps its current state, and it returns only the name of the entry detected as a file. All the above allows us to loop over the generator function.",
                "Returning a list of absolute filepaths, does not recurse into subdirectories",
                "A wise teacher told me once that:When there are several established ways to do something, none of them is good for all cases.I will thus add a solution for a subset of the problem: quite often, we only want to check whether a file matches a start string and an end string, without going into subdirectories. We would thus like a function that returns a list of filenames, like:If you care to first declare two functions, this can be done:This solution could be easily generalized with regular expressions (and you might want to add a pattern argument, if you do not want your patterns to always stick to the start or end of the filename).",
                "Here I use a recursive structure.",
                "Using generators",
                "Another very readable variant for Python 3.4+ is using pathlib.Path.glob:It is simple to make more specific, e.g. only look for Python source files which are not symbolic links, also in all subdirectories:",
                "For Python 2:Then do",
                "Here's my general-purpose function for this.  It returns a list of file paths rather than filenames since I found that to be more useful.  It has a few optional arguments that make it versatile.  For instance, I often use it with arguments like pattern='*.txt' or subfolders=True.",
                "I will provide a sample one liner where sourcepath and file type can be provided as input. The code returns a list of filenames with csv extension. Use . in case all files needs to be returned. This will also recursively scans the subdirectories.[y for x in os.walk(sourcePath) for y in glob(os.path.join(x[0], '*.csv'))]Modify file extensions and source path as needed.",
                "dircache is   Deprecated since version 2.6: The dircache module has been removed in Python 3.0. "
            ]
        },
        {
            "tag": "init",
            "patterns": [
                "What is __init__.py for?",
                "init",
                "what is init in python",
                "init method",
                "What is init",
                "Why use init"
            ],
            "responses": [
                "It used to be a required part of a package (old, pre-3.3  regular package , not newer 3.3+  namespace package ).Here's the documentation.Python defines two types of packages, regular packages and namespace packages. Regular packages are traditional packages as they existed in Python 3.2 and earlier. A regular package is typically implemented as a directory containing an __init__.py file. When a regular package is imported, this __init__.py file is implicitly executed, and the objects it defines are bound to names in the package\u2019s namespace. The __init__.py file can contain the same Python code that any other module can contain, and Python will add some additional attributes to the module when it is imported.But just click the link, it contains an example, more information, and an explanation of namespace packages, the kind of packages without __init__.py.",
                "Files named __init__.py are used to mark directories on disk as Python package directories.\nIf you have the filesand mydir is on your path, you can import the code in module.py asorIf you remove the __init__.py file, Python will no longer look for submodules inside that directory, so attempts to import the module will fail.The __init__.py file is usually empty, but can be used to export selected portions of the package under more convenient name, hold convenience functions, etc.\nGiven the example above, the contents of the init module can be accessed asbased on this",
                "In addition to labeling a directory as a Python package and defining __all__, __init__.py allows you to define any variable at the package level. Doing so is often convenient if a package defines something that will be imported frequently, in an API-like fashion. This pattern promotes adherence to the Pythonic  flat is better than nested  philosophy.Here is an example from one of my projects, in which I frequently import a sessionmaker called Session to interact with my database. I wrote a  database  package with a few modules:My __init__.py contains the following code:Since I define Session here, I can start a new session using the syntax below. This code would be the same executed from inside or outside of the  database  package directory.Of course, this is a small convenience -- the alternative would be to define Session in a new file like  create_session.py  in my database package, and start new sessions using:There is a pretty interesting reddit thread covering appropriate uses of __init__.py here:http://www.reddit.com/r/Python/comments/1bbbwk/whats_your_opinion_on_what_to_include_in_init_py/The majority opinion seems to be that __init__.py files should be very thin to avoid violating the  explicit is better than implicit  philosophy.",
                "There are 2 main reasons for __init__.pyFor convenience: the other users will not need to know your functions' exact location in your package hierarchy (documentation).then others can call add() bywithout knowing file1's inside functions, likeIf you want something to be initialized; for example, logging (which should be put in the top level):",
                "The __init__.py file makes Python treat directories containing it as modules.Furthermore, this is the first file to be loaded in a module, so you can use it to execute code that you want to run each time a module is loaded, or specify the submodules to be exported.",
                "Since Python 3.3, __init__.py is no longer required to define directories as importable Python packages.Check PEP 420: Implicit Namespace Packages:Native support for package directories that don\u2019t require __init__.py marker files and can automatically span multiple path segments (inspired by various third party approaches to namespace packages, as described in PEP 420)Here's the test:references:\nhttps://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages\nhttps://www.python.org/dev/peps/pep-0420/\nIs __init__.py not required for packages in Python 3?",
                "Although Python works without an __init__.py file you should still include one.It specifies that the directory should be treated as a package, so therefore include it (even if it is empty).There is also a case where you may actually use an __init__.py file:Imagine you had the following file structure:And methods.py contained this:To use foo() you would need one of the following:Maybe there you need (or want) to keep methods.py inside main_methods (runtimes/dependencies for example) but you only want to import main_methods.If you changed the name of methods.py to __init__.py then you could use foo() by just importing main_methods:This works because __init__.py is treated as part of the package.Some Python packages actually do this.  An example is with JSON, where running import json is actually importing __init__.py from the json package (see the package file structure here):Source code: Lib/json/__init__.py",
                "In Python the definition of package is very simple. Like Java the hierarchical structure and the directory structure are the same. But you have to have __init__.py in a package. I will explain the __init__.py file with the example below:__init__.py can be empty, as long as it exists. It indicates that the directory should be regarded as a package. Of course, __init__.py can also set the appropriate content.If we add a function in module_n1:After running:Then we followed the hierarchy package and called module_n1 the function. We can use __init__.py in subPackage_b like this:After running:Hence using * importing, module package is subject to __init__.py content.",
                "__init__.py will treat the directory it is in as a loadable module.For people who prefer reading code, I put Two-Bit Alchemist's comment here.",
                "It facilitates importing other python files. When you placed this file in a directory (say stuff)containing other py files, then you can do something like import stuff.other.Without this __init__.py inside the directory stuff, you couldn't import other.py, because Python doesn't know where the source code for stuff is and unable to recognize it as a package.",
                "An __init__.py file makes imports easy. When an __init__.py is present within a package, function a() can be imported from file b.py like so:Without it, however, you can't import directly. You have to amend the system path:",
                "One thing __init__.py allows is converting a module to a package without breaking the API or creating extraneous nested namespaces or private modules*. This helps when I want to extend a namespace.If I have a file util.py containingthen users will access foo withIf I then want to add utility functions for database interaction, and I want them to have their own namespace under util, I'll need a new directory**, and to keep API compatibility (so that from util import foo still works), I'll call it util/. I could move util.py into util/ like so,and in util/__init__.py dobut this is redundant. Instead of having a util/util.py file, we can just put the util.py contents in __init__.py and the user can nowI think this nicely highlights how a util package's __init__.py acts in a similar way to a util module* this is hinted at in the other answers, but I want to highlight it here\n** short of employing import gymnastics. Note it won't work to create a new package with the same name as the file, see this",
                "If you're using Python 2 and want to load siblings of your file you can simply add the parent folder of your file to your system paths of the session. It will behave about the same as if your current file was an init file.After that regular imports relative to the file's directory will work just fine. E.g.Generally you want to use a proper init.py file instead though, but when dealing with legacy code you might be stuck with f.ex. a library hard-coded to load a particular file and nothing but. For those cases this is an alternative.",
                "init.py : It is a python file found in a package directory, it is invoked when the package or a module in the package is imported. You can use this to execute package initialization code, i.e. whenever the package is imported the python statements are executed first before the other modules in this folder gets executed. It is similar to main function of c or java program but this exists in the python package module(folder) rather than in the core python file.\nalso it has access to global variables defined in this init.py file as when the module is imported into python file.for eg.\nI have a init.py file in a folder called pymodlib, this file contains the following statements:print(f'Invoking init.py for {name}')\npystructures = ['for_loop', 'while__loop', 'ifCondition']when I import this package  pymodlib  in the my solution module or notebook or python console:\nthis two statements gets executed while importing.\nSo in the log or console you would see the following output:import pymodlib\nInvoking init.py for pymodlibin the next statement of python console: I can access the global variable:pymodlib.pystructures\nit gives the following output:['for_loop', 'while__loop', 'ifCondition']Now from python3.3 onwards the use of this file has been optional to make folder a python module. So you skip from including it in the python module folder."
            ]
        },
        {
            "tag": "sort",
            "patterns": [
                "How do I sort a dictionary by value?",
                "Sort dictionaries",
                "Sort by value"
            ],
            "responses": [
                "Dicts preserve insertion order in Python 3.7+. Same in CPython 3.6, but it's an implementation detail.orIt is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a list\u2014probably a list of tuples.For instance,sorted_x will be a list of tuples sorted by the second element in each tuple. dict(sorted_x) == x.And for those wishing to sort on keys instead of values:In Python3 since unpacking is not allowed we can useIf you want the output as a dict, you can use collections.OrderedDict:",
                "Well, it is actually possible to do a  sort by dictionary values . Recently I had to do that in a Code Golf (Stack Overflow question Code golf: Word frequency chart). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display a list of the top words, sorted by decreasing frequency.If you construct a dictionary with the words as keys and the number of occurrences of each word as value, simplified here as:then you can get a list of the words, ordered by frequency of use with sorted(d, key=d.get) - the sort iterates over the dictionary keys, using the number of word occurrences as a sort key .I am writing this detailed explanation to illustrate what people often mean by  I can easily sort a dictionary by key, but how do I sort by value  - and I think the original post was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.",
                "You could use:This will sort the dictionary by the values of each entry within the dictionary from smallest to largest.To sort it in descending order just add reverse=True:Input:Output:",
                "Dicts can't be sorted, but you can build a sorted list from them.A sorted list of dict values:A list of (key, value) pairs, sorted by value:",
                "In recent Python 2.7, we have the new OrderedDict type, which remembers the order in which the items were added.To make a new ordered dictionary from the original, sorting by the values:The OrderedDict behaves like a normal dict:",
                "Whilst I found the accepted answer useful, I was also surprised that it hasn't been updated to reference OrderedDict from the standard library collections module as a viable, modern alternative - designed to solve exactly this type of problem.The official OrderedDict documentation offers a very similar example too, but using a lambda for the sort function:",
                "Pretty much the same as Hank Gay's answer:Or optimized slightly as suggested by John Fouhy:",
                "Good news, so the OP's original use case of mapping pairs retrieved from a database with unique string ids as keys and numeric values as values into a built-in Python v3.6+ dict, should now respect the insert order.If say the resulting two column table expressions from a database query like:would be stored in two Python tuples, k_seq and v_seq (aligned by numerical index and with the same length of course), then:Allow to output later as:yielding in this case (for the new Python 3.6+ built-in dict!):in the same ordering per value of v.Where in the Python 3.5 install on my machine it currently yields:As proposed in 2012 by Raymond Hettinger (cf. mail on python-dev with subject  More compact dictionaries with faster iteration ) and now (in 2016) announced in a mail by Victor Stinner to python-dev with subject  Python 3.6 dict becomes compact and gets a private version; and keywords become ordered  due to the fix/implementation of issue 27350  Compact and ordered dict  in Python 3.6 we will now be able, to use a built-in dict to maintain insert order!!Hopefully this will lead to a thin layer OrderedDict implementation as a first step. As @JimFasarakis-Hilliard indicated, some see use cases for the OrderedDict type also in the future. I think the Python community at large will carefully inspect, if this will stand the test of time, and what the next steps will be.Time to rethink our coding habits to not miss the possibilities opened by stable ordering of:The first because it eases dispatch in the implementation of functions and methods in some cases.The second as it encourages to more easily use dicts as intermediate storage in processing pipelines.Raymond Hettinger kindly provided documentation explaining  The Tech Behind Python 3.6 Dictionaries  - from his San Francisco Python Meetup Group presentation 2016-DEC-08.And maybe quite some Stack Overflow high decorated question and answer pages will receive variants of this information and many high quality answers will require a per version update too.As @ajcr rightfully notes:  The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon.  (from the whatsnew36) not nit picking, but the citation was cut a bit pessimistic ;-). It continues as   (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5). So as in some human languages (e.g. German), usage shapes the language, and the will now has been declared ... in whatsnew36.In a mail to the python-dev list, Guido van Rossum declared:Make it so.  Dict keeps insertion order  is the ruling. Thanks!So, the version 3.6 CPython side-effect of dict insertion ordering is now becoming part of the language spec (and not anymore only an implementation detail). That mail thread also surfaced some distinguishing design goals for collections.OrderedDict as reminded by Raymond Hettinger during discussion.",
                "It can often be very handy to use namedtuple. For example, you have a dictionary of 'name' as keys and 'score' as values and you want to sort on 'score':sorting with lowest score first:sorting with highest score first:Now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this:",
                "I had the same problem, and I solved it like this:(People who answer  It is not possible to sort a dict  did not read the question! In fact,  I can sort on the keys, but how can I sort based on the values?  clearly means that he wants a list of the keys sorted according to the value of their values.)Please notice that the order is not well defined (keys with the same value will be in an arbitrary order in the output list).",
                "If values are numeric you may also use Counter from collections.",
                "In Python 2.7, simply do:copy-paste from : http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipesEnjoy ;-)",
                "Starting from Python 3.6, dict objects are now ordered by insertion order. It's officially in the specifications of Python 3.7.Before that, you had to use OrderedDict.Python 3.7 documentation says:Changed in version 3.7: Dictionary order is guaranteed to be insertion\norder. This behavior was implementation detail of CPython from 3.6.",
                "This is the code:Here are the results:OriginalRoflRank",
                "Try the following approach. Let us define a dictionary called mydict with the following data:If one wanted to sort the dictionary by keys, one could do something like:This should return the following output:On the other hand, if one wanted to sort a dictionary by value (as is asked in the question), one could do the following:The result of this command (sorting the dictionary by value) should return the following:",
                "You can create an  inverted index , alsoNow your inverse has the values; each value has a list of applicable keys.",
                "You can use the collections.Counter. Note, this will work for both numeric and non-numeric values.",
                "The collections solution mentioned in another answer is absolutely superb, because you retain a connection between the key and value which in the case of dictionaries is extremely important.I don't agree with the number one choice presented in another answer, because it throws away the keys.I used the solution mentioned above (code shown below) and retained access to both keys and values and in my case the ordering was on the values, but the importance was the ordering of the keys after ordering the values.",
                "You can use a skip dict which is a dictionary that's permanently sorted by value.If you use keys(), values() or items() then you'll iterate in sorted order by value.It's implemented using the skip list datastructure.",
                "You can also use a custom function that can be passed to parameter key.",
                "Of course, remember, you need to use OrderedDict because regular Python dictionaries don't keep the original order.If you do not have Python 2.7 or higher, the best you can do is iterate over the values in a generator function. (There is an OrderedDict for 2.4 and 2.6  here, buta) I don't know about how well it worksandb) You have to download and install it of course. If you do not have administrative access, then I'm afraid the option's out.)You can also print out every valuePlease remember to remove the parentheses after print if not using Python 3.0 or above",
                "Here is a solution using zip on d.values() and d.keys().  A few lines down this link (on Dictionary view objects) is:This allows the creation of (value, key) pairs using zip(): pairs = zip(d.values(), d.keys()).So we can do the following:",
                "As pointed out by Dilettant, Python 3.6 will now keep the order! I thought I'd share a function I wrote that eases the sorting of an iterable (tuple, list, dict). In the latter case, you can sort either on keys or values, and it can take numeric comparison into account. Only for >= 3.6!When you try using sorted on an iterable that holds e.g. strings as well as ints, sorted() will fail. Of course you can force string comparison with str(). However, in some cases you want to do actual numeric comparison where 12 is smaller than 20 (which is not the case in string comparison). So I came up with the following. When you want explicit numeric comparison you can use the flag num_as_num which will try to do explicit numeric sorting by trying to convert all values to floats. If that succeeds, it will do numeric sorting, otherwise it'll resort to string comparison.Comments for improvement welcome.",
                "I just learned a relevant skill from Python for Everybody.You may use a temporary list to help you to sort the dictionary:If you want to sort the list in descending order, simply change the original sorting line to:Using list comprehension, the one-liner would be:Sample Output:",
                "Use ValueSortedDict from dicts:",
                "Iterate through a dict and sort it by its values in descending order:",
                "If your values are integers, and you use Python 2.7 or newer, you can use collections.Counter instead of dict. The most_common method will give you all items, sorted by the value.",
                "This works in 3.1.x:",
                "For the sake of completeness, I am posting a solution using heapq. Note, this method will work for both numeric and non-numeric values"
            ]
        },
        {
            "tag": "keys",
            "patterns": [
                "How can I add new keys to a dictionary?",
                "Add a key",
                "Add a new key to a dictionary"
            ],
            "responses": [
                "You create a new key/value pair on a dictionary by assigning a value to that keyIf the key doesn't exist, it's added and points to that value. If it exists, the current value it points to is overwritten.",
                "I feel like consolidating info about Python dictionaries:The update operator |= now works for dictionaries:This uses a new feature called dictionary unpacking.The merge operator | now works for dictionaries:",
                "To add multiple keys simultaneously, use dict.update():For adding a single key, the accepted answer has less computational overhead.",
                "Yes it is possible, and it does have a method that implements this, but you don't want to use it directly.To demonstrate how and how not to use it, let's create an empty dict with the dict literal, {}:To update this dict with a single new key and value, you can use the subscript notation (see Mappings here) that provides for item assignment:my_dict is now:We can also update the dict with multiple values efficiently as well using the update method.  We may be unnecessarily creating an extra dict here, so we hope our dict has already been created and came from or was used for another purpose:my_dict is now:Another efficient way of doing this with the update method is with keyword arguments, but since they have to be legitimate python words, you can't have spaces or special symbols or start the name with a number, but many consider this a more readable way to create keys for a dict, and here we certainly avoid creating an extra unnecessary dict:and my_dict is now:So now we have covered three Pythonic ways of updating a dict.There's another way of updating a dict that you shouldn't use, which uses the __setitem__ method. Here's an example of how one might use the __setitem__ method to add a key-value pair to a dict, and a demonstration of the poor performance of using it:So we see that using the subscript notation is actually much faster than using __setitem__. Doing the Pythonic thing, that is, using the language in the way it was intended to be used, usually is both more readable and computationally efficient.",
                "If you want to add a dictionary within a dictionary you can do it this way.Example: Add a new entry to your dictionary & sub dictionaryOutput:NOTE: Python requires that you first add a subbefore adding entries.",
                "The conventional syntax is d[key] = value, but if your keyboard is missing the square bracket keys you could also do:In fact, defining __getitem__ and __setitem__ methods is how you can make your own class support the  square bracket syntax. See Dive Into Python, Classes That Act Like Dictionaries.",
                "You can create one:Gives:",
                "This popular question addresses functional methods of merging dictionaries a and b.Here are some of the more straightforward methods (tested in Python 3)...Note: The first method above only works if the keys in b are strings.To add or modify a single element, the b dictionary would contain only that one element...This is equivalent to...",
                "Let's pretend you want to live in the immutable world and do not want to modify the original but want to create a new dict that is the result of adding a new key to the original.In Python 3.5+ you can do:The Python 2 equivalent is:After either of these:params is still equal to {'a': 1, 'b': 2}andnew_params is equal to {'a': 1, 'b': 2, 'c': 3}There will be times when you don't want to modify the original (you only want the result of adding to the original). I find this a refreshing alternative to the following:orReference: What does `**` mean in the expression `dict(d1, **d2)`?",
                "There is also the strangely named, oddly behaved, and yet still handy dict.setdefault().Thisbasically just does this:E.g.,",
                "This question has already been answered ad nauseam, but since my\ncomment\ngained a lot of traction, here it is as an answer:If you are here trying to figure out how to add a key and return a new dictionary (without modifying the existing one), you can do this using the techniques belowNote that with this approach, your key will need to follow the rules of valid identifier names in Python.",
                "If you're not joining two dictionaries, but adding new key-value pairs to a dictionary, then using the subscript notation seems like the best way.However, if you'd like to add, for example, thousands of new key-value pairs, you should consider using the update() method.",
                "Here's another way that I didn't see here:You can use the dictionary constructor and implicit expansion to reconstruct a dictionary. Moreover, interestingly, this method can be used to control the positional order during dictionary construction (post Python 3.6). In fact, insertion order is guaranteed for Python 3.7 and above!The above is using dictionary comprehension.",
                "First to check whether the key already exists:Then you can add the new key and value.",
                "Add a dictionary (key,value) class.",
                "I think it would also be useful to point out Python's collections module that consists of many useful dictionary subclasses and wrappers that simplify the addition and modification of data types in a dictionary, specifically defaultdict:dict subclass that calls a factory function to supply missing valuesThis is particularly useful if you are working with dictionaries that always consist of the same data types or structures, for example a dictionary of lists.If the key does not yet exist, defaultdict assigns the value given (in our case 10) as the initial value to the dictionary (often used inside loops). This operation therefore does two things: it adds a new key to a dictionary (as per question), and assigns the value if the key doesn't yet exist. With the standard dictionary, this would have raised an error as the += operation is trying to access a value that doesn't yet exist:Without the use of defaultdict, the amount of code to add a new element would be much greater and perhaps looks something like:defaultdict can also be used with complex data types such as list and set:Adding an element automatically initialises the list.",
                "dico[ new key ] =  value "
            ]
        },
        {
            "tag": "concatenate",
            "patterns": [
                "How do I concatenate two lists in Python?",
                "Concatenate two lists",
                "two lists",
                "Concatenation",
                "concatenate"
            ],
            "responses": [
                "Use the + operator to combine the lists:Output:",
                "Python >= 3.5 alternative: [*l1, *l2]Another alternative has been introduced via the acceptance of PEP 448 which deserves mentioning.The PEP, titled Additional Unpacking Generalizations, generally reduced some syntactic restrictions when using the starred * expression in Python; with it, joining two lists (applies to any iterable) can now also be done with:This functionality was defined for Python 3.5, but it hasn't been backported to previous versions in the 3.x family. In unsupported versions a SyntaxError is going to be raised.As with the other approaches, this too creates as shallow copy of the elements in the corresponding lists.The upside to this approach is that you really don't need lists in order to perform it; anything that is iterable will do. As stated in the PEP:This is also useful as a more readable way of summing iterables into a\nlist, such as my_list + list(my_tuple) + list(my_range) which is now\nequivalent to just [*my_list, *my_tuple, *my_range].So while addition with + would raise a TypeError due to type mismatch:The following won't:because it will first unpack the contents of the iterables and then simply create a list from the contents.",
                "It's also possible to create a generator that simply iterates over the items in both lists using itertools.chain(). This allows you to chain lists (or any iterable) together for processing without copying the items to a new list:",
                "You could also use the list.extend() method in order to add a list to the end of another one:If you want to keep the original list intact, you can create a new list object, and extend both lists to it:",
                "As of 3.9, these are the most popular stdlib methods for concatenating two (or more) lists in Python.FootnotesThis is a slick solution because of its succinctness. But sum performs concatenation in a pairwise fashion, which means this is a\nquadratic operation as memory has to be allocated for each step. DO\nNOT USE if your lists are large.See chain\nand\nchain.from_iterable\nfrom the docs. You will need to from itertools import chain first.\nConcatenation is linear in memory, so this is the best in terms of\nperformance and version compatibility. chain.from_iterable was introduced in 2.6.This method uses Additional Unpacking Generalizations (PEP 448), but cannot\ngeneralize to N lists unless you manually unpack each one yourself.a += b and a.extend(b) are more or less equivalent for all practical purposes. += when called on a list will internally call\nlist.__iadd__, which extends the first list by the second.2-List Concatenation1There's not much difference between these methods but that makes sense given they all have the same order of complexity (linear). There's no particular reason to prefer one over the other except as a matter of style.N-List ConcatenationPlots have been generated using the perfplot module. Code, for your reference.1. The iadd (+=) and extend methods operate in-place, so a copy has to be generated each time before testing. To keep things fair, all methods have a pre-copy step for the left-hand list which can be ignored.DO NOT USE THE DUNDER METHOD list.__add__ directly in any way, shape or form. In fact, stay clear of dunder methods, and use the operators and operator functions like they were designed for. Python has careful semantics baked into these which are more complicated than just calling the dunder directly. Here is an example. So, to summarise, a.__add__(b) => BAD; a + b => GOOD.Some answers here offer reduce(operator.add, [a, b]) for pairwise concatenation -- this is the same as sum([a, b], []) only more wordy.Any method that uses set will drop duplicates and lose ordering. Use with caution.for i in b: a.append(i) is more wordy, and slower than a.extend(b), which is single function call and more idiomatic. append is slower because of the semantics with which memory is allocated and grown for lists. See here for a similar discussion.heapq.merge will work, but its use case is for merging sorted lists in linear time. Using it in any other situation is an anti-pattern.yielding list elements from a function is an acceptable method, but chain does this faster and better (it has a code path in C, so it is fast).operator.add(a, b) is an acceptable functional equivalent to a + b. It's use cases are mainly for dynamic method dispatch. Otherwise, prefer a + b which is shorter and more readable, in my opinion. YMMV.",
                "You can use sets to obtain merged list of unique values",
                "This is quite simple, and I think it was even shown in the tutorial:",
                "This question directly asks about joining two lists. However it's pretty high in search even when you are looking for a way of joining many lists (including the case when you joining zero lists).I think the best option is to use list comprehensions:You can create generators as well:Old AnswerConsider this more generic approach:Will output:Note, this also works correctly when a is [] or [[1,2,3]].However, this can be done more efficiently with itertools:If you don't need a list, but just an iterable, omit list().UpdateAlternative suggested by Patrick Collins in the comments could also work for you:",
                "You could simply use the + or += operator as follows:Or:Also, if you want the values in the merged list to be unique you can do:",
                "It's worth noting that the itertools.chain function accepts variable number of arguments:If an iterable (tuple, list, generator, etc.) is the input, the from_iterable class method may be used:",
                "For cases with a low number of lists you can simply add the lists together or use in-place unpacking (available in Python-3.5+):As a more general way for cases with more number of lists you can use chain.from_iterable()1 function from itertools module. Also, based on this answer this function is the best; or at least a very good way for flatting a nested list as well.",
                "With Python 3.3+ you can use yield from:Or, if you want to support an arbitrary number of iterators:",
                "If you want to merge the two lists in sorted form, you can use the merge function from the heapq library.",
                "If you can't use the plus operator (+),  you can use the operator import:Alternatively, you could also use the __add__ dunder function:",
                "If you need to merge two ordered lists with complicated sorting rules, you might have to roll it yourself like in the following code (using a simple sorting rule for readability :-) ).",
                "If you are using NumPy, you can concatenate two arrays of compatible dimensions with this command:",
                "Use a simple list comprehension:It has all the advantages of the newest approach of using Additional Unpacking Generalizations - i.e. you can concatenate an arbitrary number of different iterables (for example, lists, tuples, ranges, and generators) that way - and it's not limited to Python 3.5 or later.",
                "Another way:",
                "The above code does not preserve order and removes duplicates from each list (but not from the concatenated list).",
                "As already pointed out by many, itertools.chain() is the way to go if one needs to apply exactly the same treatment to both lists. In my case, I had a label and a flag which were different from one list to the other, so I needed something slightly more complex. As it turns out, behind the scenes itertools.chain() simply does the following:(see https://docs.python.org/2/library/itertools.html), so I took inspiration from here and wrote something along these lines:The main points to understand here are that lists are just a special case of iterable, which are objects like any other; and that for ... in loops in python can work with tuple variables, so it is simple to loop on multiple variables at the same time.",
                "You could use the append() method defined on list objects:",
                "In the above code, the  +  operator is used to concatenate the two lists into a single list.",
                "I recommend three methods to concatenate the list, but the first method is most recommended,In the second method, I assign newlist to a copy of the listone, because I don't want to change listone.This is not a good way to concatenate lists because we are using a for loop to concatenate the lists. So time complexity is much higher than with the other two methods.",
                "The most common method used to concatenate lists are the plus operator and the built-in method append, for example:For most of the cases, this will work, but the append function will not extend a list if one was added. Because that is not expected, you can use another method called extend. It should work with structures:",
                "A really concise way to combine a list of lists iswhich gives us",
                "So there are two easy ways.Example:Example:Thus we see that out of two of most popular methods, extend is efficient.",
                "You could also just use sum.This works for any length and any element type of list:The reason I add [], is because the start argument is set to 0 by default, so it loops through the list and adds to start, but 0 + [1, 2, 3] would give an error, so if we set the start to []. It would add to [], and [] + [1, 2, 3] would work as expected.",
                "I assume you want one of the two methods:Keep duplicate elementsIt is very easy. Just concatenate like a string:Next, if you want to eliminate duplicate elements",
                "The solutions provided are for a single list. In case there are lists within a list and the merging of corresponding lists is required, the  +  operation through a for loop does the work.Output: [[1, 2, 3, 0, 1, 2], [4, 5, 6, 7, 8, 9]]",
                "All the possible ways to join lists that I could findOutput"
            ]
        },
        {
            "tag": "DataFrameRows",
            "patterns": [
                "How do I select rows from a DataFrame based on column values?",
                "DataFrame rows from column",
                "Dataframe rows",
                "DataFrame columns",
                "DataFrame"
            ],
            "responses": [
                "To select rows whose column value equals a scalar, some_value, use ==:To select rows whose column value is in an iterable, some_values, use isin:Combine multiple conditions with &:Note the parentheses. Due to Python's operator precedence rules, & binds more tightly than <= and >=. Thus, the parentheses in the last example are necessary. Without the parenthesesis parsed aswhich results in a Truth value of a Series is ambiguous error.To select rows whose column value does not equal some_value, use !=:isin returns a boolean Series, so to select rows whose value is not in some_values, negate the boolean Series using ~:For example,yieldsIf you have multiple values you want to include, put them in a\nlist (or more generally, any iterable) and use isin:yieldsNote, however, that if you wish to do this many times, it is more efficient to\nmake an index first, and then use df.loc:yieldsor, to include multiple values from the index use df.index.isin:yields",
                "There are several ways to select rows from a Pandas dataframe:Below I show you examples of each, with advice when to use certain techniques. Assume our criterion is column 'A' == 'foo'(Note on performance: For each base type, we can keep things simple by using the Pandas API or we can venture outside the API, usually into NumPy, and speed things up.)SetupThe first thing we'll need is to identify a condition that will act as our criterion for selecting rows. We'll start with the OP's case column_name == some_value, and include some other common use cases.Borrowing from @unutbu:... Boolean indexing requires finding the true value of each row's 'A' column being equal to 'foo', then using those truth values to identify which rows to keep.  Typically, we'd name this series, an array of truth values, mask.  We'll do so here as well.We can then use this mask to slice or index the data frameThis is one of the simplest ways to accomplish this task and if performance or intuitiveness isn't an issue, this should be your chosen method.  However, if performance is a concern, then you might want to consider an alternative way of creating the mask.Positional indexing (df.iloc[...]) has its use cases, but this isn't one of them.  In order to identify where to slice, we first need to perform the same boolean analysis we did above.  This leaves us performing one extra step to accomplish the same task.Label indexing can be very handy, but in this case, we are again doing more work for no benefitpd.DataFrame.query is a very elegant/intuitive way to perform this task, but is often slower. However, if you pay attention to the timings below, for large data, the query is very efficient. More so than the standard approach and of similar magnitude as my best suggestion.My preference is to use the Boolean maskActual improvements can be made by modifying how we create our Boolean mask.mask alternative 1\nUse the underlying NumPy array and forgo the overhead of creating another pd.SeriesI'll show more complete time tests at the end, but just take a look at the performance gains we get using the sample data frame.  First, we look at the difference in creating the maskEvaluating the mask with the NumPy array is ~ 30 times faster.  This is partly due to NumPy evaluation often being faster. It is also partly due to the lack of overhead necessary to build an index and a corresponding pd.Series object.Next, we'll look at the timing for slicing with one mask versus the other.The performance gains aren't as pronounced.  We'll see if this holds up over more robust testing.mask alternative 2\nWe could have reconstructed the data frame as well.  There is a big caveat when reconstructing a dataframe\u2014you must take care of the dtypes when doing so!Instead of df[mask] we will do thisIf the data frame is of mixed type, which our example is, then when we get df.values the resulting array is of dtype object and consequently, all columns of the new data frame will be of dtype object.  Thus requiring the astype(df.dtypes) and killing any potential performance gains.However, if the data frame is not of mixed type, this is a very useful way to do it.GivenVersusWe cut the time in half.mask alternative 3@unutbu also shows us how to use pd.Series.isin to account for each element of df['A'] being in a set of values.  This evaluates to the same thing if our set of values is a set of one value, namely 'foo'.  But it also generalizes to include larger sets of values if needed.  Turns out, this is still pretty fast even though it is a more general solution.  The only real loss is in intuitiveness for those not familiar with the concept.However, as before, we can utilize NumPy to improve performance while sacrificing virtually nothing. We'll use np.in1dTimingI'll include other concepts mentioned in other posts as well for reference.Code BelowEach column in this table represents a different length data frame over which we test each function. Each column shows relative time taken, with the fastest function given a base index of 1.0.You'll notice that the fastest times seem to be shared between mask_with_values and mask_with_in1d.FunctionsTestingSpecial TimingLooking at the special case when we have a single non-object dtype for the entire data frame.Code BelowTurns out, reconstruction isn't worth it past a few hundred rows.FunctionsTesting",
                "The Pandas equivalent toisMultiple conditions:orIn the above code it is the line df[df.foo == 222] that gives the rows based on the column value, 222 in this case.Multiple conditions are also possible:But at that point I would recommend using the query function, since it's less verbose and yields the same result:",
                "I find the syntax of the previous answers to be redundant and difficult to remember. Pandas introduced the query() method in v0.13 and I much prefer it. For your question, you could do df.query('col == val').Reproduced from The query() Method (Experimental):You can also access variables in the environment by prepending an @.",
                "Since pandas >= 0.25.0 we can use the query method to filter dataframes with pandas methods and even column names which have spaces. Normally the spaces in column names would give an error, but now we can solve that using a backtick (`) - see GitHub:Using .query with method str.endswith:OutputAlso we can use local variables by prefixing it with an @ in our query:Output",
                "For selecting only specific columns out of multiple columns for a given value in Pandas:Options loc:or query:",
                "In newer versions of Pandas, inspired by the documentation (Viewing data):Combine multiple conditions by putting the clause in parentheses, (), and combining them with & and | (and/or). Like this:Other filters",
                "Faster results can be achieved using numpy.where.For example, with unubtu's setup -Timing comparisons:",
                "Here is a simple example",
                "To add: You can also do df.groupby('column_name').get_group('column_desired_value').reset_index() to make a new data frame with specified column having a particular value. E.g.,Running this gives:",
                "You can also use .apply:It actually works row-wise (i.e., applies the function to each row).The output isThe results is the same as using as mentioned by @unutbu",
                "If you want to make query to your dataframe repeatedly and speed is important to you, the best thing is to convert your dataframe to dictionary and then by doing this you can make query thousands of times faster.After make my_dict dictionary you can go through:If you have duplicated values in column_name you can't make a dictionary. but you can use:",
                "With DuckDB we can query pandas DataFrames with SQL statements, in a highly performant way.Since the question is How do I select rows from a DataFrame based on column values?, and the example in the question is a SQL query, this answer looks logical in this topic.Example:",
                "If the column name used to filter your dataframe comes from a local variable, f-strings may be useful. For example,In fact, f-strings can be used for the query variable as well (except for datetime):The pandas documentation recommends installing numexpr to speed up numeric calculation when using query(). Use pip install numexpr (or conda, sudo etc. depending on your environment) to install it.For larger dataframes (where performance actually matters), df.query() with numexpr engine performs much faster than df[mask]. In particular, it performs better for the following cases.Logical and/or comparison operators on columns of stringsIf a column of strings are compared to some other string(s) and matching rows are to be selected, even for a single comparison operation, query() performs faster than df[mask]. For example, for a dataframe with 80k rows, it's 30% faster1 and for a dataframe with 800k rows, it's 60% faster.2This gap increases as the number of operations increases (if 4 comparisons are chained df.query() is 2-2.3 times faster than df[mask])1,2 and/or the dataframe length increases.2Multiple operations on numeric columnsIf multiple arithmetic, logical or comparison operations need to be computed to create a boolean mask to filter df, query() performs faster. For example, for a frame with 80k rows, it's 20% faster1 and for a frame with 800k rows, it's 2 times faster.2This gap in performance increases as the number of operations increases and/or the dataframe length increases.2The following plot shows how the methods perform as the dataframe length increases.3Numexpr currently supports only logical (&, |, ~), comparison (==, >, <, >=, <=, !=) and basic arithmetic operators (+, -, *, /, **, %).For example, it doesn't support integer division (//). However, calling the equivalent pandas method (floordiv()) works.1 Benchmark code using a frame with 80k rows2 Benchmark code using a frame with 800k rows3: Code used to produce the performance graphs of the two methods for strings and numbers.",
                "You can use loc (square brackets) with a function:Output:orOutput:The advantage of this method is that you can chain selection with previous operations. For example:vsOutput:",
                "Great answers. Only, when the size of the dataframe approaches million rows, many of the methods tend to take ages when using df[df['col']==val]. I wanted to have all possible values of  another_column  that correspond to specific values in  some_column  (in this case in a dictionary). This worked and fast."
            ]
        },
        {
            "tag": "empty",
            "patterns": [
                "How do I check if a list is empty?",
                "Check if empty list",
                "Empty lists",
                "Check for an empty list"
            ],
            "responses": [
                "Using the implicit booleanness of the empty list is quite Pythonic.",
                "The Pythonic way to do it is from the PEP 8 style guide.For sequences, (strings, lists, tuples), use the fact that empty sequences are false:",
                "I prefer it explicitly:This way it's 100% clear that li is a sequence (list) and we want to test its size. My problem with if not li: ... is that it gives the false impression that li is a boolean variable.",
                "This is the first google hit for  python test empty array  and similar queries, and other people are generalizing the question beyond just lists, so here's a caveat for a different type of sequence that a lot of people use.You need to be careful with NumPy arrays, because other methods that work fine for lists or other standard containers fail for NumPy arrays.  I explain why below, but in short, the preferred method is to use size.The  pythonic  way fails with NumPy arrays because NumPy tries to cast the array to an array of bools, and if x tries to evaluate all of those bools at once for some kind of aggregate truth value.  But this doesn't make any sense, so you get a ValueError:But at least the case above tells you that it failed.  If you happen to have a NumPy array with exactly one element, the if statement will  work , in the sense that you don't get an error.  However, if that one element happens to be 0 (or 0.0, or False, ...), the if statement will incorrectly result in False:But clearly x exists and is not empty!  This result is not what you wanted.For example,returns 1, even though the array has zero elements.As explained in the SciPy FAQ, the correct method in all cases where you know you have a NumPy array is to use if x.size:If you're not sure whether it might be a list, a NumPy array, or something else, you could combine this approach with the answer @dubiousjim gives to make sure the right test is used for each type.  Not very  pythonic , but it turns out that NumPy intentionally broke pythonicity in at least this sense.If you need to do more than just check if the input is empty, and you're using other NumPy features like indexing or math operations, it's probably more efficient (and certainly more common) to force the input to be a NumPy array.  There are a few nice functions for doing this quickly \u2014\u00a0most importantly numpy.asarray.  This takes your input, does nothing if it's already an array, or wraps your input into an array if it's a list, tuple, etc., and optionally converts it to your chosen dtype.  So it's very quick whenever it can be, and it ensures that you just get to assume the input is a NumPy array.  We usually even just use the same name, as the conversion to an array won't make it back outside of the current scope:This will make the x.size check work in all cases I see on this page.",
                "For example, if passed the following:How do I check to see if a is empty?Place the list in a boolean context (for example, with an if or while statement). It will test False if it is empty, and True otherwise. For example:PEP 8, the official Python style guide for Python code in Python's standard library, asserts:For sequences, (strings, lists, tuples), use the fact that empty sequences are false.We should expect that standard library code should be as performant and correct as possible. But why is that the case, and why do we need this guidance?I frequently see code like this from experienced programmers new to Python:And users of lazy languages may be tempted to do this:These are correct in their respective other languages. And this is even semantically correct in Python.But we consider it un-Pythonic because Python supports these semantics directly in the list object's interface via boolean coercion.From the docs (and note specifically the inclusion of the empty list, []):By default, an object is considered true unless its class defines\n  either a __bool__() method that returns False or a __len__() method\n  that returns zero, when called with the object. Here are most of the built-in objects considered false:And the datamodel documentation:object.__bool__(self)Called to implement truth value testing and the built-in operation bool(); should return False or True. When this method is not defined,\n  __len__() is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither __len__()\n  nor __bool__(), all its instances are considered true.andobject.__len__(self)Called to implement the built-in function len(). Should return the length of the object, an integer >= 0. Also, an object that doesn\u2019t define a __bool__() method and whose __len__() method returns zero is considered to be false in a Boolean context.So instead of this:or this:Do this:Does it pay off? (Note that less time to perform an equivalent operation is better:)For scale, here's the cost of calling the function and constructing and returning an empty list, which you might subtract from the costs of the emptiness checks used above:We see that either checking for length with the builtin function len compared to 0 or checking against an empty list is much less performant than using the builtin syntax of the language as documented.Why?For the len(a) == 0 check:First Python has to check the globals to see if len is shadowed.Then it must call the function, load 0, and do the equality comparison in Python (instead of with C):And for the [] == [] it has to build an unnecessary list and then, again, do the comparison operation in Python's virtual machine (as opposed to C)The  Pythonic  way is a much simpler and faster check since the length of the list is cached in the object instance header:PyVarObjectThis is an extension of PyObject that adds the ob_size field. This is only used for objects that have some notion of length. This type does not often appear in the Python/C API. It corresponds to the fields defined by the expansion of the PyObject_VAR_HEAD macro.From the c source in Include/listobject.h:I would point out that this is also true for the non-empty case though its pretty ugly as with l=[] then %timeit len(l) != 0 90.6 ns \u00b1 8.3 ns, %timeit l != [] 55.6 ns \u00b1 3.09, %timeit not not l 38.5 ns \u00b1 0.372. But there is no way anyone is going to enjoy not not l despite triple the speed. It looks ridiculous. But the speed wins out\n  I suppose the problem is testing with timeit since just if l: is sufficient but surprisingly %timeit bool(l) yields 101 ns \u00b1 2.64 ns. Interesting there is no way to coerce to bool without this penalty. %timeit l is useless since no conversion would occur.IPython magic, %timeit, is not entirely useless here:We can see there's a bit of linear cost for each additional not here. We want to see the costs, ceteris paribus, that is, all else equal - where all else is minimized as far as possible:Now let's look at the case for an unempty list:What we can see here is that it makes little difference whether you pass in an actual bool to the condition check or the list itself, and if anything, giving the list, as is, is faster.Python is written in C; it uses its logic at the C level. Anything you write in Python will be slower. And it will likely be orders of magnitude slower unless you're using the mechanisms built into Python directly.",
                "An empty list is itself considered false in true value testing (see python documentation):To Daren Thomas's answer:EDIT: Another point against testing\nthe empty list as False: What about\npolymorphism? You shouldn't depend on\na list being a list. It should just\nquack like a duck - how are you going\nto get your duckCollection to quack\n''False'' when it has no elements?Your duckCollection should implement __nonzero__ or __len__ so the if a: will work without problems.",
                "Patrick's (accepted) answer is right: if not a: is the right way to do it. Harley Holcombe's answer is right that this is in the PEP 8 style guide. But what none of the answers explain is why it's a good idea to follow the idiom\u2014even if you personally find it's not explicit enough or confusing to Ruby users or whatever.Python code, and the Python community, has very strong idioms. Following those idioms makes your code easier to read for anyone experienced in Python. And when you violate those idioms, that's a strong signal.It's true that if not a: doesn't distinguish empty lists from None, or numeric 0, or empty tuples, or empty user-created collection types, or empty user-created not-quite-collection types, or single-element NumPy array acting as scalars with falsey values, etc. And sometimes it's important to be explicit about that. And in that case, you know what you want to be explicit about, so you can test for exactly that. For example, if not a and a is not None: means  anything falsey except None , while if len(a) != 0: means  only empty sequences\u2014and anything besides a sequence is an error here , and so on. Besides testing for exactly what you want to test, this also signals to the reader that this test is important.But when you don't have anything to be explicit about, anything other than if not a: is misleading the reader. You're signaling something as important when it isn't. (You may also be making the code less flexible, or slower, or whatever, but that's all less important.) And if you habitually mislead the reader like this, then when you do need to make a distinction, it's going to pass unnoticed because you've been  crying wolf  all over your code.",
                "No one seems to have addressed questioning your need to test the list in the first place.  Because you provided no additional context, I can imagine that you may not need to do this check in the first place, but are unfamiliar with list processing in Python.I would argue that the most Pythonic way is to not check at all, but rather to just process the list.  That way it will do the right thing whether empty or full.This has the benefit of handling any contents of a, while not requiring a specific check for emptiness.  If a is empty, the dependent block will not execute and the interpreter will fall through to the next line.If you do actually need to check the array for emptiness:is sufficient.",
                "len() is an O(1) operation for Python lists, strings, dicts, and sets. Python internally keeps track of the number of elements in these containers.JavaScript has a similar notion of truthy/falsy.",
                "I had written:which was voted -1. I'm not sure if that's because readers objected to the strategy or thought the answer wasn't helpful as presented. I'll pretend it was the latter, since---whatever counts as  pythonic ---this is the correct strategy. Unless you've already ruled out, or are prepared to handle cases where a is, for example, False, you need a test more restrictive than just if not a:. You could use something like this:the first test is in response to @Mike's answer, above. The third line could also be replaced with:if you only want to accept instances of particular types (and their subtypes), or with:You can get away without the explicit type check, but only if the surrounding context already assures you that a is a value of the types you're prepared to handle, or if you're sure that types you're not prepared to handle are going to raise errors (e.g., a TypeError if you call len on a value for which it's undefined) that you're prepared to handle. In general, the  pythonic  conventions seem to go this last way. Squeeze it like a duck and let it raise a DuckError if it doesn't know how to quack. You still have to think about what type assumptions you're making, though, and whether the cases you're not prepared to handle properly really are going to error out in the right places. The Numpy arrays are a good example where just blindly relying on len or the boolean typecast may not do precisely what you're expecting.",
                "From documentation on truth value testing:All values other than what is listed here are considered TrueAs can be seen, empty list [] is falsy, so doing what would be done to a boolean value sounds most efficient:",
                "I prefer the following:",
                "Here are a few ways you can check if a list is empty:1) The pretty simple pythonic way:In Python, empty containers such as lists,tuples,sets,dicts,variables etc are seen as False. One could simply treat the list as a predicate (returning a Boolean value). And  a True value would indicate that it's non-empty.2) A much explicit way: using the len() to find the length and check if it equals to 0:3) Or comparing it to an anonymous empty list:4) Another yet silly way to do is using exception and iter():",
                "Method 1 (preferred):Method 2:Method 3:",
                "You can even try using bool() like this. Although it is less readable surely it's a concise way to perform this.I love this way for the checking list is empty or not.Very handy and useful.",
                "It is sometimes good to test for None and for emptiness separately as those are two different states. The code above produces the following output:Although it's worth nothing that None is falsy. So if you don't want to separate test for None-ness, you don't have to do that.produces expected",
                "To check whether a list is empty or not you can use two following ways. But remember, we should avoid the way of explicitly checking for a type of sequence (it's a less Pythonic way):The second way is a more Pythonic one. This method is an implicit way of checking and much more preferable than the previous one.",
                "Many answers have been given, and a lot of them are pretty good. I just wanted to add that the checkwill also pass for None and other types of empty structures. If you truly want to check for an empty list, you can do this:",
                "If you want to check if a list is empty:If you want to check whether all the values in list is empty. However it will be True for an empty list:If you want to use both cases together:Now you can use:",
                "a little more practical:and the shortest version:",
                "We could use a simple if else:",
                "Being inspired by dubiousjim's solution, I propose to use an additional general check of whether is it something iterable:Note: a string is considered to be iterable\u2014add and not isinstance(a,(str,unicode)) if you want the empty string to be excludedTest:",
                "Simply use is_empty() or make function like:-It can be used for any data_structure like a list,tuples, dictionary and many more. By these, you can call it many times using just is_empty(any_structure).",
                "Simple way is checking the length is equal zero.",
                "From python3 onwards you can useto check if the list is emptyEDIT : This works with python2.7 too..I am not sure why there are so many complicated answers.\nIt's pretty clear and straightforward",
                "The truth value of an empty list is False whereas for a non-empty list it is True.",
                "What brought me here is a special use-case: I actually wanted a function to tell me if a list is empty or not. I wanted to avoid writing my own function or using a lambda-expression here (because it seemed like it should be simple enough):And, of course, there is a very natural way to do it:Of course, do not use bool in if (i.e., if bool(L):) because it's implied. But, for the cases when  is not empty  is explicitly needed as a function, bool is the best choice."
            ]
        },
        {
            "tag": "**",
            "patterns": [
                "What does ** (double star/asterisk) and * (star/asterisk) do for parameters?",
                "**",
                "*",
                "asterick",
                "*args",
                "**kwargs"
            ],
            "responses": [
                "The *args and **kwargs is a common idiom to allow arbitrary number of arguments to functions as described in the section more on defining functions in the Python documentation.The *args will give you all function parameters as a tuple:The **kwargs will give you all\nkeyword arguments except for those corresponding to a formal parameter as a dictionary.Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:It is also possible to use this the other way around:Another usage of the *l idiom is to unpack argument lists when calling a function.In Python 3 it is possible to use *l on the left side of an assignment (Extended Iterable Unpacking), though it gives a list instead of a tuple in this context:Also Python 3 adds new semantic (refer PEP 3102):For example the following works in python 3 but not python 2:Such function accepts only 3 positional arguments, and everything after * can only be passed as keyword arguments.",
                "It's also worth noting that you can use * and ** when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:You can do things like:Note: The keys in mydict have to be named exactly like the parameters of function foo. Otherwise it will throw a TypeError:",
                "The single * means that there can be any number of extra positional arguments. foo() can be invoked like foo(1,2,3,4,5). In the body of foo() param2 is a sequence containing 2-5.The double ** means there can be any number of extra named parameters. bar() can be invoked like bar(1, a=2, b=3). In the body of bar() param2 is a dictionary containing {'a':2, 'b':3 }With the following code:the output is",
                "They allow for functions to be defined to accept and for users to pass any number of arguments, positional (*) and keyword (**).*args allows for any number of optional positional arguments (parameters), which will be assigned to a tuple named args.**kwargs allows for any number of optional keyword arguments (parameters), which will be in a dict named kwargs.You can (and should) choose any appropriate name, but if the intention is for the arguments to be of non-specific semantics, args and kwargs are standard names.You can also use *args and **kwargs to pass in parameters from lists (or any iterable) and dicts (or any mapping), respectively.The function recieving the parameters does not have to know that they are being expanded.For example, Python 2's xrange does not explicitly expect *args, but since it takes 3 integers as arguments:As another example, we can use dict expansion in str.format:You can have keyword only arguments after the *args - for example, here, kwarg2 must be given as a keyword argument - not positionally:Usage:Also, * can be used by itself  to indicate that keyword only arguments follow, without allowing for unlimited positional arguments.Here, kwarg2 again must be an explicitly named, keyword argument:And we can no longer accept unlimited positional arguments because we don't have *args*:Again, more simply, here we require kwarg to be given by name, not positionally:In this example, we see that if we try to pass kwarg positionally, we get an error:We must explicitly pass the kwarg parameter as a keyword argument.*args (typically said  star-args ) and **kwargs (stars can be implied by saying  kwargs , but be explicit with  double-star kwargs ) are common idioms of Python for using the * and ** notation. These specific variable names aren't required (e.g. you could use *foos and **bars), but a departure from convention is likely to enrage your fellow Python coders.We typically use these when we don't know what our function is going to receive or how many arguments we may be passing, and sometimes even when naming every variable separately would get very messy and redundant (but this is a case where usually explicit is better than implicit).Example 1The following function describes how they can be used, and demonstrates behavior. Note the named b argument will be consumed by the second positional argument before :We can check the online help for the function's signature, with help(foo), which tells usLet's call this function with foo(1, 2, 3, 4, e=5, f=6, g=7)which prints:Example 2We can also call it using another function, into which we just provide a:bar(100) prints:Example 3: practical usage in decoratorsOK, so maybe we're not seeing the utility yet. So imagine you have several functions with redundant code before and/or after the differentiating code. The following named functions are just pseudo-code for illustrative purposes.We might be able to handle this differently, but we can certainly extract the redundancy with a decorator, and so our below example demonstrates how *args and **kwargs can be very useful:And now every wrapped function can be written much more succinctly, as we've factored out the redundancy:And by factoring out our code, which *args and **kwargs allows us to do, we reduce lines of code, improve readability and maintainability, and have sole canonical locations for the logic in our program. If we need to change any part of this structure, we have one place in which to make each change.",
                "Let us first understand what are positional arguments and keyword arguments.\nBelow is an example of function definition with Positional arguments.So this is a function definition with positional arguments.\nYou can call it with keyword/named arguments as well:Now let us study an example of function definition with keyword arguments:You can call this function with positional arguments as well:So we now know function definitions with positional as well as keyword arguments.Now let us study the '*' operator and '**' operator.Please note these operators can be used in 2 areas:a) function callb) function definitionThe use of '*' operator and '**' operator in function call.Let us get straight to an example and then discuss it.So rememberwhen the '*' or '**' operator is used in a function call -'*' operator unpacks data structure such as a list or tuple  into arguments needed by function definition.'**' operator unpacks a dictionary into arguments needed by function definition.Now let us study the '*' operator use in function definition.\nExample:In function definition the '*' operator packs the received arguments into a tuple.Now let us see an example of '**' used in function definition:In function definition The '**' operator packs the received arguments into a dictionary.So remember:In a function call the '*' unpacks data structure of tuple or list into positional or keyword arguments to be received by function definition.In a function call the '**' unpacks data structure of dictionary into positional or keyword arguments to be received by function definition.In a function definition the '*' packs positional arguments into a tuple.In a function definition the '**' packs keyword arguments into a dictionary.",
                "This table is handy for using * and ** in function construction and function call:This really just serves to summarize Lorin Hochstein's answer but I find it helpful.Relatedly: uses for the star/splat operators have been expanded in Python 3",
                "* and ** have special usage in the function argument list. *\nimplies that the argument is a list and ** implies that the argument\nis a dictionary. This allows functions to take arbitrary number of\narguments",
                "TL;DRBelow are 6 different use cases for * and ** in python programming:BONUS: From python 3.8 onward, one can use / in function definition to enforce  positional only parameters. In the following example, parameters a and b are positional-only, while c or d can be positional or keyword, and e or f are required to be keywords:BONUS 2: THIS ANSWER to the same question also brings a new perspective, where it shares what does * and ** means in a function call, functions signature, for loops, etc.",
                "Let us show this by defining a function that takes two normal variables x, y, and can accept more arguments as myArgs, and can accept even more arguments as myKW. Later, we will show how to feed y using myArgDict.",
                "From the Python documentation:If there are more positional arguments than there are formal parameter slots, a TypeError exception is raised, unless a formal parameter using the syntax  *identifier  is present; in this case, that formal parameter receives a tuple containing the excess positional arguments (or an empty tuple if there were no excess positional arguments).If any keyword argument does not correspond to a formal parameter name, a TypeError exception is raised, unless a formal parameter using the syntax  **identifier  is present; in this case, that formal parameter receives a dictionary containing the excess keyword arguments (using the keywords as keys and the argument values as corresponding values), or a (new) empty dictionary if there were no excess keyword arguments.",
                "* means receive variable arguments as tuple** means receive variable arguments as dictionaryUsed like the following:1) single *Output:2) Now **Output:",
                "In Python 3.5, you can also use this syntax in list, dict, tuple, and set displays (also sometimes called literals). See PEP 488: Additional Unpacking Generalizations.It also allows multiple iterables to be unpacked in a single function call.(Thanks to mgilson for the PEP link.)",
                "It packs arguments passed to the function into list and dict respectively inside the function body. When you define a function signature like this:it can be called with any number of arguments and keyword arguments. The non-keyword arguments get packed into a list called args inside the function body and the keyword arguments get packed into a dict called kwds inside the function body.now inside the function body, when the function is called, there are two local variables, args which is a list having value [ this ,  is a list of ,  non-keyword ,  arguments ] and kwds which is a dict having value { keyword  :  ligma ,  options  : [1,2,3]}This also works in reverse, i.e. from the caller side. for example if you have a function defined as:you can call it with by unpacking iterables or mappings you have in the calling scope:",
                "I want to give an example which others haven't  mentioned* can also unpack a generatorAn example from Python3 Documentunzip_x will be (1, 2, 3), unzip_y will be (4, 5, 6)The zip() receives multiple iretable args, and return a generator.",
                "Building on nickd's answer...Output:Basically, any number of positional arguments can use *args and any named arguments (or kwargs aka keyword arguments) can use **kwargs.",
                "In addition to function calls, *args and **kwargs are useful in class hierarchies and also avoid having to write __init__ method in Python. Similar usage can seen in frameworks like Django code.For example,A subclass can then beThe subclass then be instantiated asAlso, a subclass with a new attribute which makes sense only to that subclass instance can call the Base class __init__ to offload the attributes setting.\nThis is done through *args and **kwargs. kwargs mainly used so that code is readable using named arguments. For example,which can be instatiated asThe complete code is here",
                "Given a function that has 3 items as argumentImagine this toy with a bag of a triangle, a circle and a rectangle item. That bag does not directly fit. You need to unpack the bag to take those 3 items and now they fit. The Python * operator does this unpack process.",
                "*args and **kwargs: allow you to pass a variable number of arguments to a function.*args: is used to send a non-keyworded variable length argument list to the function:Will produce:**kwargs***kwargs allows you to pass keyworded variable length of arguments to a function. You should use **kwargs if you want to handle named arguments in a function.Will produce:",
                "A good example of using both in a function is:",
                "This example would help you remember *args, **kwargs and even super and inheritance in Python at once.",
                "In addition to the answers in this thread, here is another detail that was not mentioned elsewhere. This expands on the answer by Brad SolomonUnpacking with ** is also useful when using python str.format.This is somewhat similar to what you can do with python f-strings f-string but with the added overhead of declaring a dict to hold the variables (f-string does not require a dict).",
                "*args ( or *any ) means every parametersNOTICE : you can don't pass parameters to *argsThe *args is in type tuplefor access to elements don't use of *The **kwd**kwd or **any\nThis is a dict type",
                "For example, the syntax for implementing varargs in Java as follows:",
                "*args and **kwargs are just some way to input unlimited characters to functions, like:",
                "*args is the special parameter which can take 0 or more (positional) arguments as a tuple.**kwargs is the special parameter which can take 0 or more (keyword) arguments as a dictionary.*In Python, there are 2 kinds of arguments positional argument and keyword argument:For example, *args can take 0 or more arguments as a tuple as shown below:Output:And, when printing *args, 4 numbers are printed without parentheses and commas:Output:And, args has tuple type:Output:But, *args has no type:Output(Error):TypeError: type() takes 1 or 3 argumentsAnd, normal parameters can be put before *args as shown below:Output:But, **kwargs cannot be put before *args as shown below:Output(Error):SyntaxError: invalid syntaxAnd, normal parameters cannot be put after *args as shown below:Output(Error):TypeError: test() missing 2 required keyword-only arguments: 'num1' and 'num2'But, if normal parameters have default values, they can be put after *args as shown below:Output:And also, **kwargs can be put after *args as shown below:Output:For example, **kwargs can take 0 or more arguments as a dictionary as shown below:Output:And, when printing *kwargs, 2 keys are printed:Output:And, kwargs has dict type:Output:But, *kwargs and **kwargs have no type:Output(Error):TypeError: type() takes 1 or 3 argumentsAnd, normal parameters can be put before **kwargs as shown below:Output:And also, *args can be put before **kwargs as shown below:Output:And, normal parameters and *args cannot be put after **kwargs as shown below:Output(Error):SyntaxError: invalid syntaxActually, you can use other names for *args and **kwargs as shown below. *args and **kwargs are used conventionally:Output:"
            ]
        },
        {
            "tag": "reference",
            "patterns": [
                "How do I pass a variable by reference?",
                "variable by reference",
                "pass by reference",
                "reference"
            ],
            "responses": [
                "Arguments are passed by assignment. The rationale behind this is twofold:So:If you pass a mutable object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object.If you pass an immutable object to a method, you still can't rebind the outer reference, and you can't even mutate the object.To make it even more clear, let's have some examples.Let's try to modify the list that was passed to a method:Output:Since the parameter passed in is a reference to outer_list, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.Now let's see what happens when we try to change the reference that was passed in as a parameter:Output:Since the the_list parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The the_list was a copy of the outer_list reference, and we had the_list point to a new list, but there was no way to change where outer_list pointed.It's immutable, so there's nothing we can do to change the contents of the stringNow, let's try to change the referenceOutput:Again, since the the_string parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The the_string was a copy of the outer_string reference, and we had the_string point to a new string, but there was no way to change where outer_string pointed.I hope this clears things up a little.EDIT: It's been noted that this doesn't answer the question that @David originally asked,  Is there something I can do to pass the variable by actual reference? . Let's work on that.As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:Although this seems a little cumbersome.",
                "The problem comes from a misunderstanding of what variables are in Python. If you're used to most traditional languages, you have a mental model of what happens in the following sequence:You believe that a is a memory location that stores the value 1, then is updated to store the value 2. That's not how things work in Python. Rather, a starts as a reference to an object with the value 1, then gets reassigned as a reference to an object with the value 2. Those two objects may continue to coexist even though a doesn't refer to the first one anymore; in fact they may be shared by any number of other references within the program.When you call a function with a parameter, a new reference is created that refers to the object passed in. This is separate from the reference that was used in the function call, so there's no way to update that reference and make it refer to a new object. In your example:self.variable is a reference to the string object 'Original'. When you call Change you create a second reference var to the object. Inside the function you reassign the reference var to a different string object 'Changed', but the reference self.variable is separate and does not change.The only way around this is to pass a mutable object. Because both references refer to the same object, any changes to the object are reflected in both places.",
                "I found the other answers rather long and complicated, so I created this simple diagram to explain the way Python treats variables and parameters.",
                "It is neither pass-by-value or pass-by-reference - it is call-by-object. See this, by Fredrik Lundh:http://effbot.org/zone/call-by-object.htmHere is a significant quote: ...variables [names] are not objects; they cannot be denoted by other variables or referred to by objects. In your example, when the Change method is called--a namespace is created for it; and var becomes a name, within that namespace, for the string object 'Original'. That object then has a name in two namespaces. Next, var = 'Changed' binds var to a new string object, and thus the method's namespace forgets about 'Original'. Finally, that namespace is forgotten, and the string 'Changed' along with it.",
                "Think of stuff being passed by assignment instead of by reference/by value. That way, it is always clear, what is happening as long as you understand what happens during the normal assignment.So, when passing a list to a function/method, the list is assigned to the parameter name. Appending to the list will result in the list being modified. Reassigning the list inside the function will not change the original list, since:Since immutable types cannot be modified, they seem like being passed by value - passing an int into a function means assigning the int to the function's parameter. You can only ever reassign that, but it won't change the original variables value.",
                "The key to understanding parameter passing is to stop thinking about  variables . There are names and objects in Python and together they\nappear like variables, but it is useful to always distinguish the three.That is all there is to it. Mutability is irrelevant to this question.Example:This binds the name a to an object of type integer that holds the value 1.This binds the name b to the same object that the name x is currently bound to.\nAfterward, the name b has nothing to do with the name x anymore.See sections 3.1 and 4.2 in the Python 3 language reference.In the code shown in the question, the statement self.Change(self.variable) binds the name var (in the scope of function Change) to the object that holds the value 'Original' and the assignment var = 'Changed' (in the body of function Change) assigns that same name again: to some other object (that happens to hold a string as well but could have been something else entirely).So if the thing you want to change is a mutable object, there is no problem, as everything is effectively passed by reference.If it is an immutable object (e.g. a bool, number, string), the way to go is to wrap it in a mutable object.\nThe quick-and-dirty solution for this is a one-element list (instead of self.variable, pass [self.variable] and in the function modify var[0]).\nThe more pythonic approach would be to introduce a trivial, one-attribute class. The function receives an instance of the class and manipulates the attribute.",
                "Effbot (aka Fredrik Lundh) has described Python's variable passing style as call-by-object:  http://effbot.org/zone/call-by-object.htmObjects are allocated on the heap and pointers to them can be passed around anywhere.When you make an assignment such as x = 1000, a dictionary entry is created that maps the string  x  in the current namespace to a pointer to the integer object containing one thousand.When you update  x  with x = 2000, a new integer object is created and the dictionary is updated to point at the new object.  The old one thousand object is unchanged (and may or may not be alive depending on whether anything else refers to the object).When you do a new assignment such as y = x, a new dictionary entry  y  is created that points to the same object as the entry for  x .Objects like strings and integers are immutable.  This simply means that there are no methods that can change the object after it has been created.  For example, once the integer object one-thousand is created, it will never change.  Math is done by creating new integer objects.Objects like lists are mutable.  This means that the contents of the object can be changed by anything pointing to the object.  For example, x = []; y = x; x.append(10); print y will print [10].  The empty list was created.  Both  x  and  y  point to the same list.  The append method mutates (updates) the list object (like adding a record to a database) and the result is visible to both  x  and  y  (just as a database update would be visible to every connection to that database).Hope that clarifies the issue for you.",
                "Technically, Python always uses pass by reference values. I am going to repeat my other answer to support my statement.Python always uses pass-by-reference values. There isn't any exception. Any variable assignment means copying the reference value. No exception. Any variable is the name bound to the reference value. Always.You can think about a reference value as the address of the target object. The address is automatically dereferenced when used. This way, working with the reference value, it seems you work directly with the target object. But there always is a reference in between, one step more to jump to the target.Here is the example that proves that Python uses passing by reference:If the argument was passed by value, the outer lst could not be modified. The green are the target objects (the black is the value stored inside, the red is the object type), the yellow is the memory with the reference value inside -- drawn as the arrow. The blue solid arrow is the reference value that was passed to the function (via the dashed blue arrow path). The ugly dark yellow is the internal dictionary. (It actually could be drawn also as a green ellipse. The colour and the shape only says it is internal.)You can use the id() built-in function to learn what the reference value is (that is, the address of the target object).In compiled languages, a variable is a memory space that is able to capture the value of the type. In Python, a variable is a name (captured internally as a string) bound to the reference variable that holds the reference value to the target object. The name of the variable is the key in the internal dictionary, the value part of that dictionary item stores the reference value to the target.Reference values are hidden in Python. There isn't any explicit user type for storing the reference value. However, you can use a list element (or element in any other suitable container type) as the reference variable, because all containers do store the elements also as references to the target objects. In other words, elements are actually not contained inside the container -- only the references to elements are.",
                "A simple trick I normally use is to just wrap it in a list:(Yeah I know this can be inconvenient, but sometimes it is simple enough to do this.)",
                "(edit - Blair has updated his enormously popular answer so that it is now accurate)I think it is important to note that the current post with the most votes (by Blair Conrad), while being correct with respect to its result, is misleading and is borderline incorrect based on its definitions.  While there are many languages (like C) that allow the user to either pass by reference or pass by value, Python is not one of them.David Cournapeau's answer points to the real answer and explains why the behavior in Blair Conrad's post seems to be correct while the definitions are not.To the extent that Python is pass by value, all languages are pass by value since some piece of data (be it a  value  or a  reference ) must be sent. However, that does not mean that Python is pass by value in the sense that a C programmer would think of it.If you want the behavior, Blair Conrad's answer is fine.  But if you want to know the nuts and bolts of why Python is neither pass by value or pass by reference, read David Cournapeau's answer.",
                "You got some really good answers here.",
                "Python\u2019s pass-by-assignment scheme isn\u2019t quite the same as C++\u2019s reference parameters option, but it turns out to be very similar to the argument-passing model of the C language (and others) in practice:",
                "In this case the variable titled var in the method Change is assigned a reference to self.variable, and you immediately assign a string to var. It's no longer pointing to self.variable. The following code snippet shows what would happen if you modify the data structure pointed to by var and self.variable, in this case a list:I'm sure someone else could clarify this further.",
                "A lot of insights in answers here, but i think an additional point is not clearly mentioned here explicitly.   Quoting from python documentation https://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a new value anywhere within the function\u2019s body, it\u2019s assumed to be a local. If a variable is ever assigned a new value inside the function, the variable is implicitly local, and you need to explicitly declare it as \u2018global\u2019.\nThough a bit surprising at first, a moment\u2019s consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you\u2019d be using global all the time. You\u2019d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects. Even when passing a mutable object to a function this still applies. And to me clearly explains the reason for the difference in behavior between assigning to the object and operating on the object in the function.gives:The assignment to an global variable that is not declared global therefore creates a new local object and breaks the link to the original object.",
                "As you can state you need to have a mutable object, but let me suggest you to check over the global variables as they can help you or even solve this kind of issue!http://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-pythonexample:",
                "Here is the simple (I hope) explanation of the concept pass by object used in Python.\nWhenever you pass an object to the function, the object itself is passed (object in Python is actually what you'd call a value in other programming languages) not the reference to this object. In other words, when you call:The actual object - [0, 1] (which would be called a value in other programming languages) is being passed. So in fact the function change_me will try to do something like:which obviously will not change the object passed to the function. If the function looked like this:Then the call would result in:which obviously will change the object. This answer explains it well.",
                "Aside from all the great explanations on how this stuff works in Python, I don't see a simple suggestion for the problem. As you seem to do create objects and instances, the pythonic way of handling instance variables and changing them is the following:In instance methods, you normally refer to self to access instance attributes. It is normal to set instance attributes in __init__ and read or change them in instance methods. That is also why you pass self als the first argument to def Change.Another solution would be to create a static method like this:",
                "I used the following method to quickly convert a couple of Fortran codes to Python.  True, it's not pass by reference as the original question was posed, but is a simple work around in some cases.",
                "There is a little trick to pass an object by reference, even though the language doesn't make it possible. It works in Java too, it's the list with one item. ;-)It's an ugly hack, but it works. ;-P",
                "given the way python handles values and references to them, the only way you can reference an arbitrary instance attribute is by name:in real code you would, of course, add error checking on the dict lookup.",
                "Since it seems to be nowhere mentioned an approach to simulate references as known from e.g. C++ is to use an  update  function and pass that instead of the actual variable (or rather,  name ):This is mostly useful for  out-only references  or in a situation with multiple threads / processes (by making the update function thread / multiprocessing safe).Obviously the above does not allow reading the value, only updating it.",
                "Since your example happens to be object-oriented, you could make the following change to achieve a similar result:",
                "Since dictionaries are passed by reference, you can use a dict variable to store any referenced values inside it.",
                "While pass by reference is nothing that fits well into python and should be rarely used there are some workarounds that actually can work to get the object currently assigned to a local variable or even reassign a local variable from inside of a called function.The basic idea is to have a function that can do that access and can be passed as object into other functions or stored in a class.One way is to use global (for global variables) or nonlocal (for local variables in a function) in a wrapper function.The same idea works for reading and deleting a variable.For just reading there is even a shorter way of just using lambda: x which returns a callable that when called returns the current value of x. This is somewhat like  call by name  used in languages in the distant past.Passing 3 wrappers to access a variable is a bit unwieldy so those can be wrapped into a class that has a proxy attribute:Pythons  reflection  support makes it possible to get a object that is capable of reassigning a name/variable in a given scope without defining functions explicitly in that scope:Here the ByRef class wraps a dictionary access. So attribute access to wrapped is translated to a item access in the passed dictionary. By passing the result of the builtin locals and the name of a local variable this ends up accessing a local variable. The python documentation as of 3.5 advises that changing the dictionary might not work but it seems to work for me.",
                "You can merely use an empty class as an instance to store reference objects because internally object attributes are stored in an instance dictionary. See the example.",
                "Pass-By-Reference in Python is quite different from the concept of pass by reference in C++/Java.",
                "I am new to Python, started yesterday (though I have been programming for 45 years).I came here because I was writing a function where I wanted to have two so called out-parameters. If it would have been only one out-parameter, I wouldn't get hung up right now on checking how reference/value works in Python. I would just have used the return value of the function instead. But since I needed two such out-parameters I felt I needed to sort it out.In this post I am going to show how I solved my situation. Perhaps others coming here can find it valuable, even though it is not exactly an answer to the topic question. Experienced Python programmers of course already know about the solution I used, but it was new to me.From the answers here I could quickly see that Python works a bit like Javascript in this regard, and that you need to use workarounds if you want the reference functionality.But then I found something neat in Python that I don't think I have seen in other languages before, namely that you can return more than one value from a function, in a simple comma separated way, like this:and that you can handle that on the calling side similarly, like thisThat was good enough for me and I was satisfied. No need to use some workaround.In other languages you can of course also return many values, but then usually in the from of an object, and you need to adjust the calling side accordingly.The Python way of doing it was nice and simple.If you want to mimic by reference even more, you could do as follows:which gives this result",
                "alternatively you could use ctypes witch would look something like thisas a is a c int and not a python integer and apperently passed by reference. however you have to be carefull as strange things could happen and is therefor not advised",
                "Most likely not the most reliable method but this works, keep in mind that you are overloading the built-in str function which is typically something you don't want to do:",
                "What about dataclasses? Also, it allows you to apply type restriction (aka  type hint ).I agree with folks that in most cases you'd better consider not to use it.And yet, when we're talking about contexts it's worth to know that way.You can design explicit context class though. When prototyping I prefer dataclasses, just because it's easy to serialize them back and forth.Cheers!"
            ]
        },
        {
            "tag": "clone",
            "patterns": [
                "How do I clone a list so that it doesn't change unexpectedly after assignment?",
                "Cloning",
                "clone a list",
                "How to clone a list"
            ],
            "responses": [
                "new_list = my_list doesn't actually create a second list. The assignment just copies the reference to the list, not the actual list, so both new_list and my_list refer to the same list after the assignment.To actually copy the list, you have several options:You can use the builtin list.copy() method (available since Python 3.3):You can slice it:Alex Martelli's opinion (at least back in 2007) about this is, that it is a weird syntax and it does not make sense to use it ever. ;) (In his opinion, the next one is more readable).You can use the built in list() constructor:You can use generic copy.copy():This is a little slower than list() because it has to find out the datatype of old_list first.If you need to copy the elements of the list as well, use generic copy.deepcopy():Obviously the slowest and most memory-needing method, but sometimes unavoidable. This operates recursively; it will handle any number of levels of nested lists (or other containers).Example:Result:",
                "Felix already provided an excellent answer, but I thought I'd do a speed comparison of the various methods:So the fastest is list slicing. But be aware that copy.copy(), list[:] and list(list), unlike copy.deepcopy() and the python version don't copy any lists, dictionaries and class instances in the list, so if the originals change, they will change in the copied list too and vice versa.(Here's the script if anyone's interested or wants to raise any issues:)",
                "I've been told that Python 3.3+ adds the list.copy() method, which should be as fast as slicing:",
                "In Python 3, a shallow copy can be made with:In Python 2 and 3, you can get a shallow copy with a full slice of the original:There are two semantic ways to copy a list. A shallow copy creates a new list of the same objects, a deep copy creates a new list containing new equivalent objects.A shallow copy only copies the list itself, which is a container of references to the objects in the list. If the objects contained themselves are mutable and one is changed, the change will be reflected in both lists.There are different ways to do this in Python 2 and 3. The Python 2 ways will also work in Python 3.In Python 2, the idiomatic way of making a shallow copy of a list is with a complete slice of the original:You can also accomplish the same thing by passing the list through the list constructor,but using the constructor is less efficient:In Python 3, lists get the list.copy method:In Python 3.5:Using new_list = my_list then modifies new_list every time my_list changes. Why is this?my_list is just a name that points to the actual list in memory. When you say new_list = my_list you're not making a copy, you're just adding another name that points at that original list in memory. We can have similar issues when we make copies of lists.The list is just an array of pointers to the contents, so a shallow copy just copies the pointers, and so you have two different lists, but they have the same contents. To make copies of the contents, you need a deep copy.To make a deep copy of a list, in Python 2 or 3, use deepcopy in the copy module:To demonstrate how this allows us to make new sub-lists:And so we see that the deep copied list is an entirely different list from the original. You could roll your own function - but don't. You're likely to create bugs you otherwise wouldn't have by using the standard library's deepcopy function.You may see this used as a way to deepcopy, but don't do it:In 64 bit Python 2.7:on 64 bit Python 3.5:",
                "Let's start from the beginning and explore this question.So let's suppose you have two lists:And we have to copy both lists, now starting from the first list:So first let's try by setting the variable copy to our original list, list_1:Now if you are thinking copy copied the list_1, then you are wrong. The id function can show us if two variables can point to the same object. Let's try this:The output is:Both variables are the exact same argument. Are you surprised?So as we know, Python doesn't store anything in a variable, Variables are just referencing to the object and object store the value. Here object is a list but we created two references to that same object by two different variable names. This means that both variables are pointing to the same object, just with different names.When you do copy = list_1, it is actually doing:Here in the image list_1 and copy are two variable names, but the object is same for both variable which is list.So if you try to modify copied list then it will modify the original list too because the list is only one there, you will modify that list no matter you do from the copied list or from the original list:Output:So it modified the original list:Now let's move onto a Pythonic method for copying lists.This method fixes the first issue we had:So as we can see our both list having different id and it means that both variables are pointing to different objects. So what actually going on here is:Now let's try to modify the list and let's see if we still face the previous problem:The output is:As you can see, it only modified the copied list. That means it worked.Do you think we're done? No. Let's try to copy our nested list.list_2 should reference to another object which is copy of list_2. Let's check:We get the output:Now we can assume both lists are pointing different object, so now let's try to modify it and let's see it is giving what we want:This gives us the output:This may seem a little bit confusing, because the same method we previously used worked. Let's try to understand this.When you do:You're only copying the outer list, not the inside list. We can use the id function once again to check this.The output is:When we do copy_2 = list_2[:], this happens:It creates the copy of list, but only outer list copy, not the nested list copy. The nested list is same for both variable, so if you try to modify the nested list then it will modify the original list too as the nested list object is same for both lists.What is the solution? The solution is the deepcopy function.Let's check this:Both outer lists have different IDs. Let's try this on the inner nested lists.The output is:As you can see both IDs are different, meaning we can assume that both nested lists are pointing different object now.This means when you do deep = deepcopy(list_2) what actually happens:Both nested lists are pointing different object and they have separate copy of nested list now.Now let's try to modify the nested list and see if it solved the previous issue or not:It outputs:As you can see, it didn't modify the original nested list, it only modified the copied list.",
                "There are many answers already that tell you how to make a proper copy, but none of them say why your original 'copy' failed.Python doesn't store values in variables; it binds names to objects. Your original assignment took the object referred to by my_list and bound it to new_list as well. No matter which name you use there is still only one list, so changes made when referring to it as my_list will persist when referring to it as new_list. Each of the other answers to this question give you different ways of creating a new object to bind to new_list.Each element of a list acts like a name, in that each element binds non-exclusively to an object. A shallow copy creates a new list whose elements bind to the same objects as before.To take your list copy one step further, copy each object that your list refers to, and bind those element copies to a new list.This is not yet a deep copy, because each element of a list may refer to other objects, just like the list is bound to its elements. To recursively copy every element in the list, and then each other object referred to by each element, and so on: perform a deep copy.See the documentation for more information about corner cases in copying.",
                "Use thing[:]",
                "Here are the timing results using Python 3.6.8. Keep in mind these times are relative to one another, not absolute.I stuck to only doing shallow copies, and also added some new methods that weren't possible in Python\u00a02, such as list.copy() (the Python\u00a03 slice equivalent) and two forms of list unpacking (*new_list, = list and new_list = [*list]):We can see the Python 2 winner still does well, but doesn't edge out Python 3 list.copy() by much, especially considering the superior readability of the latter.The dark horse is the unpacking and repacking method (b = [*a]), which is ~25% faster than raw slicing, and more than twice as fast as the other unpacking method (*b, = a).b = a * 1 also does surprisingly well.Note that these methods do not output equivalent results for any input other than lists. They all work for sliceable objects, a few work for any iterable, but only copy.copy() works for more general Python objects.Here is the testing code for interested parties (Template from here):",
                "Python's idiom for doing this is newList = oldList[:]",
                "All of the other contributors gave great answers, which work when you have a single dimension (leveled) list, however of the methods mentioned so far, only copy.deepcopy() works to clone/copy a list and not have it point to the nested list objects when you are working with multidimensional, nested lists (list of lists). While Felix Kling refers to it in his answer, there is a little bit more to the issue and possibly a workaround using built-ins that might prove a faster alternative to deepcopy.While new_list = old_list[:], copy.copy(old_list)' and for Py3k old_list.copy() work for single-leveled lists, they revert to pointing at the list objects nested within the old_list and the new_list, and changes to one of the list objects are perpetuated in the other.As was pointed out by both Aaron Hall and PM 2Ring using eval() is not only a bad idea, it is also much slower than copy.deepcopy().This means that for multidimensional lists, the only option is copy.deepcopy(). With that being said, it really isn't an option as the performance goes way south when you try to use it on a moderately sized multidimensional array.  I tried to timeit using a 42x42 array, not unheard of or even that large for bioinformatics applications, and I gave up on waiting for a response and just started typing my edit to this post.It would seem that the only real option then is to initialize multiple lists and work on them independently. If anyone has any other suggestions, for how to handle multidimensional list copying, it would be appreciated.As others have stated, there  are significant performance issues using the copy module and copy.deepcopy for multidimensional lists.",
                "It surprises me that this hasn't been mentioned yet, so for the sake of completeness...You can perform list unpacking with the  splat operator : *, which will also copy elements of your list.The obvious downside to this method is that it is only available in Python 3.5+.Timing wise though, this appears to perform better than other common methods.",
                "new_list = my_listTry to understand this. Let's say that my_list is in the heap memory at location X, i.e., my_list is pointing to the X. Now by assigning new_list = my_list you're letting new_list point to the X. This is known as a shallow copy.Now if you assign new_list = my_list[:], you're simply copying each object of my_list to new_list. This is known as a deep copy.The other ways you can do this are:",
                "A very simple approach independent of python version was missing in already-given answers which you can use most of the time (at least I do):However, if my_list contains other containers (for example, nested lists) you must use deepcopy as others suggested in the answers above from the copy library. For example:.Bonus: If you don't want to copy elements use (AKA shallow copy):Let's understand difference between solution #1 and solution #2As you can see, solution #1 worked perfectly when we were not using the nested lists. Let's check what will happen when we apply solution #1 to nested lists.",
                "I wanted to post something a bit different than some of the other answers. Even though this is most likely not the most understandable, or fastest option, it provides a bit of an inside view of how deep copy works, as well as being another alternative option for deep copying. It doesn't really matter if my function has bugs, since the point of this is to show a way to copy objects like the question answers, but also to use this as a point to explain how deepcopy works at its core.At the core of any deep copy function is way to make a shallow copy. How? Simple. Any deep copy function only duplicates the containers of immutable objects. When you deepcopy a nested list, you are only duplicating the outer lists, not the mutable objects inside of the lists. You are only duplicating the containers. The same works for classes, too. When you deepcopy a class, you deepcopy all of its mutable attributes. So, how? How come you only have to copy the containers, like lists, dicts, tuples, iters, classes, and class instances?It's simple. A mutable object can't really be duplicated. It can never be changed, so it is only a single value. That means you never have to duplicate strings, numbers, bools, or any of those. But how would you duplicate the containers? Simple. You make just initialize a new container with all of the values. Deepcopy relies on recursion. It duplicates all the containers, even ones with containers inside of them, until no containers are left. A container is an immutable object.Once you know that, completely duplicating an object without any references is pretty easy. Here's a function for deepcopying basic data-types (wouldn't work for custom classes but you could always add that)Python's own built-in deepcopy is based around that example. The only difference is it supports other types, and also supports user-classes by duplicating the attributes into a new duplicate class, and also blocks infinite-recursion with a reference to an object it's already seen using a memo list or dictionary. And that's really it for making deep copies. At its core, making a deep copy is just making shallow copies. I hope this answer adds something to the question.EXAMPLESSay you have this list: [1, 2, 3]. The immutable numbers cannot be duplicated, but the other layer can. You can duplicate it using a list comprehension: [x for x in [1, 2, 3]]Now, imagine you have this list: [[1, 2], [3, 4], [5, 6]]. This time, you want to make a function, which uses recursion to deep copy all layers of the list. Instead of the previous list comprehension:It uses a new one for lists:And deepcopy_list looks like this:Then now you have a function which can deepcopy any list of strs, bools, floast, ints and even lists to infinitely many layers using recursion. And there you have it, deepcopying.TLDR: Deepcopy uses recursion to duplicate objects, and merely returns the same immutable objects as before, as immutable objects cannot be duplicated. However, it deepcopies the most inner layers of mutable objects until it reaches the outermost mutable layer of an object.",
                "Note that there are some cases where if you have defined your own custom class and you want to keep the attributes then you should use copy.copy() or copy.deepcopy() rather than the alternatives, for example in Python 3:Outputs:",
                "Remember that in Python when you do:List2 isn't storing the actual list, but a reference to list1. So when you do anything to list1, list2 changes as well. use the copy module (not default, download on pip) to make an original copy of the list(copy.copy() for simple lists, copy.deepcopy() for nested ones). This makes a copy that doesn't change with the first list.",
                "A slight practical perspective to look into memory through id and gc.",
                "There is another way of copying a list that was not listed until now: adding an empty list: l2 = l + [].I tested it with Python 3.8:It is not the best answer, but it works.",
                "The deepcopy option is the only method that works for me:leads to output of:",
                "This is because, the line new_list = my_list assigns a new reference to the variable my_list which is new_list\nThis is similar to the C code given below,You should use the copy module to create a new list by",
                "The method to use depends on the contents of the list being copied. If the list contains nested dicts than deepcopy is the only method that works, otherwise most of the methods listed in the answers (slice, loop [for], copy, extend, combine, or unpack) will work and execute in similar time (except for loop and deepcopy, which preformed the worst).",
                "I often see code that tries to modify a copy of the list in some iterative fashion. To construct a trivial example, suppose we had non-working (because x should not be modified) code like:Naturally people will ask how to make y be a copy of x, rather than a name for the same list, so that the for loop will do the right thing.But this is the wrong approach. Functionally, what we really want to do is make a new list that is based on the original.We don't need to make a copy first to do that, and we typically shouldn't.The natural tool for this is a list comprehension. This way, we write the logic that tells us how the elements in the desired result, relate to the original elements. It's simple, elegant and expressive; and we avoid the need for workarounds to modify the y copy in a for loop (since assigning to the iteration variable doesn't affect the list - for the same reason that we wanted the copy in the first place!).For the above example, it looks like:List comprehensions are quite powerful; we can also use them to filter out elements by a rule with an if clause, and we can chain for and if clauses (it works like the corresponding imperative code, with the same clauses in the same order; only the value that will ultimately end up in the result list, is moved to the front instead of being in the  innermost  part). If the plan was to iterate over the original while modifying the copy to avoid problems, there is generally a much more pleasant way to do that with a filtering list comprehension.Suppose instead that we had something likeRather than making y a separate copy first in order to delete the part we don't want, we can build a list by putting together the parts that we do want. Thus:Handling insertion, replacement etc. by slicing is left as an exercise. Just reason out which subsequences you want the result to contain. A special case of this is making a reversed copy - assuming we need a new list at all (rather than just to iterate in reverse), we can directly create it by slicing, rather than cloning and then using .reverse.These approaches - like the list comprehension - also have the advantage that they create the desired result as an expression, rather than by procedurally modifying an existing object in-place (and returning None). This is more convenient for writing code in a  fluent  style.",
                "Short and simple explanations of each copy mode:A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original - creating a shallow copy:A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original - creating a deep copy:list() works fine for deep copy of simple lists, like:But, for complex lists like......use deepcopy():"
            ]
        },
        {
            "tag": "delay",
            "patterns": [
                "How do I make a time delay?",
                "Time delays",
                "How to create a time delay",
                "Delay"
            ],
            "responses": [
                "This delays for 2.5 seconds:Here is another example where something is run approximately once a minute:",
                "Use sleep() from the time module. It can take a float argument for sub-second resolution.",
                "In a single thread I suggest the sleep function:This function actually suspends the processing of the thread in which it is called by the operating system, allowing other threads and processes to execute while it sleeps.Use it for that purpose, or simply to delay a function from executing. For example: hooray!  is printed 3 seconds after I hit Enter.Again, sleep suspends your thread - it uses next to zero processing power.To demonstrate, create a script like this (I first attempted this in an interactive Python 3.5 shell, but sub-processes can't find the party_later function for some reason):Example output from this script:You can trigger a function to be called at a later time in a separate thread with the Timer threading object:The blank line illustrates that the function printed to my standard output, and I had to hit Enter to ensure I was on a prompt.The upside of this method is that while the Timer thread was waiting, I was able to do other things, in this case, hitting Enter one time - before the function executed (see the first empty prompt).There isn't a respective object in the multiprocessing library. You can create one, but it probably doesn't exist for a reason. A sub-thread makes a lot more sense for a simple timer than a whole new subprocess.",
                "Delays can be also implemented by using the following methods.The first method:The second method to delay would be using the implicit wait method:The third method is more useful when you have to wait until a particular action is completed or until an element is found:",
                "There are five methods which I know: time.sleep(), pygame.time.wait(), matplotlib's pyplot.pause(), .after(), and asyncio.sleep().time.sleep() example (do not use if using tkinter):pygame.time.wait() example (not recommended if you are not using the pygame window, but you could exit the window instantly):matplotlib's function pyplot.pause() example (not recommended if you are not using the graph, but you could exit the graph instantly):The .after() method (best with Tkinter):Finally, the asyncio.sleep() method (has to be in an async loop):",
                "A bit of fun with a sleepy generator.The question is about time delay. It can be fixed time, but in some cases we might need a delay measured since last time. Here is one possible solution:The situation can be, we want to do something as regularly as possible and we do not want to bother with all the last_time, next_time stuff all around our code.The following code (sleepy.py) defines a buzzergen generator:And running it we see:We can also use it directly in a loop:And running it we might see:As we see, this buzzer is not too rigid and allow us to catch up with regular sleepy intervals even if we oversleep and get out of regular schedule.",
                "The Tkinter library in the Python standard library is an interactive tool which you can import. Basically, you can create buttons and boxes and popups and stuff that appear as windows which you manipulate with code.If you use Tkinter, do not use time.sleep(), because it will muck up your program. This happened to me. Instead, use root.after() and replace the values for however many seconds, with a milliseconds. For example, time.sleep(1) is equivalent to root.after(1000) in Tkinter.Otherwise, time.sleep(), which many answers have pointed out, which is the way to go.",
                "Delays are done with the time library, specifically the time.sleep() function.To just make it wait for a second:This works because by doing:You extract the sleep function only from the time library, which means you can just call it with:Rather than having to type outWhich is awkwardly long to type.With this method, you wouldn't get access to the other features of the time library and you can't have a variable called sleep. But you could create a variable called time.Doing from [library] import [function] (, [function2]) is great if you just want certain parts of a module.You could equally do it as:and you would have access to the other features of the time library like time.clock() as long as you type time.[function](), but you couldn't create the variable time because it would overwrite the import. A solution to this to dowhich would allow you to reference the time library as t, allowing you to do:This works on any library.",
                "Use time.sleep or Event().wait like this:Use threading.Timer like this:Outputs:",
                "Notice in recent Python versions (Python\u00a03.4 or higher) you can use asyncio.sleep. It's related to asynchronous programming and asyncio. Check out next example:We may think it will  sleep  for 2 seconds for first method and then 3 seconds in the second method, a total of 5 seconds running time of this code. But it will print:It is recommended to read asyncio official documentation for more details.",
                "While everyone else has suggested the de facto time module, I thought I'd share a different method using matplotlib's pyplot function, pause.Typically this is used to prevent the plot from disappearing as soon as it is plotted or to make crude animations.This would save you an import if you already have matplotlib imported.",
                "This is an easy example of a time delay:Another, in Tkinter:",
                "You also can try this:Now the shell will not crash or not react."
            ]
        },
        {
            "tag": "delete",
            "patterns": [
                "How can I delete a file or folder in Python?",
                "Delete a file",
                "Delete a folder"
            ],
            "responses": [
                "os.remove() removes a file.os.rmdir() removes an empty directory.shutil.rmtree() deletes a directory and all its contents.Path objects from the Python 3.4+ pathlib module also expose these instance methods:pathlib.Path.unlink() removes a file or symbolic link.pathlib.Path.rmdir() removes an empty directory.",
                "ororpathlib Library for Python version >= 3.4Unlink method used to remove the file or the symbolik link.First, check if the file or folder exists and then delete it. You can achieve this in two ways:EXAMPLE for os.path.isfileExample for shutil.rmtree()",
                "Use(See complete documentation on shutil) and/orand(Complete documentation on os.)",
                "Here is a robust function that uses both os.remove and shutil.rmtree:",
                "You can use the built-in pathlib module (requires Python 3.4+, but there are backports for older versions on PyPI: pathlib, pathlib2).To remove a file there is the unlink method:Or the rmdir method to remove an empty folder:",
                "There are multiple ways to Delete a File in Python but the best ways are the following:To delete all files inside a particular directory, you simply have to use the * symbol as the pattern string.\n#Importing os and glob modules\nimport os, glob\n#Loop Through the folder projects all files and deleting them one by one\nfor file in glob.glob( pythonpool/* ):\nos.remove(file)\nprint( Deleted   + str(file))os.unlink() is an alias or another name of os.remove() . As in the Unix OS remove is also known as unlink.\nNote: All the functionalities and syntax is the same of os.unlink() and os.remove(). Both of them are used to delete the Python file path.\nBoth are methods in the os module in Python\u2019s standard libraries which performs the deletion function.Pathlib module provides different ways to interact with your files. Rmdir is one of the path functions which allows you to delete an empty folder. Firstly, you need to select the Path() for the directory, and then calling rmdir() method will check the folder size. If it\u2019s empty, it\u2019ll delete it.This is a good way to deleting empty folders without any fear of losing actual data.",
                "For Python 3, to remove the file and directory individually, use the unlink and rmdir Path object methods respectively:Note that you can also use relative paths with Path objects, and you can check your current working directory with Path.cwd.For removing individual files and directories in Python 2, see the section so labeled below.To remove a directory with contents, use shutil.rmtree, and note that this is available in Python 2 and 3:New in Python 3.4 is the Path object.Let's use one to create a directory and file to demonstrate usage. Note that we use the / to join the parts of the path, this works around issues between operating systems and issues from using backslashes on Windows (where you'd need to either double up your backslashes like \\\\ or use raw strings, like r foo\\bar ):and now:Now let's delete them. First the file:We can use globbing to remove multiple files - first let's create a few files for this:Then just iterate over the glob pattern:Now, demonstrating removing the directory:What if we want to remove a directory  and everything in it? \nFor this use-case, use shutil.rmtreeLet's recreate our directory and file:and note that rmdir fails unless it's empty, which is why rmtree is so convenient:Now, import rmtree and pass the directory to the funtion:and we can see the whole thing has been removed:If you're on Python 2, there's a backport of the pathlib module called pathlib2, which can be installed with pip:And then you can alias the library to pathlibOr just directly import the Path object (as demonstrated here):If that's too much, you can remove files with os.remove or os.unlinkorand you can remove directories with os.rmdir:Note that there is also a os.removedirs - it only removes empty directories recursively, but it may suit your use-case.",
                "shutil.rmtree is the asynchronous function, \nso if you want to check when it complete, you can use while...loop",
                "This is my function for deleting dirs. The  path  requires the full pathname.",
                "orBoth functions are semantically same. This functions removes (deletes) the file path. If path is not a file and it is directory, then exception is raised.orIn order to remove whole directory trees, shutil.rmtree() can be used. os.rmdir only works when the directory is empty and exists.It remove every empty parent directory with self until parent which has some contentex. os.removedirs('abc/xyz/pqr') will remove the directories by order 'abc/xyz/pqr', 'abc/xyz' and 'abc' if they are empty.For more info check official doc: os.unlink , os.remove, os.rmdir , shutil.rmtree, os.removedirs",
                "To remove all files in folderTo remove all folders in a directory",
                "To avoid the TOCTOU issue highlighted by \u00c9ric Araujo's comment, you can catch an exception to call the correct method:Since shutil.rmtree() will only remove directories and os.remove() or os.unlink() will only remove files.",
                "My personal preference is to work with pathlib objects - it offers a more pythonic and less error-prone way to interact with the filesystem, especially if You develop cross-platform code.In that case, You might use pathlib3x - it offers a backport of the latest (at the date of writing this answer Python 3.10.a0) Python pathlib for Python 3.6 or newer, and a few additional functions like  copy ,  copy2 ,  copytree ,  rmtree  etc ...It also wraps shutil.rmtree:you can find it on github or PyPiDisclaimer: I'm the author of the pathlib3x library.",
                "I recommend using subprocess if writing a beautiful and readable code is your cup of tea:And if you are not a software engineer, then maybe consider using Jupyter; you can simply type bash commands:Traditionally, you use shutil:"
            ]
        },
        {
            "tag": "extend",
            "patterns": [
                "What is the difference between Python's list methods append and extend?",
                "Append or extend",
                "What does append do?",
                "What does extend do?",
                "Extend",
                "append"
            ],
            "responses": [
                "append appends a specified object at the end of the list:extend extends the list by appending elements from the specified iterable:",
                "append adds an element to a list. extend concatenates the first list with another list/iterable.",
                "The list.append method appends an object to the end of the list.Whatever the object is, whether a number, a string, another list, or something else, it gets added onto the end of my_list as a single entry on the list.So keep in mind that a list is an object. If you append another list onto a list, the first list will be a single object at the end of the list (which may not be what you want):The list.extend method extends a list by appending elements from an iterable:So with extend, each element of the iterable gets appended onto the list. For example:Keep in mind that a string is an iterable, so if you extend a list with a string, you'll append each character as you iterate over the string (which may not be what you want):Both + and += operators are defined for list. They are semantically similar to extend.my_list + another_list creates a third list in memory, so you can return the result of it, but it requires that the second iterable be a list.my_list += another_list modifies the list in-place (it is the in-place operator, and lists are mutable objects, as we've seen) so it does not create a new list. It also works like extend, in that the second iterable can be any kind of iterable.Don't get confused - my_list = my_list + another_list is not equivalent to += - it gives you a brand new list assigned to my_list.Append has (amortized) constant time complexity, O(1).Extend has time complexity, O(k).Iterating through the multiple calls to append adds to the complexity, making it equivalent to that of extend, and since extend's iteration is implemented in C, it will always be faster if you intend to append successive items from an iterable onto a list.Regarding  amortized  - from the list object implementation source:This means that we get the benefits of a larger than needed memory reallocation up front, but we may pay for it on the next marginal reallocation with an even larger one. Total time for all appends is linear at O(n), and that time allocated per append, becomes O(1).You may wonder what is more performant, since append can be used to achieve the same outcome as extend. The following functions do the same thing:So let's time them:A commenter said:Perfect answer, I just miss the timing of comparing adding only one elementDo the semantically correct thing. If you want to append all elements in an iterable, use extend. If you're just adding one element, use append.Ok, so let's create an experiment to see how this works out in time:And we see that going out of our way to create an iterable just to use extend is a (minor) waste of time:We learn from this that there's nothing gained from using extend when we have only one element to append.Also, these timings are not that important. I am just showing them to make the point that, in Python, doing the semantically correct thing is doing things the Right Way\u2122.It's conceivable that you might test timings on two comparable operations and get an ambiguous or inverse result. Just focus on doing the semantically correct thing.We see that extend is semantically clearer, and that it can run much faster than append, when you intend to append each element in an iterable to a list.If you only have a single element (not in an iterable) to add to the list, use append.",
                "append appends a single element. extend appends a list of elements.Note that if you pass a list to append, it still adds one element:",
                "With append you can append a single element that will extend the list:If you want to extend more than one element you should use extend, because you can only append one elment or one list of element:So that you get a nested listInstead with extend, you can extend a single element like thisOr, differently, from append, extend more elements in one time without nesting the list into the original one (that's the reason of the name extend)Both append and extend can add one element to the end of the list, though append is simpler.If you use append for more than one element, you have to pass a list of elements as arguments and you will obtain a NESTED list!With extend, instead, you pass a list as an argument, but you will obtain a list with the new element that is not nested in the old one.So, with more elements, you will use extend to get a list with more items.\nHowever, appending a list will not add more elements to the list, but one element that is a nested list as you can clearly see in the output of the code.",
                "The following two snippets are semantically equivalent:andThe latter may be faster as the loop is implemented in C.",
                "The append() method adds a single item to the end of the list.The extend() method takes one argument, a list, and appends each of the items of the argument to the original list. (Lists are implemented as classes. \u201cCreating\u201d a list is really instantiating a class. As such, a list has methods that operate on it.)From Dive Into Python.",
                "You can use  +  for returning extend, instead of extending in place.Similarly += for in place behavior, but with slight differences from append & extend. One of the biggest differences of += from append and extend is when it is used in function scopes, see this blog post.",
                "append(object) updates the list by adding the object to the list.extend(list) concatenates the two lists essentially.",
                "This is the equivalent of append and extend using the + operator:",
                "extend() can be used with an iterator argument. Here is an example. You wish to make a list out of a list of lists this way:Fromyou wantYou may use itertools.chain.from_iterable() to do so. This method's output is an iterator. Its implementation is equivalent toBack to our example, we can doand get the wanted list.Here is how equivalently extend() can be used with an iterator argument:",
                "append(): It is basically used in Python to add one element.Example 1:Example 2:extend(): Where extend(), is used to merge two lists or insert multiple elements in one list.Example 1:Example 2:",
                "An interesting point that has been hinted, but not explained, is that extend is faster than append. For any loop that has append inside should be considered to be replaced by list.extend(processed_elements).Bear in mind that apprending new elements might result in the realloaction of the whole list to a better location in memory. If this is done several times because we are appending 1 element at a time, overall performance suffers. In this sense, list.extend is analogous to   .join(stringlist).",
                "Append adds the entire data at once. The whole data will be added to the newly created index. On the other hand, extend, as it name suggests, extends the current array.For exampleWith append we get:While on extend we get:",
                "An English dictionary defines the words append and extend as:append: add (something) to the end of a written document. \nextend: make larger. Enlarge or expandWith that knowledge, now let's understand1) The difference between append and extendappend:extend:2) Similarity between append and extendExample",
                "I hope I can make a useful supplement to this question. If your list stores a specific type object, for example Info, here is a situation that extend method is not suitable: In a for loop and and generating an Info object every time and using extend to store it into your list, it will fail. The exception is like below:TypeError: 'Info' object is not iterableBut if you use the append method, the result is OK. Because every time using the extend method, it will always treat it as a list or any other collection type, iterate it, and place it after the previous list. A specific object can not be iterated, obviously.",
                "To distinguish them intuitivelyIt's like l1 reproduce a body inside her body(nested).It's like that two separated individuals get married and construct an united family.Besides I make an exhaustive cheatsheet of all list's methods for your reference.",
                "extend(L) extends the list by appending all the items in the given list L.",
                "append  extends  the list (in place) by only one item, the single object passed (as argument).extend  extends  the list (in place) by as many items as the object passed (as argument) contains.This may be slightly confusing for str objects.produces:",
                "Append and extend are one of the extensibility mechanisms in python.Append: Adds an element to the end of the list.To add a new element to the list, we can use append method in the following way.The default location that the new element will be added is always in the (length+1) position.Insert: The insert method was used to overcome the limitations of append. With insert, we can explicitly define the exact position we want our new element to be inserted at.Method descriptor of insert(index, object). It takes two arguments, first being the index we want to insert our element and second the element itself.Extend: This is very useful when we want to join two or more lists into a single list. Without extend, if we want to join two lists, the resulting object will contain a list of lists.If we try to access the element at pos 2, we get a list ([3]), instead of the element. To join two lists, we'll have to use append.To join multiple lists"
            ]
        },
        {
            "tag": "super",
            "patterns": [
                "Understanding Python super() with __init__() methods",
                "super",
                "init",
                "super method",
                "init method"
            ],
            "responses": [
                "super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already.Note that the syntax changed in Python 3.0: you can just say super().__init__() instead of super(ChildB, self).__init__() which IMO is quite a bit nicer. The standard docs also refer to a guide to using super() which is quite explanatory.",
                "The reason we use super is so that child classes that may be using cooperative multiple inheritance will call the correct next parent class function in the Method Resolution Order (MRO).In Python 3, we can call it like this:In Python 2, we were required to call super like this with the defining class's name and self, but we'll avoid this from now on because it's redundant, slower (due to the name lookups), and more verbose (so update your Python if you haven't already!):Without super, you are limited in your ability to use multiple inheritance because you hard-wire the next parent's call:I further explain below.The primary difference in this code is that in ChildB you get a layer of indirection in the __init__ with super, which uses the class in which it is defined to determine the next class's __init__ to look up in the MRO.I illustrate this difference in an answer at the canonical question, How to use 'super' in Python?, which demonstrates dependency injection and cooperative multiple inheritance.Here's code that's actually closely equivalent to super (how it's implemented in C, minus some checking and fallback behavior, and translated to Python):Written a little more like native Python:If we didn't have the super object, we'd have to write this manual code everywhere (or recreate it!) to ensure that we call the proper next method in the Method Resolution Order!How does super do this in Python 3 without being told explicitly which class and instance from the method it was called from?It gets the calling stack frame, and finds the class (implicitly stored as a local free variable, __class__, making the calling function a closure over the class) and the first argument to that function, which should be the instance or class that informs it which Method Resolution Order (MRO) to use.Since it requires that first argument for the MRO, using super with static methods is impossible as they do not have access to the MRO of the class from which they are called.super() lets you avoid referring to the base class explicitly, which can be nice. . But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already.It's rather hand-wavey and doesn't tell us much, but the point of super is not to avoid writing the parent class. The point is to ensure that the next method in line in the method resolution order (MRO) is called. This becomes important in multiple inheritance.I'll explain here.And let's create a dependency that we want to be called after the Child:Now remember, ChildB uses super, ChildA does not:And UserA does not call the UserDependency method:But UserB does in-fact call UserDependency because ChildB invokes super:In no circumstance should you do the following, which another answer suggests, as you'll definitely get errors when you subclass ChildB:(That answer is not clever or particularly interesting, but in spite of direct criticism in the comments and over 17 downvotes, the answerer persisted in suggesting it until a kind editor fixed his problem.)Explanation: Using self.__class__ as a substitute for the class name in super() will lead to recursion. super lets us look up the next parent in the MRO (see the first section of this answer) for child classes. If you tell super we're in the child instance's method, it will then lookup the next method in line (probably this one) resulting in recursion, probably causing a logical failure (in the answerer's example, it does) or a RuntimeError when the recursion depth is exceeded.Python 3's new super() calling method with no arguments fortunately allows us to sidestep this issue.",
                "It's been noted that in Python 3.0+ you can useto make your call, which is concise and does not require you to reference the parent OR class names explicitly, which can be handy. I just want to add that for Python 2.7 or under, some people implement a name-insensitive behaviour by writing self.__class__ instead of the class name, i.e.HOWEVER, this breaks calls to super for any classes that inherit from your class, where self.__class__ could return a child class. For example:Here I have a class Square, which is a sub-class of Rectangle. Say I don't want to write a separate constructor for Square because the constructor for Rectangle is good enough, but for whatever reason I want to implement a Square so I can reimplement some other method.When I create a Square using mSquare = Square('a', 10,10), Python calls the constructor for Rectangle because I haven't given Square its own constructor. However, in the constructor for Rectangle, the call super(self.__class__,self) is going to return the superclass of mSquare, so it calls the constructor for Rectangle again. This is how the infinite loop happens, as was mentioned by @S_C. In this case, when I run super(...).__init__() I am calling the constructor for Rectangle but since I give it no arguments, I will get an error.",
                "Super has no side effectsworks as expectedgets into infinite recursion.",
                "Just a heads up... with Python 2.7, and I believe ever since super() was introduced in version 2.2, you can only call super() if one of the parents inherit from a class that eventually inherits object (new-style classes).Personally, as for python 2.7 code, I'm going to continue using BaseClassName.__init__(self, args) until I actually get the advantage of using super().",
                "There isn't, really. super() looks at the next class in the MRO (method resolution order, accessed with cls.__mro__) to call the methods. Just calling the base __init__ calls the base __init__. As it happens, the MRO has exactly one item-- the base. So you're really doing the exact same thing, but in a nicer way with super() (particularly if you get into multiple inheritance later).",
                "The main difference is that ChildA.__init__ will unconditionally call Base.__init__ whereas ChildB.__init__ will call __init__ in whatever class happens to be ChildB ancestor in self's line of ancestors\n(which may differ from what you expect).If you add a ClassC that uses multiple inheritance:then Base is no longer the parent of ChildB for ChildC instances. Now super(ChildB, self) will point to Mixin if self is a ChildC instance.You have inserted Mixin in between ChildB and Base. And you can take advantage of it with super()So if you are designed your classes so that they can be used in a Cooperative Multiple Inheritance scenario, you use super because you don't really know who is going to be the ancestor at runtime.The super considered super post and pycon 2015 accompanying video explain this pretty well."
            ]
        },
        {
            "tag": "decorators",
            "patterns": [
                "How to make function decorators and chain them together?",
                "Chain function decorators",
                "function decorators",
                "Chaining decorators"
            ],
            "responses": [
                "If you are not into long explanations, see Paolo Bergantino\u2019s answer.To understand decorators, you must first understand that functions are objects in Python. This has important consequences. Let\u2019s see why with a simple example :Keep this in mind. We\u2019ll circle back to it shortly.Another interesting property of Python functions is they can be defined inside another function!Okay, still here? Now the fun part...You\u2019ve seen that functions are objects. Therefore, functions:That means that a function can return another function.There\u2019s more!If you can return a function, you can pass one as a parameter:Well, you just have everything needed to understand decorators. You see, decorators are \u201cwrappers\u201d, which means that they let you execute code before and after the function they decorate without modifying the function itself.How you\u2019d do it manually:Now, you probably want that every time you call a_stand_alone_function, a_stand_alone_function_decorated is called instead. That\u2019s easy, just overwrite a_stand_alone_function with the function returned by my_shiny_new_decorator:The previous example, using the decorator syntax:Yes, that\u2019s all, it\u2019s that simple. @decorator is just a shortcut to:Decorators are just a pythonic variant of the decorator design pattern. There are several classic design patterns embedded in Python to ease development (like iterators).Of course, you can accumulate decorators:Using the Python decorator syntax:The order you set the decorators MATTERS:As a conclusion, you can easily see how to answer the question:You can now just leave happy, or burn your brain a little bit more and see advanced uses of decorators.One nifty thing about Python is that methods and functions are really the same.  The only difference is that methods expect that their first argument is a reference to the current object (self).That means you can build a decorator for methods the same way! Just remember to take self into consideration:If you\u2019re making general-purpose decorator--one you\u2019ll apply to any function or method, no matter its arguments--then just use *args, **kwargs:Great, now what would you say about passing arguments to the decorator itself?This can get somewhat twisted, since a decorator must accept a function as an argument. Therefore, you cannot pass the decorated function\u2019s arguments directly to the decorator.Before rushing to the solution, let\u2019s write a little reminder:It\u2019s exactly the same.  my_decorator  is called. So when you @my_decorator, you are telling Python to call the function 'labelled by the variable  my_decorator '.This is important! The label you give can point directly to the decorator\u2014or not.Let\u2019s get evil. \u263aNo surprise here.Let\u2019s do EXACTLY the same thing, but skip all the pesky intermediate variables:Let\u2019s make it even shorter:Hey, did you see that? We used a function call with the  @  syntax! :-)So, back to decorators with arguments. If we can use functions to generate the decorator on the fly, we can pass arguments to that function, right?Here it is: a decorator with arguments. Arguments can be set as variable:As you can see, you can pass arguments to the decorator like any function using this trick. You can even use *args, **kwargs if you wish. But remember decorators are called only once. Just when Python imports the script. You can't dynamically set the arguments afterwards. When you do  import x , the function is already decorated, so you can't\nchange anything.Okay, as a bonus, I'll give you a snippet to make any decorator accept generically any argument. After all, in order to accept arguments, we created our decorator using another function.We wrapped the decorator.Anything else we saw recently that wrapped function?Oh yes, decorators!Let\u2019s have some fun and write a decorator for the decorators:It can be used as follows:I know, the last time you had this feeling, it was after listening a guy saying:  before understanding recursion, you must first understand recursion . But now, don't you feel good about mastering this?The functools module was introduced in Python 2.5. It includes the function functools.wraps(), which copies the name, module, and docstring of the decorated function to its wrapper.(Fun fact: functools.wraps() is a decorator! \u263a)Now the big question: What can I use decorators for?Seem cool and powerful, but a practical example would be great. Well, there are 1000 possibilities. Classic uses are extending a function behavior from an external lib (you can't modify it), or for debugging (you don't want to modify it because it\u2019s temporary).You can use them to extend several functions in a DRY\u2019s way, like so:Of course the good thing with decorators is that you can use them right away on almost anything without rewriting. DRY, I said:Python itself provides several decorators: property, staticmethod, etc.This really is a large playground.",
                "Check out the documentation to see how decorators work. Here is what you asked for:",
                "Alternatively, you could write a factory function which return a decorator which wraps the return value of the decorated function in a tag passed to the factory function. For example:This enables you to write:orPersonally I would have written the decorator somewhat differently:which would yield:Don't forget the construction for which decorator syntax is a shorthand:",
                "Decorators are just syntactical sugar.Thisexpands to",
                "And of course you can return lambdas as well from a decorator function:",
                "Python decorators add extra functionality to another functionAn italics decorator could be likeNote that a function is defined inside a function.\nWhat it basically does is replace a function with the newly defined one. For example, I have this classNow say, I want both functions to print  ---  after and before they are done.\nI could add a print  ---  before and after each print statement.\nBut because I don't like repeating myself, I will make a decoratorSo now I can change my class toFor more on decorators, check\nhttp://www.ibm.com/developerworks/linux/library/l-cpdecor.html",
                "You could make two separate decorators that do what you want as illustrated directly below. Note the use of *args, **kwargs in the declaration of the wrapped() function which supports the decorated function having multiple arguments (which isn't really necessary for the example say() function, but is included for generality).For similar reasons, the functools.wraps decorator is used to change the meta attributes of the wrapped function to be those of the one being decorated. This makes error messages and embedded function documentation (func.__doc__) be those of the decorated function instead of wrapped()'s.As you can see there's a lot of duplicate code in these two decorators. Given this similarity it would be better for you to instead make a generic one that was actually a decorator factory\u2014in other words, a decorator function that makes other decorators. That way there would be less code repetition\u2014and allow the DRY principle to be followed.To make the code more readable, you can assign a more descriptive name to the factory-generated decorators:or even combine them like this:While the above examples do all work, the code generated involves a fair amount of overhead in the form of extraneous function calls when multiple decorators are applied at once. This may not matter, depending the exact usage (which might be I/O-bound, for instance).If speed of the decorated function is important, the overhead can be kept to a single extra function call by writing a slightly different decorator factory-function which implements adding all the tags at once, so it can generate code that avoids the addtional function calls incurred by using separate decorators for each tag.This requires more code in the decorator itself, but this only runs when it's being applied to function definitions, not later when they themselves are called. This also applies when creating more readable names by using lambda functions as previously illustrated. Sample:",
                "Another way of doing the same thing:Or, more flexibly:",
                "You want the following function, when called:To return:To most simply do this, make decorators that return lambdas (anonymous functions) that close over the function (closures) and call it:Now use them as desired:and now:But we seem to have nearly lost the original function.To find it, we'd need to dig into the closure of each lambda, one of which is buried in the other:So if we put documentation on this function, or wanted to be able to decorate functions that take more than one argument, or we just wanted to know what function we were looking at in a debugging session, we need to do a bit more with our wrapper.We have the decorator wraps from the functools module in the standard library!It is unfortunate that there's still some boilerplate, but this is about as simple as we can make it.In Python 3, you also get __qualname__ and __annotations__ assigned by default.So now:And now:So we see that wraps makes the wrapping function do almost everything except tell us exactly what the function takes as arguments.There are other modules that may attempt to tackle the problem, but the solution is not yet in the standard library.",
                "A decorator takes the function definition and creates a new function that executes this function and transforms the result.is equivalent to:Thisis equivalent to this65 <=> 'a'To understand the decorator, it is important to notice, that decorator created a new function do which is inner that executes function and transforms the result.",
                "This answer has long been answered, but I thought I would share my Decorator class which makes writing new decorators easy and compact.For one I think this makes the behavior of decorators very clear, but it also makes it easy to define new decorators very concisely. For the example listed above, you could then solve it as:You could also use it to do more complex tasks, like for instance a decorator which automatically makes the function get applied recursively to all arguments in an iterator:Which prints:Notice that this example didn't include the list type in the instantiation of the decorator, so in the final print statement the method gets applied to the list itself, not the elements of the list.",
                "You can also write decorator in Class",
                "Here is a simple example of chaining decorators.  Note the last line - it shows what is going on under the covers.The output looks like:",
                "Speaking of the counter example - as given above, the counter will be shared between all functions that use the decorator:That way, your decorator can be reused for different functions (or used to decorate the same function multiple times: func_counter1 = counter(func); func_counter2 = counter(func)), and the counter variable will remain private to each.",
                "Result:",
                "Paolo Bergantino's answer has the great advantage of only using the stdlib, and works for this simple example where there are no decorator arguments nor decorated function arguments.However it has 3 major limitations if you want to tackle more general cases:I wrote decopatch to solve the first issue, and wrote makefun.wraps to solve the other two. Note that makefun leverages the same trick than the famous decorator lib.This is how you would create a decorator with arguments, returning truly signature-preserving wrappers:decopatch provides you with two other development styles that hide or show the various python concepts, depending on your preferences. The most compact style is the following:In both cases you can check that the decorator works as expected:Please refer to the documentation for details.",
                "I add a case when you need to add custom parameters in decorator, pass it to final function and then work it with.the very decorators:and the final function:",
                "Yet another example of nested decorators for plotting an image:Now, let's show a color image first without axis labels using the nested decorators:Next, let's show a gray scale image without axis labels using the nested decorators remove_axis and plot_gray (we need to cmap='gray', otherwise the default colormap is viridis, so a grayscale image is by default not displayed in black and white shades, unless explicitly specified)The above function call reduces down to the following nested call",
                "With make_bold() and make_italic() below:You can use them as decorators with say() as shown below:Output:And of course, you can directly use make_bold() and make_italic() without decorators as shown below:In short:Output:",
                "Consider the following decorator, note that we are returning the wrapper() function as an objectSo Thisevaluates to thisNote that x is not the say() but the wrapper object that calls say() internally. That is how decorator works. It always returns the wrapper object which calls the actual function.\nIn case of chaining thisgets converted to thisBelow is the complete codeThe above code will returnHope this helps"
            ]
        },
        {
            "tag": "Matplotlib",
            "patterns": [
                "How do I change the size of figures drawn with Matplotlib?",
                "Change sizes in Matplotlib",
                "Change the size of figures",
                "Figure sizes"
            ],
            "responses": [
                "figure tells you the call signature:figure(figsize=(1,1)) would create an inch-by-inch image, which would be 80-by-80 pixels unless you also give a different dpi argument.",
                "If you've already got the figure created, you can use figure.set_size_inches to adjust the figure size:To propagate the size change to an existing GUI window, add forward=True:Additionally as Erik Shilts mentioned in the comments you can also use figure.set_dpi to  [s]et the resolution of the figure in dots-per-inch ",
                "There is also this workaround in case you want to change the size without using the figure environment. So in case you are using plt.plot() for example, you can set a tuple with width and height.This is very useful when you plot inline (e.g., with IPython Notebook). As asmaier noticed, it is preferable to not put this statement in the same cell of the imports statements.To reset the global figure size back to default for subsequent plots:The figsize tuple accepts inches, so if you want to set it in centimetres you have to divide them by 2.54. Have a look at this question.",
                "Deprecation note:\nAs per the official Matplotlib guide, usage of the pylab module is no longer recommended. Please consider using the matplotlib.pyplot module instead, as described by this other answer.The following seems to work:This makes the figure's width 5 inches, and its height 10 inches.The Figure class then uses this as the default value for one of its arguments.",
                "In case you're looking for a way to change the figure size in Pandas, you could do:where df is a Pandas dataframe. Or, to use an existing figure or axes:If you want to change the default settings, you could do the following:For more details, check out the docs: pd.DataFrame.plot.",
                "The first link in Google for 'matplotlib figure size' is AdjustingImageSize (Google cache of the page).Here's a test script from the above page. It creates test[1-3].png files of different sizes of the same image:Output:Two notes:The module comments and the actual output differ.This answer allows easily to combine all three images in one image file to see the difference in sizes.",
                "You can simply use (from matplotlib.figure.Figure):As of Matplotlib 2.0.0, changes to your canvas will be visible immediately, as the forward keyword defaults to True.If you want to just change the width or height instead of both, you can usefig.set_figwidth(val) or fig.set_figheight(val)These will also immediately update your canvas, but only in Matplotlib 2.2.0 and newer.You need to specify forward=True explicitly in order to live-update your canvas in versions older than what is specified above. Note that the set_figwidth and set_figheight functions don\u2019t support the forward parameter in versions older than Matplotlib 1.5.0.",
                "Try commenting out the fig = ... line",
                "This works well for me:This forum post might also help: Resizing figure windows",
                "Comparison of different approaches to set exact image sizes in pixelsThis answer will focus on:Here is a quick comparison of some of the approaches I've tried with images showing what the give.Summary of current status: things are messy, and I am not sure if it is a fundamental limitation, or if the use case just didn't get enough attention from developers. I couldn't easily find an upstream discussion about this.Baseline example without trying to set the image dimensionsJust to have a comparison point:Run:Outputs:My best approach so far: plt.savefig(dpi=h/fig.get_size_inches()[1] height-only controlI think this is what I'll go with most of the time, as it is simple and scales:Run:Outputs:andOutputs:I tend to set just the height because I'm usually most concerned about how much vertical space the image is going to take up in the middle of my text.plt.savefig(bbox_inches='tight' changes image sizeI always feel that there is too much white space around images, and tended to add bbox_inches='tight' from:\nRemoving white space around a saved imageHowever, that works by cropping the image, and you won't get the desired sizes with it.Instead, this other approach proposed in the same question seems to work well:which gives the exact desired height for height equals 431:Fixed height, set_aspect, automatically sized width and small marginsErmmm, set_aspect messes things up again and prevents plt.tight_layout from actually removing the margins... this is an important use case that I don't have a great solution for yet.Asked at: How to obtain a fixed height in pixels, fixed data x/y aspect ratio and automatically remove remove horizontal whitespace margin in Matplotlib?plt.savefig(dpi=h/fig.get_size_inches()[1] + width controlIf you really need a specific width in addition to height, this seems to work OK:Run:Output:and for a small width:Output:So it does seem that fonts are scaling correctly, we just get some trouble for very small widths with labels getting cut off, e.g. the 100 on the top left.I managed to work around those with Removing white space around a saved imagewhich gives:From this, we also see that tight_layout removes a lot of the empty space at the top of the image, so I just generally always use it.Fixed magic base height, dpi on fig.set_size_inches and plt.savefig(dpi= scalingI believe that this is equivalent to the approach mentioned at: https://stackoverflow.com/a/13714720/895245Run:Outputs:And to see if it scales nicely:Outputs:So we see that this approach also does work well. The only problem I have with it is that you have to set that magic_height parameter or equivalent.Fixed DPI + set_size_inchesThis approach gave a slightly wrong pixel size, and it makes it is hard to scale everything seamlessly.Run:Outputs:So the height is slightly off, and the image:The pixel sizes are also correct if I make it 3 times larger:Outputs:We understand from this however that for this approach to scale nicely, you need to make every DPI-dependant setting proportional to the size in inches.In the previous example, we only made the  Hello  text proportional, and it did retain its height between 60 and 80 as we'd expect. But everything for which we didn't do that, looks tiny, including:SVGI could not find how to set it for SVG images, my approaches only worked for PNG, e.g.:Run:And the generated output contains:And identify says:And if I open it in Chromium 86 the browser debug tools mouse image hover confirm that height as 460.79.But of course, since SVG is a vector format, everything should in theory scale, so you can just convert to any fixed sized format without loss of resolution, e.g.:gives the exact height:I use Inkscape instead of ImageMagick's convert here because you need to mess with -density as well to get sharp SVG resizes with ImageMagick:And setting <img height=   on the HTML should also just work for the browser.It was tested on matplotlib 3.2.2.",
                "Generalizing and simplifying psihodelia's answer:If you want to change the current size of the figure by a factor sizefactor:After changing the current size, it might occur that you have to fine tune the subplot layout. You can do that in the figure window GUI, or by means of the command subplots_adjustFor example,",
                "This resizes the figure immediately even after the figure has been drawn (at least using Qt4Agg/TkAgg - but not Mac\u00a0OS\u00a0X - with Matplotlib 1.4.0):",
                "I always use the following pattern:With this example you are able to set figure dimensions in inches or in millimetres. When setting constrained_layout to True, plots fill your figure without borders."
            ]
        },
        {
            "tag": "throwing",
            "patterns": [
                "Manually raising (throwing) an exception in Python",
                "Throwing or raising an exception",
                "Manual exceptions",
                "Throw exception"
            ],
            "responses": [
                "Use the most specific Exception constructor that semantically fits your issue.Be specific in your message, e.g.:Avoid raising a generic Exception. To catch it, you'll have to catch all other more specific exceptions that subclass it.For example:And more specific catches won't catch the general exception:Instead, use the most specific Exception constructor that semantically fits your issue.which also handily allows an arbitrary number of arguments to be passed to the constructor:These arguments are accessed by the args attribute on the Exception object. For example:printsIn Python 2.5, an actual message attribute was added to BaseException in favor of encouraging users to subclass Exceptions and stop using args, but the introduction of message and the original deprecation of args has been retracted.When inside an except clause, you might want to, for example, log that a specific type of error happened, and then re-raise. The best way to do this while preserving the stack trace is to use a bare raise statement. For example:You can preserve the stacktrace (and error value) with sys.exc_info(), but this is way more error prone and has compatibility problems between Python 2 and 3, prefer to use a bare raise to re-raise.To explain - the sys.exc_info() returns the type, value, and traceback.This is the syntax in Python 2 - note this is not compatible with Python 3:If you want to, you can modify what happens with your new raise - e.g. setting new args for the instance:And we have preserved the whole traceback while modifying the args. Note that this is not a best practice and it is invalid syntax in Python 3 (making keeping compatibility much harder to work around).In Python 3:Again: avoid manually manipulating tracebacks. It's less efficient and more error prone. And if you're using threading and sys.exc_info you may even get the wrong traceback (especially if you're using exception handling for control flow - which I'd personally tend to avoid.)In Python 3, you can chain Exceptions, which preserve tracebacks:Be aware:These can easily hide and even get into production code. You want to raise an exception, and doing them will raise an exception, but not the one intended!Valid in Python 2, but not in Python 3 is the following:Only valid in much older versions of Python (2.4 and lower), you may still see people raising strings:In all modern versions, this will actually raise a TypeError, because you're not raising a BaseException type. If you're not checking for the right exception and don't have a reviewer that's aware of the issue, it could get into production.I raise Exceptions to warn consumers of my API if they're using it incorrectly: I want to make an error on purpose, so that it would go into the except You can create your own error types, if you want to indicate something specific is wrong with your application, just subclass the appropriate point in the exception hierarchy:and usage:",
                "Don't do this. Raising a bare Exception is absolutely not the right thing to do; see Aaron Hall's excellent answer instead.It can't get much more Pythonic than this:Replace Exception with the specific type of exception you want to throw.See the raise statement documentation for Python if you'd like more information.",
                "In Python 3 there are four different syntaxes for raising exceptions:If you use raise exception (args) to raise an exception then the args will be printed when you print the exception object - as shown in the example below.The raise statement without any arguments re-raises the last exception.This is useful if you need to perform some actions after catching the exception and then want to re-raise it. But if there wasn't any exception before, the raise statement raises  a TypeError Exception.This statement is used to create exception chaining in which an exception that is raised in response to another exception can contain the details of the original exception - as shown in the example below.Output:",
                "For the common case where you need to throw an exception in response to some unexpected conditions, and that you never intend to catch, but simply to fail fast to enable you to debug from there if it ever happens \u2014 the most logical one seems to be AssertionError:",
                "Read the existing answers first, this is just an addendum.Notice that you can raise exceptions with or without arguments.Example:exits the program, but you might want to know what happened. So you can use this.This will print  program exited  to standard error before closing the program.",
                "Just to note: there are times when you do want to handle generic exceptions. If you're processing a bunch of files and logging your errors, you might want to catch any error that occurs for a file, log it, and continue processing the rest of the files. In that case, ablock is a good way to do it. You'll still want to raise specific exceptions so you know what they mean, though.",
                "Another way to throw an exception is using assert. You can use assert to verify a condition is being fulfilled. If not, then it will raise AssertionError. For more details have a look here.",
                "You might also want to raise custom exceptions. For example, if you're writing a library, it's a very good practice to make a base exception class for your module, and then have custom sub-exceptions to be more specific.You can achieve that like this:If you're not interested in having a custom base class, you can just inherit your custom exception classes from an ordinary exception class like Exception, TypeError, ValueError, etc.",
                "If you don't care about which error to raise, you could use assert to raise an AssertionError:The assert keyword raises an AssertionError if the condition is False. In this case, we specified False directly, so it raises the error, but to have it have a text we want it to raise to, we add a comma and specify the error text we want. In this case, I wrote Manually raised error and this raises it with that text.",
                "You should learn the raise statement of Python for that.It should be kept inside the try block.Example -",
                "If you don\u2019t care about the raised exception, do:The good old division by 0."
            ]
        },
        {
            "tag": "print_color",
            "patterns": [
                "How do I print colored text to the terminal?",
                "Colored text",
                "Terminal text",
                "Color",
                "Color output"
            ],
            "responses": [
                "This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here's some Python code from the Blender build scripts:To use code like this, you can do something like:Or, with Python 3.6+:This will work on unixes including OS X, Linux and Windows (provided you use ANSICON, or in Windows 10 provided you enable VT100 emulation). There are ANSI codes for setting the color, moving the cursor, and more.If you are going to get complicated with this (and it sounds like you are if you are writing a game), you should look into the  curses  module, which handles a lot of the complicated parts of this for you. The Python Curses HowTO is a good introduction.If you are not using extended ASCII (i.e., not on a PC), you are stuck with the ASCII characters below 127, and '#' or '@' is probably your best bet for a block. If you can ensure your terminal is using a IBM extended ASCII character set, you have many more options. Characters 176, 177, 178 and 219 are the  block characters .Some modern text-based programs, such as  Dwarf Fortress , emulate text mode in a graphical mode, and use images of the classic PC font. You can find some of these bitmaps that you can use on the Dwarf Fortress Wiki see (user-made tilesets).The Text Mode Demo Contest has more resources for doing graphics in text mode.",
                "There is also the Python termcolor module. Usage is pretty simple:Or in Python 3:It may not be sophisticated enough, however, for game programming and the  colored blocks  that you want to do...To get the ANSI codes working on windows, first run",
                "The answer is Colorama for all cross-platform coloring in Python.It supports Python 3.5+ as well as Python 2.7.And as of January 2021 it is maintained.Example Code:Example Screenshot:",
                "Print a string that starts a color/style, then the string, and then end the color/style change with '\\x1b[0m':Get a table of format options for shell text with the following code:Reference: https://en.wikipedia.org/wiki/ANSI_escape_code#Colors",
                "Define a string that starts a color and a string that ends the color. Then print your text with the start string at the front and the end string at the end.This produces the following in Bash, in urxvt with a Zenburn-style color scheme:Through experimentation, we can get more colors:Note: \\33[5m and \\33[6m are blinking.This way we can create a full color collection:Here is the code to generate the test:",
                "Here's a solution that works on Windows 10 natively.Using a system call, such as os.system(  ), allows colours to be printed in Command Prompt and Powershell natively:Note: Windows does not fully support ANSI codes, whether through system calls or modules. Not all text decoration is supported, and although the bright colours display, they are identical to the regular colours.Thanks to @j-l for finding an even shorter method.tl;dr: Add os.system(  )",
                "You want to learn about ANSI escape sequences. Here's a brief example:For more information, see ANSI escape code.For a block character, try a Unicode character like \\u2588:Putting it all together:",
                "sty is similar to colorama, but it's less verbose, supports 8-bit and 24-bit (RGB) colors, supports all effects (bold, underline, etc.), allows you to register your own styles, is fully typed and high performant, supports muting, is not messing with globals such as sys.stdout, is really flexible, well documented and more...Examples:prints:Demo:",
                "Rich is a relatively new Python library for working with color in the terminal.There are a few ways of working with color in Rich. The quickest way to get started would be the rich print method which renders a BBCode-like syntax in to ANSI control codes:There are other ways of applying color with Rich (regex, syntax) and related formatting features.",
                "My favorite way is with the Blessings library (full disclosure: I wrote it). For example:To print colored bricks, the most reliable way is to print spaces with background colors. I use this technique to draw the progress bar in nose-progressive:You can print in specific locations as well:If you have to muck with other terminal capabilities in the course of your game, you can do that as well. You can use Python's standard string formatting to keep it readable:The nice thing about Blessings is that it does its best to work on all sorts of terminals, not just the (overwhelmingly common) ANSI-color ones. It also keeps unreadable escape sequences out of your code while remaining concise to use. Have fun!",
                "I generated a class with all the colors using a for loop to iterate every combination of color up to 100, and then wrote a class with Python colors. Copy and paste as you will, GPLv2 by me:",
                "This is, in my opinion, the easiest method. As long as you have the RGB values of the color you want, this should work:An example of printing red text:Multi-colored text",
                "Try this simple codePython 3 Example",
                "Try it online",
                "I have a library called colorit. It is super simple.Here are some examples:This gives you:It's also worth noting that this is cross platform and has been tested on Mac, Linux, and Windows.You might want to try it out: https://github.com/SuperMaZingCoder/coloritcolorit is now available to be installed with PyPi! You can install it with pip install color-it on Windows and pip3 install color-it on macOS and Linux.",
                "On Windows you can use module 'win32console' (available in some Python distributions) or module 'ctypes' (Python 2.5 and up) to access the Win32 API.To see complete code that supports both ways, see the color console reporting code from Testoob.ctypes example:",
                "I have wrapped joeld's answer into a module with global functions that I can use anywhere in my code.File: log.pyUse as follows:",
                "Try online",
                "Here is my modern (2021) solution: yachalkIt is one of the few libraries that properly supports nested styles:Apart from that yachalk is auto-complete-friendly, has 256/truecolor support, comes with terminal-capability detection, and is fully typed.Here are some design decision you may consider for choosing your solution.Many answers to this question demonstrate how to ANSI escape codes directly, or suggest low-level libraries that require manual style enabling/disabling.These approaches have subtle issues: Inserting on/off styles manually isTherefore if compatibility with many terminals is a goal, it's best to use a high-level library that offers automatic handling of style resets. This allows the library to take care of all edge cases by inserting the  spurious  ANSI escape codes where needed.In JavaScript the de-facto standard library for the task is chalk, and after using it for a while in JS projects, the solutions available in the Python world were lacking in comparison. Not only is the chalk API more convenient to use (fully auto-complete compatible), it also gets all the edge cases right.The idea of yachalk is to bring the same convenience to the Python ecosystem. If you're interested in a comparison to other libraries I've started feature comparison on the projects page. In addition, here is a long (but still incomplete) list of alternatives that came up during my research -- a lot to choose from :)",
                "I ended up doing this, and I felt it was cleanest:",
                "For Windows you cannot print to console with colors unless you're using the Win32 API.For Linux it's as simple as using print, with the escape sequences outlined here:ColorsFor the character to print like a box, it really depends on what font you are using for the console window. The pound symbol works well, but it depends on the font:",
                "Stupidly simple, based on joeld's answer:Then just",
                "Building on joeld's answer, using https://pypi.python.org/pypi/lazyme \npip install -U lazyme:Screenshot:Some updates to the color_print with new formatters, e.g.:Note: italic, fast blinking, and strikethrough may not work on all terminals, and they don't work on Mac and Ubuntu.E.g.,Screenshot:",
                "Note how well the with keyword mixes with modifiers like these that need to be reset (using Python 3 and Colorama):",
                "You could use Clint:",
                "You can use the Python implementation of the curses library:\ncurses \u2014 Terminal handling for character-cell displaysAlso, run this and you'll find your box:",
                "You can use colors for text as others mentioned in their answers to have colorful text with a background or foreground color.But you can use emojis instead! for example, you can use\u26a0\ufe0f for warning messages and \ud83d\uded1 for error messages.Or simply use these notebooks as a color:This method also helps you to quickly scan and find logs directly in the source code.But some operating systems (including some Linux distributions in some version with some window managers) default emoji font is not colorful by default and you may want to make them colorful, first.mac os: control + command + spacewindows: win + .linux: control + . or  control + ;",
                "If you are programming a game perhaps you would like to change the background color and use only spaces? For example:",
                "An easier option would be to use the cprint function from the termcolor package.It also supports %s, %d format of printing:Results can be terminal dependant, so review the Terminal Properties section of the package documentation.",
                "While I find this answer useful, I modified it a bit. This GitHub Gist is the resultIn addition, you can wrap common usages:"
            ]
        },
        {
            "tag": "split",
            "patterns": [
                "How do I split a list into equally-sized chunks?",
                "Split a list",
                "List split",
                "Divide a list"
            ],
            "responses": [
                "Here's a generator that yields evenly-sized chunks:For Python 2, using xrange instead of range:Below is a list comprehension one-liner. The method above is preferable, though, since using named functions makes code easier to understand. For Python 3:For Python 2:",
                "Something super simple:For Python 2, use xrange() instead of range().",
                "I know this is kind of old but nobody yet mentioned numpy.array_split:Result:",
                "Directly from the (old) Python documentation (recipes for itertools):The current version, as suggested by J.F.Sebastian:I guess Guido's time machine works\u2014worked\u2014will work\u2014will have worked\u2014was working again.These solutions work because [iter(iterable)]*n (or the equivalent in the earlier version) creates one iterator, repeated n times in the list. izip_longest then effectively performs a round-robin of  each  iterator; because this is the same iterator, it is advanced by each such call, resulting in each such zip-roundrobin generating one tuple of n items.",
                "I'm surprised nobody has thought of using iter's two-argument form:Demo:This works with any iterable and produces output lazily. It returns tuples rather than iterators, but I think it has a certain elegance nonetheless. It also doesn't pad; if you want padding, a simple variation on the above will suffice:Demo:Like the izip_longest-based solutions, the above always pads. As far as I know, there's no one- or two-line itertools recipe for a function that optionally pads. By combining the above two approaches, this one comes pretty close:Demo:I believe this is the shortest chunker proposed that offers optional padding.As Tomasz Gandor observed, the two padding chunkers will stop unexpectedly if they encounter a long sequence of pad values. Here's a final variation that works around that problem in a reasonable way:Demo:",
                "Here is a generator that work on arbitrary iterables:Example:",
                "Simple yet elegantor if you prefer:",
                "Don't reinvent the wheel.UPDATE: The upcoming Python 3.12 introduces itertools.batched, which solves this problem at last.  See below.GivenCodeitertools.batched++more_itertools+(or DIY, if you want)The Standard LibraryReferences+ A third-party library that implements itertools recipes and more. > pip install more_itertools++Included in Python Standard Library 3.12+.  batched is similar to more_itertools.chunked.",
                " Evenly sized chunks , to me, implies that they are all the same length, or barring that option, at minimal variance in length. E.g. 5 baskets for 21 items could have the following results:A practical reason to prefer the latter result: if you were using these functions to distribute work, you've built-in the prospect of one likely finishing well before the others, so it would sit around doing nothing while the others continued working hard.When I originally wrote this answer, none of the other answers were evenly sized chunks - they all leave a runt chunk at the end, so they're not well balanced, and have a higher than necessary variance of lengths.For example, the current top answer ends with:Others, like list(grouper(3, range(7))), and chunk(range(7), 3) both return: [(0, 1, 2), (3, 4, 5), (6, None, None)]. The None's are just padding, and rather inelegant in my opinion. They are NOT evenly chunking the iterables.Why can't we divide these better?A high-level balanced solution using itertools.cycle, which is the way I might do it today. Here's the setup:Now we need our lists into which to populate the elements:Finally, we zip the elements we're going to allocate together with a cycle of the baskets until we run out of elements, which, semantically, it exactly what we want:Here's the result:To productionize this solution, we write a function, and provide the type annotations:In the above, we take our list of items, and the max number of baskets. We create a list of empty lists, in which to append each element, in a round-robin style.Another elegant solution is to use slices - specifically the less-commonly used step argument to slices. i.e.:This is especially elegant in that slices don't care how long the data are - the result, our first basket, is only as long as it needs to be. We'll only need to increment the starting point for each basket.In fact this could be a one-liner, but we'll go multiline for readability and to avoid an overlong line of code:And islice from the itertools module will provide a lazily iterating approach, like that which was originally asked for in the question.I don't expect most use-cases to benefit very much, as the original data is already fully materialized in a list, but for large datasets, it could save nearly half the memory usage.View results with:Here's another balanced solution, adapted from a function I've used in production in the past, that uses the modulo operator:And I created a generator that does the same if you put it into a list:And finally, since I see that all of the above functions return elements in a contiguous order (as they were given):To test them out:Which prints out:Notice that the contiguous generator provide chunks in the same length patterns as the other two, but the items are all in order, and they are as evenly divided as one may divide a list of discrete elements.",
                "If you know list size:If you don't (an iterator):In the latter case, it can be rephrased in a more beautiful way if you can be sure that the sequence always contains a whole number of chunks of given size (i.e. there is no incomplete last chunk).",
                "I saw the most awesome Python-ish answer in a duplicate of this question:You can create n-tuple for any n. If a = range(1, 15), then the result will be:If the list is divided evenly, then you can replace zip_longest with zip, otherwise the triplet (13, 14, None) would be lost. Python 3 is used above. For Python 2, use izip_longest.",
                "Where AA is array, SS is chunk size. For example:To expand the ranges in py3 do",
                "With Assignment Expressions in Python 3.8 it becomes quite nice:This works on an arbitrary iterable, not just a list.UPDATEStarting with Python 3.12, this exact implementation is available as itertools.batched",
                "If you had a chunk size of 3 for example, you could do:source:\nhttp://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/I would use this when my chunk size is fixed number I can type, e.g. '3', and would never change.",
                "The toolz library has the partition function for this:",
                "I was curious about the performance of different approaches and here it is:Tested on Python 3.5.1Results:",
                "You may also use get_chunks function of utilspie library as:You can install utilspie via pip:Disclaimer: I am the creator of utilspie library.",
                "I like the Python doc's version proposed by tzot and J.F.Sebastian a lot,\n but it has two shortcomings:I'm using this one a lot in my code:UPDATE: A lazy chunks version:",
                "code:result:",
                "heh, one line version",
                "Another more explicit version.",
                "At this point, I think we need a recursive generator, just in case...In python 2:In python 3:Also, in case of massive Alien invasion, a decorated recursive generator might become handy:",
                "Without calling len() which is good for large lists:And this is for iterables:The functional flavour of the above:OR:OR:",
                "usage:",
                "See this referencePython3",
                "Since everybody here talking about iterators. boltons has perfect method for that, called iterutils.chunked_iter.Output:But if you don't want to be mercy on memory, you can use old-way and store the full list in the first place with iterutils.chunked.",
                "Consider using matplotlib.cbook piecesfor example:"
            ]
        },
        {
            "tag": "environment_variables",
            "patterns": [
                "How can I access environment variables in Python?",
                "Environment variables",
                "environment variables in python"
            ],
            "responses": [
                "Environment variables are accessed through os.environ:To see a list of all environment variables:If a key is not present, attempting to access it will raise a KeyError. To avoid this:",
                "To check if the key exists (returns True or False)You can also use get() when printing the key; useful if you want to use a default.where /home/username/ is the default",
                "Actually it can be done this way:Or simply:For viewing the value in the parameter:Or:To set the value:",
                "Here's how to check if $FOO is set:",
                "You can access the environment variables usingTry to see the content of the PYTHONPATH or PYTHONHOME environment variables. Maybe this will be helpful for your second question.",
                "As for the environment variables:",
                "That will print all of the environment variables along with their values.",
                "Import the os module:To get an environment variable:To set an environment variable:",
                "If you are planning to use the code in a production web application code, using any web framework like Django and Flask, use projects like envparse. Using it, you can read the value as your defined type.NOTE: kennethreitz's autoenv is a recommended tool for making project-specific environment variables. For those who are using autoenv, please note to keep the .env file private (inaccessible to public).",
                "There are also a number of great libraries. Envs, for example, will allow you to parse objects out of your environment variables, which is rad. For example:",
                "You can also try this:First, install python-decoupleImport it in your fileThen get the environment variableRead more about the Python library here.",
                "Edited - October 2021Following @Peter's comment, here's how you can test it:main.pyIf this is true ... It's 1500x faster to use a dict() instead of accessing environ directly.A performance-driven approach - calling environ is expensive, so it's better to call it once and save it to a dictionary. Full example:P.S- if you worry about exposing private environment variables, then sanitize env_dict after the assignment.",
                "For Django, see Django-environ.",
                "You should first import os usingand then actually print the environment variable valueof course, replace yourvariable as the variable you want to access.",
                "The tricky part of using nested for-loops in one-liners is that you have to use list comprehension. So in order to print all your environment variables, without having to import a foreign library, you can use:"
            ]
        },
        {
            "tag": "datetime",
            "patterns": [
                "Convert string  Jun 1 2005 1:33PM  into datetime",
                "String to datetime",
                "convert to date",
                "datetime"
            ],
            "responses": [
                "datetime.strptime parses an input string in the user-specified format into a timezone-naive datetime object:To obtain a date object using an existing datetime object, convert it using .date():Links:strptime docs: Python 2, Python 3strptime/strftime format string docs: Python 2, Python 3strftime.org format string cheatsheetNotes:",
                "Use the third-party dateutil library:It can handle most date formats and is more convenient than strptime since it usually guesses the correct format. It is also very useful for writing tests, where readability is more important than performance.Install it with:",
                "Check out strptime in the time module.  It is the inverse of strftime.",
                "To convert a YYYY-MM-DD string to a datetime object, datetime.fromisoformat could be used.Caution from the documentation:This does not support parsing arbitrary ISO 8601 strings - it is only intended as the inverse operation of datetime.isoformat(). A more full-featured ISO 8601 parser, dateutil.parser.isoparse is available in the third-party package dateutil.",
                "I have put together a project that can convert some really neat expressions. Check out timestring.",
                "Remember this and you didn't need to get confused in datetime conversion again.String to datetime object = strptimedatetime object to other formats = strftimeJun 1 2005  1:33PMis equals to%b %d %Y %I:%M%p%b    Month as locale\u2019s abbreviated name(Jun)%d    Day of the month as a zero-padded decimal number(1)%Y    Year with century as a decimal number(2015)%I    Hour (12-hour clock) as a zero-padded decimal number(01)%M    Minute as a zero-padded decimal number(33)%p    Locale\u2019s equivalent of either AM or PM(PM)so you need strptime i-e converting string toOutputWhat if you have different format of dates you can use panda or dateutil.parseOutPut",
                "Many timestamps have an implied timezone. To ensure that your code will work in every timezone, you should use UTC internally and attach a timezone each time a foreign object enters the system.Python 3.2+:This assumes you know the offset. If you don't, but you know e.g. the location, you can use the pytz package to query the IANA time zone database for the offset. I'll use Tehran here as an example because it has a half-hour offset:As you can see, pytz has determined that the offset was +3:30 at that particular date. You can now convert this to UTC time, and it will apply the offset:Note that dates before the adoption of timezones will give you weird offsets. This is because the IANA has decided to use Local Mean Time:The weird  7 hours and 34 minutes  are derived from the longitude of Chicago. I used this timestamp because it is right before standardized time was adopted in Chicago.",
                "If your string is in ISO 8601 format and you have Python 3.7+, you can use the following simple code:for dates andfor strings containing date and time. If timestamps are included, the function datetime.datetime.isoformat() supports the following format:Where * matches any single character. See also here and here.",
                "Here are two solutions using Pandas to convert dates formatted as strings into datetime.date objects.TimingsAnd here is how to convert the OP's original date-time examples:There are many options for converting from the strings to Pandas Timestamps using to_datetime, so check the docs if you need anything special.Likewise, Timestamps have many properties and methods that can be accessed in addition to .date",
                "I personally like the solution using the parser module, which is the second answer to this question and is beautiful, as you don't have to construct any string literals to get it working. But, one downside is that it is 90% slower than the accepted answer with strptime.Output:10.70296801342902 \n1.3627995655316933As long as you are not doing this a million times over and over again, I still think the parser method is more convenient and will handle most of the time formats automatically.",
                "Something that isn't mentioned here and is useful: adding a suffix to the day. I decoupled the suffix logic so you can use it for any number you like, not just dates.",
                "Django Timezone aware datetime object example.This conversion is very important for Django and Python when you have USE_TZ = True:",
                "Create a small utility function like:This is versatile enough:",
                "This would be helpful for converting a string to datetime and also with a time zone:",
                "arrow offers many useful functions for dates and times. This bit of code provides an answer to the question and shows that arrow is also capable of formatting dates easily and displaying information for other locales.See http://arrow.readthedocs.io/en/latest/ for more.",
                "You can also check out dateparser:dateparser provides modules to easily parse localized dates in almost\nany string formats commonly found on web pages.Install:This is, I think, the easiest way you can parse dates.The most straightforward way is to use the dateparser.parse function,\nthat wraps around most of the functionality in the module.Sample code:Output:",
                "You can use easy_date to make it easy:",
                "If you want only date format then you can manually convert it by passing your individual fields like:You can pass your split string values to convert it into date type like:You will get the resulting value in date format.",
                "Similar to Javed's answer, I just wanted date from string - so combining Simon's and Javed's logic, we get:Outputdatetime.date(2021, 3, 4)",
                "It seems using pandas Timestamp is the fastest:If the string is an ISO\u00a08601 string, please use csio8601:",
                "If you don't want to explicitly specify which format your string is in with respect to the date time format, you can use this hack to by pass that step:If you want to convert it into some other datetime format, just modify the last line with the format you like for example something like date.strftime('%Y/%m/%d %H:%M:%S.%f'):Try running the above snippet to have a better clarity.",
                "See my answer.In real-world data this is a real problem: multiple, mismatched, incomplete, inconsistent and multilanguage/region date formats, often mixed freely in one dataset. It's not ok for production code to fail, let alone go exception-happy like a fox.We need to try...catch multiple datetime formats fmt1,fmt2,...,fmtn and suppress/handle the exceptions (from strptime()) for all those that mismatch (and in particular, avoid needing a yukky n-deep indented ladder of try..catch clauses). From my solution",
                "A short sample mapping a yyyy-mm-dd date string to a datetime.date object:",
                "Use:It shows  Start Date Time  Column and  Last Login Time  both are  object = strings  in data-frame:By using the parse_dates option in read_csv mention, you can convert your string datetime into the pandas datetime format.Output:"
            ]
        },
        {
            "tag": "speed",
            "patterns": [
                "Why is  1000000000000000 in range(1000000000000001)  so fast in Python 3?",
                "Speed in python",
                "Speed example in Python"
            ],
            "responses": [
                "The Python 3 range() object doesn't produce numbers immediately; it is a smart sequence object that produces numbers on demand. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.The object also implements the object.__contains__ hook, and calculates if your number is part of its range. Calculating is a (near) constant time operation *. There is never a need to scan through all possible integers in the range.From the range() object documentation:The advantage of the range type over a regular list or tuple is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the start, stop and step values, calculating individual items and subranges as needed).So at a minimum, your range() object would do:This is still missing several things that a real range() supports (such as the .index() or .count() methods, hashing, equality testing, or slicing), but should give you an idea.I also simplified the __contains__ implementation to only focus on integer tests; if you give a real range() object a non-integer value (including subclasses of int), a slow scan is initiated to see if there is a match, just as if you use a containment test against a list of all the contained values. This was done to continue to support other numeric types that just happen to support equality testing with integers but are not expected to support integer arithmetic as well. See the original Python issue that implemented the containment test.* Near constant time because Python integers are unbounded and so math operations also grow in time as N grows, making this a O(log N) operation. Since it\u2019s all executed in optimised C code and Python stores integer values in 30-bit chunks, you\u2019d run out of memory before you saw any performance impact due to the size of the integers involved here.",
                "The fundamental misunderstanding here is in thinking that range is a generator. It's not. In fact, it's not any kind of iterator.You can tell this pretty easily:If it were a generator, iterating it once would exhaust it:What range actually is, is a sequence, just like a list. You can even test this:This means it has to follow all the rules of being a sequence:The difference between a range and a list is that a range is a lazy or dynamic sequence; it doesn't remember all of its values, it just remembers its start, stop, and step, and creates the values on demand on __getitem__.(As a side note, if you print(iter(a)), you'll notice that range uses the same listiterator type as list. How does that work? A listiterator doesn't use anything special about list except for the fact that it provides a C implementation of __getitem__, so it works fine for range too.)Now, there's nothing that says that Sequence.__contains__ has to be constant time\u2014in fact, for obvious examples of sequences like list, it isn't. But there's nothing that says it can't be. And it's easier to implement range.__contains__ to just check it mathematically ((val - start) % step, but with some extra complexity to deal with negative steps) than to actually generate and test all the values, so why shouldn't it do it the better way?But there doesn't seem to be anything in the language that guarantees this will happen. As Ashwini Chaudhari points out, if you give it a non-integral value, instead of converting to integer and doing the mathematical test, it will fall back to iterating all the values and comparing them one by one. And just because CPython 3.2+ and PyPy 3.x versions happen to contain this optimization, and it's an obvious good idea and easy to do, there's no reason that IronPython or NewKickAssPython 3.x couldn't leave it out. (And in fact, CPython 3.0-3.1 didn't include it.)If range actually were a generator, like my_crappy_range, then it wouldn't make sense to test __contains__ this way, or at least the way it makes sense wouldn't be obvious. If you'd already iterated the first 3 values, is 1 still in the generator? Should testing for 1 cause it to iterate and consume all the values up to 1 (or up to the first value >= 1)?",
                "Use the source, Luke!In CPython, range(...).__contains__ (a method wrapper) will eventually delegate to a simple calculation which checks if the value can possibly be in the range.  The reason for the speed here is we're using mathematical reasoning about the bounds, rather than a direct iteration of the range object.  To explain the logic used:For example, 994 is in range(4, 1000, 2) because:The full C code is included below, which is a bit more verbose because of memory management and reference counting details, but the basic idea is there:The  meat  of the idea is mentioned in the comment lines:As a final note - look at the range_contains function at the bottom of the code snippet.  If the exact type check fails then we don't use the clever algorithm described, instead falling back to a dumb iteration search of the range using _PySequence_IterSearch!  You can check this behaviour in the interpreter (I'm using v3.5.0 here):",
                "To add to Martijn\u2019s answer, this is the relevant part of the source (in C, as the range object is written in native code):So for PyLong objects (which is int in Python 3), it will use the range_contains_long function to determine the result. And that function essentially checks if ob is in the specified range (although it looks a bit more complex in C).If it\u2019s not an int object, it falls back to iterating until it finds the value (or not).The whole logic could be translated to pseudo-Python like this:",
                "If you're wondering why this optimization was added to range.__contains__, and why it wasn't added to xrange.__contains__ in 2.7:First, as Ashwini Chaudhary discovered, issue 1766304 was opened explicitly to optimize [x]range.__contains__. A patch for this was accepted and checked in for 3.2, but not backported to 2.7 because  xrange has behaved like this for such a long time that I don't see what it buys us to commit the patch this late.  (2.7 was nearly out at that point.)Meanwhile:Originally, xrange was a not-quite-sequence object. As the 3.1 docs say:Range objects have very little behavior: they only support indexing, iteration, and the len function.This wasn't quite true; an xrange object actually supported a few other things that come automatically with indexing and len,* including __contains__ (via linear search). But nobody thought it was worth making them full sequences at the time.Then, as part of implementing the Abstract Base Classes PEP, it was important to figure out which builtin types should be marked as implementing which ABCs, and xrange/range claimed to implement collections.Sequence, even though it still only handled the same  very little behavior . Nobody noticed that problem until issue 9213. The patch for that issue not only added index and count to 3.2's range, it also re-worked the optimized __contains__ (which shares the same math with index, and is directly used by count).** This change went in for 3.2 as well, and was not backported to 2.x, because  it's a bugfix that adds new methods . (At this point, 2.7 was already past rc status.)So, there were two chances to get this optimization backported to 2.7, but they were both rejected.* In fact, you even get iteration for free with indexing alone, but in 2.3 xrange objects got a custom iterator.** The first version actually reimplemented it, and got the details wrong\u2014e.g., it would give you MyIntSubclass(2) in range(5) == False. But Daniel Stutzbach's updated version of the patch restored most of the previous code, including the fallback to the generic, slow _PySequence_IterSearch that pre-3.2 range.__contains__ was implicitly using when the optimization doesn't apply.",
                "The other answers explained it well already, but I'd like to offer another experiment illustrating the nature of range objects:As you can see, a range object is an object that remembers its range and can be used many times (even while iterating over it), not just a one-time generator.",
                "It's all about a lazy approach to the evaluation and some extra optimization of range.\nValues in ranges don't need to be computed until real use, or even further due to extra optimization.By the way, your integer is not such big, consider sys.maxsizesys.maxsize in range(sys.maxsize) is pretty fastdue to optimization - it's easy to compare given integers just with min and max of range.but:Decimal(sys.maxsize) in range(sys.maxsize) is pretty slow.(in this case, there is no optimization in range, so if python receives unexpected Decimal, python will compare all numbers)You should be aware of an implementation detail but should not be relied upon, because this may change in the future.",
                "The object returned by range() is actually a range object. This object implements the iterator interface so you can iterate over its values sequentially, just like a generator, list, or tuple.But it also implements the __contains__ interface which is actually what gets called when an object appears on the right-hand side of the in operator. The __contains__() method returns a bool of whether or not the item on the left-hand side of the in is in the object. Since range objects know their bounds and stride, this is very easy to implement in O(1).",
                "Take an example, 997 is in range(4, 1000, 3) because:4 <= 997 < 1000, and (997 - 4) % 3 == 0.",
                "Try x-1 in (i for i in range(x)) for large x values, which uses a generator comprehension to avoid invoking the range.__contains__ optimisation.",
                "TLDR;\nthe range is an arithmetic series so it can very easily calculate whether the object is there. It could even get the index of it if it were list like really quickly.",
                "__contains__ method compares directly with the start and end of the range"
            ]
        },
        {
            "tag": "file_directory",
            "patterns": [
                "Find the current directory and file's directory",
                "Find the directory",
                "File directory",
                "current directory",
                "directory"
            ],
            "responses": [
                "To get the full path to the directory a Python file is contained in, write this in that file:(Note that the incantation above won't work if you've already used os.chdir() to change your current working directory, since the value of the __file__ constant is relative to the current working directory and is not changed by an os.chdir() call.)To get the current working directory useDocumentation references for the modules, constants and functions used above:",
                "Current working directory:  os.getcwd()And the __file__ attribute can help you find out where the file you are executing is located. This Stack\u00a0Overflow post explains everything:  How do I get the path of the current executed file in Python?",
                "You may find this useful as a reference:",
                "The pathlib module, introduced in Python 3.4 (PEP 428 \u2014 The pathlib module \u2014 object-oriented filesystem paths), makes the path-related experience much much better.In order to get the current working directory, use Path.cwd():To get an absolute path to your script file, use the Path.resolve() method:And to get the path of a directory where your script is located, access .parent (it is recommended to call .resolve() before .parent):Remember that __file__ is not reliable in some situations: How do I get the path of the current executed file in Python?.Please note, that Path.cwd(), Path.resolve() and other Path methods return path objects (PosixPath in my case), not strings. In Python 3.4 and 3.5 that caused some pain, because open built-in function could only work with string or bytes objects, and did not support Path objects, so you had to convert Path objects to strings or use the Path.open() method, but the latter option required you to change old code:As you can see, open(p) does not work with Python 3.5.PEP 519 \u2014 Adding a file system path protocol, implemented in Python 3.6, adds support of PathLike objects to the open function, so now you can pass Path objects to the open function directly:",
                "To get the current directory full pathOutput:  C :\\Users\\admin\\myfolder To get the current directory folder name aloneOutput:  myfolder ",
                "Pathlib can be used this way to get the directory containing the current script:",
                "If you are trying to find the current directory of the file you are currently in:OS agnostic way:",
                "If you're using Python 3.4, there is the brand new higher-level pathlib module which allows you to conveniently call pathlib.Path.cwd() to get a Path object representing your current working directory, along with many other new features.More info on this new API can be found here.",
                "To get the current directory full path:",
                "Answer to #1:If you want the current directory, do this:If you want just any folder name and you have the path to that folder, do this:Answer to #2:",
                "I think the most succinct way to find just the name of your current execution context would be:",
                "If you're searching for the location of the currently executed script, you can use sys.argv[0] to get the full path.",
                "For question 1, use os.getcwd() # Get working directory and os.chdir(r'D:\\Steam\\steamapps\\common') # Set working directoryI recommend using sys.argv[0] for question 2 because sys.argv is immutable and therefore always returns the current file (module object path) and not affected by os.chdir(). Also you can do like this:But that snippet and sys.argv[0] will not work or will work weird when compiled by PyInstaller, because magic properties are not set in __main__ level and sys.argv[0] is the way your executable was called (it means that it becomes affected by the working directory)."
            ]
        },
        {
            "tag": "Pandas_column",
            "patterns": [
                "Renaming column names in Pandas",
                "Column names",
                "Panda columns",
                "naming columns"
            ],
            "responses": [
                "Use the df.rename() function and refer the columns to be renamed. Not all the columns have to be renamed:Minimal Code ExampleThe following methods all work and produce the same output:Remember to assign the result back, as the modification is not-inplace. Alternatively, specify inplace=True:From v0.25, you can also specify errors='raise' to raise errors if an invalid column-to-rename is specified. See v0.25 rename() docs.Use df.set_axis() with axis=1 and inplace=False (to return a copy).This returns a copy, but you can modify the DataFrame in-place by setting inplace=True (this is the default behaviour for versions <=0.24 but is likely to change in the future).You can also assign headers directly:",
                "Just assign it to the .columns attribute:",
                "The rename method can take a function, for example:",
                "As documented in Working with text data:",
                "There have been some significant updates to column renaming in version 0.21.Construct sample DataFrame:orBoth result in the following:It is still possible to use the old method signature:The rename function also accepts functions that will be applied to each column name.orYou can supply a list to the set_axis method that is equal in length to the number of columns (or index). Currently, inplace defaults to True, but inplace will be defaulted to False in future releases.orThere is nothing wrong with assigning columns directly like this. It is a perfectly good solution.The advantage of using set_axis is that it can be used as part of a method chain and that it returns a new copy of the DataFrame. Without it, you would have to store your intermediate steps of the chain to another variable before reassigning the columns.",
                "Since you only want to remove the $ sign in all column names, you could just do:OR",
                "Renaming columns in Pandas is an easy task.",
                "It will replace the existing names with the names you provide, in the order you provide.",
                "Use:This way you can manually edit the new_names as you wish. It works great when you need to rename only a few columns to correct misspellings, accents, remove special characters, etc.",
                "I'll focus on two things:OP clearly statesI have the edited column names stored it in a list, but I don't know how to replace the column names.I do not want to solve the problem of how to replace '$' or strip the first character off of each column header.  OP has already done this step.  Instead I want to focus on replacing the existing columns object with a new one given a list of replacement column names.df.columns = new where new is the list of new columns names is as simple as it gets.  The drawback of this approach is that it requires editing the existing dataframe's columns attribute and it isn't done inline.  I'll show a few ways to perform this via pipelining without editing the existing dataframe.Setup 1\nTo focus on the need to rename of replace column names with a pre-existing list, I'll create a new sample dataframe df with initial column names and unrelated new column names.Solution 1\npd.DataFrame.renameIt has been said already that if you had a dictionary mapping the old column names to new column names, you could use pd.DataFrame.rename.However, you can easily create that dictionary and include it in the call to rename.  The following takes advantage of the fact that when iterating over df, we iterate over each column name.This works great if your original column names are unique.  But if they are not, then this breaks down.Setup 2\nNon-unique columnsSolution 2\npd.concat using the keys argumentFirst, notice what happens when we attempt to use solution 1:We didn't map the new list as the column names.  We ended up repeating y765.  Instead, we can use the keys argument of the pd.concat function while iterating through the columns of df.Solution 3\nReconstruct.  This should only be used if you have a single dtype for all columns.  Otherwise, you'll end up with dtype object for all columns and converting them back requires more dictionary work.Single dtypeMixed dtypeSolution 4\nThis is a gimmicky trick with transpose and set_index.  pd.DataFrame.set_index allows us to set an index inline, but there is no corresponding set_columns.  So we can transpose, then set_index, and transpose back.  However, the same single dtype versus mixed dtype caveat from solution 3 applies here.Single dtypeMixed dtypeSolution 5\nUse a lambda in pd.DataFrame.rename that cycles through each element of new.\nIn this solution, we pass a lambda that takes x but then ignores it.  It also takes a y but doesn't expect it.  Instead, an iterator is given as a default value and I can then use that to cycle through one at a time without regard to what the value of x is.And as pointed out to me by the folks in sopython chat, if I add a * in between x and y, I can protect my y variable.  Though, in this context I don't believe it needs protecting.  It is still worth mentioning.",
                "I would like to explain a bit what happens behind the scenes.Dataframes are a set of Series.Series in turn are an extension of a numpy.array.numpy.arrays have a property .name.This is the name of the series. It is seldom that Pandas respects this attribute, but it lingers in places and can be used to hack some Pandas behaviors.A lot of answers here talks about the df.columns attribute being a list when in fact it is a Series. This means it has a .name attribute.This is what happens if you decide to fill in the name of the columns Series:Note that the name of the index always comes one column lower.The .name attribute lingers on sometimes. If you set df.columns = ['one', 'two'] then the df.one.name will be 'one'.If you set df.one.name = 'three' then df.columns will still give you ['one', 'two'], and df.one.name will give you 'three'.pd.DataFrame(df.one) will returnBecause Pandas reuses the .name of the already defined Series.Pandas has ways of doing multi-layered column names. There is not so much magic involved, but I wanted to cover this in my answer too since I don't see anyone picking up on this here.This is easily achievable by setting columns to lists, like this:",
                "Let's understand renaming by a small example...Renaming columns using mapping:Renaming index/Row_Name using mapping:",
                "Many of pandas functions have an inplace parameter. When setting it True, the transformation applies directly to the dataframe that you are calling it on. For example:Alternatively, there are cases where you want to preserve the original dataframe. I have often seen people fall into this case if creating the dataframe is an expensive task. For example, if creating the dataframe required querying a snowflake database. In this case, just make sure the the inplace parameter is set to False.If these types of transformations are something that you do often, you could also look into a number of different pandas GUI tools. I'm the creator of one called Mito. It\u2019s a spreadsheet that automatically converts your edits to python code.",
                "Suppose your dataset name is df, and df has.So, to rename these, we would simply do.",
                "Let's say this is your dataframe.You can rename the columns using two methods.Using dataframe.columns=[#list]The limitation of this method is that if one column has to be changed, full column list has to be passed. Also, this method is not applicable on index labels.\nFor example, if you passed this:This will throw an error. Length mismatch: Expected axis has 5 elements, new values have 4 elements.Another method is the Pandas rename() method which is used to rename any index, column or rowSimilarly, you can change any rows or columns.",
                "If you've got the dataframe, df.columns dumps everything into a list you can manipulate and then reassign into your dataframe as the names of columns...Best way? I don't know. A way - yes.A better way of evaluating all the main techniques put forward in the answers to the question is below using cProfile to gage memory and execution time. @kadee, @kaitlyn, and @eumiro had the functions with the fastest execution times - though these functions are so fast we're comparing the rounding of 0.000 and 0.001 seconds for all the answers. Moral: my answer above likely isn't the 'best' way.",
                "If your new list of columns is in the same order as the existing columns, the assignment is simple:If you had a dictionary keyed on old column names to new column names, you could do the following:If you don't have a list or dictionary mapping, you could strip the leading $ symbol via a list comprehension:",
                "pandas.DataFrame.rename",
                "If you already have a list for the new column names, you can try this:",
                "Another way we could replace the original column labels is by stripping the unwanted characters (here '$') from the original column labels.This could have been done by running a for loop over df.columns and appending the stripped columns to df.columns.Instead, we can do this neatly in a single statement by using list comprehension like below:(strip method in Python strips the given character from beginning and end of the string.)",
                "It is real simple. Just use:And it will assign the column names by the order you put them in.",
                "You could use str.slice for that:",
                "Another option is to rename using a regular expression:",
                "My method is generic wherein you can add additional delimiters by comma separating delimiters= variable and future-proof it.Working Code:Output:",
                "Note that the approaches in previous answers do not work for a MultiIndex. For a MultiIndex, you need to do something like the following:",
                "If you have to deal with loads of columns named by the providing system out of your control, I came up with the following approach that is a combination of a general approach and specific replacements in one go.First create a dictionary from the dataframe column names using regular expressions in order to throw away certain appendixes of column names and then add specific replacements to the dictionary to name core columns as expected later in the receiving database.This is then applied to the dataframe in one go.",
                "If you just want to remove the '$' sign then use the below code",
                "In addition to the solution already provided, you can replace all the columns while you are reading the file. We can use names and header=0 to do that.First, we create a list of the names that we like to use as our column names:In this case, all the column names will be replaced with the names you have in your list.",
                "Here's a nifty little function I like to use to cut down on typing:Here is an example of how it works:"
            ]
        },
        {
            "tag": "remove_key",
            "patterns": [
                "How can I remove a key from a Python dictionary?",
                "Remove a dictionary key",
                "dictionary key",
                "Remove a key",
                "keys"
            ],
            "responses": [
                "To delete a key regardless of whether it is in the dictionary, use the two-argument form of dict.pop():This will return my_dict[key] if key exists in the dictionary, and None otherwise. If the second parameter is not specified (i.e. my_dict.pop('key')) and key does not exist, a KeyError is raised.To delete a key that is guaranteed to exist, you can also use:This will raise a KeyError if the key is not in the dictionary.",
                "Specifically to answer  is there a one line way of doing this? ...well, you asked ;-)You should consider, though, that this way of deleting an object from a dict is not atomic\u2014it is possible that 'key' may be in my_dict during the if statement, but may be deleted before del is executed, in which case del will fail with a KeyError.  Given this, it would be safest to either use dict.pop or something along the lines ofwhich, of course, is definitely not a one-liner.",
                "It took me some time to figure out what exactly my_dict.pop( key , None) is doing. So I'll add this as an answer to save others googling time:If key is in the dictionary, remove it and return its value, else\nreturn default. If default is not given and key is not in the\ndictionary, a KeyError is raised.Documentation",
                "del my_dict[key] is slightly faster than my_dict.pop(key) for removing a key from a dictionary when the key existsBut when the key doesn't exist if key in my_dict: del my_dict[key] is slightly faster than my_dict.pop(key, None). Both are at least three times faster than del in a try/except statement:",
                "If you need to remove a lot of keys from a dictionary in one line of code, I think using map() is quite succinct and Pythonic readable:And if you need to catch errors where you pop a value that isn't in the dictionary, use lambda inside map() like this:or in python3, you must use a list comprehension instead:It works. And 'e' did not cause an error, even though myDict did not have an 'e' key.",
                "You can use a dictionary comprehension to create a new dictionary with that key removed:You can delete by conditions. No error if key doesn't exist.",
                "We can delete a key from a Python dictionary by the some of the following approaches.Using the del keyword; it's almost the same approach like you did though -OrWe can do like the following:But one should keep in mind that, in this process actually it won't delete any key from the dictionary rather than making a specific key excluded from that dictionary. In addition, I observed that it returned a dictionary which was not ordered the same as myDict.If we run it in the shell, it'll execute something like {'five': 500, 'four': 400, 'three': 300, 'two': 200} - notice that it's not the same ordered as myDict. Again if we try to print myDict, then we can see all keys including which we excluded from the dictionary by this approach. However, we can make a new dictionary by assigning the following statement into a variable:Now if we try to print it, then it'll follow the parent order:OrUsing the pop() method.The difference between del and pop is that, using pop() method, we can actually store the key's value if needed, like the following:Fork this gist for future reference, if you find this useful.",
                "You can use exception handling if you want to be very verbose:This is slower, however, than the pop() method, if the key doesn't exist.It won't matter for a few keys, but if you're doing this repeatedly, then the latter method is a better bet.The fastest approach is this:But this method is dangerous because if 'key' is removed in between the two lines, a KeyError will be raised.",
                "I prefer the immutable version",
                "Another way is by using items() + dict comprehension.items() coupled with dict comprehension can also help us achieve the task of key-value pair deletion, but it has the drawback of not being an in place dict technique. Actually a new dict if created except for the key we don\u2019t wish to include.Output:",
                "If you want to do that without KeyError, you can declare a temporary class and set it as default value in dict.get, if the value is equal to that class if means that key does not exist"
            ]
        },
        {
            "tag": "check_key",
            "patterns": [
                "Check if a given key already exists in a dictionary",
                "check for keys in a dictionary",
                "Check for keys",
                "given keys in dictionary"
            ],
            "responses": [
                "in tests for the existence of a key in a dict:Use dict.get() to provide a default value when the key does not exist:To provide a default value for every key, either use dict.setdefault() on each assignment:or use defaultdict from the collections module:",
                "Use key in my_dict directly instead of key in my_dict.keys():That will be much faster as it uses the dictionary's O(1) hashing as opposed to doing an O(n) linear search on a list of keys.",
                "You can test for the presence of a key in a dictionary, using the in keyword:A common use for checking the existence of a key in a dictionary before mutating it is to default-initialize the value (e.g. if your values are lists, for example, and you want to ensure that there is an empty list to which you can append when inserting the first value for a key). In cases such as those, you may find the collections.defaultdict() type to be of interest.In older code, you may also find some uses of has_key(), a deprecated method for checking the existence of keys in dictionaries (just use key_name in dict_name, instead).",
                "You can shorten your code to this:However, this is at best a cosmetic improvement. Why do you believe this is not the best way?",
                "For additional information on speed execution of the accepted answer's proposed methods (10\u00a0million loops):Therefore using in or defaultdict are recommended against get.",
                "I would recommend using the setdefault method instead.  It sounds like it will do everything you want.",
                "A dictionary in Python has a get('key', default) method. So you can just set a default value in case there isn't any key.",
                "Using the Python ternary operator:",
                "Use EAFP (easier to ask forgiveness than permission):See other Stack Overflow posts:",
                "Check if a given key already exists in a dictionaryTo get the idea how to do that we first inspect what methods we can call on dictionary.Here are the methods:The brutal method to check if the key already exists may be the get() method:The other two interesting methods items() and keys() sounds like too much of work. So let's examine if get() is the right method for us. We have our dict d:Printing shows the key we don't have will return None:We use that to get the information if the key is present or no.\nBut consider this if we create a dict with a single key:None:Leading that get() method is not reliable in case some values may be None.This story should have a happier ending. If we use the in comparator:We get the correct results.We may examine the Python byte code:This shows that in compare operator is not just more reliable, but even faster than get().",
                "The ways in which you can get the results are:Which is better is dependent on 3 things:Read More: http://paltman.com/try-except-performance-in-python-a-simple-test/Use of try/block instead of 'in' or 'if':",
                "You can use the has_key() method:",
                "Just an FYI adding to Chris. B's (best) answer:Works as well; the reason is that calling int() returns 0 which is what defaultdict does behind the scenes (when constructing a dictionary), hence the name  Factory Function  in the documentation.",
                "A Python dictionary has the method called __contains__. This method will return True if the dictionary has the key, else it returns False.",
                "Another way of checking if a key exists using Boolean operators:This returnsExplanationFirst, you should know that in Python, 0, None, or objects with zero length evaluate to False. Everything else evaluates to True. Boolean operations are evaluated left to right and return the operand not True or False.Let's see an example:Since 'Some string' evaluates to True, the rest of the or is not evaluated and there is no division by zero error raised.But if we switch the order 1/0 is evaluated first and raises an exception:We can use this for pattern for checking if a key exists.does the same asThis already returns the correct result if the key exists, but we want it to print 'boo' when it doesn't. So, we take the result and or it with 'boo'",
                "You can use a for loop to iterate over the dictionary and get the name of key you want to find in the dictionary. After that, check if it exist or not using if condition:"
            ]
        },
        {
            "tag": "parse",
            "patterns": [
                "How do I parse a string to a float or int?",
                "Parse a string to a float",
                "Parse a string to an int",
                "Parse a string"
            ],
            "responses": [
                "For the Python3 version of is_float see: Checking if a string can be converted to float in PythonA longer and more accurate name for this function could be: is_convertible_to_float(value)The below unit tests were done using python2.  Check it that Python3 has different behavior for what strings are convertable to float.  One confounding difference is that any number of interior underscores are now allowed:  (float( 1_3.4 ) == float(13.4)) is TrueYou think you know what numbers are? You are not so good as you think! Not big surprise.Catching broad exceptions this way, killing canaries and gobbling the exception creates a tiny chance that a valid float as string will return false.  The float(...) line of code can failed for any of a thousand reasons that have nothing to do with the contents of the string.  But if you're writing life-critical software in a duck-typing prototype language like Python, then you've got much larger problems.",
                "This is another method which deserves to be mentioned here, ast.literal_eval:This can be used for safely evaluating strings containing Python expressions from untrusted sources without the need to parse the values oneself.That is, a safe 'eval'",
                "You should consider the possibility of commas in the string representation of a number, for cases like  float( 545,545.2222 ) which throws an exception. Instead, use methods in locale to convert the strings to numbers and interpret commas correctly. The locale.atof method converts to a float in one step once the locale has been set for the desired number convention.Example 1 -- United States number conventionsIn the United States and the UK, commas can be used as a thousands separator.  In this example with American locale, the comma is handled properly as a separator:Example 2 -- European number conventionsIn the majority of countries of the world,  commas are used for decimal marks instead of periods.  In this example with French locale, the comma is correctly handled as a decimal mark:The method locale.atoi is also available, but the argument should be an integer.",
                "If you aren't averse to third-party modules, you could check out the fastnumbers module. It provides a function called fast_real that does exactly what this question is asking for and does it faster than a pure-Python implementation:",
                "Users codelogic and harley are correct, but keep in mind if you know the string is an integer (for example, 545) you can call int( 545 ) without first casting to float.If your strings are in a list, you could use the map function as well.It is only good if they're all the same type.",
                "In Python, how can I parse a numeric string like  545.2222  to its corresponding float value, 542.2222? Or parse the string  31  to an integer, 31?\n  I just want to know how to parse a float string to a float, and (separately) an int string to an int.It's good that you ask to do these separately. If you're mixing them, you may be setting yourself up for problems later. The simple answer is: 545.2222  to float: 31  to an integer:Conversions from various bases, and you should know the base in advance (10 is the default). Note you can prefix them with what Python expects for its literals (see below) or remove the prefix:If you don't know the base in advance, but you do know they will have the correct prefix, Python can infer this for you if you pass 0 as the base:If your motivation is to have your own code clearly represent hard-coded specific values, however, you may not need to convert from the bases - you can let Python do it for you automatically with the correct syntax.You can use the apropos prefixes to get automatic conversion to integers with the following literals. These are valid for Python 2 and 3:Binary, prefix 0bOctal, prefix 0oHexadecimal, prefix 0xThis can be useful when describing binary flags, file permissions in code, or hex values for colors - for example, note no quotes:If you see an integer that starts with a 0, in Python 2, this is (deprecated) octal syntax.It is bad because it looks like the value should be 37. So in Python 3, it now raises a SyntaxError:Convert your Python 2 octals to octals that work in both 2 and 3 with the 0o prefix:",
                "The question seems a little bit old. But let me suggest a function, parseStr, which makes something similar, that is, returns integer or float and if a given ASCII string cannot be converted to none of them it returns it untouched. The code of course might be adjusted to do only what you want:",
                "float( 545.2222 ) and int(float( 545.2222 ))",
                "The YAML parser can help you figure out what datatype your string is. Use yaml.load(), and then you can use type(result) to test for type:",
                "I use this function for thatIt will convert the string to its type",
                "You could use json.loads:As you can see it becomes a type of float.",
                "You need to take into account rounding to do this properly.i.e. - int(5.1) => 5\nint(5.6) => 5  -- wrong, should be 6 so we do int(5.6 + 0.5) => 6",
                "To typecast in Python use the constructor functions of the type, passing the string (or whatever value you are trying to cast) as a parameter.For example:Behind the scenes, Python is calling the objects __float__ method, which should return a float representation of the parameter. This is especially powerful, as you can define your own types (using classes) with a __float__ method so that it can be casted into a float using float(myobject).",
                "Handles hex, octal, binary, decimal, and floatThis solution will handle all of the string conventions for numbers (all that I know about).This test case output illustrates what I'm talking about.Here is the test:",
                "Pass your string to this function:It will return int, float or string depending on what was passed.",
                "There is also regex, because sometimes string must be prepared and normalized before casting to a number:Usage:And by the way, something to verify you have a number:",
                "This is a corrected version of Totoro's answer.This will try to parse a string and return either int or float depending on what the string represents. It might rise parsing exceptions or have some unexpected behaviour.",
                "If you are dealing with mixed integers and floats and want a consistent way to deal with your mixed data, here is my solution with the proper docstring:Output:",
                "Use:This is the most Pythonic way I could come up with.",
                "You can simply do this byFor more information on parsing of data types check on python documentation!",
                "This is a function which will convert any object (not just str) to int or float, based on if the actual string supplied looks like int or float. Further if it's an object which has both __float and __int__ methods, it defaults to using __float__",
                "By using int and float methods we can convert a string to integer and floats.",
                "For numbers and characters together:First import re:For easy model:",
                "If you don't want to use third party modules the following might be the most robust solution:It might not be the fastest, but it handles correctly literal numbers where many other solutions fail, such as:"
            ]
        }
    ]
}